
STM32_L0_Magnetometer_Low_Power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f058  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  0800f118  0800f118  0001f118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd48  0800fd48  0003001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd48  0800fd48  0001fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd50  0800fd50  0003001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd50  0800fd50  0001fd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .eeprom_rodata 0000001c  08080000  08080000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000019c  20000000  0800fd58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001708  2000019c  0800fef4  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200018a4  0800fef4  000218a4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0003001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00043367  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b3cb  00000000  00000000  000733ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001ef45  00000000  00000000  0007e776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024a8  00000000  00000000  0009d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000039f8  00000000  00000000  0009fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e9ef  00000000  00000000  000a3560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a0f5  00000000  00000000  000c1f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00098dcc  00000000  00000000  0010c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a4e10  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006b50  00000000  00000000  001a4e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000019c 	.word	0x2000019c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f100 	.word	0x0800f100

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001a0 	.word	0x200001a0
 8000104:	0800f100 	.word	0x0800f100

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fa35 	bl	80018c0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f985 	bl	8001770 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa27 	bl	80018c0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa1d 	bl	80018c0 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9ad 	bl	80017f4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9a3 	bl	80017f4 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f852 	bl	8000594 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	46ce      	mov	lr, r9
 8000500:	4647      	mov	r7, r8
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	4699      	mov	r9, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	469c      	mov	ip, r3
 800050c:	0413      	lsls	r3, r2, #16
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	001d      	movs	r5, r3
 8000512:	000e      	movs	r6, r1
 8000514:	4661      	mov	r1, ip
 8000516:	0400      	lsls	r0, r0, #16
 8000518:	0c14      	lsrs	r4, r2, #16
 800051a:	0c00      	lsrs	r0, r0, #16
 800051c:	4345      	muls	r5, r0
 800051e:	434b      	muls	r3, r1
 8000520:	4360      	muls	r0, r4
 8000522:	4361      	muls	r1, r4
 8000524:	18c0      	adds	r0, r0, r3
 8000526:	0c2c      	lsrs	r4, r5, #16
 8000528:	1820      	adds	r0, r4, r0
 800052a:	468c      	mov	ip, r1
 800052c:	4283      	cmp	r3, r0
 800052e:	d903      	bls.n	8000538 <__aeabi_lmul+0x3c>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	4698      	mov	r8, r3
 8000536:	44c4      	add	ip, r8
 8000538:	4649      	mov	r1, r9
 800053a:	4379      	muls	r1, r7
 800053c:	4372      	muls	r2, r6
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	4463      	add	r3, ip
 8000542:	042d      	lsls	r5, r5, #16
 8000544:	0c2d      	lsrs	r5, r5, #16
 8000546:	18c9      	adds	r1, r1, r3
 8000548:	0400      	lsls	r0, r0, #16
 800054a:	1940      	adds	r0, r0, r5
 800054c:	1889      	adds	r1, r1, r2
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ffa1 	bl	80004a8 <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f001 fd9d 	bl	80020ac <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fa04 	bl	8001988 <__aeabi_dsub>
 8000580:	f001 fd94 	bl	80020ac <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__udivmoddi4>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4657      	mov	r7, sl
 8000598:	464e      	mov	r6, r9
 800059a:	4645      	mov	r5, r8
 800059c:	46de      	mov	lr, fp
 800059e:	b5e0      	push	{r5, r6, r7, lr}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	4692      	mov	sl, r2
 80005a6:	4699      	mov	r9, r3
 80005a8:	b083      	sub	sp, #12
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d830      	bhi.n	8000610 <__udivmoddi4+0x7c>
 80005ae:	d02d      	beq.n	800060c <__udivmoddi4+0x78>
 80005b0:	4649      	mov	r1, r9
 80005b2:	4650      	mov	r0, sl
 80005b4:	f001 fe3c 	bl	8002230 <__clzdi2>
 80005b8:	0029      	movs	r1, r5
 80005ba:	0006      	movs	r6, r0
 80005bc:	0020      	movs	r0, r4
 80005be:	f001 fe37 	bl	8002230 <__clzdi2>
 80005c2:	1a33      	subs	r3, r6, r0
 80005c4:	4698      	mov	r8, r3
 80005c6:	3b20      	subs	r3, #32
 80005c8:	469b      	mov	fp, r3
 80005ca:	d433      	bmi.n	8000634 <__udivmoddi4+0xa0>
 80005cc:	465a      	mov	r2, fp
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	4642      	mov	r2, r8
 80005d4:	001f      	movs	r7, r3
 80005d6:	4653      	mov	r3, sl
 80005d8:	4093      	lsls	r3, r2
 80005da:	001e      	movs	r6, r3
 80005dc:	42af      	cmp	r7, r5
 80005de:	d83a      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d100      	bne.n	80005e6 <__udivmoddi4+0x52>
 80005e4:	e078      	b.n	80006d8 <__udivmoddi4+0x144>
 80005e6:	465b      	mov	r3, fp
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5e>
 80005f0:	e075      	b.n	80006de <__udivmoddi4+0x14a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	465a      	mov	r2, fp
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4642      	mov	r2, r8
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e028      	b.n	800065e <__udivmoddi4+0xca>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9cf      	bls.n	80005b0 <__udivmoddi4+0x1c>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8e>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b003      	add	sp, #12
 8000628:	bcf0      	pop	{r4, r5, r6, r7}
 800062a:	46bb      	mov	fp, r7
 800062c:	46b2      	mov	sl, r6
 800062e:	46a9      	mov	r9, r5
 8000630:	46a0      	mov	r8, r4
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4652      	mov	r2, sl
 800063c:	40da      	lsrs	r2, r3
 800063e:	4641      	mov	r1, r8
 8000640:	0013      	movs	r3, r2
 8000642:	464a      	mov	r2, r9
 8000644:	408a      	lsls	r2, r1
 8000646:	0017      	movs	r7, r2
 8000648:	4642      	mov	r2, r8
 800064a:	431f      	orrs	r7, r3
 800064c:	4653      	mov	r3, sl
 800064e:	4093      	lsls	r3, r2
 8000650:	001e      	movs	r6, r3
 8000652:	42af      	cmp	r7, r5
 8000654:	d9c4      	bls.n	80005e0 <__udivmoddi4+0x4c>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d9      	beq.n	8000618 <__udivmoddi4+0x84>
 8000664:	07fb      	lsls	r3, r7, #31
 8000666:	0872      	lsrs	r2, r6, #1
 8000668:	431a      	orrs	r2, r3
 800066a:	4646      	mov	r6, r8
 800066c:	087b      	lsrs	r3, r7, #1
 800066e:	e00e      	b.n	800068e <__udivmoddi4+0xfa>
 8000670:	42ab      	cmp	r3, r5
 8000672:	d101      	bne.n	8000678 <__udivmoddi4+0xe4>
 8000674:	42a2      	cmp	r2, r4
 8000676:	d80c      	bhi.n	8000692 <__udivmoddi4+0xfe>
 8000678:	1aa4      	subs	r4, r4, r2
 800067a:	419d      	sbcs	r5, r3
 800067c:	2001      	movs	r0, #1
 800067e:	1924      	adds	r4, r4, r4
 8000680:	416d      	adcs	r5, r5
 8000682:	2100      	movs	r1, #0
 8000684:	3e01      	subs	r6, #1
 8000686:	1824      	adds	r4, r4, r0
 8000688:	414d      	adcs	r5, r1
 800068a:	2e00      	cmp	r6, #0
 800068c:	d006      	beq.n	800069c <__udivmoddi4+0x108>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d9ee      	bls.n	8000670 <__udivmoddi4+0xdc>
 8000692:	3e01      	subs	r6, #1
 8000694:	1924      	adds	r4, r4, r4
 8000696:	416d      	adcs	r5, r5
 8000698:	2e00      	cmp	r6, #0
 800069a:	d1f8      	bne.n	800068e <__udivmoddi4+0xfa>
 800069c:	9800      	ldr	r0, [sp, #0]
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	465b      	mov	r3, fp
 80006a2:	1900      	adds	r0, r0, r4
 80006a4:	4169      	adcs	r1, r5
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db24      	blt.n	80006f4 <__udivmoddi4+0x160>
 80006aa:	002b      	movs	r3, r5
 80006ac:	465a      	mov	r2, fp
 80006ae:	4644      	mov	r4, r8
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	002a      	movs	r2, r5
 80006b4:	40e2      	lsrs	r2, r4
 80006b6:	001c      	movs	r4, r3
 80006b8:	465b      	mov	r3, fp
 80006ba:	0015      	movs	r5, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db2a      	blt.n	8000716 <__udivmoddi4+0x182>
 80006c0:	0026      	movs	r6, r4
 80006c2:	409e      	lsls	r6, r3
 80006c4:	0033      	movs	r3, r6
 80006c6:	0026      	movs	r6, r4
 80006c8:	4647      	mov	r7, r8
 80006ca:	40be      	lsls	r6, r7
 80006cc:	0032      	movs	r2, r6
 80006ce:	1a80      	subs	r0, r0, r2
 80006d0:	4199      	sbcs	r1, r3
 80006d2:	9000      	str	r0, [sp, #0]
 80006d4:	9101      	str	r1, [sp, #4]
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x84>
 80006d8:	42a3      	cmp	r3, r4
 80006da:	d8bc      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80006dc:	e783      	b.n	80005e6 <__udivmoddi4+0x52>
 80006de:	4642      	mov	r2, r8
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e786      	b.n	8000602 <__udivmoddi4+0x6e>
 80006f4:	4642      	mov	r2, r8
 80006f6:	2320      	movs	r3, #32
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4646      	mov	r6, r8
 80006fe:	409a      	lsls	r2, r3
 8000700:	0023      	movs	r3, r4
 8000702:	40f3      	lsrs	r3, r6
 8000704:	4644      	mov	r4, r8
 8000706:	4313      	orrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	40e2      	lsrs	r2, r4
 800070c:	001c      	movs	r4, r3
 800070e:	465b      	mov	r3, fp
 8000710:	0015      	movs	r5, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	dad4      	bge.n	80006c0 <__udivmoddi4+0x12c>
 8000716:	4642      	mov	r2, r8
 8000718:	002f      	movs	r7, r5
 800071a:	2320      	movs	r3, #32
 800071c:	0026      	movs	r6, r4
 800071e:	4097      	lsls	r7, r2
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	40de      	lsrs	r6, r3
 8000724:	003b      	movs	r3, r7
 8000726:	4333      	orrs	r3, r6
 8000728:	e7cd      	b.n	80006c6 <__udivmoddi4+0x132>
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <__aeabi_fsub>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	46ce      	mov	lr, r9
 8000730:	4647      	mov	r7, r8
 8000732:	0243      	lsls	r3, r0, #9
 8000734:	0a5b      	lsrs	r3, r3, #9
 8000736:	024e      	lsls	r6, r1, #9
 8000738:	00da      	lsls	r2, r3, #3
 800073a:	4694      	mov	ip, r2
 800073c:	0a72      	lsrs	r2, r6, #9
 800073e:	4691      	mov	r9, r2
 8000740:	0045      	lsls	r5, r0, #1
 8000742:	004a      	lsls	r2, r1, #1
 8000744:	b580      	push	{r7, lr}
 8000746:	0e2d      	lsrs	r5, r5, #24
 8000748:	001f      	movs	r7, r3
 800074a:	0fc4      	lsrs	r4, r0, #31
 800074c:	0e12      	lsrs	r2, r2, #24
 800074e:	0fc9      	lsrs	r1, r1, #31
 8000750:	09b6      	lsrs	r6, r6, #6
 8000752:	2aff      	cmp	r2, #255	; 0xff
 8000754:	d05b      	beq.n	800080e <__aeabi_fsub+0xe2>
 8000756:	2001      	movs	r0, #1
 8000758:	4041      	eors	r1, r0
 800075a:	428c      	cmp	r4, r1
 800075c:	d039      	beq.n	80007d2 <__aeabi_fsub+0xa6>
 800075e:	1aa8      	subs	r0, r5, r2
 8000760:	2800      	cmp	r0, #0
 8000762:	dd5a      	ble.n	800081a <__aeabi_fsub+0xee>
 8000764:	2a00      	cmp	r2, #0
 8000766:	d06a      	beq.n	800083e <__aeabi_fsub+0x112>
 8000768:	2dff      	cmp	r5, #255	; 0xff
 800076a:	d100      	bne.n	800076e <__aeabi_fsub+0x42>
 800076c:	e0d9      	b.n	8000922 <__aeabi_fsub+0x1f6>
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	04d2      	lsls	r2, r2, #19
 8000772:	4316      	orrs	r6, r2
 8000774:	281b      	cmp	r0, #27
 8000776:	dc00      	bgt.n	800077a <__aeabi_fsub+0x4e>
 8000778:	e0e9      	b.n	800094e <__aeabi_fsub+0x222>
 800077a:	2001      	movs	r0, #1
 800077c:	4663      	mov	r3, ip
 800077e:	1a18      	subs	r0, r3, r0
 8000780:	0143      	lsls	r3, r0, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fsub+0x5a>
 8000784:	e0b4      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 8000786:	0180      	lsls	r0, r0, #6
 8000788:	0987      	lsrs	r7, r0, #6
 800078a:	0038      	movs	r0, r7
 800078c:	f001 fd32 	bl	80021f4 <__clzsi2>
 8000790:	3805      	subs	r0, #5
 8000792:	4087      	lsls	r7, r0
 8000794:	4285      	cmp	r5, r0
 8000796:	dc00      	bgt.n	800079a <__aeabi_fsub+0x6e>
 8000798:	e0cc      	b.n	8000934 <__aeabi_fsub+0x208>
 800079a:	1a2d      	subs	r5, r5, r0
 800079c:	48b5      	ldr	r0, [pc, #724]	; (8000a74 <__aeabi_fsub+0x348>)
 800079e:	4038      	ands	r0, r7
 80007a0:	0743      	lsls	r3, r0, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fsub+0x82>
 80007a4:	230f      	movs	r3, #15
 80007a6:	4003      	ands	r3, r0
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fsub+0x82>
 80007ac:	3004      	adds	r0, #4
 80007ae:	0143      	lsls	r3, r0, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fsub+0x88>
 80007b2:	e0a0      	b.n	80008f6 <__aeabi_fsub+0x1ca>
 80007b4:	1c6a      	adds	r2, r5, #1
 80007b6:	2dfe      	cmp	r5, #254	; 0xfe
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0x90>
 80007ba:	e08d      	b.n	80008d8 <__aeabi_fsub+0x1ac>
 80007bc:	0180      	lsls	r0, r0, #6
 80007be:	0a47      	lsrs	r7, r0, #9
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	05d0      	lsls	r0, r2, #23
 80007c4:	4338      	orrs	r0, r7
 80007c6:	07e4      	lsls	r4, r4, #31
 80007c8:	4320      	orrs	r0, r4
 80007ca:	bcc0      	pop	{r6, r7}
 80007cc:	46b9      	mov	r9, r7
 80007ce:	46b0      	mov	r8, r6
 80007d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007d2:	1aa8      	subs	r0, r5, r2
 80007d4:	4680      	mov	r8, r0
 80007d6:	2800      	cmp	r0, #0
 80007d8:	dd45      	ble.n	8000866 <__aeabi_fsub+0x13a>
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d070      	beq.n	80008c0 <__aeabi_fsub+0x194>
 80007de:	2dff      	cmp	r5, #255	; 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0xb8>
 80007e2:	e09e      	b.n	8000922 <__aeabi_fsub+0x1f6>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	04db      	lsls	r3, r3, #19
 80007e8:	431e      	orrs	r6, r3
 80007ea:	4643      	mov	r3, r8
 80007ec:	2b1b      	cmp	r3, #27
 80007ee:	dc00      	bgt.n	80007f2 <__aeabi_fsub+0xc6>
 80007f0:	e0d2      	b.n	8000998 <__aeabi_fsub+0x26c>
 80007f2:	2001      	movs	r0, #1
 80007f4:	4460      	add	r0, ip
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d57a      	bpl.n	80008f0 <__aeabi_fsub+0x1c4>
 80007fa:	3501      	adds	r5, #1
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d06b      	beq.n	80008d8 <__aeabi_fsub+0x1ac>
 8000800:	2301      	movs	r3, #1
 8000802:	4a9d      	ldr	r2, [pc, #628]	; (8000a78 <__aeabi_fsub+0x34c>)
 8000804:	4003      	ands	r3, r0
 8000806:	0840      	lsrs	r0, r0, #1
 8000808:	4010      	ands	r0, r2
 800080a:	4318      	orrs	r0, r3
 800080c:	e7c8      	b.n	80007a0 <__aeabi_fsub+0x74>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d020      	beq.n	8000854 <__aeabi_fsub+0x128>
 8000812:	428c      	cmp	r4, r1
 8000814:	d023      	beq.n	800085e <__aeabi_fsub+0x132>
 8000816:	0028      	movs	r0, r5
 8000818:	38ff      	subs	r0, #255	; 0xff
 800081a:	2800      	cmp	r0, #0
 800081c:	d039      	beq.n	8000892 <__aeabi_fsub+0x166>
 800081e:	1b57      	subs	r7, r2, r5
 8000820:	2d00      	cmp	r5, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_fsub+0xfa>
 8000824:	e09d      	b.n	8000962 <__aeabi_fsub+0x236>
 8000826:	4663      	mov	r3, ip
 8000828:	2b00      	cmp	r3, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fsub+0x102>
 800082c:	e0db      	b.n	80009e6 <__aeabi_fsub+0x2ba>
 800082e:	1e7b      	subs	r3, r7, #1
 8000830:	2f01      	cmp	r7, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_fsub+0x10a>
 8000834:	e10d      	b.n	8000a52 <__aeabi_fsub+0x326>
 8000836:	2fff      	cmp	r7, #255	; 0xff
 8000838:	d071      	beq.n	800091e <__aeabi_fsub+0x1f2>
 800083a:	001f      	movs	r7, r3
 800083c:	e098      	b.n	8000970 <__aeabi_fsub+0x244>
 800083e:	2e00      	cmp	r6, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x118>
 8000842:	e0a7      	b.n	8000994 <__aeabi_fsub+0x268>
 8000844:	1e42      	subs	r2, r0, #1
 8000846:	2801      	cmp	r0, #1
 8000848:	d100      	bne.n	800084c <__aeabi_fsub+0x120>
 800084a:	e0e6      	b.n	8000a1a <__aeabi_fsub+0x2ee>
 800084c:	28ff      	cmp	r0, #255	; 0xff
 800084e:	d068      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 8000850:	0010      	movs	r0, r2
 8000852:	e78f      	b.n	8000774 <__aeabi_fsub+0x48>
 8000854:	2001      	movs	r0, #1
 8000856:	4041      	eors	r1, r0
 8000858:	42a1      	cmp	r1, r4
 800085a:	d000      	beq.n	800085e <__aeabi_fsub+0x132>
 800085c:	e77f      	b.n	800075e <__aeabi_fsub+0x32>
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	4240      	negs	r0, r0
 8000862:	4680      	mov	r8, r0
 8000864:	44a8      	add	r8, r5
 8000866:	4640      	mov	r0, r8
 8000868:	2800      	cmp	r0, #0
 800086a:	d038      	beq.n	80008de <__aeabi_fsub+0x1b2>
 800086c:	1b51      	subs	r1, r2, r5
 800086e:	2d00      	cmp	r5, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fsub+0x148>
 8000872:	e0ae      	b.n	80009d2 <__aeabi_fsub+0x2a6>
 8000874:	2aff      	cmp	r2, #255	; 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fsub+0x14e>
 8000878:	e0df      	b.n	8000a3a <__aeabi_fsub+0x30e>
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	4660      	mov	r0, ip
 800087e:	04db      	lsls	r3, r3, #19
 8000880:	4318      	orrs	r0, r3
 8000882:	4684      	mov	ip, r0
 8000884:	291b      	cmp	r1, #27
 8000886:	dc00      	bgt.n	800088a <__aeabi_fsub+0x15e>
 8000888:	e0d9      	b.n	8000a3e <__aeabi_fsub+0x312>
 800088a:	2001      	movs	r0, #1
 800088c:	0015      	movs	r5, r2
 800088e:	1980      	adds	r0, r0, r6
 8000890:	e7b1      	b.n	80007f6 <__aeabi_fsub+0xca>
 8000892:	20fe      	movs	r0, #254	; 0xfe
 8000894:	1c6a      	adds	r2, r5, #1
 8000896:	4210      	tst	r0, r2
 8000898:	d171      	bne.n	800097e <__aeabi_fsub+0x252>
 800089a:	2d00      	cmp	r5, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fsub+0x174>
 800089e:	e0a6      	b.n	80009ee <__aeabi_fsub+0x2c2>
 80008a0:	4663      	mov	r3, ip
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fsub+0x17c>
 80008a6:	e0d9      	b.n	8000a5c <__aeabi_fsub+0x330>
 80008a8:	2200      	movs	r2, #0
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fsub+0x184>
 80008ae:	e788      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008b0:	1b98      	subs	r0, r3, r6
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fsub+0x18c>
 80008b6:	e0e1      	b.n	8000a7c <__aeabi_fsub+0x350>
 80008b8:	4663      	mov	r3, ip
 80008ba:	000c      	movs	r4, r1
 80008bc:	1af0      	subs	r0, r6, r3
 80008be:	e76f      	b.n	80007a0 <__aeabi_fsub+0x74>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fsub+0x19a>
 80008c4:	e0b7      	b.n	8000a36 <__aeabi_fsub+0x30a>
 80008c6:	0002      	movs	r2, r0
 80008c8:	3a01      	subs	r2, #1
 80008ca:	2801      	cmp	r0, #1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fsub+0x1a4>
 80008ce:	e09c      	b.n	8000a0a <__aeabi_fsub+0x2de>
 80008d0:	28ff      	cmp	r0, #255	; 0xff
 80008d2:	d026      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 80008d4:	4690      	mov	r8, r2
 80008d6:	e788      	b.n	80007ea <__aeabi_fsub+0xbe>
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	2700      	movs	r7, #0
 80008dc:	e771      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008de:	20fe      	movs	r0, #254	; 0xfe
 80008e0:	1c6a      	adds	r2, r5, #1
 80008e2:	4210      	tst	r0, r2
 80008e4:	d064      	beq.n	80009b0 <__aeabi_fsub+0x284>
 80008e6:	2aff      	cmp	r2, #255	; 0xff
 80008e8:	d0f6      	beq.n	80008d8 <__aeabi_fsub+0x1ac>
 80008ea:	0015      	movs	r5, r2
 80008ec:	4466      	add	r6, ip
 80008ee:	0870      	lsrs	r0, r6, #1
 80008f0:	0743      	lsls	r3, r0, #29
 80008f2:	d000      	beq.n	80008f6 <__aeabi_fsub+0x1ca>
 80008f4:	e756      	b.n	80007a4 <__aeabi_fsub+0x78>
 80008f6:	08c3      	lsrs	r3, r0, #3
 80008f8:	2dff      	cmp	r5, #255	; 0xff
 80008fa:	d012      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 80008fc:	025b      	lsls	r3, r3, #9
 80008fe:	0a5f      	lsrs	r7, r3, #9
 8000900:	b2ea      	uxtb	r2, r5
 8000902:	e75e      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000904:	4662      	mov	r2, ip
 8000906:	2a00      	cmp	r2, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0x1e0>
 800090a:	e096      	b.n	8000a3a <__aeabi_fsub+0x30e>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d008      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	03d2      	lsls	r2, r2, #15
 8000914:	4213      	tst	r3, r2
 8000916:	d004      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 8000918:	4648      	mov	r0, r9
 800091a:	4210      	tst	r0, r2
 800091c:	d101      	bne.n	8000922 <__aeabi_fsub+0x1f6>
 800091e:	000c      	movs	r4, r1
 8000920:	464b      	mov	r3, r9
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0d8      	beq.n	80008d8 <__aeabi_fsub+0x1ac>
 8000926:	2780      	movs	r7, #128	; 0x80
 8000928:	03ff      	lsls	r7, r7, #15
 800092a:	431f      	orrs	r7, r3
 800092c:	027f      	lsls	r7, r7, #9
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	0a7f      	lsrs	r7, r7, #9
 8000932:	e746      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000934:	2320      	movs	r3, #32
 8000936:	003a      	movs	r2, r7
 8000938:	1b45      	subs	r5, r0, r5
 800093a:	0038      	movs	r0, r7
 800093c:	3501      	adds	r5, #1
 800093e:	40ea      	lsrs	r2, r5
 8000940:	1b5d      	subs	r5, r3, r5
 8000942:	40a8      	lsls	r0, r5
 8000944:	1e43      	subs	r3, r0, #1
 8000946:	4198      	sbcs	r0, r3
 8000948:	2500      	movs	r5, #0
 800094a:	4310      	orrs	r0, r2
 800094c:	e728      	b.n	80007a0 <__aeabi_fsub+0x74>
 800094e:	2320      	movs	r3, #32
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	0032      	movs	r2, r6
 8000954:	409e      	lsls	r6, r3
 8000956:	40c2      	lsrs	r2, r0
 8000958:	0030      	movs	r0, r6
 800095a:	1e43      	subs	r3, r0, #1
 800095c:	4198      	sbcs	r0, r3
 800095e:	4310      	orrs	r0, r2
 8000960:	e70c      	b.n	800077c <__aeabi_fsub+0x50>
 8000962:	2aff      	cmp	r2, #255	; 0xff
 8000964:	d0db      	beq.n	800091e <__aeabi_fsub+0x1f2>
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	4660      	mov	r0, ip
 800096a:	04db      	lsls	r3, r3, #19
 800096c:	4318      	orrs	r0, r3
 800096e:	4684      	mov	ip, r0
 8000970:	2f1b      	cmp	r7, #27
 8000972:	dd56      	ble.n	8000a22 <__aeabi_fsub+0x2f6>
 8000974:	2001      	movs	r0, #1
 8000976:	000c      	movs	r4, r1
 8000978:	0015      	movs	r5, r2
 800097a:	1a30      	subs	r0, r6, r0
 800097c:	e700      	b.n	8000780 <__aeabi_fsub+0x54>
 800097e:	4663      	mov	r3, ip
 8000980:	1b9f      	subs	r7, r3, r6
 8000982:	017b      	lsls	r3, r7, #5
 8000984:	d43d      	bmi.n	8000a02 <__aeabi_fsub+0x2d6>
 8000986:	2f00      	cmp	r7, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fsub+0x260>
 800098a:	e6fe      	b.n	800078a <__aeabi_fsub+0x5e>
 800098c:	2400      	movs	r4, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2700      	movs	r7, #0
 8000992:	e716      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000994:	0005      	movs	r5, r0
 8000996:	e7af      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 8000998:	0032      	movs	r2, r6
 800099a:	4643      	mov	r3, r8
 800099c:	4641      	mov	r1, r8
 800099e:	40da      	lsrs	r2, r3
 80009a0:	2320      	movs	r3, #32
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	409e      	lsls	r6, r3
 80009a6:	0030      	movs	r0, r6
 80009a8:	1e43      	subs	r3, r0, #1
 80009aa:	4198      	sbcs	r0, r3
 80009ac:	4310      	orrs	r0, r2
 80009ae:	e721      	b.n	80007f4 <__aeabi_fsub+0xc8>
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d1a7      	bne.n	8000904 <__aeabi_fsub+0x1d8>
 80009b4:	4663      	mov	r3, ip
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d059      	beq.n	8000a6e <__aeabi_fsub+0x342>
 80009ba:	2200      	movs	r2, #0
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fsub+0x296>
 80009c0:	e6ff      	b.n	80007c2 <__aeabi_fsub+0x96>
 80009c2:	0030      	movs	r0, r6
 80009c4:	4460      	add	r0, ip
 80009c6:	0143      	lsls	r3, r0, #5
 80009c8:	d592      	bpl.n	80008f0 <__aeabi_fsub+0x1c4>
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <__aeabi_fsub+0x348>)
 80009cc:	3501      	adds	r5, #1
 80009ce:	4018      	ands	r0, r3
 80009d0:	e78e      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 80009d2:	4663      	mov	r3, ip
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d047      	beq.n	8000a68 <__aeabi_fsub+0x33c>
 80009d8:	1e4b      	subs	r3, r1, #1
 80009da:	2901      	cmp	r1, #1
 80009dc:	d015      	beq.n	8000a0a <__aeabi_fsub+0x2de>
 80009de:	29ff      	cmp	r1, #255	; 0xff
 80009e0:	d02b      	beq.n	8000a3a <__aeabi_fsub+0x30e>
 80009e2:	0019      	movs	r1, r3
 80009e4:	e74e      	b.n	8000884 <__aeabi_fsub+0x158>
 80009e6:	000c      	movs	r4, r1
 80009e8:	464b      	mov	r3, r9
 80009ea:	003d      	movs	r5, r7
 80009ec:	e784      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 80009ee:	4662      	mov	r2, ip
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	d18b      	bne.n	800090c <__aeabi_fsub+0x1e0>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d192      	bne.n	800091e <__aeabi_fsub+0x1f2>
 80009f8:	2780      	movs	r7, #128	; 0x80
 80009fa:	2400      	movs	r4, #0
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	03ff      	lsls	r7, r7, #15
 8000a00:	e6df      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a02:	4663      	mov	r3, ip
 8000a04:	000c      	movs	r4, r1
 8000a06:	1af7      	subs	r7, r6, r3
 8000a08:	e6bf      	b.n	800078a <__aeabi_fsub+0x5e>
 8000a0a:	0030      	movs	r0, r6
 8000a0c:	4460      	add	r0, ip
 8000a0e:	2501      	movs	r5, #1
 8000a10:	0143      	lsls	r3, r0, #5
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_fsub+0x2ea>
 8000a14:	e76c      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 8000a16:	2502      	movs	r5, #2
 8000a18:	e6f2      	b.n	8000800 <__aeabi_fsub+0xd4>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	2501      	movs	r5, #1
 8000a1e:	1b98      	subs	r0, r3, r6
 8000a20:	e6ae      	b.n	8000780 <__aeabi_fsub+0x54>
 8000a22:	2320      	movs	r3, #32
 8000a24:	4664      	mov	r4, ip
 8000a26:	4660      	mov	r0, ip
 8000a28:	40fc      	lsrs	r4, r7
 8000a2a:	1bdf      	subs	r7, r3, r7
 8000a2c:	40b8      	lsls	r0, r7
 8000a2e:	1e43      	subs	r3, r0, #1
 8000a30:	4198      	sbcs	r0, r3
 8000a32:	4320      	orrs	r0, r4
 8000a34:	e79f      	b.n	8000976 <__aeabi_fsub+0x24a>
 8000a36:	0005      	movs	r5, r0
 8000a38:	e75e      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	e771      	b.n	8000922 <__aeabi_fsub+0x1f6>
 8000a3e:	2320      	movs	r3, #32
 8000a40:	4665      	mov	r5, ip
 8000a42:	4660      	mov	r0, ip
 8000a44:	40cd      	lsrs	r5, r1
 8000a46:	1a59      	subs	r1, r3, r1
 8000a48:	4088      	lsls	r0, r1
 8000a4a:	1e43      	subs	r3, r0, #1
 8000a4c:	4198      	sbcs	r0, r3
 8000a4e:	4328      	orrs	r0, r5
 8000a50:	e71c      	b.n	800088c <__aeabi_fsub+0x160>
 8000a52:	4663      	mov	r3, ip
 8000a54:	000c      	movs	r4, r1
 8000a56:	2501      	movs	r5, #1
 8000a58:	1af0      	subs	r0, r6, r3
 8000a5a:	e691      	b.n	8000780 <__aeabi_fsub+0x54>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d095      	beq.n	800098c <__aeabi_fsub+0x260>
 8000a60:	000c      	movs	r4, r1
 8000a62:	464f      	mov	r7, r9
 8000a64:	2200      	movs	r2, #0
 8000a66:	e6ac      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a68:	464b      	mov	r3, r9
 8000a6a:	000d      	movs	r5, r1
 8000a6c:	e744      	b.n	80008f8 <__aeabi_fsub+0x1cc>
 8000a6e:	464f      	mov	r7, r9
 8000a70:	2200      	movs	r2, #0
 8000a72:	e6a6      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a74:	fbffffff 	.word	0xfbffffff
 8000a78:	7dffffff 	.word	0x7dffffff
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0x356>
 8000a80:	e736      	b.n	80008f0 <__aeabi_fsub+0x1c4>
 8000a82:	2400      	movs	r4, #0
 8000a84:	2700      	movs	r7, #0
 8000a86:	e69c      	b.n	80007c2 <__aeabi_fsub+0x96>

08000a88 <__aeabi_ui2f>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	1e05      	subs	r5, r0, #0
 8000a8c:	d00e      	beq.n	8000aac <__aeabi_ui2f+0x24>
 8000a8e:	f001 fbb1 	bl	80021f4 <__clzsi2>
 8000a92:	239e      	movs	r3, #158	; 0x9e
 8000a94:	0004      	movs	r4, r0
 8000a96:	1a1b      	subs	r3, r3, r0
 8000a98:	2b96      	cmp	r3, #150	; 0x96
 8000a9a:	dc0c      	bgt.n	8000ab6 <__aeabi_ui2f+0x2e>
 8000a9c:	2808      	cmp	r0, #8
 8000a9e:	dd01      	ble.n	8000aa4 <__aeabi_ui2f+0x1c>
 8000aa0:	3c08      	subs	r4, #8
 8000aa2:	40a5      	lsls	r5, r4
 8000aa4:	026d      	lsls	r5, r5, #9
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	e001      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000aac:	2000      	movs	r0, #0
 8000aae:	2500      	movs	r5, #0
 8000ab0:	05c0      	lsls	r0, r0, #23
 8000ab2:	4328      	orrs	r0, r5
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	2b99      	cmp	r3, #153	; 0x99
 8000ab8:	dd09      	ble.n	8000ace <__aeabi_ui2f+0x46>
 8000aba:	0002      	movs	r2, r0
 8000abc:	0029      	movs	r1, r5
 8000abe:	321b      	adds	r2, #27
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	1e4a      	subs	r2, r1, #1
 8000ac4:	4191      	sbcs	r1, r2
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	1a12      	subs	r2, r2, r0
 8000aca:	40d5      	lsrs	r5, r2
 8000acc:	430d      	orrs	r5, r1
 8000ace:	2c05      	cmp	r4, #5
 8000ad0:	dc12      	bgt.n	8000af8 <__aeabi_ui2f+0x70>
 8000ad2:	0029      	movs	r1, r5
 8000ad4:	4e0c      	ldr	r6, [pc, #48]	; (8000b08 <__aeabi_ui2f+0x80>)
 8000ad6:	4031      	ands	r1, r6
 8000ad8:	076a      	lsls	r2, r5, #29
 8000ada:	d009      	beq.n	8000af0 <__aeabi_ui2f+0x68>
 8000adc:	200f      	movs	r0, #15
 8000ade:	4028      	ands	r0, r5
 8000ae0:	2804      	cmp	r0, #4
 8000ae2:	d005      	beq.n	8000af0 <__aeabi_ui2f+0x68>
 8000ae4:	3104      	adds	r1, #4
 8000ae6:	014a      	lsls	r2, r1, #5
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_ui2f+0x68>
 8000aea:	239f      	movs	r3, #159	; 0x9f
 8000aec:	4031      	ands	r1, r6
 8000aee:	1b1b      	subs	r3, r3, r4
 8000af0:	0189      	lsls	r1, r1, #6
 8000af2:	0a4d      	lsrs	r5, r1, #9
 8000af4:	b2d8      	uxtb	r0, r3
 8000af6:	e7db      	b.n	8000ab0 <__aeabi_ui2f+0x28>
 8000af8:	1f62      	subs	r2, r4, #5
 8000afa:	4095      	lsls	r5, r2
 8000afc:	0029      	movs	r1, r5
 8000afe:	4e02      	ldr	r6, [pc, #8]	; (8000b08 <__aeabi_ui2f+0x80>)
 8000b00:	4031      	ands	r1, r6
 8000b02:	076a      	lsls	r2, r5, #29
 8000b04:	d0f4      	beq.n	8000af0 <__aeabi_ui2f+0x68>
 8000b06:	e7e9      	b.n	8000adc <__aeabi_ui2f+0x54>
 8000b08:	fbffffff 	.word	0xfbffffff

08000b0c <__aeabi_dadd>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	464f      	mov	r7, r9
 8000b10:	4646      	mov	r6, r8
 8000b12:	46d6      	mov	lr, sl
 8000b14:	000d      	movs	r5, r1
 8000b16:	0004      	movs	r4, r0
 8000b18:	b5c0      	push	{r6, r7, lr}
 8000b1a:	001f      	movs	r7, r3
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0328      	lsls	r0, r5, #12
 8000b20:	0f62      	lsrs	r2, r4, #29
 8000b22:	0a40      	lsrs	r0, r0, #9
 8000b24:	4310      	orrs	r0, r2
 8000b26:	007a      	lsls	r2, r7, #1
 8000b28:	0d52      	lsrs	r2, r2, #21
 8000b2a:	00e3      	lsls	r3, r4, #3
 8000b2c:	033c      	lsls	r4, r7, #12
 8000b2e:	4691      	mov	r9, r2
 8000b30:	0a64      	lsrs	r4, r4, #9
 8000b32:	0ffa      	lsrs	r2, r7, #31
 8000b34:	0f4f      	lsrs	r7, r1, #29
 8000b36:	006e      	lsls	r6, r5, #1
 8000b38:	4327      	orrs	r7, r4
 8000b3a:	4692      	mov	sl, r2
 8000b3c:	46b8      	mov	r8, r7
 8000b3e:	0d76      	lsrs	r6, r6, #21
 8000b40:	0fed      	lsrs	r5, r5, #31
 8000b42:	00c9      	lsls	r1, r1, #3
 8000b44:	4295      	cmp	r5, r2
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x3e>
 8000b48:	e099      	b.n	8000c7e <__aeabi_dadd+0x172>
 8000b4a:	464c      	mov	r4, r9
 8000b4c:	1b34      	subs	r4, r6, r4
 8000b4e:	46a4      	mov	ip, r4
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_dadd+0x4a>
 8000b54:	e07c      	b.n	8000c50 <__aeabi_dadd+0x144>
 8000b56:	464a      	mov	r2, r9
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x52>
 8000b5c:	e0b8      	b.n	8000cd0 <__aeabi_dadd+0x1c4>
 8000b5e:	4ac5      	ldr	r2, [pc, #788]	; (8000e74 <__aeabi_dadd+0x368>)
 8000b60:	4296      	cmp	r6, r2
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x5a>
 8000b64:	e11c      	b.n	8000da0 <__aeabi_dadd+0x294>
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	003c      	movs	r4, r7
 8000b6a:	0412      	lsls	r2, r2, #16
 8000b6c:	4314      	orrs	r4, r2
 8000b6e:	46a0      	mov	r8, r4
 8000b70:	4662      	mov	r2, ip
 8000b72:	2a38      	cmp	r2, #56	; 0x38
 8000b74:	dd00      	ble.n	8000b78 <__aeabi_dadd+0x6c>
 8000b76:	e161      	b.n	8000e3c <__aeabi_dadd+0x330>
 8000b78:	2a1f      	cmp	r2, #31
 8000b7a:	dd00      	ble.n	8000b7e <__aeabi_dadd+0x72>
 8000b7c:	e1cc      	b.n	8000f18 <__aeabi_dadd+0x40c>
 8000b7e:	4664      	mov	r4, ip
 8000b80:	2220      	movs	r2, #32
 8000b82:	1b12      	subs	r2, r2, r4
 8000b84:	4644      	mov	r4, r8
 8000b86:	4094      	lsls	r4, r2
 8000b88:	000f      	movs	r7, r1
 8000b8a:	46a1      	mov	r9, r4
 8000b8c:	4664      	mov	r4, ip
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	40e7      	lsrs	r7, r4
 8000b92:	464c      	mov	r4, r9
 8000b94:	1e4a      	subs	r2, r1, #1
 8000b96:	4191      	sbcs	r1, r2
 8000b98:	433c      	orrs	r4, r7
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	4321      	orrs	r1, r4
 8000b9e:	4664      	mov	r4, ip
 8000ba0:	40e2      	lsrs	r2, r4
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	1a5c      	subs	r4, r3, r1
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	419b      	sbcs	r3, r3
 8000baa:	425f      	negs	r7, r3
 8000bac:	1bc7      	subs	r7, r0, r7
 8000bae:	023b      	lsls	r3, r7, #8
 8000bb0:	d400      	bmi.n	8000bb4 <__aeabi_dadd+0xa8>
 8000bb2:	e0d0      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8000bb4:	027f      	lsls	r7, r7, #9
 8000bb6:	0a7f      	lsrs	r7, r7, #9
 8000bb8:	2f00      	cmp	r7, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0xb2>
 8000bbc:	e0ff      	b.n	8000dbe <__aeabi_dadd+0x2b2>
 8000bbe:	0038      	movs	r0, r7
 8000bc0:	f001 fb18 	bl	80021f4 <__clzsi2>
 8000bc4:	0001      	movs	r1, r0
 8000bc6:	3908      	subs	r1, #8
 8000bc8:	2320      	movs	r3, #32
 8000bca:	0022      	movs	r2, r4
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	408f      	lsls	r7, r1
 8000bd0:	40da      	lsrs	r2, r3
 8000bd2:	408c      	lsls	r4, r1
 8000bd4:	4317      	orrs	r7, r2
 8000bd6:	42b1      	cmp	r1, r6
 8000bd8:	da00      	bge.n	8000bdc <__aeabi_dadd+0xd0>
 8000bda:	e0ff      	b.n	8000ddc <__aeabi_dadd+0x2d0>
 8000bdc:	1b89      	subs	r1, r1, r6
 8000bde:	1c4b      	adds	r3, r1, #1
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_dadd+0xda>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_dadd+0x22c>
 8000be6:	2220      	movs	r2, #32
 8000be8:	0039      	movs	r1, r7
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	0020      	movs	r0, r4
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	1e62      	subs	r2, r4, #1
 8000bf6:	4194      	sbcs	r4, r2
 8000bf8:	40df      	lsrs	r7, r3
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	4301      	orrs	r1, r0
 8000bfe:	430c      	orrs	r4, r1
 8000c00:	0763      	lsls	r3, r4, #29
 8000c02:	d009      	beq.n	8000c18 <__aeabi_dadd+0x10c>
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d005      	beq.n	8000c18 <__aeabi_dadd+0x10c>
 8000c0c:	1d23      	adds	r3, r4, #4
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	41a4      	sbcs	r4, r4
 8000c12:	4264      	negs	r4, r4
 8000c14:	193f      	adds	r7, r7, r4
 8000c16:	001c      	movs	r4, r3
 8000c18:	023b      	lsls	r3, r7, #8
 8000c1a:	d400      	bmi.n	8000c1e <__aeabi_dadd+0x112>
 8000c1c:	e09e      	b.n	8000d5c <__aeabi_dadd+0x250>
 8000c1e:	4b95      	ldr	r3, [pc, #596]	; (8000e74 <__aeabi_dadd+0x368>)
 8000c20:	3601      	adds	r6, #1
 8000c22:	429e      	cmp	r6, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x11c>
 8000c26:	e0b7      	b.n	8000d98 <__aeabi_dadd+0x28c>
 8000c28:	4a93      	ldr	r2, [pc, #588]	; (8000e78 <__aeabi_dadd+0x36c>)
 8000c2a:	08e4      	lsrs	r4, r4, #3
 8000c2c:	4017      	ands	r7, r2
 8000c2e:	077b      	lsls	r3, r7, #29
 8000c30:	0571      	lsls	r1, r6, #21
 8000c32:	027f      	lsls	r7, r7, #9
 8000c34:	4323      	orrs	r3, r4
 8000c36:	0b3f      	lsrs	r7, r7, #12
 8000c38:	0d4a      	lsrs	r2, r1, #21
 8000c3a:	0512      	lsls	r2, r2, #20
 8000c3c:	433a      	orrs	r2, r7
 8000c3e:	07ed      	lsls	r5, r5, #31
 8000c40:	432a      	orrs	r2, r5
 8000c42:	0018      	movs	r0, r3
 8000c44:	0011      	movs	r1, r2
 8000c46:	bce0      	pop	{r5, r6, r7}
 8000c48:	46ba      	mov	sl, r7
 8000c4a:	46b1      	mov	r9, r6
 8000c4c:	46a8      	mov	r8, r5
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	2c00      	cmp	r4, #0
 8000c52:	d04b      	beq.n	8000cec <__aeabi_dadd+0x1e0>
 8000c54:	464c      	mov	r4, r9
 8000c56:	1ba4      	subs	r4, r4, r6
 8000c58:	46a4      	mov	ip, r4
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_dadd+0x154>
 8000c5e:	e123      	b.n	8000ea8 <__aeabi_dadd+0x39c>
 8000c60:	0004      	movs	r4, r0
 8000c62:	431c      	orrs	r4, r3
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x15c>
 8000c66:	e1af      	b.n	8000fc8 <__aeabi_dadd+0x4bc>
 8000c68:	4662      	mov	r2, ip
 8000c6a:	1e54      	subs	r4, r2, #1
 8000c6c:	2a01      	cmp	r2, #1
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x166>
 8000c70:	e215      	b.n	800109e <__aeabi_dadd+0x592>
 8000c72:	4d80      	ldr	r5, [pc, #512]	; (8000e74 <__aeabi_dadd+0x368>)
 8000c74:	45ac      	cmp	ip, r5
 8000c76:	d100      	bne.n	8000c7a <__aeabi_dadd+0x16e>
 8000c78:	e1c8      	b.n	800100c <__aeabi_dadd+0x500>
 8000c7a:	46a4      	mov	ip, r4
 8000c7c:	e11b      	b.n	8000eb6 <__aeabi_dadd+0x3aa>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	1ab2      	subs	r2, r6, r2
 8000c82:	4694      	mov	ip, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_dadd+0x17e>
 8000c88:	e0ac      	b.n	8000de4 <__aeabi_dadd+0x2d8>
 8000c8a:	464a      	mov	r2, r9
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d043      	beq.n	8000d18 <__aeabi_dadd+0x20c>
 8000c90:	4a78      	ldr	r2, [pc, #480]	; (8000e74 <__aeabi_dadd+0x368>)
 8000c92:	4296      	cmp	r6, r2
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x18c>
 8000c96:	e1af      	b.n	8000ff8 <__aeabi_dadd+0x4ec>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	003c      	movs	r4, r7
 8000c9c:	0412      	lsls	r2, r2, #16
 8000c9e:	4314      	orrs	r4, r2
 8000ca0:	46a0      	mov	r8, r4
 8000ca2:	4662      	mov	r2, ip
 8000ca4:	2a38      	cmp	r2, #56	; 0x38
 8000ca6:	dc67      	bgt.n	8000d78 <__aeabi_dadd+0x26c>
 8000ca8:	2a1f      	cmp	r2, #31
 8000caa:	dc00      	bgt.n	8000cae <__aeabi_dadd+0x1a2>
 8000cac:	e15f      	b.n	8000f6e <__aeabi_dadd+0x462>
 8000cae:	4647      	mov	r7, r8
 8000cb0:	3a20      	subs	r2, #32
 8000cb2:	40d7      	lsrs	r7, r2
 8000cb4:	4662      	mov	r2, ip
 8000cb6:	2a20      	cmp	r2, #32
 8000cb8:	d005      	beq.n	8000cc6 <__aeabi_dadd+0x1ba>
 8000cba:	4664      	mov	r4, ip
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	1b12      	subs	r2, r2, r4
 8000cc0:	4644      	mov	r4, r8
 8000cc2:	4094      	lsls	r4, r2
 8000cc4:	4321      	orrs	r1, r4
 8000cc6:	1e4a      	subs	r2, r1, #1
 8000cc8:	4191      	sbcs	r1, r2
 8000cca:	000c      	movs	r4, r1
 8000ccc:	433c      	orrs	r4, r7
 8000cce:	e057      	b.n	8000d80 <__aeabi_dadd+0x274>
 8000cd0:	003a      	movs	r2, r7
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dadd+0x1cc>
 8000cd6:	e105      	b.n	8000ee4 <__aeabi_dadd+0x3d8>
 8000cd8:	0022      	movs	r2, r4
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	2c01      	cmp	r4, #1
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x1d6>
 8000ce0:	e182      	b.n	8000fe8 <__aeabi_dadd+0x4dc>
 8000ce2:	4c64      	ldr	r4, [pc, #400]	; (8000e74 <__aeabi_dadd+0x368>)
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d05b      	beq.n	8000da0 <__aeabi_dadd+0x294>
 8000ce8:	4694      	mov	ip, r2
 8000cea:	e741      	b.n	8000b70 <__aeabi_dadd+0x64>
 8000cec:	4c63      	ldr	r4, [pc, #396]	; (8000e7c <__aeabi_dadd+0x370>)
 8000cee:	1c77      	adds	r7, r6, #1
 8000cf0:	4227      	tst	r7, r4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_dadd+0x1ea>
 8000cf4:	e0c4      	b.n	8000e80 <__aeabi_dadd+0x374>
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	431c      	orrs	r4, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x1f4>
 8000cfe:	e169      	b.n	8000fd4 <__aeabi_dadd+0x4c8>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dadd+0x1fa>
 8000d04:	e1bf      	b.n	8001086 <__aeabi_dadd+0x57a>
 8000d06:	4644      	mov	r4, r8
 8000d08:	430c      	orrs	r4, r1
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dadd+0x202>
 8000d0c:	e1d0      	b.n	80010b0 <__aeabi_dadd+0x5a4>
 8000d0e:	0742      	lsls	r2, r0, #29
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	08c0      	lsrs	r0, r0, #3
 8000d16:	e029      	b.n	8000d6c <__aeabi_dadd+0x260>
 8000d18:	003a      	movs	r2, r7
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dadd+0x214>
 8000d1e:	e170      	b.n	8001002 <__aeabi_dadd+0x4f6>
 8000d20:	4662      	mov	r2, ip
 8000d22:	4664      	mov	r4, ip
 8000d24:	3a01      	subs	r2, #1
 8000d26:	2c01      	cmp	r4, #1
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x220>
 8000d2a:	e0e0      	b.n	8000eee <__aeabi_dadd+0x3e2>
 8000d2c:	4c51      	ldr	r4, [pc, #324]	; (8000e74 <__aeabi_dadd+0x368>)
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x228>
 8000d32:	e161      	b.n	8000ff8 <__aeabi_dadd+0x4ec>
 8000d34:	4694      	mov	ip, r2
 8000d36:	e7b4      	b.n	8000ca2 <__aeabi_dadd+0x196>
 8000d38:	003a      	movs	r2, r7
 8000d3a:	391f      	subs	r1, #31
 8000d3c:	40ca      	lsrs	r2, r1
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2b20      	cmp	r3, #32
 8000d42:	d003      	beq.n	8000d4c <__aeabi_dadd+0x240>
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	433c      	orrs	r4, r7
 8000d4c:	1e63      	subs	r3, r4, #1
 8000d4e:	419c      	sbcs	r4, r3
 8000d50:	2700      	movs	r7, #0
 8000d52:	2600      	movs	r6, #0
 8000d54:	430c      	orrs	r4, r1
 8000d56:	0763      	lsls	r3, r4, #29
 8000d58:	d000      	beq.n	8000d5c <__aeabi_dadd+0x250>
 8000d5a:	e753      	b.n	8000c04 <__aeabi_dadd+0xf8>
 8000d5c:	46b4      	mov	ip, r6
 8000d5e:	08e4      	lsrs	r4, r4, #3
 8000d60:	077b      	lsls	r3, r7, #29
 8000d62:	4323      	orrs	r3, r4
 8000d64:	08f8      	lsrs	r0, r7, #3
 8000d66:	4a43      	ldr	r2, [pc, #268]	; (8000e74 <__aeabi_dadd+0x368>)
 8000d68:	4594      	cmp	ip, r2
 8000d6a:	d01d      	beq.n	8000da8 <__aeabi_dadd+0x29c>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	0307      	lsls	r7, r0, #12
 8000d70:	0552      	lsls	r2, r2, #21
 8000d72:	0b3f      	lsrs	r7, r7, #12
 8000d74:	0d52      	lsrs	r2, r2, #21
 8000d76:	e760      	b.n	8000c3a <__aeabi_dadd+0x12e>
 8000d78:	4644      	mov	r4, r8
 8000d7a:	430c      	orrs	r4, r1
 8000d7c:	1e62      	subs	r2, r4, #1
 8000d7e:	4194      	sbcs	r4, r2
 8000d80:	18e4      	adds	r4, r4, r3
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	425f      	negs	r7, r3
 8000d88:	183f      	adds	r7, r7, r0
 8000d8a:	023b      	lsls	r3, r7, #8
 8000d8c:	d5e3      	bpl.n	8000d56 <__aeabi_dadd+0x24a>
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <__aeabi_dadd+0x368>)
 8000d90:	3601      	adds	r6, #1
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dadd+0x28c>
 8000d96:	e0b5      	b.n	8000f04 <__aeabi_dadd+0x3f8>
 8000d98:	0032      	movs	r2, r6
 8000d9a:	2700      	movs	r7, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e74c      	b.n	8000c3a <__aeabi_dadd+0x12e>
 8000da0:	0742      	lsls	r2, r0, #29
 8000da2:	08db      	lsrs	r3, r3, #3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	08c0      	lsrs	r0, r0, #3
 8000da8:	001a      	movs	r2, r3
 8000daa:	4302      	orrs	r2, r0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x2a4>
 8000dae:	e1e1      	b.n	8001174 <__aeabi_dadd+0x668>
 8000db0:	2780      	movs	r7, #128	; 0x80
 8000db2:	033f      	lsls	r7, r7, #12
 8000db4:	4307      	orrs	r7, r0
 8000db6:	033f      	lsls	r7, r7, #12
 8000db8:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <__aeabi_dadd+0x368>)
 8000dba:	0b3f      	lsrs	r7, r7, #12
 8000dbc:	e73d      	b.n	8000c3a <__aeabi_dadd+0x12e>
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f001 fa18 	bl	80021f4 <__clzsi2>
 8000dc4:	0001      	movs	r1, r0
 8000dc6:	3118      	adds	r1, #24
 8000dc8:	291f      	cmp	r1, #31
 8000dca:	dc00      	bgt.n	8000dce <__aeabi_dadd+0x2c2>
 8000dcc:	e6fc      	b.n	8000bc8 <__aeabi_dadd+0xbc>
 8000dce:	3808      	subs	r0, #8
 8000dd0:	4084      	lsls	r4, r0
 8000dd2:	0027      	movs	r7, r4
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	42b1      	cmp	r1, r6
 8000dd8:	db00      	blt.n	8000ddc <__aeabi_dadd+0x2d0>
 8000dda:	e6ff      	b.n	8000bdc <__aeabi_dadd+0xd0>
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <__aeabi_dadd+0x36c>)
 8000dde:	1a76      	subs	r6, r6, r1
 8000de0:	4017      	ands	r7, r2
 8000de2:	e70d      	b.n	8000c00 <__aeabi_dadd+0xf4>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d02f      	beq.n	8000e48 <__aeabi_dadd+0x33c>
 8000de8:	464a      	mov	r2, r9
 8000dea:	1b92      	subs	r2, r2, r6
 8000dec:	4694      	mov	ip, r2
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dadd+0x2e8>
 8000df2:	e0ad      	b.n	8000f50 <__aeabi_dadd+0x444>
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <__aeabi_dadd+0x368>)
 8000df6:	4591      	cmp	r9, r2
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dadd+0x2f0>
 8000dfa:	e10f      	b.n	800101c <__aeabi_dadd+0x510>
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0412      	lsls	r2, r2, #16
 8000e00:	4310      	orrs	r0, r2
 8000e02:	4662      	mov	r2, ip
 8000e04:	2a38      	cmp	r2, #56	; 0x38
 8000e06:	dd00      	ble.n	8000e0a <__aeabi_dadd+0x2fe>
 8000e08:	e10f      	b.n	800102a <__aeabi_dadd+0x51e>
 8000e0a:	2a1f      	cmp	r2, #31
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_dadd+0x304>
 8000e0e:	e180      	b.n	8001112 <__aeabi_dadd+0x606>
 8000e10:	4664      	mov	r4, ip
 8000e12:	2220      	movs	r2, #32
 8000e14:	001e      	movs	r6, r3
 8000e16:	1b12      	subs	r2, r2, r4
 8000e18:	4667      	mov	r7, ip
 8000e1a:	0004      	movs	r4, r0
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	4094      	lsls	r4, r2
 8000e20:	40fe      	lsrs	r6, r7
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	4193      	sbcs	r3, r2
 8000e26:	40f8      	lsrs	r0, r7
 8000e28:	4334      	orrs	r4, r6
 8000e2a:	431c      	orrs	r4, r3
 8000e2c:	4480      	add	r8, r0
 8000e2e:	1864      	adds	r4, r4, r1
 8000e30:	428c      	cmp	r4, r1
 8000e32:	41bf      	sbcs	r7, r7
 8000e34:	427f      	negs	r7, r7
 8000e36:	464e      	mov	r6, r9
 8000e38:	4447      	add	r7, r8
 8000e3a:	e7a6      	b.n	8000d8a <__aeabi_dadd+0x27e>
 8000e3c:	4642      	mov	r2, r8
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	0011      	movs	r1, r2
 8000e42:	1e4a      	subs	r2, r1, #1
 8000e44:	4191      	sbcs	r1, r2
 8000e46:	e6ad      	b.n	8000ba4 <__aeabi_dadd+0x98>
 8000e48:	4c0c      	ldr	r4, [pc, #48]	; (8000e7c <__aeabi_dadd+0x370>)
 8000e4a:	1c72      	adds	r2, r6, #1
 8000e4c:	4222      	tst	r2, r4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x346>
 8000e50:	e0a1      	b.n	8000f96 <__aeabi_dadd+0x48a>
 8000e52:	0002      	movs	r2, r0
 8000e54:	431a      	orrs	r2, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dadd+0x350>
 8000e5a:	e0fa      	b.n	8001052 <__aeabi_dadd+0x546>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dadd+0x356>
 8000e60:	e145      	b.n	80010ee <__aeabi_dadd+0x5e2>
 8000e62:	003a      	movs	r2, r7
 8000e64:	430a      	orrs	r2, r1
 8000e66:	d000      	beq.n	8000e6a <__aeabi_dadd+0x35e>
 8000e68:	e146      	b.n	80010f8 <__aeabi_dadd+0x5ec>
 8000e6a:	0742      	lsls	r2, r0, #29
 8000e6c:	08db      	lsrs	r3, r3, #3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	08c0      	lsrs	r0, r0, #3
 8000e72:	e77b      	b.n	8000d6c <__aeabi_dadd+0x260>
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff
 8000e7c:	000007fe 	.word	0x000007fe
 8000e80:	4647      	mov	r7, r8
 8000e82:	1a5c      	subs	r4, r3, r1
 8000e84:	1bc2      	subs	r2, r0, r7
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	41bf      	sbcs	r7, r7
 8000e8a:	427f      	negs	r7, r7
 8000e8c:	46b9      	mov	r9, r7
 8000e8e:	0017      	movs	r7, r2
 8000e90:	464a      	mov	r2, r9
 8000e92:	1abf      	subs	r7, r7, r2
 8000e94:	023a      	lsls	r2, r7, #8
 8000e96:	d500      	bpl.n	8000e9a <__aeabi_dadd+0x38e>
 8000e98:	e08d      	b.n	8000fb6 <__aeabi_dadd+0x4aa>
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	433b      	orrs	r3, r7
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_dadd+0x396>
 8000ea0:	e68a      	b.n	8000bb8 <__aeabi_dadd+0xac>
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	e761      	b.n	8000d6c <__aeabi_dadd+0x260>
 8000ea8:	4cb4      	ldr	r4, [pc, #720]	; (800117c <__aeabi_dadd+0x670>)
 8000eaa:	45a1      	cmp	r9, r4
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_dadd+0x3a4>
 8000eae:	e0ad      	b.n	800100c <__aeabi_dadd+0x500>
 8000eb0:	2480      	movs	r4, #128	; 0x80
 8000eb2:	0424      	lsls	r4, r4, #16
 8000eb4:	4320      	orrs	r0, r4
 8000eb6:	4664      	mov	r4, ip
 8000eb8:	2c38      	cmp	r4, #56	; 0x38
 8000eba:	dc3d      	bgt.n	8000f38 <__aeabi_dadd+0x42c>
 8000ebc:	4662      	mov	r2, ip
 8000ebe:	2c1f      	cmp	r4, #31
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_dadd+0x3b8>
 8000ec2:	e0b7      	b.n	8001034 <__aeabi_dadd+0x528>
 8000ec4:	2520      	movs	r5, #32
 8000ec6:	001e      	movs	r6, r3
 8000ec8:	1b2d      	subs	r5, r5, r4
 8000eca:	0004      	movs	r4, r0
 8000ecc:	40ab      	lsls	r3, r5
 8000ece:	40ac      	lsls	r4, r5
 8000ed0:	40d6      	lsrs	r6, r2
 8000ed2:	40d0      	lsrs	r0, r2
 8000ed4:	4642      	mov	r2, r8
 8000ed6:	1e5d      	subs	r5, r3, #1
 8000ed8:	41ab      	sbcs	r3, r5
 8000eda:	4334      	orrs	r4, r6
 8000edc:	1a12      	subs	r2, r2, r0
 8000ede:	4690      	mov	r8, r2
 8000ee0:	4323      	orrs	r3, r4
 8000ee2:	e02c      	b.n	8000f3e <__aeabi_dadd+0x432>
 8000ee4:	0742      	lsls	r2, r0, #29
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	08c0      	lsrs	r0, r0, #3
 8000eec:	e73b      	b.n	8000d66 <__aeabi_dadd+0x25a>
 8000eee:	185c      	adds	r4, r3, r1
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	419b      	sbcs	r3, r3
 8000ef4:	4440      	add	r0, r8
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	18c7      	adds	r7, r0, r3
 8000efa:	2601      	movs	r6, #1
 8000efc:	023b      	lsls	r3, r7, #8
 8000efe:	d400      	bmi.n	8000f02 <__aeabi_dadd+0x3f6>
 8000f00:	e729      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8000f02:	2602      	movs	r6, #2
 8000f04:	4a9e      	ldr	r2, [pc, #632]	; (8001180 <__aeabi_dadd+0x674>)
 8000f06:	0863      	lsrs	r3, r4, #1
 8000f08:	4017      	ands	r7, r2
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4014      	ands	r4, r2
 8000f0e:	431c      	orrs	r4, r3
 8000f10:	07fb      	lsls	r3, r7, #31
 8000f12:	431c      	orrs	r4, r3
 8000f14:	087f      	lsrs	r7, r7, #1
 8000f16:	e673      	b.n	8000c00 <__aeabi_dadd+0xf4>
 8000f18:	4644      	mov	r4, r8
 8000f1a:	3a20      	subs	r2, #32
 8000f1c:	40d4      	lsrs	r4, r2
 8000f1e:	4662      	mov	r2, ip
 8000f20:	2a20      	cmp	r2, #32
 8000f22:	d005      	beq.n	8000f30 <__aeabi_dadd+0x424>
 8000f24:	4667      	mov	r7, ip
 8000f26:	2240      	movs	r2, #64	; 0x40
 8000f28:	1bd2      	subs	r2, r2, r7
 8000f2a:	4647      	mov	r7, r8
 8000f2c:	4097      	lsls	r7, r2
 8000f2e:	4339      	orrs	r1, r7
 8000f30:	1e4a      	subs	r2, r1, #1
 8000f32:	4191      	sbcs	r1, r2
 8000f34:	4321      	orrs	r1, r4
 8000f36:	e635      	b.n	8000ba4 <__aeabi_dadd+0x98>
 8000f38:	4303      	orrs	r3, r0
 8000f3a:	1e58      	subs	r0, r3, #1
 8000f3c:	4183      	sbcs	r3, r0
 8000f3e:	1acc      	subs	r4, r1, r3
 8000f40:	42a1      	cmp	r1, r4
 8000f42:	41bf      	sbcs	r7, r7
 8000f44:	4643      	mov	r3, r8
 8000f46:	427f      	negs	r7, r7
 8000f48:	4655      	mov	r5, sl
 8000f4a:	464e      	mov	r6, r9
 8000f4c:	1bdf      	subs	r7, r3, r7
 8000f4e:	e62e      	b.n	8000bae <__aeabi_dadd+0xa2>
 8000f50:	0002      	movs	r2, r0
 8000f52:	431a      	orrs	r2, r3
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x44c>
 8000f56:	e0bd      	b.n	80010d4 <__aeabi_dadd+0x5c8>
 8000f58:	4662      	mov	r2, ip
 8000f5a:	4664      	mov	r4, ip
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	2c01      	cmp	r4, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x458>
 8000f62:	e0e5      	b.n	8001130 <__aeabi_dadd+0x624>
 8000f64:	4c85      	ldr	r4, [pc, #532]	; (800117c <__aeabi_dadd+0x670>)
 8000f66:	45a4      	cmp	ip, r4
 8000f68:	d058      	beq.n	800101c <__aeabi_dadd+0x510>
 8000f6a:	4694      	mov	ip, r2
 8000f6c:	e749      	b.n	8000e02 <__aeabi_dadd+0x2f6>
 8000f6e:	4664      	mov	r4, ip
 8000f70:	2220      	movs	r2, #32
 8000f72:	1b12      	subs	r2, r2, r4
 8000f74:	4644      	mov	r4, r8
 8000f76:	4094      	lsls	r4, r2
 8000f78:	000f      	movs	r7, r1
 8000f7a:	46a1      	mov	r9, r4
 8000f7c:	4664      	mov	r4, ip
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	40e7      	lsrs	r7, r4
 8000f82:	464c      	mov	r4, r9
 8000f84:	1e4a      	subs	r2, r1, #1
 8000f86:	4191      	sbcs	r1, r2
 8000f88:	433c      	orrs	r4, r7
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	430c      	orrs	r4, r1
 8000f8e:	4661      	mov	r1, ip
 8000f90:	40ca      	lsrs	r2, r1
 8000f92:	1880      	adds	r0, r0, r2
 8000f94:	e6f4      	b.n	8000d80 <__aeabi_dadd+0x274>
 8000f96:	4c79      	ldr	r4, [pc, #484]	; (800117c <__aeabi_dadd+0x670>)
 8000f98:	42a2      	cmp	r2, r4
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x492>
 8000f9c:	e6fd      	b.n	8000d9a <__aeabi_dadd+0x28e>
 8000f9e:	1859      	adds	r1, r3, r1
 8000fa0:	4299      	cmp	r1, r3
 8000fa2:	419b      	sbcs	r3, r3
 8000fa4:	4440      	add	r0, r8
 8000fa6:	425f      	negs	r7, r3
 8000fa8:	19c7      	adds	r7, r0, r7
 8000faa:	07fc      	lsls	r4, r7, #31
 8000fac:	0849      	lsrs	r1, r1, #1
 8000fae:	0016      	movs	r6, r2
 8000fb0:	430c      	orrs	r4, r1
 8000fb2:	087f      	lsrs	r7, r7, #1
 8000fb4:	e6cf      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8000fb6:	1acc      	subs	r4, r1, r3
 8000fb8:	42a1      	cmp	r1, r4
 8000fba:	41bf      	sbcs	r7, r7
 8000fbc:	4643      	mov	r3, r8
 8000fbe:	427f      	negs	r7, r7
 8000fc0:	1a18      	subs	r0, r3, r0
 8000fc2:	4655      	mov	r5, sl
 8000fc4:	1bc7      	subs	r7, r0, r7
 8000fc6:	e5f7      	b.n	8000bb8 <__aeabi_dadd+0xac>
 8000fc8:	08c9      	lsrs	r1, r1, #3
 8000fca:	077b      	lsls	r3, r7, #29
 8000fcc:	4655      	mov	r5, sl
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	08f8      	lsrs	r0, r7, #3
 8000fd2:	e6c8      	b.n	8000d66 <__aeabi_dadd+0x25a>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dadd+0x4ce>
 8000fd8:	e081      	b.n	80010de <__aeabi_dadd+0x5d2>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	d115      	bne.n	800100c <__aeabi_dadd+0x500>
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	0300      	lsls	r0, r0, #12
 8000fe6:	e6e3      	b.n	8000db0 <__aeabi_dadd+0x2a4>
 8000fe8:	1a5c      	subs	r4, r3, r1
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	419b      	sbcs	r3, r3
 8000fee:	1bc7      	subs	r7, r0, r7
 8000ff0:	425b      	negs	r3, r3
 8000ff2:	2601      	movs	r6, #1
 8000ff4:	1aff      	subs	r7, r7, r3
 8000ff6:	e5da      	b.n	8000bae <__aeabi_dadd+0xa2>
 8000ff8:	0742      	lsls	r2, r0, #29
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	08c0      	lsrs	r0, r0, #3
 8001000:	e6d2      	b.n	8000da8 <__aeabi_dadd+0x29c>
 8001002:	0742      	lsls	r2, r0, #29
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	4313      	orrs	r3, r2
 8001008:	08c0      	lsrs	r0, r0, #3
 800100a:	e6ac      	b.n	8000d66 <__aeabi_dadd+0x25a>
 800100c:	4643      	mov	r3, r8
 800100e:	4642      	mov	r2, r8
 8001010:	08c9      	lsrs	r1, r1, #3
 8001012:	075b      	lsls	r3, r3, #29
 8001014:	4655      	mov	r5, sl
 8001016:	430b      	orrs	r3, r1
 8001018:	08d0      	lsrs	r0, r2, #3
 800101a:	e6c5      	b.n	8000da8 <__aeabi_dadd+0x29c>
 800101c:	4643      	mov	r3, r8
 800101e:	4642      	mov	r2, r8
 8001020:	075b      	lsls	r3, r3, #29
 8001022:	08c9      	lsrs	r1, r1, #3
 8001024:	430b      	orrs	r3, r1
 8001026:	08d0      	lsrs	r0, r2, #3
 8001028:	e6be      	b.n	8000da8 <__aeabi_dadd+0x29c>
 800102a:	4303      	orrs	r3, r0
 800102c:	001c      	movs	r4, r3
 800102e:	1e63      	subs	r3, r4, #1
 8001030:	419c      	sbcs	r4, r3
 8001032:	e6fc      	b.n	8000e2e <__aeabi_dadd+0x322>
 8001034:	0002      	movs	r2, r0
 8001036:	3c20      	subs	r4, #32
 8001038:	40e2      	lsrs	r2, r4
 800103a:	0014      	movs	r4, r2
 800103c:	4662      	mov	r2, ip
 800103e:	2a20      	cmp	r2, #32
 8001040:	d003      	beq.n	800104a <__aeabi_dadd+0x53e>
 8001042:	2540      	movs	r5, #64	; 0x40
 8001044:	1aad      	subs	r5, r5, r2
 8001046:	40a8      	lsls	r0, r5
 8001048:	4303      	orrs	r3, r0
 800104a:	1e58      	subs	r0, r3, #1
 800104c:	4183      	sbcs	r3, r0
 800104e:	4323      	orrs	r3, r4
 8001050:	e775      	b.n	8000f3e <__aeabi_dadd+0x432>
 8001052:	2a00      	cmp	r2, #0
 8001054:	d0e2      	beq.n	800101c <__aeabi_dadd+0x510>
 8001056:	003a      	movs	r2, r7
 8001058:	430a      	orrs	r2, r1
 800105a:	d0cd      	beq.n	8000ff8 <__aeabi_dadd+0x4ec>
 800105c:	0742      	lsls	r2, r0, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	08c0      	lsrs	r0, r0, #3
 8001066:	0312      	lsls	r2, r2, #12
 8001068:	4210      	tst	r0, r2
 800106a:	d006      	beq.n	800107a <__aeabi_dadd+0x56e>
 800106c:	08fc      	lsrs	r4, r7, #3
 800106e:	4214      	tst	r4, r2
 8001070:	d103      	bne.n	800107a <__aeabi_dadd+0x56e>
 8001072:	0020      	movs	r0, r4
 8001074:	08cb      	lsrs	r3, r1, #3
 8001076:	077a      	lsls	r2, r7, #29
 8001078:	4313      	orrs	r3, r2
 800107a:	0f5a      	lsrs	r2, r3, #29
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	0752      	lsls	r2, r2, #29
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	4313      	orrs	r3, r2
 8001084:	e690      	b.n	8000da8 <__aeabi_dadd+0x29c>
 8001086:	4643      	mov	r3, r8
 8001088:	430b      	orrs	r3, r1
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x582>
 800108c:	e709      	b.n	8000ea2 <__aeabi_dadd+0x396>
 800108e:	4643      	mov	r3, r8
 8001090:	4642      	mov	r2, r8
 8001092:	08c9      	lsrs	r1, r1, #3
 8001094:	075b      	lsls	r3, r3, #29
 8001096:	4655      	mov	r5, sl
 8001098:	430b      	orrs	r3, r1
 800109a:	08d0      	lsrs	r0, r2, #3
 800109c:	e666      	b.n	8000d6c <__aeabi_dadd+0x260>
 800109e:	1acc      	subs	r4, r1, r3
 80010a0:	42a1      	cmp	r1, r4
 80010a2:	4189      	sbcs	r1, r1
 80010a4:	1a3f      	subs	r7, r7, r0
 80010a6:	4249      	negs	r1, r1
 80010a8:	4655      	mov	r5, sl
 80010aa:	2601      	movs	r6, #1
 80010ac:	1a7f      	subs	r7, r7, r1
 80010ae:	e57e      	b.n	8000bae <__aeabi_dadd+0xa2>
 80010b0:	4642      	mov	r2, r8
 80010b2:	1a5c      	subs	r4, r3, r1
 80010b4:	1a87      	subs	r7, r0, r2
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	4192      	sbcs	r2, r2
 80010ba:	4252      	negs	r2, r2
 80010bc:	1abf      	subs	r7, r7, r2
 80010be:	023a      	lsls	r2, r7, #8
 80010c0:	d53d      	bpl.n	800113e <__aeabi_dadd+0x632>
 80010c2:	1acc      	subs	r4, r1, r3
 80010c4:	42a1      	cmp	r1, r4
 80010c6:	4189      	sbcs	r1, r1
 80010c8:	4643      	mov	r3, r8
 80010ca:	4249      	negs	r1, r1
 80010cc:	1a1f      	subs	r7, r3, r0
 80010ce:	4655      	mov	r5, sl
 80010d0:	1a7f      	subs	r7, r7, r1
 80010d2:	e595      	b.n	8000c00 <__aeabi_dadd+0xf4>
 80010d4:	077b      	lsls	r3, r7, #29
 80010d6:	08c9      	lsrs	r1, r1, #3
 80010d8:	430b      	orrs	r3, r1
 80010da:	08f8      	lsrs	r0, r7, #3
 80010dc:	e643      	b.n	8000d66 <__aeabi_dadd+0x25a>
 80010de:	4644      	mov	r4, r8
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	430c      	orrs	r4, r1
 80010e4:	d130      	bne.n	8001148 <__aeabi_dadd+0x63c>
 80010e6:	0742      	lsls	r2, r0, #29
 80010e8:	4313      	orrs	r3, r2
 80010ea:	08c0      	lsrs	r0, r0, #3
 80010ec:	e65c      	b.n	8000da8 <__aeabi_dadd+0x29c>
 80010ee:	077b      	lsls	r3, r7, #29
 80010f0:	08c9      	lsrs	r1, r1, #3
 80010f2:	430b      	orrs	r3, r1
 80010f4:	08f8      	lsrs	r0, r7, #3
 80010f6:	e639      	b.n	8000d6c <__aeabi_dadd+0x260>
 80010f8:	185c      	adds	r4, r3, r1
 80010fa:	429c      	cmp	r4, r3
 80010fc:	419b      	sbcs	r3, r3
 80010fe:	4440      	add	r0, r8
 8001100:	425b      	negs	r3, r3
 8001102:	18c7      	adds	r7, r0, r3
 8001104:	023b      	lsls	r3, r7, #8
 8001106:	d400      	bmi.n	800110a <__aeabi_dadd+0x5fe>
 8001108:	e625      	b.n	8000d56 <__aeabi_dadd+0x24a>
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <__aeabi_dadd+0x674>)
 800110c:	2601      	movs	r6, #1
 800110e:	401f      	ands	r7, r3
 8001110:	e621      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8001112:	0004      	movs	r4, r0
 8001114:	3a20      	subs	r2, #32
 8001116:	40d4      	lsrs	r4, r2
 8001118:	4662      	mov	r2, ip
 800111a:	2a20      	cmp	r2, #32
 800111c:	d004      	beq.n	8001128 <__aeabi_dadd+0x61c>
 800111e:	2240      	movs	r2, #64	; 0x40
 8001120:	4666      	mov	r6, ip
 8001122:	1b92      	subs	r2, r2, r6
 8001124:	4090      	lsls	r0, r2
 8001126:	4303      	orrs	r3, r0
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	4193      	sbcs	r3, r2
 800112c:	431c      	orrs	r4, r3
 800112e:	e67e      	b.n	8000e2e <__aeabi_dadd+0x322>
 8001130:	185c      	adds	r4, r3, r1
 8001132:	428c      	cmp	r4, r1
 8001134:	4189      	sbcs	r1, r1
 8001136:	4440      	add	r0, r8
 8001138:	4249      	negs	r1, r1
 800113a:	1847      	adds	r7, r0, r1
 800113c:	e6dd      	b.n	8000efa <__aeabi_dadd+0x3ee>
 800113e:	0023      	movs	r3, r4
 8001140:	433b      	orrs	r3, r7
 8001142:	d100      	bne.n	8001146 <__aeabi_dadd+0x63a>
 8001144:	e6ad      	b.n	8000ea2 <__aeabi_dadd+0x396>
 8001146:	e606      	b.n	8000d56 <__aeabi_dadd+0x24a>
 8001148:	0744      	lsls	r4, r0, #29
 800114a:	4323      	orrs	r3, r4
 800114c:	2480      	movs	r4, #128	; 0x80
 800114e:	08c0      	lsrs	r0, r0, #3
 8001150:	0324      	lsls	r4, r4, #12
 8001152:	4220      	tst	r0, r4
 8001154:	d008      	beq.n	8001168 <__aeabi_dadd+0x65c>
 8001156:	4642      	mov	r2, r8
 8001158:	08d6      	lsrs	r6, r2, #3
 800115a:	4226      	tst	r6, r4
 800115c:	d104      	bne.n	8001168 <__aeabi_dadd+0x65c>
 800115e:	4655      	mov	r5, sl
 8001160:	0030      	movs	r0, r6
 8001162:	08cb      	lsrs	r3, r1, #3
 8001164:	0751      	lsls	r1, r2, #29
 8001166:	430b      	orrs	r3, r1
 8001168:	0f5a      	lsrs	r2, r3, #29
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	0752      	lsls	r2, r2, #29
 8001170:	4313      	orrs	r3, r2
 8001172:	e619      	b.n	8000da8 <__aeabi_dadd+0x29c>
 8001174:	2300      	movs	r3, #0
 8001176:	4a01      	ldr	r2, [pc, #4]	; (800117c <__aeabi_dadd+0x670>)
 8001178:	001f      	movs	r7, r3
 800117a:	e55e      	b.n	8000c3a <__aeabi_dadd+0x12e>
 800117c:	000007ff 	.word	0x000007ff
 8001180:	ff7fffff 	.word	0xff7fffff

08001184 <__aeabi_ddiv>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4657      	mov	r7, sl
 8001188:	464e      	mov	r6, r9
 800118a:	4645      	mov	r5, r8
 800118c:	46de      	mov	lr, fp
 800118e:	b5e0      	push	{r5, r6, r7, lr}
 8001190:	4681      	mov	r9, r0
 8001192:	0005      	movs	r5, r0
 8001194:	030c      	lsls	r4, r1, #12
 8001196:	0048      	lsls	r0, r1, #1
 8001198:	4692      	mov	sl, r2
 800119a:	001f      	movs	r7, r3
 800119c:	b085      	sub	sp, #20
 800119e:	0b24      	lsrs	r4, r4, #12
 80011a0:	0d40      	lsrs	r0, r0, #21
 80011a2:	0fce      	lsrs	r6, r1, #31
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x26>
 80011a8:	e156      	b.n	8001458 <__aeabi_ddiv+0x2d4>
 80011aa:	4bd4      	ldr	r3, [pc, #848]	; (80014fc <__aeabi_ddiv+0x378>)
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2e>
 80011b0:	e172      	b.n	8001498 <__aeabi_ddiv+0x314>
 80011b2:	0f6b      	lsrs	r3, r5, #29
 80011b4:	00e4      	lsls	r4, r4, #3
 80011b6:	431c      	orrs	r4, r3
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	4323      	orrs	r3, r4
 80011be:	4698      	mov	r8, r3
 80011c0:	4bcf      	ldr	r3, [pc, #828]	; (8001500 <__aeabi_ddiv+0x37c>)
 80011c2:	00ed      	lsls	r5, r5, #3
 80011c4:	469b      	mov	fp, r3
 80011c6:	2300      	movs	r3, #0
 80011c8:	4699      	mov	r9, r3
 80011ca:	4483      	add	fp, r0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	033c      	lsls	r4, r7, #12
 80011d0:	007b      	lsls	r3, r7, #1
 80011d2:	4650      	mov	r0, sl
 80011d4:	0b24      	lsrs	r4, r4, #12
 80011d6:	0d5b      	lsrs	r3, r3, #21
 80011d8:	0fff      	lsrs	r7, r7, #31
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x5c>
 80011de:	e11f      	b.n	8001420 <__aeabi_ddiv+0x29c>
 80011e0:	4ac6      	ldr	r2, [pc, #792]	; (80014fc <__aeabi_ddiv+0x378>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x64>
 80011e6:	e162      	b.n	80014ae <__aeabi_ddiv+0x32a>
 80011e8:	49c5      	ldr	r1, [pc, #788]	; (8001500 <__aeabi_ddiv+0x37c>)
 80011ea:	0f42      	lsrs	r2, r0, #29
 80011ec:	468c      	mov	ip, r1
 80011ee:	00e4      	lsls	r4, r4, #3
 80011f0:	4659      	mov	r1, fp
 80011f2:	4314      	orrs	r4, r2
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	4463      	add	r3, ip
 80011f8:	0412      	lsls	r2, r2, #16
 80011fa:	1acb      	subs	r3, r1, r3
 80011fc:	4314      	orrs	r4, r2
 80011fe:	469b      	mov	fp, r3
 8001200:	00c2      	lsls	r2, r0, #3
 8001202:	2000      	movs	r0, #0
 8001204:	0033      	movs	r3, r6
 8001206:	407b      	eors	r3, r7
 8001208:	469a      	mov	sl, r3
 800120a:	464b      	mov	r3, r9
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d827      	bhi.n	8001260 <__aeabi_ddiv+0xdc>
 8001210:	49bc      	ldr	r1, [pc, #752]	; (8001504 <__aeabi_ddiv+0x380>)
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	58cb      	ldr	r3, [r1, r3]
 8001216:	469f      	mov	pc, r3
 8001218:	46b2      	mov	sl, r6
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d016      	beq.n	800124e <__aeabi_ddiv+0xca>
 8001220:	2b03      	cmp	r3, #3
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0xa2>
 8001224:	e28e      	b.n	8001744 <__aeabi_ddiv+0x5c0>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d000      	beq.n	800122c <__aeabi_ddiv+0xa8>
 800122a:	e0d9      	b.n	80013e0 <__aeabi_ddiv+0x25c>
 800122c:	2300      	movs	r3, #0
 800122e:	2400      	movs	r4, #0
 8001230:	2500      	movs	r5, #0
 8001232:	4652      	mov	r2, sl
 8001234:	051b      	lsls	r3, r3, #20
 8001236:	4323      	orrs	r3, r4
 8001238:	07d2      	lsls	r2, r2, #31
 800123a:	4313      	orrs	r3, r2
 800123c:	0028      	movs	r0, r5
 800123e:	0019      	movs	r1, r3
 8001240:	b005      	add	sp, #20
 8001242:	bcf0      	pop	{r4, r5, r6, r7}
 8001244:	46bb      	mov	fp, r7
 8001246:	46b2      	mov	sl, r6
 8001248:	46a9      	mov	r9, r5
 800124a:	46a0      	mov	r8, r4
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	2400      	movs	r4, #0
 8001250:	2500      	movs	r5, #0
 8001252:	4baa      	ldr	r3, [pc, #680]	; (80014fc <__aeabi_ddiv+0x378>)
 8001254:	e7ed      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001256:	46ba      	mov	sl, r7
 8001258:	46a0      	mov	r8, r4
 800125a:	0015      	movs	r5, r2
 800125c:	9000      	str	r0, [sp, #0]
 800125e:	e7dc      	b.n	800121a <__aeabi_ddiv+0x96>
 8001260:	4544      	cmp	r4, r8
 8001262:	d200      	bcs.n	8001266 <__aeabi_ddiv+0xe2>
 8001264:	e1c7      	b.n	80015f6 <__aeabi_ddiv+0x472>
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0xe6>
 8001268:	e1c2      	b.n	80015f0 <__aeabi_ddiv+0x46c>
 800126a:	2301      	movs	r3, #1
 800126c:	425b      	negs	r3, r3
 800126e:	469c      	mov	ip, r3
 8001270:	002e      	movs	r6, r5
 8001272:	4640      	mov	r0, r8
 8001274:	2500      	movs	r5, #0
 8001276:	44e3      	add	fp, ip
 8001278:	0223      	lsls	r3, r4, #8
 800127a:	0e14      	lsrs	r4, r2, #24
 800127c:	431c      	orrs	r4, r3
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	4699      	mov	r9, r3
 8001282:	0423      	lsls	r3, r4, #16
 8001284:	0c1f      	lsrs	r7, r3, #16
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4649      	mov	r1, r9
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	9701      	str	r7, [sp, #4]
 800128e:	f7fe ffe7 	bl	8000260 <__aeabi_uidivmod>
 8001292:	0002      	movs	r2, r0
 8001294:	437a      	muls	r2, r7
 8001296:	040b      	lsls	r3, r1, #16
 8001298:	0c31      	lsrs	r1, r6, #16
 800129a:	4680      	mov	r8, r0
 800129c:	4319      	orrs	r1, r3
 800129e:	428a      	cmp	r2, r1
 80012a0:	d907      	bls.n	80012b2 <__aeabi_ddiv+0x12e>
 80012a2:	2301      	movs	r3, #1
 80012a4:	425b      	negs	r3, r3
 80012a6:	469c      	mov	ip, r3
 80012a8:	1909      	adds	r1, r1, r4
 80012aa:	44e0      	add	r8, ip
 80012ac:	428c      	cmp	r4, r1
 80012ae:	d800      	bhi.n	80012b2 <__aeabi_ddiv+0x12e>
 80012b0:	e207      	b.n	80016c2 <__aeabi_ddiv+0x53e>
 80012b2:	1a88      	subs	r0, r1, r2
 80012b4:	4649      	mov	r1, r9
 80012b6:	f7fe ffd3 	bl	8000260 <__aeabi_uidivmod>
 80012ba:	0409      	lsls	r1, r1, #16
 80012bc:	468c      	mov	ip, r1
 80012be:	0431      	lsls	r1, r6, #16
 80012c0:	4666      	mov	r6, ip
 80012c2:	9a01      	ldr	r2, [sp, #4]
 80012c4:	0c09      	lsrs	r1, r1, #16
 80012c6:	4342      	muls	r2, r0
 80012c8:	0003      	movs	r3, r0
 80012ca:	4331      	orrs	r1, r6
 80012cc:	428a      	cmp	r2, r1
 80012ce:	d904      	bls.n	80012da <__aeabi_ddiv+0x156>
 80012d0:	1909      	adds	r1, r1, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	428c      	cmp	r4, r1
 80012d6:	d800      	bhi.n	80012da <__aeabi_ddiv+0x156>
 80012d8:	e1ed      	b.n	80016b6 <__aeabi_ddiv+0x532>
 80012da:	1a88      	subs	r0, r1, r2
 80012dc:	4642      	mov	r2, r8
 80012de:	0412      	lsls	r2, r2, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	4690      	mov	r8, r2
 80012e4:	4641      	mov	r1, r8
 80012e6:	9b00      	ldr	r3, [sp, #0]
 80012e8:	040e      	lsls	r6, r1, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	001f      	movs	r7, r3
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	9b00      	ldr	r3, [sp, #0]
 80012f2:	0c36      	lsrs	r6, r6, #16
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	0c19      	lsrs	r1, r3, #16
 80012f8:	000b      	movs	r3, r1
 80012fa:	4373      	muls	r3, r6
 80012fc:	0c12      	lsrs	r2, r2, #16
 80012fe:	437e      	muls	r6, r7
 8001300:	9103      	str	r1, [sp, #12]
 8001302:	4351      	muls	r1, r2
 8001304:	437a      	muls	r2, r7
 8001306:	0c1f      	lsrs	r7, r3, #16
 8001308:	46bc      	mov	ip, r7
 800130a:	1876      	adds	r6, r6, r1
 800130c:	4466      	add	r6, ip
 800130e:	42b1      	cmp	r1, r6
 8001310:	d903      	bls.n	800131a <__aeabi_ddiv+0x196>
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	0249      	lsls	r1, r1, #9
 8001316:	468c      	mov	ip, r1
 8001318:	4462      	add	r2, ip
 800131a:	0c31      	lsrs	r1, r6, #16
 800131c:	188a      	adds	r2, r1, r2
 800131e:	0431      	lsls	r1, r6, #16
 8001320:	041e      	lsls	r6, r3, #16
 8001322:	0c36      	lsrs	r6, r6, #16
 8001324:	198e      	adds	r6, r1, r6
 8001326:	4290      	cmp	r0, r2
 8001328:	d302      	bcc.n	8001330 <__aeabi_ddiv+0x1ac>
 800132a:	d112      	bne.n	8001352 <__aeabi_ddiv+0x1ce>
 800132c:	42b5      	cmp	r5, r6
 800132e:	d210      	bcs.n	8001352 <__aeabi_ddiv+0x1ce>
 8001330:	4643      	mov	r3, r8
 8001332:	1e59      	subs	r1, r3, #1
 8001334:	9b00      	ldr	r3, [sp, #0]
 8001336:	469c      	mov	ip, r3
 8001338:	4465      	add	r5, ip
 800133a:	001f      	movs	r7, r3
 800133c:	429d      	cmp	r5, r3
 800133e:	419b      	sbcs	r3, r3
 8001340:	425b      	negs	r3, r3
 8001342:	191b      	adds	r3, r3, r4
 8001344:	18c0      	adds	r0, r0, r3
 8001346:	4284      	cmp	r4, r0
 8001348:	d200      	bcs.n	800134c <__aeabi_ddiv+0x1c8>
 800134a:	e1a0      	b.n	800168e <__aeabi_ddiv+0x50a>
 800134c:	d100      	bne.n	8001350 <__aeabi_ddiv+0x1cc>
 800134e:	e19b      	b.n	8001688 <__aeabi_ddiv+0x504>
 8001350:	4688      	mov	r8, r1
 8001352:	1bae      	subs	r6, r5, r6
 8001354:	42b5      	cmp	r5, r6
 8001356:	41ad      	sbcs	r5, r5
 8001358:	1a80      	subs	r0, r0, r2
 800135a:	426d      	negs	r5, r5
 800135c:	1b40      	subs	r0, r0, r5
 800135e:	4284      	cmp	r4, r0
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x1e0>
 8001362:	e1d5      	b.n	8001710 <__aeabi_ddiv+0x58c>
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe ff7b 	bl	8000260 <__aeabi_uidivmod>
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	040b      	lsls	r3, r1, #16
 800136e:	4342      	muls	r2, r0
 8001370:	0c31      	lsrs	r1, r6, #16
 8001372:	0005      	movs	r5, r0
 8001374:	4319      	orrs	r1, r3
 8001376:	428a      	cmp	r2, r1
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x1f8>
 800137a:	e16c      	b.n	8001656 <__aeabi_ddiv+0x4d2>
 800137c:	1a88      	subs	r0, r1, r2
 800137e:	4649      	mov	r1, r9
 8001380:	f7fe ff6e 	bl	8000260 <__aeabi_uidivmod>
 8001384:	9a01      	ldr	r2, [sp, #4]
 8001386:	0436      	lsls	r6, r6, #16
 8001388:	4342      	muls	r2, r0
 800138a:	0409      	lsls	r1, r1, #16
 800138c:	0c36      	lsrs	r6, r6, #16
 800138e:	0003      	movs	r3, r0
 8001390:	430e      	orrs	r6, r1
 8001392:	42b2      	cmp	r2, r6
 8001394:	d900      	bls.n	8001398 <__aeabi_ddiv+0x214>
 8001396:	e153      	b.n	8001640 <__aeabi_ddiv+0x4bc>
 8001398:	9803      	ldr	r0, [sp, #12]
 800139a:	1ab6      	subs	r6, r6, r2
 800139c:	0002      	movs	r2, r0
 800139e:	042d      	lsls	r5, r5, #16
 80013a0:	431d      	orrs	r5, r3
 80013a2:	9f02      	ldr	r7, [sp, #8]
 80013a4:	042b      	lsls	r3, r5, #16
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	435a      	muls	r2, r3
 80013aa:	437b      	muls	r3, r7
 80013ac:	469c      	mov	ip, r3
 80013ae:	0c29      	lsrs	r1, r5, #16
 80013b0:	4348      	muls	r0, r1
 80013b2:	0c13      	lsrs	r3, r2, #16
 80013b4:	4484      	add	ip, r0
 80013b6:	4463      	add	r3, ip
 80013b8:	4379      	muls	r1, r7
 80013ba:	4298      	cmp	r0, r3
 80013bc:	d903      	bls.n	80013c6 <__aeabi_ddiv+0x242>
 80013be:	2080      	movs	r0, #128	; 0x80
 80013c0:	0240      	lsls	r0, r0, #9
 80013c2:	4684      	mov	ip, r0
 80013c4:	4461      	add	r1, ip
 80013c6:	0c18      	lsrs	r0, r3, #16
 80013c8:	0412      	lsls	r2, r2, #16
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	0c12      	lsrs	r2, r2, #16
 80013ce:	1841      	adds	r1, r0, r1
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	428e      	cmp	r6, r1
 80013d4:	d200      	bcs.n	80013d8 <__aeabi_ddiv+0x254>
 80013d6:	e0ff      	b.n	80015d8 <__aeabi_ddiv+0x454>
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x258>
 80013da:	e0fa      	b.n	80015d2 <__aeabi_ddiv+0x44e>
 80013dc:	2301      	movs	r3, #1
 80013de:	431d      	orrs	r5, r3
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <__aeabi_ddiv+0x384>)
 80013e2:	445a      	add	r2, fp
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	dc00      	bgt.n	80013ea <__aeabi_ddiv+0x266>
 80013e8:	e0aa      	b.n	8001540 <__aeabi_ddiv+0x3bc>
 80013ea:	076b      	lsls	r3, r5, #29
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x26c>
 80013ee:	e13d      	b.n	800166c <__aeabi_ddiv+0x4e8>
 80013f0:	08ed      	lsrs	r5, r5, #3
 80013f2:	4643      	mov	r3, r8
 80013f4:	01db      	lsls	r3, r3, #7
 80013f6:	d506      	bpl.n	8001406 <__aeabi_ddiv+0x282>
 80013f8:	4642      	mov	r2, r8
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <__aeabi_ddiv+0x388>)
 80013fc:	401a      	ands	r2, r3
 80013fe:	4690      	mov	r8, r2
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	445a      	add	r2, fp
 8001406:	4b42      	ldr	r3, [pc, #264]	; (8001510 <__aeabi_ddiv+0x38c>)
 8001408:	429a      	cmp	r2, r3
 800140a:	dd00      	ble.n	800140e <__aeabi_ddiv+0x28a>
 800140c:	e71f      	b.n	800124e <__aeabi_ddiv+0xca>
 800140e:	4643      	mov	r3, r8
 8001410:	075b      	lsls	r3, r3, #29
 8001412:	431d      	orrs	r5, r3
 8001414:	4643      	mov	r3, r8
 8001416:	0552      	lsls	r2, r2, #21
 8001418:	025c      	lsls	r4, r3, #9
 800141a:	0b24      	lsrs	r4, r4, #12
 800141c:	0d53      	lsrs	r3, r2, #21
 800141e:	e708      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001420:	4652      	mov	r2, sl
 8001422:	4322      	orrs	r2, r4
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x2a4>
 8001426:	e07b      	b.n	8001520 <__aeabi_ddiv+0x39c>
 8001428:	2c00      	cmp	r4, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x2aa>
 800142c:	e0fa      	b.n	8001624 <__aeabi_ddiv+0x4a0>
 800142e:	0020      	movs	r0, r4
 8001430:	f000 fee0 	bl	80021f4 <__clzsi2>
 8001434:	0002      	movs	r2, r0
 8001436:	3a0b      	subs	r2, #11
 8001438:	231d      	movs	r3, #29
 800143a:	0001      	movs	r1, r0
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	4652      	mov	r2, sl
 8001440:	3908      	subs	r1, #8
 8001442:	40da      	lsrs	r2, r3
 8001444:	408c      	lsls	r4, r1
 8001446:	4314      	orrs	r4, r2
 8001448:	4652      	mov	r2, sl
 800144a:	408a      	lsls	r2, r1
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <__aeabi_ddiv+0x390>)
 800144e:	4458      	add	r0, fp
 8001450:	469b      	mov	fp, r3
 8001452:	4483      	add	fp, r0
 8001454:	2000      	movs	r0, #0
 8001456:	e6d5      	b.n	8001204 <__aeabi_ddiv+0x80>
 8001458:	464b      	mov	r3, r9
 800145a:	4323      	orrs	r3, r4
 800145c:	4698      	mov	r8, r3
 800145e:	d044      	beq.n	80014ea <__aeabi_ddiv+0x366>
 8001460:	2c00      	cmp	r4, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_ddiv+0x2e2>
 8001464:	e0ce      	b.n	8001604 <__aeabi_ddiv+0x480>
 8001466:	0020      	movs	r0, r4
 8001468:	f000 fec4 	bl	80021f4 <__clzsi2>
 800146c:	0001      	movs	r1, r0
 800146e:	0002      	movs	r2, r0
 8001470:	390b      	subs	r1, #11
 8001472:	231d      	movs	r3, #29
 8001474:	1a5b      	subs	r3, r3, r1
 8001476:	4649      	mov	r1, r9
 8001478:	0010      	movs	r0, r2
 800147a:	40d9      	lsrs	r1, r3
 800147c:	3808      	subs	r0, #8
 800147e:	4084      	lsls	r4, r0
 8001480:	000b      	movs	r3, r1
 8001482:	464d      	mov	r5, r9
 8001484:	4323      	orrs	r3, r4
 8001486:	4698      	mov	r8, r3
 8001488:	4085      	lsls	r5, r0
 800148a:	4823      	ldr	r0, [pc, #140]	; (8001518 <__aeabi_ddiv+0x394>)
 800148c:	1a83      	subs	r3, r0, r2
 800148e:	469b      	mov	fp, r3
 8001490:	2300      	movs	r3, #0
 8001492:	4699      	mov	r9, r3
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	e69a      	b.n	80011ce <__aeabi_ddiv+0x4a>
 8001498:	464b      	mov	r3, r9
 800149a:	4323      	orrs	r3, r4
 800149c:	4698      	mov	r8, r3
 800149e:	d11d      	bne.n	80014dc <__aeabi_ddiv+0x358>
 80014a0:	2308      	movs	r3, #8
 80014a2:	4699      	mov	r9, r3
 80014a4:	3b06      	subs	r3, #6
 80014a6:	2500      	movs	r5, #0
 80014a8:	4683      	mov	fp, r0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	e68f      	b.n	80011ce <__aeabi_ddiv+0x4a>
 80014ae:	4652      	mov	r2, sl
 80014b0:	4322      	orrs	r2, r4
 80014b2:	d109      	bne.n	80014c8 <__aeabi_ddiv+0x344>
 80014b4:	2302      	movs	r3, #2
 80014b6:	4649      	mov	r1, r9
 80014b8:	4319      	orrs	r1, r3
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <__aeabi_ddiv+0x398>)
 80014bc:	4689      	mov	r9, r1
 80014be:	469c      	mov	ip, r3
 80014c0:	2400      	movs	r4, #0
 80014c2:	2002      	movs	r0, #2
 80014c4:	44e3      	add	fp, ip
 80014c6:	e69d      	b.n	8001204 <__aeabi_ddiv+0x80>
 80014c8:	2303      	movs	r3, #3
 80014ca:	464a      	mov	r2, r9
 80014cc:	431a      	orrs	r2, r3
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <__aeabi_ddiv+0x398>)
 80014d0:	4691      	mov	r9, r2
 80014d2:	469c      	mov	ip, r3
 80014d4:	4652      	mov	r2, sl
 80014d6:	2003      	movs	r0, #3
 80014d8:	44e3      	add	fp, ip
 80014da:	e693      	b.n	8001204 <__aeabi_ddiv+0x80>
 80014dc:	230c      	movs	r3, #12
 80014de:	4699      	mov	r9, r3
 80014e0:	3b09      	subs	r3, #9
 80014e2:	46a0      	mov	r8, r4
 80014e4:	4683      	mov	fp, r0
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	e671      	b.n	80011ce <__aeabi_ddiv+0x4a>
 80014ea:	2304      	movs	r3, #4
 80014ec:	4699      	mov	r9, r3
 80014ee:	2300      	movs	r3, #0
 80014f0:	469b      	mov	fp, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	2500      	movs	r5, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	e669      	b.n	80011ce <__aeabi_ddiv+0x4a>
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	fffffc01 	.word	0xfffffc01
 8001504:	0800f144 	.word	0x0800f144
 8001508:	000003ff 	.word	0x000003ff
 800150c:	feffffff 	.word	0xfeffffff
 8001510:	000007fe 	.word	0x000007fe
 8001514:	000003f3 	.word	0x000003f3
 8001518:	fffffc0d 	.word	0xfffffc0d
 800151c:	fffff801 	.word	0xfffff801
 8001520:	4649      	mov	r1, r9
 8001522:	2301      	movs	r3, #1
 8001524:	4319      	orrs	r1, r3
 8001526:	4689      	mov	r9, r1
 8001528:	2400      	movs	r4, #0
 800152a:	2001      	movs	r0, #1
 800152c:	e66a      	b.n	8001204 <__aeabi_ddiv+0x80>
 800152e:	2300      	movs	r3, #0
 8001530:	2480      	movs	r4, #128	; 0x80
 8001532:	469a      	mov	sl, r3
 8001534:	2500      	movs	r5, #0
 8001536:	4b8a      	ldr	r3, [pc, #552]	; (8001760 <__aeabi_ddiv+0x5dc>)
 8001538:	0324      	lsls	r4, r4, #12
 800153a:	e67a      	b.n	8001232 <__aeabi_ddiv+0xae>
 800153c:	2501      	movs	r5, #1
 800153e:	426d      	negs	r5, r5
 8001540:	2301      	movs	r3, #1
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	2b38      	cmp	r3, #56	; 0x38
 8001546:	dd00      	ble.n	800154a <__aeabi_ddiv+0x3c6>
 8001548:	e670      	b.n	800122c <__aeabi_ddiv+0xa8>
 800154a:	2b1f      	cmp	r3, #31
 800154c:	dc00      	bgt.n	8001550 <__aeabi_ddiv+0x3cc>
 800154e:	e0bf      	b.n	80016d0 <__aeabi_ddiv+0x54c>
 8001550:	211f      	movs	r1, #31
 8001552:	4249      	negs	r1, r1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4641      	mov	r1, r8
 8001558:	40d1      	lsrs	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	2b20      	cmp	r3, #32
 800155e:	d004      	beq.n	800156a <__aeabi_ddiv+0x3e6>
 8001560:	4641      	mov	r1, r8
 8001562:	4b80      	ldr	r3, [pc, #512]	; (8001764 <__aeabi_ddiv+0x5e0>)
 8001564:	445b      	add	r3, fp
 8001566:	4099      	lsls	r1, r3
 8001568:	430d      	orrs	r5, r1
 800156a:	1e6b      	subs	r3, r5, #1
 800156c:	419d      	sbcs	r5, r3
 800156e:	2307      	movs	r3, #7
 8001570:	432a      	orrs	r2, r5
 8001572:	001d      	movs	r5, r3
 8001574:	2400      	movs	r4, #0
 8001576:	4015      	ands	r5, r2
 8001578:	4213      	tst	r3, r2
 800157a:	d100      	bne.n	800157e <__aeabi_ddiv+0x3fa>
 800157c:	e0d4      	b.n	8001728 <__aeabi_ddiv+0x5a4>
 800157e:	210f      	movs	r1, #15
 8001580:	2300      	movs	r3, #0
 8001582:	4011      	ands	r1, r2
 8001584:	2904      	cmp	r1, #4
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x406>
 8001588:	e0cb      	b.n	8001722 <__aeabi_ddiv+0x59e>
 800158a:	1d11      	adds	r1, r2, #4
 800158c:	4291      	cmp	r1, r2
 800158e:	4192      	sbcs	r2, r2
 8001590:	4252      	negs	r2, r2
 8001592:	189b      	adds	r3, r3, r2
 8001594:	000a      	movs	r2, r1
 8001596:	0219      	lsls	r1, r3, #8
 8001598:	d400      	bmi.n	800159c <__aeabi_ddiv+0x418>
 800159a:	e0c2      	b.n	8001722 <__aeabi_ddiv+0x59e>
 800159c:	2301      	movs	r3, #1
 800159e:	2400      	movs	r4, #0
 80015a0:	2500      	movs	r5, #0
 80015a2:	e646      	b.n	8001232 <__aeabi_ddiv+0xae>
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	4641      	mov	r1, r8
 80015a8:	031b      	lsls	r3, r3, #12
 80015aa:	4219      	tst	r1, r3
 80015ac:	d008      	beq.n	80015c0 <__aeabi_ddiv+0x43c>
 80015ae:	421c      	tst	r4, r3
 80015b0:	d106      	bne.n	80015c0 <__aeabi_ddiv+0x43c>
 80015b2:	431c      	orrs	r4, r3
 80015b4:	0324      	lsls	r4, r4, #12
 80015b6:	46ba      	mov	sl, r7
 80015b8:	0015      	movs	r5, r2
 80015ba:	4b69      	ldr	r3, [pc, #420]	; (8001760 <__aeabi_ddiv+0x5dc>)
 80015bc:	0b24      	lsrs	r4, r4, #12
 80015be:	e638      	b.n	8001232 <__aeabi_ddiv+0xae>
 80015c0:	2480      	movs	r4, #128	; 0x80
 80015c2:	4643      	mov	r3, r8
 80015c4:	0324      	lsls	r4, r4, #12
 80015c6:	431c      	orrs	r4, r3
 80015c8:	0324      	lsls	r4, r4, #12
 80015ca:	46b2      	mov	sl, r6
 80015cc:	4b64      	ldr	r3, [pc, #400]	; (8001760 <__aeabi_ddiv+0x5dc>)
 80015ce:	0b24      	lsrs	r4, r4, #12
 80015d0:	e62f      	b.n	8001232 <__aeabi_ddiv+0xae>
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0x454>
 80015d6:	e703      	b.n	80013e0 <__aeabi_ddiv+0x25c>
 80015d8:	19a6      	adds	r6, r4, r6
 80015da:	1e68      	subs	r0, r5, #1
 80015dc:	42a6      	cmp	r6, r4
 80015de:	d200      	bcs.n	80015e2 <__aeabi_ddiv+0x45e>
 80015e0:	e08d      	b.n	80016fe <__aeabi_ddiv+0x57a>
 80015e2:	428e      	cmp	r6, r1
 80015e4:	d200      	bcs.n	80015e8 <__aeabi_ddiv+0x464>
 80015e6:	e0a3      	b.n	8001730 <__aeabi_ddiv+0x5ac>
 80015e8:	d100      	bne.n	80015ec <__aeabi_ddiv+0x468>
 80015ea:	e0b3      	b.n	8001754 <__aeabi_ddiv+0x5d0>
 80015ec:	0005      	movs	r5, r0
 80015ee:	e6f5      	b.n	80013dc <__aeabi_ddiv+0x258>
 80015f0:	42aa      	cmp	r2, r5
 80015f2:	d900      	bls.n	80015f6 <__aeabi_ddiv+0x472>
 80015f4:	e639      	b.n	800126a <__aeabi_ddiv+0xe6>
 80015f6:	4643      	mov	r3, r8
 80015f8:	07de      	lsls	r6, r3, #31
 80015fa:	0858      	lsrs	r0, r3, #1
 80015fc:	086b      	lsrs	r3, r5, #1
 80015fe:	431e      	orrs	r6, r3
 8001600:	07ed      	lsls	r5, r5, #31
 8001602:	e639      	b.n	8001278 <__aeabi_ddiv+0xf4>
 8001604:	4648      	mov	r0, r9
 8001606:	f000 fdf5 	bl	80021f4 <__clzsi2>
 800160a:	0001      	movs	r1, r0
 800160c:	0002      	movs	r2, r0
 800160e:	3115      	adds	r1, #21
 8001610:	3220      	adds	r2, #32
 8001612:	291c      	cmp	r1, #28
 8001614:	dc00      	bgt.n	8001618 <__aeabi_ddiv+0x494>
 8001616:	e72c      	b.n	8001472 <__aeabi_ddiv+0x2ee>
 8001618:	464b      	mov	r3, r9
 800161a:	3808      	subs	r0, #8
 800161c:	4083      	lsls	r3, r0
 800161e:	2500      	movs	r5, #0
 8001620:	4698      	mov	r8, r3
 8001622:	e732      	b.n	800148a <__aeabi_ddiv+0x306>
 8001624:	f000 fde6 	bl	80021f4 <__clzsi2>
 8001628:	0003      	movs	r3, r0
 800162a:	001a      	movs	r2, r3
 800162c:	3215      	adds	r2, #21
 800162e:	3020      	adds	r0, #32
 8001630:	2a1c      	cmp	r2, #28
 8001632:	dc00      	bgt.n	8001636 <__aeabi_ddiv+0x4b2>
 8001634:	e700      	b.n	8001438 <__aeabi_ddiv+0x2b4>
 8001636:	4654      	mov	r4, sl
 8001638:	3b08      	subs	r3, #8
 800163a:	2200      	movs	r2, #0
 800163c:	409c      	lsls	r4, r3
 800163e:	e705      	b.n	800144c <__aeabi_ddiv+0x2c8>
 8001640:	1936      	adds	r6, r6, r4
 8001642:	3b01      	subs	r3, #1
 8001644:	42b4      	cmp	r4, r6
 8001646:	d900      	bls.n	800164a <__aeabi_ddiv+0x4c6>
 8001648:	e6a6      	b.n	8001398 <__aeabi_ddiv+0x214>
 800164a:	42b2      	cmp	r2, r6
 800164c:	d800      	bhi.n	8001650 <__aeabi_ddiv+0x4cc>
 800164e:	e6a3      	b.n	8001398 <__aeabi_ddiv+0x214>
 8001650:	1e83      	subs	r3, r0, #2
 8001652:	1936      	adds	r6, r6, r4
 8001654:	e6a0      	b.n	8001398 <__aeabi_ddiv+0x214>
 8001656:	1909      	adds	r1, r1, r4
 8001658:	3d01      	subs	r5, #1
 800165a:	428c      	cmp	r4, r1
 800165c:	d900      	bls.n	8001660 <__aeabi_ddiv+0x4dc>
 800165e:	e68d      	b.n	800137c <__aeabi_ddiv+0x1f8>
 8001660:	428a      	cmp	r2, r1
 8001662:	d800      	bhi.n	8001666 <__aeabi_ddiv+0x4e2>
 8001664:	e68a      	b.n	800137c <__aeabi_ddiv+0x1f8>
 8001666:	1e85      	subs	r5, r0, #2
 8001668:	1909      	adds	r1, r1, r4
 800166a:	e687      	b.n	800137c <__aeabi_ddiv+0x1f8>
 800166c:	230f      	movs	r3, #15
 800166e:	402b      	ands	r3, r5
 8001670:	2b04      	cmp	r3, #4
 8001672:	d100      	bne.n	8001676 <__aeabi_ddiv+0x4f2>
 8001674:	e6bc      	b.n	80013f0 <__aeabi_ddiv+0x26c>
 8001676:	2305      	movs	r3, #5
 8001678:	425b      	negs	r3, r3
 800167a:	42ab      	cmp	r3, r5
 800167c:	419b      	sbcs	r3, r3
 800167e:	3504      	adds	r5, #4
 8001680:	425b      	negs	r3, r3
 8001682:	08ed      	lsrs	r5, r5, #3
 8001684:	4498      	add	r8, r3
 8001686:	e6b4      	b.n	80013f2 <__aeabi_ddiv+0x26e>
 8001688:	42af      	cmp	r7, r5
 800168a:	d900      	bls.n	800168e <__aeabi_ddiv+0x50a>
 800168c:	e660      	b.n	8001350 <__aeabi_ddiv+0x1cc>
 800168e:	4282      	cmp	r2, r0
 8001690:	d804      	bhi.n	800169c <__aeabi_ddiv+0x518>
 8001692:	d000      	beq.n	8001696 <__aeabi_ddiv+0x512>
 8001694:	e65c      	b.n	8001350 <__aeabi_ddiv+0x1cc>
 8001696:	42ae      	cmp	r6, r5
 8001698:	d800      	bhi.n	800169c <__aeabi_ddiv+0x518>
 800169a:	e659      	b.n	8001350 <__aeabi_ddiv+0x1cc>
 800169c:	2302      	movs	r3, #2
 800169e:	425b      	negs	r3, r3
 80016a0:	469c      	mov	ip, r3
 80016a2:	9b00      	ldr	r3, [sp, #0]
 80016a4:	44e0      	add	r8, ip
 80016a6:	469c      	mov	ip, r3
 80016a8:	4465      	add	r5, ip
 80016aa:	429d      	cmp	r5, r3
 80016ac:	419b      	sbcs	r3, r3
 80016ae:	425b      	negs	r3, r3
 80016b0:	191b      	adds	r3, r3, r4
 80016b2:	18c0      	adds	r0, r0, r3
 80016b4:	e64d      	b.n	8001352 <__aeabi_ddiv+0x1ce>
 80016b6:	428a      	cmp	r2, r1
 80016b8:	d800      	bhi.n	80016bc <__aeabi_ddiv+0x538>
 80016ba:	e60e      	b.n	80012da <__aeabi_ddiv+0x156>
 80016bc:	1e83      	subs	r3, r0, #2
 80016be:	1909      	adds	r1, r1, r4
 80016c0:	e60b      	b.n	80012da <__aeabi_ddiv+0x156>
 80016c2:	428a      	cmp	r2, r1
 80016c4:	d800      	bhi.n	80016c8 <__aeabi_ddiv+0x544>
 80016c6:	e5f4      	b.n	80012b2 <__aeabi_ddiv+0x12e>
 80016c8:	1e83      	subs	r3, r0, #2
 80016ca:	4698      	mov	r8, r3
 80016cc:	1909      	adds	r1, r1, r4
 80016ce:	e5f0      	b.n	80012b2 <__aeabi_ddiv+0x12e>
 80016d0:	4925      	ldr	r1, [pc, #148]	; (8001768 <__aeabi_ddiv+0x5e4>)
 80016d2:	0028      	movs	r0, r5
 80016d4:	4459      	add	r1, fp
 80016d6:	408d      	lsls	r5, r1
 80016d8:	4642      	mov	r2, r8
 80016da:	408a      	lsls	r2, r1
 80016dc:	1e69      	subs	r1, r5, #1
 80016de:	418d      	sbcs	r5, r1
 80016e0:	4641      	mov	r1, r8
 80016e2:	40d8      	lsrs	r0, r3
 80016e4:	40d9      	lsrs	r1, r3
 80016e6:	4302      	orrs	r2, r0
 80016e8:	432a      	orrs	r2, r5
 80016ea:	000b      	movs	r3, r1
 80016ec:	0751      	lsls	r1, r2, #29
 80016ee:	d100      	bne.n	80016f2 <__aeabi_ddiv+0x56e>
 80016f0:	e751      	b.n	8001596 <__aeabi_ddiv+0x412>
 80016f2:	210f      	movs	r1, #15
 80016f4:	4011      	ands	r1, r2
 80016f6:	2904      	cmp	r1, #4
 80016f8:	d000      	beq.n	80016fc <__aeabi_ddiv+0x578>
 80016fa:	e746      	b.n	800158a <__aeabi_ddiv+0x406>
 80016fc:	e74b      	b.n	8001596 <__aeabi_ddiv+0x412>
 80016fe:	0005      	movs	r5, r0
 8001700:	428e      	cmp	r6, r1
 8001702:	d000      	beq.n	8001706 <__aeabi_ddiv+0x582>
 8001704:	e66a      	b.n	80013dc <__aeabi_ddiv+0x258>
 8001706:	9a00      	ldr	r2, [sp, #0]
 8001708:	4293      	cmp	r3, r2
 800170a:	d000      	beq.n	800170e <__aeabi_ddiv+0x58a>
 800170c:	e666      	b.n	80013dc <__aeabi_ddiv+0x258>
 800170e:	e667      	b.n	80013e0 <__aeabi_ddiv+0x25c>
 8001710:	4a16      	ldr	r2, [pc, #88]	; (800176c <__aeabi_ddiv+0x5e8>)
 8001712:	445a      	add	r2, fp
 8001714:	2a00      	cmp	r2, #0
 8001716:	dc00      	bgt.n	800171a <__aeabi_ddiv+0x596>
 8001718:	e710      	b.n	800153c <__aeabi_ddiv+0x3b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2500      	movs	r5, #0
 800171e:	4498      	add	r8, r3
 8001720:	e667      	b.n	80013f2 <__aeabi_ddiv+0x26e>
 8001722:	075d      	lsls	r5, r3, #29
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	0b1c      	lsrs	r4, r3, #12
 8001728:	08d2      	lsrs	r2, r2, #3
 800172a:	2300      	movs	r3, #0
 800172c:	4315      	orrs	r5, r2
 800172e:	e580      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001730:	9800      	ldr	r0, [sp, #0]
 8001732:	3d02      	subs	r5, #2
 8001734:	0042      	lsls	r2, r0, #1
 8001736:	4282      	cmp	r2, r0
 8001738:	41bf      	sbcs	r7, r7
 800173a:	427f      	negs	r7, r7
 800173c:	193c      	adds	r4, r7, r4
 800173e:	1936      	adds	r6, r6, r4
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	e7dd      	b.n	8001700 <__aeabi_ddiv+0x57c>
 8001744:	2480      	movs	r4, #128	; 0x80
 8001746:	4643      	mov	r3, r8
 8001748:	0324      	lsls	r4, r4, #12
 800174a:	431c      	orrs	r4, r3
 800174c:	0324      	lsls	r4, r4, #12
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__aeabi_ddiv+0x5dc>)
 8001750:	0b24      	lsrs	r4, r4, #12
 8001752:	e56e      	b.n	8001232 <__aeabi_ddiv+0xae>
 8001754:	9a00      	ldr	r2, [sp, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3ea      	bcc.n	8001730 <__aeabi_ddiv+0x5ac>
 800175a:	0005      	movs	r5, r0
 800175c:	e7d3      	b.n	8001706 <__aeabi_ddiv+0x582>
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	000007ff 	.word	0x000007ff
 8001764:	0000043e 	.word	0x0000043e
 8001768:	0000041e 	.word	0x0000041e
 800176c:	000003ff 	.word	0x000003ff

08001770 <__eqdf2>:
 8001770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001772:	464e      	mov	r6, r9
 8001774:	4645      	mov	r5, r8
 8001776:	46de      	mov	lr, fp
 8001778:	4657      	mov	r7, sl
 800177a:	4690      	mov	r8, r2
 800177c:	b5e0      	push	{r5, r6, r7, lr}
 800177e:	0017      	movs	r7, r2
 8001780:	031a      	lsls	r2, r3, #12
 8001782:	0b12      	lsrs	r2, r2, #12
 8001784:	0005      	movs	r5, r0
 8001786:	4684      	mov	ip, r0
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <__eqdf2+0x80>)
 800178a:	030e      	lsls	r6, r1, #12
 800178c:	004c      	lsls	r4, r1, #1
 800178e:	4691      	mov	r9, r2
 8001790:	005a      	lsls	r2, r3, #1
 8001792:	0fdb      	lsrs	r3, r3, #31
 8001794:	469b      	mov	fp, r3
 8001796:	0b36      	lsrs	r6, r6, #12
 8001798:	0d64      	lsrs	r4, r4, #21
 800179a:	0fc9      	lsrs	r1, r1, #31
 800179c:	0d52      	lsrs	r2, r2, #21
 800179e:	4284      	cmp	r4, r0
 80017a0:	d019      	beq.n	80017d6 <__eqdf2+0x66>
 80017a2:	4282      	cmp	r2, r0
 80017a4:	d010      	beq.n	80017c8 <__eqdf2+0x58>
 80017a6:	2001      	movs	r0, #1
 80017a8:	4294      	cmp	r4, r2
 80017aa:	d10e      	bne.n	80017ca <__eqdf2+0x5a>
 80017ac:	454e      	cmp	r6, r9
 80017ae:	d10c      	bne.n	80017ca <__eqdf2+0x5a>
 80017b0:	2001      	movs	r0, #1
 80017b2:	45c4      	cmp	ip, r8
 80017b4:	d109      	bne.n	80017ca <__eqdf2+0x5a>
 80017b6:	4559      	cmp	r1, fp
 80017b8:	d017      	beq.n	80017ea <__eqdf2+0x7a>
 80017ba:	2c00      	cmp	r4, #0
 80017bc:	d105      	bne.n	80017ca <__eqdf2+0x5a>
 80017be:	0030      	movs	r0, r6
 80017c0:	4328      	orrs	r0, r5
 80017c2:	1e43      	subs	r3, r0, #1
 80017c4:	4198      	sbcs	r0, r3
 80017c6:	e000      	b.n	80017ca <__eqdf2+0x5a>
 80017c8:	2001      	movs	r0, #1
 80017ca:	bcf0      	pop	{r4, r5, r6, r7}
 80017cc:	46bb      	mov	fp, r7
 80017ce:	46b2      	mov	sl, r6
 80017d0:	46a9      	mov	r9, r5
 80017d2:	46a0      	mov	r8, r4
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	0033      	movs	r3, r6
 80017d8:	2001      	movs	r0, #1
 80017da:	432b      	orrs	r3, r5
 80017dc:	d1f5      	bne.n	80017ca <__eqdf2+0x5a>
 80017de:	42a2      	cmp	r2, r4
 80017e0:	d1f3      	bne.n	80017ca <__eqdf2+0x5a>
 80017e2:	464b      	mov	r3, r9
 80017e4:	433b      	orrs	r3, r7
 80017e6:	d1f0      	bne.n	80017ca <__eqdf2+0x5a>
 80017e8:	e7e2      	b.n	80017b0 <__eqdf2+0x40>
 80017ea:	2000      	movs	r0, #0
 80017ec:	e7ed      	b.n	80017ca <__eqdf2+0x5a>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff

080017f4 <__gedf2>:
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	4647      	mov	r7, r8
 80017f8:	46ce      	mov	lr, r9
 80017fa:	0004      	movs	r4, r0
 80017fc:	0018      	movs	r0, r3
 80017fe:	0016      	movs	r6, r2
 8001800:	031b      	lsls	r3, r3, #12
 8001802:	0b1b      	lsrs	r3, r3, #12
 8001804:	4d2d      	ldr	r5, [pc, #180]	; (80018bc <__gedf2+0xc8>)
 8001806:	004a      	lsls	r2, r1, #1
 8001808:	4699      	mov	r9, r3
 800180a:	b580      	push	{r7, lr}
 800180c:	0043      	lsls	r3, r0, #1
 800180e:	030f      	lsls	r7, r1, #12
 8001810:	46a4      	mov	ip, r4
 8001812:	46b0      	mov	r8, r6
 8001814:	0b3f      	lsrs	r7, r7, #12
 8001816:	0d52      	lsrs	r2, r2, #21
 8001818:	0fc9      	lsrs	r1, r1, #31
 800181a:	0d5b      	lsrs	r3, r3, #21
 800181c:	0fc0      	lsrs	r0, r0, #31
 800181e:	42aa      	cmp	r2, r5
 8001820:	d021      	beq.n	8001866 <__gedf2+0x72>
 8001822:	42ab      	cmp	r3, r5
 8001824:	d013      	beq.n	800184e <__gedf2+0x5a>
 8001826:	2a00      	cmp	r2, #0
 8001828:	d122      	bne.n	8001870 <__gedf2+0x7c>
 800182a:	433c      	orrs	r4, r7
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <__gedf2+0x42>
 8001830:	464d      	mov	r5, r9
 8001832:	432e      	orrs	r6, r5
 8001834:	d022      	beq.n	800187c <__gedf2+0x88>
 8001836:	2c00      	cmp	r4, #0
 8001838:	d010      	beq.n	800185c <__gedf2+0x68>
 800183a:	4281      	cmp	r1, r0
 800183c:	d022      	beq.n	8001884 <__gedf2+0x90>
 800183e:	2002      	movs	r0, #2
 8001840:	3901      	subs	r1, #1
 8001842:	4008      	ands	r0, r1
 8001844:	3801      	subs	r0, #1
 8001846:	bcc0      	pop	{r6, r7}
 8001848:	46b9      	mov	r9, r7
 800184a:	46b0      	mov	r8, r6
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	464d      	mov	r5, r9
 8001850:	432e      	orrs	r6, r5
 8001852:	d129      	bne.n	80018a8 <__gedf2+0xb4>
 8001854:	2a00      	cmp	r2, #0
 8001856:	d1f0      	bne.n	800183a <__gedf2+0x46>
 8001858:	433c      	orrs	r4, r7
 800185a:	d1ee      	bne.n	800183a <__gedf2+0x46>
 800185c:	2800      	cmp	r0, #0
 800185e:	d1f2      	bne.n	8001846 <__gedf2+0x52>
 8001860:	2001      	movs	r0, #1
 8001862:	4240      	negs	r0, r0
 8001864:	e7ef      	b.n	8001846 <__gedf2+0x52>
 8001866:	003d      	movs	r5, r7
 8001868:	4325      	orrs	r5, r4
 800186a:	d11d      	bne.n	80018a8 <__gedf2+0xb4>
 800186c:	4293      	cmp	r3, r2
 800186e:	d0ee      	beq.n	800184e <__gedf2+0x5a>
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e2      	bne.n	800183a <__gedf2+0x46>
 8001874:	464c      	mov	r4, r9
 8001876:	4326      	orrs	r6, r4
 8001878:	d1df      	bne.n	800183a <__gedf2+0x46>
 800187a:	e7e0      	b.n	800183e <__gedf2+0x4a>
 800187c:	2000      	movs	r0, #0
 800187e:	2c00      	cmp	r4, #0
 8001880:	d0e1      	beq.n	8001846 <__gedf2+0x52>
 8001882:	e7dc      	b.n	800183e <__gedf2+0x4a>
 8001884:	429a      	cmp	r2, r3
 8001886:	dc0a      	bgt.n	800189e <__gedf2+0xaa>
 8001888:	dbe8      	blt.n	800185c <__gedf2+0x68>
 800188a:	454f      	cmp	r7, r9
 800188c:	d8d7      	bhi.n	800183e <__gedf2+0x4a>
 800188e:	d00e      	beq.n	80018ae <__gedf2+0xba>
 8001890:	2000      	movs	r0, #0
 8001892:	454f      	cmp	r7, r9
 8001894:	d2d7      	bcs.n	8001846 <__gedf2+0x52>
 8001896:	2900      	cmp	r1, #0
 8001898:	d0e2      	beq.n	8001860 <__gedf2+0x6c>
 800189a:	0008      	movs	r0, r1
 800189c:	e7d3      	b.n	8001846 <__gedf2+0x52>
 800189e:	4243      	negs	r3, r0
 80018a0:	4158      	adcs	r0, r3
 80018a2:	0040      	lsls	r0, r0, #1
 80018a4:	3801      	subs	r0, #1
 80018a6:	e7ce      	b.n	8001846 <__gedf2+0x52>
 80018a8:	2002      	movs	r0, #2
 80018aa:	4240      	negs	r0, r0
 80018ac:	e7cb      	b.n	8001846 <__gedf2+0x52>
 80018ae:	45c4      	cmp	ip, r8
 80018b0:	d8c5      	bhi.n	800183e <__gedf2+0x4a>
 80018b2:	2000      	movs	r0, #0
 80018b4:	45c4      	cmp	ip, r8
 80018b6:	d2c6      	bcs.n	8001846 <__gedf2+0x52>
 80018b8:	e7ed      	b.n	8001896 <__gedf2+0xa2>
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	000007ff 	.word	0x000007ff

080018c0 <__ledf2>:
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	4647      	mov	r7, r8
 80018c4:	46ce      	mov	lr, r9
 80018c6:	0004      	movs	r4, r0
 80018c8:	0018      	movs	r0, r3
 80018ca:	0016      	movs	r6, r2
 80018cc:	031b      	lsls	r3, r3, #12
 80018ce:	0b1b      	lsrs	r3, r3, #12
 80018d0:	4d2c      	ldr	r5, [pc, #176]	; (8001984 <__ledf2+0xc4>)
 80018d2:	004a      	lsls	r2, r1, #1
 80018d4:	4699      	mov	r9, r3
 80018d6:	b580      	push	{r7, lr}
 80018d8:	0043      	lsls	r3, r0, #1
 80018da:	030f      	lsls	r7, r1, #12
 80018dc:	46a4      	mov	ip, r4
 80018de:	46b0      	mov	r8, r6
 80018e0:	0b3f      	lsrs	r7, r7, #12
 80018e2:	0d52      	lsrs	r2, r2, #21
 80018e4:	0fc9      	lsrs	r1, r1, #31
 80018e6:	0d5b      	lsrs	r3, r3, #21
 80018e8:	0fc0      	lsrs	r0, r0, #31
 80018ea:	42aa      	cmp	r2, r5
 80018ec:	d00d      	beq.n	800190a <__ledf2+0x4a>
 80018ee:	42ab      	cmp	r3, r5
 80018f0:	d010      	beq.n	8001914 <__ledf2+0x54>
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d127      	bne.n	8001946 <__ledf2+0x86>
 80018f6:	433c      	orrs	r4, r7
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <__ledf2+0x60>
 80018fc:	464d      	mov	r5, r9
 80018fe:	432e      	orrs	r6, r5
 8001900:	d10e      	bne.n	8001920 <__ledf2+0x60>
 8001902:	2000      	movs	r0, #0
 8001904:	2c00      	cmp	r4, #0
 8001906:	d015      	beq.n	8001934 <__ledf2+0x74>
 8001908:	e00e      	b.n	8001928 <__ledf2+0x68>
 800190a:	003d      	movs	r5, r7
 800190c:	4325      	orrs	r5, r4
 800190e:	d110      	bne.n	8001932 <__ledf2+0x72>
 8001910:	4293      	cmp	r3, r2
 8001912:	d118      	bne.n	8001946 <__ledf2+0x86>
 8001914:	464d      	mov	r5, r9
 8001916:	432e      	orrs	r6, r5
 8001918:	d10b      	bne.n	8001932 <__ledf2+0x72>
 800191a:	2a00      	cmp	r2, #0
 800191c:	d102      	bne.n	8001924 <__ledf2+0x64>
 800191e:	433c      	orrs	r4, r7
 8001920:	2c00      	cmp	r4, #0
 8001922:	d00b      	beq.n	800193c <__ledf2+0x7c>
 8001924:	4281      	cmp	r1, r0
 8001926:	d014      	beq.n	8001952 <__ledf2+0x92>
 8001928:	2002      	movs	r0, #2
 800192a:	3901      	subs	r1, #1
 800192c:	4008      	ands	r0, r1
 800192e:	3801      	subs	r0, #1
 8001930:	e000      	b.n	8001934 <__ledf2+0x74>
 8001932:	2002      	movs	r0, #2
 8001934:	bcc0      	pop	{r6, r7}
 8001936:	46b9      	mov	r9, r7
 8001938:	46b0      	mov	r8, r6
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800193c:	2800      	cmp	r0, #0
 800193e:	d1f9      	bne.n	8001934 <__ledf2+0x74>
 8001940:	2001      	movs	r0, #1
 8001942:	4240      	negs	r0, r0
 8001944:	e7f6      	b.n	8001934 <__ledf2+0x74>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ec      	bne.n	8001924 <__ledf2+0x64>
 800194a:	464c      	mov	r4, r9
 800194c:	4326      	orrs	r6, r4
 800194e:	d1e9      	bne.n	8001924 <__ledf2+0x64>
 8001950:	e7ea      	b.n	8001928 <__ledf2+0x68>
 8001952:	429a      	cmp	r2, r3
 8001954:	dd04      	ble.n	8001960 <__ledf2+0xa0>
 8001956:	4243      	negs	r3, r0
 8001958:	4158      	adcs	r0, r3
 800195a:	0040      	lsls	r0, r0, #1
 800195c:	3801      	subs	r0, #1
 800195e:	e7e9      	b.n	8001934 <__ledf2+0x74>
 8001960:	429a      	cmp	r2, r3
 8001962:	dbeb      	blt.n	800193c <__ledf2+0x7c>
 8001964:	454f      	cmp	r7, r9
 8001966:	d8df      	bhi.n	8001928 <__ledf2+0x68>
 8001968:	d006      	beq.n	8001978 <__ledf2+0xb8>
 800196a:	2000      	movs	r0, #0
 800196c:	454f      	cmp	r7, r9
 800196e:	d2e1      	bcs.n	8001934 <__ledf2+0x74>
 8001970:	2900      	cmp	r1, #0
 8001972:	d0e5      	beq.n	8001940 <__ledf2+0x80>
 8001974:	0008      	movs	r0, r1
 8001976:	e7dd      	b.n	8001934 <__ledf2+0x74>
 8001978:	45c4      	cmp	ip, r8
 800197a:	d8d5      	bhi.n	8001928 <__ledf2+0x68>
 800197c:	2000      	movs	r0, #0
 800197e:	45c4      	cmp	ip, r8
 8001980:	d2d8      	bcs.n	8001934 <__ledf2+0x74>
 8001982:	e7f5      	b.n	8001970 <__ledf2+0xb0>
 8001984:	000007ff 	.word	0x000007ff

08001988 <__aeabi_dsub>:
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	4657      	mov	r7, sl
 800198c:	464e      	mov	r6, r9
 800198e:	4645      	mov	r5, r8
 8001990:	46de      	mov	lr, fp
 8001992:	b5e0      	push	{r5, r6, r7, lr}
 8001994:	001e      	movs	r6, r3
 8001996:	0017      	movs	r7, r2
 8001998:	004a      	lsls	r2, r1, #1
 800199a:	030b      	lsls	r3, r1, #12
 800199c:	0d52      	lsrs	r2, r2, #21
 800199e:	0a5b      	lsrs	r3, r3, #9
 80019a0:	4690      	mov	r8, r2
 80019a2:	0f42      	lsrs	r2, r0, #29
 80019a4:	431a      	orrs	r2, r3
 80019a6:	0fcd      	lsrs	r5, r1, #31
 80019a8:	4ccd      	ldr	r4, [pc, #820]	; (8001ce0 <__aeabi_dsub+0x358>)
 80019aa:	0331      	lsls	r1, r6, #12
 80019ac:	00c3      	lsls	r3, r0, #3
 80019ae:	4694      	mov	ip, r2
 80019b0:	0070      	lsls	r0, r6, #1
 80019b2:	0f7a      	lsrs	r2, r7, #29
 80019b4:	0a49      	lsrs	r1, r1, #9
 80019b6:	00ff      	lsls	r7, r7, #3
 80019b8:	469a      	mov	sl, r3
 80019ba:	46b9      	mov	r9, r7
 80019bc:	0d40      	lsrs	r0, r0, #21
 80019be:	0ff6      	lsrs	r6, r6, #31
 80019c0:	4311      	orrs	r1, r2
 80019c2:	42a0      	cmp	r0, r4
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x40>
 80019c6:	e0b1      	b.n	8001b2c <__aeabi_dsub+0x1a4>
 80019c8:	2201      	movs	r2, #1
 80019ca:	4056      	eors	r6, r2
 80019cc:	46b3      	mov	fp, r6
 80019ce:	42b5      	cmp	r5, r6
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x4c>
 80019d2:	e088      	b.n	8001ae6 <__aeabi_dsub+0x15e>
 80019d4:	4642      	mov	r2, r8
 80019d6:	1a12      	subs	r2, r2, r0
 80019d8:	2a00      	cmp	r2, #0
 80019da:	dc00      	bgt.n	80019de <__aeabi_dsub+0x56>
 80019dc:	e0ae      	b.n	8001b3c <__aeabi_dsub+0x1b4>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x5c>
 80019e2:	e0c1      	b.n	8001b68 <__aeabi_dsub+0x1e0>
 80019e4:	48be      	ldr	r0, [pc, #760]	; (8001ce0 <__aeabi_dsub+0x358>)
 80019e6:	4580      	cmp	r8, r0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x64>
 80019ea:	e151      	b.n	8001c90 <__aeabi_dsub+0x308>
 80019ec:	2080      	movs	r0, #128	; 0x80
 80019ee:	0400      	lsls	r0, r0, #16
 80019f0:	4301      	orrs	r1, r0
 80019f2:	2a38      	cmp	r2, #56	; 0x38
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dsub+0x70>
 80019f6:	e17b      	b.n	8001cf0 <__aeabi_dsub+0x368>
 80019f8:	2a1f      	cmp	r2, #31
 80019fa:	dd00      	ble.n	80019fe <__aeabi_dsub+0x76>
 80019fc:	e1ee      	b.n	8001ddc <__aeabi_dsub+0x454>
 80019fe:	2020      	movs	r0, #32
 8001a00:	003e      	movs	r6, r7
 8001a02:	1a80      	subs	r0, r0, r2
 8001a04:	000c      	movs	r4, r1
 8001a06:	40d6      	lsrs	r6, r2
 8001a08:	40d1      	lsrs	r1, r2
 8001a0a:	4087      	lsls	r7, r0
 8001a0c:	4662      	mov	r2, ip
 8001a0e:	4084      	lsls	r4, r0
 8001a10:	1a52      	subs	r2, r2, r1
 8001a12:	1e78      	subs	r0, r7, #1
 8001a14:	4187      	sbcs	r7, r0
 8001a16:	4694      	mov	ip, r2
 8001a18:	4334      	orrs	r4, r6
 8001a1a:	4327      	orrs	r7, r4
 8001a1c:	1bdc      	subs	r4, r3, r7
 8001a1e:	42a3      	cmp	r3, r4
 8001a20:	419b      	sbcs	r3, r3
 8001a22:	4662      	mov	r2, ip
 8001a24:	425b      	negs	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4699      	mov	r9, r3
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	d400      	bmi.n	8001a32 <__aeabi_dsub+0xaa>
 8001a30:	e118      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001a32:	464b      	mov	r3, r9
 8001a34:	0258      	lsls	r0, r3, #9
 8001a36:	0a43      	lsrs	r3, r0, #9
 8001a38:	4699      	mov	r9, r3
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0xba>
 8001a40:	e137      	b.n	8001cb2 <__aeabi_dsub+0x32a>
 8001a42:	4648      	mov	r0, r9
 8001a44:	f000 fbd6 	bl	80021f4 <__clzsi2>
 8001a48:	0001      	movs	r1, r0
 8001a4a:	3908      	subs	r1, #8
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	0022      	movs	r2, r4
 8001a50:	4648      	mov	r0, r9
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	40da      	lsrs	r2, r3
 8001a56:	4088      	lsls	r0, r1
 8001a58:	408c      	lsls	r4, r1
 8001a5a:	4643      	mov	r3, r8
 8001a5c:	4310      	orrs	r0, r2
 8001a5e:	4588      	cmp	r8, r1
 8001a60:	dd00      	ble.n	8001a64 <__aeabi_dsub+0xdc>
 8001a62:	e136      	b.n	8001cd2 <__aeabi_dsub+0x34a>
 8001a64:	1ac9      	subs	r1, r1, r3
 8001a66:	1c4b      	adds	r3, r1, #1
 8001a68:	2b1f      	cmp	r3, #31
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_dsub+0xe6>
 8001a6c:	e0ea      	b.n	8001c44 <__aeabi_dsub+0x2bc>
 8001a6e:	2220      	movs	r2, #32
 8001a70:	0026      	movs	r6, r4
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	0001      	movs	r1, r0
 8001a76:	4094      	lsls	r4, r2
 8001a78:	40de      	lsrs	r6, r3
 8001a7a:	40d8      	lsrs	r0, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4091      	lsls	r1, r2
 8001a80:	1e62      	subs	r2, r4, #1
 8001a82:	4194      	sbcs	r4, r2
 8001a84:	4681      	mov	r9, r0
 8001a86:	4698      	mov	r8, r3
 8001a88:	4331      	orrs	r1, r6
 8001a8a:	430c      	orrs	r4, r1
 8001a8c:	0763      	lsls	r3, r4, #29
 8001a8e:	d009      	beq.n	8001aa4 <__aeabi_dsub+0x11c>
 8001a90:	230f      	movs	r3, #15
 8001a92:	4023      	ands	r3, r4
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dsub+0x11c>
 8001a98:	1d23      	adds	r3, r4, #4
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	41a4      	sbcs	r4, r4
 8001a9e:	4264      	negs	r4, r4
 8001aa0:	44a1      	add	r9, r4
 8001aa2:	001c      	movs	r4, r3
 8001aa4:	464b      	mov	r3, r9
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	d400      	bmi.n	8001aac <__aeabi_dsub+0x124>
 8001aaa:	e0de      	b.n	8001c6a <__aeabi_dsub+0x2e2>
 8001aac:	4641      	mov	r1, r8
 8001aae:	4b8c      	ldr	r3, [pc, #560]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001ab0:	3101      	adds	r1, #1
 8001ab2:	4299      	cmp	r1, r3
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x130>
 8001ab6:	e0e7      	b.n	8001c88 <__aeabi_dsub+0x300>
 8001ab8:	464b      	mov	r3, r9
 8001aba:	488a      	ldr	r0, [pc, #552]	; (8001ce4 <__aeabi_dsub+0x35c>)
 8001abc:	08e4      	lsrs	r4, r4, #3
 8001abe:	4003      	ands	r3, r0
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	0549      	lsls	r1, r1, #21
 8001ac4:	075b      	lsls	r3, r3, #29
 8001ac6:	0240      	lsls	r0, r0, #9
 8001ac8:	4323      	orrs	r3, r4
 8001aca:	0d4a      	lsrs	r2, r1, #21
 8001acc:	0b04      	lsrs	r4, r0, #12
 8001ace:	0512      	lsls	r2, r2, #20
 8001ad0:	07ed      	lsls	r5, r5, #31
 8001ad2:	4322      	orrs	r2, r4
 8001ad4:	432a      	orrs	r2, r5
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	0011      	movs	r1, r2
 8001ada:	bcf0      	pop	{r4, r5, r6, r7}
 8001adc:	46bb      	mov	fp, r7
 8001ade:	46b2      	mov	sl, r6
 8001ae0:	46a9      	mov	r9, r5
 8001ae2:	46a0      	mov	r8, r4
 8001ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	1a12      	subs	r2, r2, r0
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	dd52      	ble.n	8001b94 <__aeabi_dsub+0x20c>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x16c>
 8001af2:	e09c      	b.n	8001c2e <__aeabi_dsub+0x2a6>
 8001af4:	45a0      	cmp	r8, r4
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x172>
 8001af8:	e0ca      	b.n	8001c90 <__aeabi_dsub+0x308>
 8001afa:	2080      	movs	r0, #128	; 0x80
 8001afc:	0400      	lsls	r0, r0, #16
 8001afe:	4301      	orrs	r1, r0
 8001b00:	2a38      	cmp	r2, #56	; 0x38
 8001b02:	dd00      	ble.n	8001b06 <__aeabi_dsub+0x17e>
 8001b04:	e149      	b.n	8001d9a <__aeabi_dsub+0x412>
 8001b06:	2a1f      	cmp	r2, #31
 8001b08:	dc00      	bgt.n	8001b0c <__aeabi_dsub+0x184>
 8001b0a:	e197      	b.n	8001e3c <__aeabi_dsub+0x4b4>
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	000e      	movs	r6, r1
 8001b10:	3820      	subs	r0, #32
 8001b12:	40c6      	lsrs	r6, r0
 8001b14:	2a20      	cmp	r2, #32
 8001b16:	d004      	beq.n	8001b22 <__aeabi_dsub+0x19a>
 8001b18:	2040      	movs	r0, #64	; 0x40
 8001b1a:	1a82      	subs	r2, r0, r2
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	430f      	orrs	r7, r1
 8001b20:	46b9      	mov	r9, r7
 8001b22:	464c      	mov	r4, r9
 8001b24:	1e62      	subs	r2, r4, #1
 8001b26:	4194      	sbcs	r4, r2
 8001b28:	4334      	orrs	r4, r6
 8001b2a:	e13a      	b.n	8001da2 <__aeabi_dsub+0x41a>
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	433a      	orrs	r2, r7
 8001b30:	d028      	beq.n	8001b84 <__aeabi_dsub+0x1fc>
 8001b32:	46b3      	mov	fp, r6
 8001b34:	42b5      	cmp	r5, r6
 8001b36:	d02b      	beq.n	8001b90 <__aeabi_dsub+0x208>
 8001b38:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <__aeabi_dsub+0x360>)
 8001b3a:	4442      	add	r2, r8
 8001b3c:	2a00      	cmp	r2, #0
 8001b3e:	d05d      	beq.n	8001bfc <__aeabi_dsub+0x274>
 8001b40:	4642      	mov	r2, r8
 8001b42:	4644      	mov	r4, r8
 8001b44:	1a82      	subs	r2, r0, r2
 8001b46:	2c00      	cmp	r4, #0
 8001b48:	d000      	beq.n	8001b4c <__aeabi_dsub+0x1c4>
 8001b4a:	e0f5      	b.n	8001d38 <__aeabi_dsub+0x3b0>
 8001b4c:	4665      	mov	r5, ip
 8001b4e:	431d      	orrs	r5, r3
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dsub+0x1cc>
 8001b52:	e19c      	b.n	8001e8e <__aeabi_dsub+0x506>
 8001b54:	1e55      	subs	r5, r2, #1
 8001b56:	2a01      	cmp	r2, #1
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x1d4>
 8001b5a:	e1fb      	b.n	8001f54 <__aeabi_dsub+0x5cc>
 8001b5c:	4c60      	ldr	r4, [pc, #384]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001b5e:	42a2      	cmp	r2, r4
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x1dc>
 8001b62:	e1bd      	b.n	8001ee0 <__aeabi_dsub+0x558>
 8001b64:	002a      	movs	r2, r5
 8001b66:	e0f0      	b.n	8001d4a <__aeabi_dsub+0x3c2>
 8001b68:	0008      	movs	r0, r1
 8001b6a:	4338      	orrs	r0, r7
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dsub+0x1e8>
 8001b6e:	e0c3      	b.n	8001cf8 <__aeabi_dsub+0x370>
 8001b70:	1e50      	subs	r0, r2, #1
 8001b72:	2a01      	cmp	r2, #1
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x1f0>
 8001b76:	e1a8      	b.n	8001eca <__aeabi_dsub+0x542>
 8001b78:	4c59      	ldr	r4, [pc, #356]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001b7a:	42a2      	cmp	r2, r4
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_dsub+0x1f8>
 8001b7e:	e087      	b.n	8001c90 <__aeabi_dsub+0x308>
 8001b80:	0002      	movs	r2, r0
 8001b82:	e736      	b.n	80019f2 <__aeabi_dsub+0x6a>
 8001b84:	2201      	movs	r2, #1
 8001b86:	4056      	eors	r6, r2
 8001b88:	46b3      	mov	fp, r6
 8001b8a:	42b5      	cmp	r5, r6
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x208>
 8001b8e:	e721      	b.n	80019d4 <__aeabi_dsub+0x4c>
 8001b90:	4a55      	ldr	r2, [pc, #340]	; (8001ce8 <__aeabi_dsub+0x360>)
 8001b92:	4442      	add	r2, r8
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x212>
 8001b98:	e0b5      	b.n	8001d06 <__aeabi_dsub+0x37e>
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	4644      	mov	r4, r8
 8001b9e:	1a82      	subs	r2, r0, r2
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x21e>
 8001ba4:	e138      	b.n	8001e18 <__aeabi_dsub+0x490>
 8001ba6:	4e4e      	ldr	r6, [pc, #312]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001ba8:	42b0      	cmp	r0, r6
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x226>
 8001bac:	e1de      	b.n	8001f6c <__aeabi_dsub+0x5e4>
 8001bae:	2680      	movs	r6, #128	; 0x80
 8001bb0:	4664      	mov	r4, ip
 8001bb2:	0436      	lsls	r6, r6, #16
 8001bb4:	4334      	orrs	r4, r6
 8001bb6:	46a4      	mov	ip, r4
 8001bb8:	2a38      	cmp	r2, #56	; 0x38
 8001bba:	dd00      	ble.n	8001bbe <__aeabi_dsub+0x236>
 8001bbc:	e196      	b.n	8001eec <__aeabi_dsub+0x564>
 8001bbe:	2a1f      	cmp	r2, #31
 8001bc0:	dd00      	ble.n	8001bc4 <__aeabi_dsub+0x23c>
 8001bc2:	e224      	b.n	800200e <__aeabi_dsub+0x686>
 8001bc4:	2620      	movs	r6, #32
 8001bc6:	1ab4      	subs	r4, r6, r2
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	4664      	mov	r4, ip
 8001bcc:	4656      	mov	r6, sl
 8001bce:	40b4      	lsls	r4, r6
 8001bd0:	46a1      	mov	r9, r4
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	464e      	mov	r6, r9
 8001bd6:	40d4      	lsrs	r4, r2
 8001bd8:	4326      	orrs	r6, r4
 8001bda:	0034      	movs	r4, r6
 8001bdc:	4656      	mov	r6, sl
 8001bde:	40b3      	lsls	r3, r6
 8001be0:	1e5e      	subs	r6, r3, #1
 8001be2:	41b3      	sbcs	r3, r6
 8001be4:	431c      	orrs	r4, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	40d3      	lsrs	r3, r2
 8001bea:	18c9      	adds	r1, r1, r3
 8001bec:	19e4      	adds	r4, r4, r7
 8001bee:	42bc      	cmp	r4, r7
 8001bf0:	41bf      	sbcs	r7, r7
 8001bf2:	427f      	negs	r7, r7
 8001bf4:	46b9      	mov	r9, r7
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4489      	add	r9, r1
 8001bfa:	e0d8      	b.n	8001dae <__aeabi_dsub+0x426>
 8001bfc:	4640      	mov	r0, r8
 8001bfe:	4c3b      	ldr	r4, [pc, #236]	; (8001cec <__aeabi_dsub+0x364>)
 8001c00:	3001      	adds	r0, #1
 8001c02:	4220      	tst	r0, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x280>
 8001c06:	e0b4      	b.n	8001d72 <__aeabi_dsub+0x3ea>
 8001c08:	4640      	mov	r0, r8
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dsub+0x288>
 8001c0e:	e144      	b.n	8001e9a <__aeabi_dsub+0x512>
 8001c10:	4660      	mov	r0, ip
 8001c12:	4318      	orrs	r0, r3
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x290>
 8001c16:	e190      	b.n	8001f3a <__aeabi_dsub+0x5b2>
 8001c18:	0008      	movs	r0, r1
 8001c1a:	4338      	orrs	r0, r7
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_dsub+0x298>
 8001c1e:	e1aa      	b.n	8001f76 <__aeabi_dsub+0x5ee>
 8001c20:	4661      	mov	r1, ip
 8001c22:	08db      	lsrs	r3, r3, #3
 8001c24:	0749      	lsls	r1, r1, #29
 8001c26:	430b      	orrs	r3, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	08cc      	lsrs	r4, r1, #3
 8001c2c:	e027      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001c2e:	0008      	movs	r0, r1
 8001c30:	4338      	orrs	r0, r7
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dsub+0x370>
 8001c34:	1e50      	subs	r0, r2, #1
 8001c36:	2a01      	cmp	r2, #1
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x2b4>
 8001c3a:	e139      	b.n	8001eb0 <__aeabi_dsub+0x528>
 8001c3c:	42a2      	cmp	r2, r4
 8001c3e:	d027      	beq.n	8001c90 <__aeabi_dsub+0x308>
 8001c40:	0002      	movs	r2, r0
 8001c42:	e75d      	b.n	8001b00 <__aeabi_dsub+0x178>
 8001c44:	0002      	movs	r2, r0
 8001c46:	391f      	subs	r1, #31
 8001c48:	40ca      	lsrs	r2, r1
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d003      	beq.n	8001c58 <__aeabi_dsub+0x2d0>
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4098      	lsls	r0, r3
 8001c56:	4304      	orrs	r4, r0
 8001c58:	1e63      	subs	r3, r4, #1
 8001c5a:	419c      	sbcs	r4, r3
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4699      	mov	r9, r3
 8001c60:	4698      	mov	r8, r3
 8001c62:	430c      	orrs	r4, r1
 8001c64:	0763      	lsls	r3, r4, #29
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x2e2>
 8001c68:	e712      	b.n	8001a90 <__aeabi_dsub+0x108>
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	464a      	mov	r2, r9
 8001c6e:	08e4      	lsrs	r4, r4, #3
 8001c70:	075b      	lsls	r3, r3, #29
 8001c72:	4323      	orrs	r3, r4
 8001c74:	08d4      	lsrs	r4, r2, #3
 8001c76:	4642      	mov	r2, r8
 8001c78:	4919      	ldr	r1, [pc, #100]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001c7a:	428a      	cmp	r2, r1
 8001c7c:	d00e      	beq.n	8001c9c <__aeabi_dsub+0x314>
 8001c7e:	0324      	lsls	r4, r4, #12
 8001c80:	0552      	lsls	r2, r2, #21
 8001c82:	0b24      	lsrs	r4, r4, #12
 8001c84:	0d52      	lsrs	r2, r2, #21
 8001c86:	e722      	b.n	8001ace <__aeabi_dsub+0x146>
 8001c88:	000a      	movs	r2, r1
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e71e      	b.n	8001ace <__aeabi_dsub+0x146>
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	4662      	mov	r2, ip
 8001c94:	0752      	lsls	r2, r2, #29
 8001c96:	4313      	orrs	r3, r2
 8001c98:	4662      	mov	r2, ip
 8001c9a:	08d4      	lsrs	r4, r2, #3
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	4322      	orrs	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x31c>
 8001ca2:	e1fc      	b.n	800209e <__aeabi_dsub+0x716>
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	0312      	lsls	r2, r2, #12
 8001ca8:	4314      	orrs	r4, r2
 8001caa:	0324      	lsls	r4, r4, #12
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <__aeabi_dsub+0x358>)
 8001cae:	0b24      	lsrs	r4, r4, #12
 8001cb0:	e70d      	b.n	8001ace <__aeabi_dsub+0x146>
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	f000 fa9e 	bl	80021f4 <__clzsi2>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	3118      	adds	r1, #24
 8001cbc:	291f      	cmp	r1, #31
 8001cbe:	dc00      	bgt.n	8001cc2 <__aeabi_dsub+0x33a>
 8001cc0:	e6c4      	b.n	8001a4c <__aeabi_dsub+0xc4>
 8001cc2:	3808      	subs	r0, #8
 8001cc4:	4084      	lsls	r4, r0
 8001cc6:	4643      	mov	r3, r8
 8001cc8:	0020      	movs	r0, r4
 8001cca:	2400      	movs	r4, #0
 8001ccc:	4588      	cmp	r8, r1
 8001cce:	dc00      	bgt.n	8001cd2 <__aeabi_dsub+0x34a>
 8001cd0:	e6c8      	b.n	8001a64 <__aeabi_dsub+0xdc>
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__aeabi_dsub+0x35c>)
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	4010      	ands	r0, r2
 8001cd8:	4698      	mov	r8, r3
 8001cda:	4681      	mov	r9, r0
 8001cdc:	e6d6      	b.n	8001a8c <__aeabi_dsub+0x104>
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	fffff801 	.word	0xfffff801
 8001cec:	000007fe 	.word	0x000007fe
 8001cf0:	430f      	orrs	r7, r1
 8001cf2:	1e7a      	subs	r2, r7, #1
 8001cf4:	4197      	sbcs	r7, r2
 8001cf6:	e691      	b.n	8001a1c <__aeabi_dsub+0x94>
 8001cf8:	4661      	mov	r1, ip
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	0749      	lsls	r1, r1, #29
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	4661      	mov	r1, ip
 8001d02:	08cc      	lsrs	r4, r1, #3
 8001d04:	e7b8      	b.n	8001c78 <__aeabi_dsub+0x2f0>
 8001d06:	4640      	mov	r0, r8
 8001d08:	4cd3      	ldr	r4, [pc, #844]	; (8002058 <__aeabi_dsub+0x6d0>)
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	4220      	tst	r0, r4
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x38a>
 8001d10:	e0a2      	b.n	8001e58 <__aeabi_dsub+0x4d0>
 8001d12:	4640      	mov	r0, r8
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x392>
 8001d18:	e101      	b.n	8001f1e <__aeabi_dsub+0x596>
 8001d1a:	4660      	mov	r0, ip
 8001d1c:	4318      	orrs	r0, r3
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x39a>
 8001d20:	e15e      	b.n	8001fe0 <__aeabi_dsub+0x658>
 8001d22:	0008      	movs	r0, r1
 8001d24:	4338      	orrs	r0, r7
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x3a2>
 8001d28:	e15f      	b.n	8001fea <__aeabi_dsub+0x662>
 8001d2a:	4661      	mov	r1, ip
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	0749      	lsls	r1, r1, #29
 8001d30:	430b      	orrs	r3, r1
 8001d32:	4661      	mov	r1, ip
 8001d34:	08cc      	lsrs	r4, r1, #3
 8001d36:	e7a2      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001d38:	4dc8      	ldr	r5, [pc, #800]	; (800205c <__aeabi_dsub+0x6d4>)
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x3b8>
 8001d3e:	e0cf      	b.n	8001ee0 <__aeabi_dsub+0x558>
 8001d40:	2580      	movs	r5, #128	; 0x80
 8001d42:	4664      	mov	r4, ip
 8001d44:	042d      	lsls	r5, r5, #16
 8001d46:	432c      	orrs	r4, r5
 8001d48:	46a4      	mov	ip, r4
 8001d4a:	2a38      	cmp	r2, #56	; 0x38
 8001d4c:	dc56      	bgt.n	8001dfc <__aeabi_dsub+0x474>
 8001d4e:	2a1f      	cmp	r2, #31
 8001d50:	dd00      	ble.n	8001d54 <__aeabi_dsub+0x3cc>
 8001d52:	e0d1      	b.n	8001ef8 <__aeabi_dsub+0x570>
 8001d54:	2520      	movs	r5, #32
 8001d56:	001e      	movs	r6, r3
 8001d58:	1aad      	subs	r5, r5, r2
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	40ab      	lsls	r3, r5
 8001d5e:	40ac      	lsls	r4, r5
 8001d60:	40d6      	lsrs	r6, r2
 8001d62:	1e5d      	subs	r5, r3, #1
 8001d64:	41ab      	sbcs	r3, r5
 8001d66:	4334      	orrs	r4, r6
 8001d68:	4323      	orrs	r3, r4
 8001d6a:	4664      	mov	r4, ip
 8001d6c:	40d4      	lsrs	r4, r2
 8001d6e:	1b09      	subs	r1, r1, r4
 8001d70:	e049      	b.n	8001e06 <__aeabi_dsub+0x47e>
 8001d72:	4660      	mov	r0, ip
 8001d74:	1bdc      	subs	r4, r3, r7
 8001d76:	1a46      	subs	r6, r0, r1
 8001d78:	42a3      	cmp	r3, r4
 8001d7a:	4180      	sbcs	r0, r0
 8001d7c:	4240      	negs	r0, r0
 8001d7e:	4681      	mov	r9, r0
 8001d80:	0030      	movs	r0, r6
 8001d82:	464e      	mov	r6, r9
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	4681      	mov	r9, r0
 8001d88:	0200      	lsls	r0, r0, #8
 8001d8a:	d476      	bmi.n	8001e7a <__aeabi_dsub+0x4f2>
 8001d8c:	464b      	mov	r3, r9
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x40c>
 8001d92:	e652      	b.n	8001a3a <__aeabi_dsub+0xb2>
 8001d94:	2400      	movs	r4, #0
 8001d96:	2500      	movs	r5, #0
 8001d98:	e771      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001d9a:	4339      	orrs	r1, r7
 8001d9c:	000c      	movs	r4, r1
 8001d9e:	1e62      	subs	r2, r4, #1
 8001da0:	4194      	sbcs	r4, r2
 8001da2:	18e4      	adds	r4, r4, r3
 8001da4:	429c      	cmp	r4, r3
 8001da6:	419b      	sbcs	r3, r3
 8001da8:	425b      	negs	r3, r3
 8001daa:	4463      	add	r3, ip
 8001dac:	4699      	mov	r9, r3
 8001dae:	464b      	mov	r3, r9
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	d400      	bmi.n	8001db6 <__aeabi_dsub+0x42e>
 8001db4:	e756      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001db6:	2301      	movs	r3, #1
 8001db8:	469c      	mov	ip, r3
 8001dba:	4ba8      	ldr	r3, [pc, #672]	; (800205c <__aeabi_dsub+0x6d4>)
 8001dbc:	44e0      	add	r8, ip
 8001dbe:	4598      	cmp	r8, r3
 8001dc0:	d038      	beq.n	8001e34 <__aeabi_dsub+0x4ac>
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	48a6      	ldr	r0, [pc, #664]	; (8002060 <__aeabi_dsub+0x6d8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4003      	ands	r3, r0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	0863      	lsrs	r3, r4, #1
 8001dce:	4014      	ands	r4, r2
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	07c3      	lsls	r3, r0, #31
 8001dd4:	431c      	orrs	r4, r3
 8001dd6:	0843      	lsrs	r3, r0, #1
 8001dd8:	4699      	mov	r9, r3
 8001dda:	e657      	b.n	8001a8c <__aeabi_dsub+0x104>
 8001ddc:	0010      	movs	r0, r2
 8001dde:	000e      	movs	r6, r1
 8001de0:	3820      	subs	r0, #32
 8001de2:	40c6      	lsrs	r6, r0
 8001de4:	2a20      	cmp	r2, #32
 8001de6:	d004      	beq.n	8001df2 <__aeabi_dsub+0x46a>
 8001de8:	2040      	movs	r0, #64	; 0x40
 8001dea:	1a82      	subs	r2, r0, r2
 8001dec:	4091      	lsls	r1, r2
 8001dee:	430f      	orrs	r7, r1
 8001df0:	46b9      	mov	r9, r7
 8001df2:	464f      	mov	r7, r9
 8001df4:	1e7a      	subs	r2, r7, #1
 8001df6:	4197      	sbcs	r7, r2
 8001df8:	4337      	orrs	r7, r6
 8001dfa:	e60f      	b.n	8001a1c <__aeabi_dsub+0x94>
 8001dfc:	4662      	mov	r2, ip
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	4193      	sbcs	r3, r2
 8001e06:	1afc      	subs	r4, r7, r3
 8001e08:	42a7      	cmp	r7, r4
 8001e0a:	41bf      	sbcs	r7, r7
 8001e0c:	427f      	negs	r7, r7
 8001e0e:	1bcb      	subs	r3, r1, r7
 8001e10:	4699      	mov	r9, r3
 8001e12:	465d      	mov	r5, fp
 8001e14:	4680      	mov	r8, r0
 8001e16:	e608      	b.n	8001a2a <__aeabi_dsub+0xa2>
 8001e18:	4666      	mov	r6, ip
 8001e1a:	431e      	orrs	r6, r3
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x498>
 8001e1e:	e0be      	b.n	8001f9e <__aeabi_dsub+0x616>
 8001e20:	1e56      	subs	r6, r2, #1
 8001e22:	2a01      	cmp	r2, #1
 8001e24:	d100      	bne.n	8001e28 <__aeabi_dsub+0x4a0>
 8001e26:	e109      	b.n	800203c <__aeabi_dsub+0x6b4>
 8001e28:	4c8c      	ldr	r4, [pc, #560]	; (800205c <__aeabi_dsub+0x6d4>)
 8001e2a:	42a2      	cmp	r2, r4
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x4a8>
 8001e2e:	e119      	b.n	8002064 <__aeabi_dsub+0x6dc>
 8001e30:	0032      	movs	r2, r6
 8001e32:	e6c1      	b.n	8001bb8 <__aeabi_dsub+0x230>
 8001e34:	4642      	mov	r2, r8
 8001e36:	2400      	movs	r4, #0
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e648      	b.n	8001ace <__aeabi_dsub+0x146>
 8001e3c:	2020      	movs	r0, #32
 8001e3e:	000c      	movs	r4, r1
 8001e40:	1a80      	subs	r0, r0, r2
 8001e42:	003e      	movs	r6, r7
 8001e44:	4087      	lsls	r7, r0
 8001e46:	4084      	lsls	r4, r0
 8001e48:	40d6      	lsrs	r6, r2
 8001e4a:	1e78      	subs	r0, r7, #1
 8001e4c:	4187      	sbcs	r7, r0
 8001e4e:	40d1      	lsrs	r1, r2
 8001e50:	4334      	orrs	r4, r6
 8001e52:	433c      	orrs	r4, r7
 8001e54:	448c      	add	ip, r1
 8001e56:	e7a4      	b.n	8001da2 <__aeabi_dsub+0x41a>
 8001e58:	4a80      	ldr	r2, [pc, #512]	; (800205c <__aeabi_dsub+0x6d4>)
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x4d8>
 8001e5e:	e0e9      	b.n	8002034 <__aeabi_dsub+0x6ac>
 8001e60:	19df      	adds	r7, r3, r7
 8001e62:	429f      	cmp	r7, r3
 8001e64:	419b      	sbcs	r3, r3
 8001e66:	4461      	add	r1, ip
 8001e68:	425b      	negs	r3, r3
 8001e6a:	18c9      	adds	r1, r1, r3
 8001e6c:	07cc      	lsls	r4, r1, #31
 8001e6e:	087f      	lsrs	r7, r7, #1
 8001e70:	084b      	lsrs	r3, r1, #1
 8001e72:	4699      	mov	r9, r3
 8001e74:	4680      	mov	r8, r0
 8001e76:	433c      	orrs	r4, r7
 8001e78:	e6f4      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001e7a:	1afc      	subs	r4, r7, r3
 8001e7c:	42a7      	cmp	r7, r4
 8001e7e:	41bf      	sbcs	r7, r7
 8001e80:	4663      	mov	r3, ip
 8001e82:	427f      	negs	r7, r7
 8001e84:	1ac9      	subs	r1, r1, r3
 8001e86:	1bcb      	subs	r3, r1, r7
 8001e88:	4699      	mov	r9, r3
 8001e8a:	465d      	mov	r5, fp
 8001e8c:	e5d5      	b.n	8001a3a <__aeabi_dsub+0xb2>
 8001e8e:	08ff      	lsrs	r7, r7, #3
 8001e90:	074b      	lsls	r3, r1, #29
 8001e92:	465d      	mov	r5, fp
 8001e94:	433b      	orrs	r3, r7
 8001e96:	08cc      	lsrs	r4, r1, #3
 8001e98:	e6ee      	b.n	8001c78 <__aeabi_dsub+0x2f0>
 8001e9a:	4662      	mov	r2, ip
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x51a>
 8001ea0:	e082      	b.n	8001fa8 <__aeabi_dsub+0x620>
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	d11b      	bne.n	8001ee0 <__aeabi_dsub+0x558>
 8001ea8:	2480      	movs	r4, #128	; 0x80
 8001eaa:	2500      	movs	r5, #0
 8001eac:	0324      	lsls	r4, r4, #12
 8001eae:	e6f9      	b.n	8001ca4 <__aeabi_dsub+0x31c>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	429c      	cmp	r4, r3
 8001eb4:	419b      	sbcs	r3, r3
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	425b      	negs	r3, r3
 8001ebc:	4499      	add	r9, r3
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	d444      	bmi.n	8001f4e <__aeabi_dsub+0x5c6>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	e6cc      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8001eca:	1bdc      	subs	r4, r3, r7
 8001ecc:	4662      	mov	r2, ip
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	419b      	sbcs	r3, r3
 8001ed2:	1a51      	subs	r1, r2, r1
 8001ed4:	425b      	negs	r3, r3
 8001ed6:	1acb      	subs	r3, r1, r3
 8001ed8:	4699      	mov	r9, r3
 8001eda:	2301      	movs	r3, #1
 8001edc:	4698      	mov	r8, r3
 8001ede:	e5a4      	b.n	8001a2a <__aeabi_dsub+0xa2>
 8001ee0:	08ff      	lsrs	r7, r7, #3
 8001ee2:	074b      	lsls	r3, r1, #29
 8001ee4:	465d      	mov	r5, fp
 8001ee6:	433b      	orrs	r3, r7
 8001ee8:	08cc      	lsrs	r4, r1, #3
 8001eea:	e6d7      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001eec:	4662      	mov	r2, ip
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	0014      	movs	r4, r2
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	e679      	b.n	8001bec <__aeabi_dsub+0x264>
 8001ef8:	0015      	movs	r5, r2
 8001efa:	4664      	mov	r4, ip
 8001efc:	3d20      	subs	r5, #32
 8001efe:	40ec      	lsrs	r4, r5
 8001f00:	46a0      	mov	r8, r4
 8001f02:	2a20      	cmp	r2, #32
 8001f04:	d005      	beq.n	8001f12 <__aeabi_dsub+0x58a>
 8001f06:	2540      	movs	r5, #64	; 0x40
 8001f08:	4664      	mov	r4, ip
 8001f0a:	1aaa      	subs	r2, r5, r2
 8001f0c:	4094      	lsls	r4, r2
 8001f0e:	4323      	orrs	r3, r4
 8001f10:	469a      	mov	sl, r3
 8001f12:	4654      	mov	r4, sl
 8001f14:	1e63      	subs	r3, r4, #1
 8001f16:	419c      	sbcs	r4, r3
 8001f18:	4643      	mov	r3, r8
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	e773      	b.n	8001e06 <__aeabi_dsub+0x47e>
 8001f1e:	4662      	mov	r2, ip
 8001f20:	431a      	orrs	r2, r3
 8001f22:	d023      	beq.n	8001f6c <__aeabi_dsub+0x5e4>
 8001f24:	000a      	movs	r2, r1
 8001f26:	433a      	orrs	r2, r7
 8001f28:	d000      	beq.n	8001f2c <__aeabi_dsub+0x5a4>
 8001f2a:	e0a0      	b.n	800206e <__aeabi_dsub+0x6e6>
 8001f2c:	4662      	mov	r2, ip
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	0752      	lsls	r2, r2, #29
 8001f32:	4313      	orrs	r3, r2
 8001f34:	4662      	mov	r2, ip
 8001f36:	08d4      	lsrs	r4, r2, #3
 8001f38:	e6b0      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001f3a:	000b      	movs	r3, r1
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0x5ba>
 8001f40:	e728      	b.n	8001d94 <__aeabi_dsub+0x40c>
 8001f42:	08ff      	lsrs	r7, r7, #3
 8001f44:	074b      	lsls	r3, r1, #29
 8001f46:	465d      	mov	r5, fp
 8001f48:	433b      	orrs	r3, r7
 8001f4a:	08cc      	lsrs	r4, r1, #3
 8001f4c:	e697      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	4698      	mov	r8, r3
 8001f52:	e736      	b.n	8001dc2 <__aeabi_dsub+0x43a>
 8001f54:	1afc      	subs	r4, r7, r3
 8001f56:	42a7      	cmp	r7, r4
 8001f58:	41bf      	sbcs	r7, r7
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	427f      	negs	r7, r7
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	1bcb      	subs	r3, r1, r7
 8001f62:	4699      	mov	r9, r3
 8001f64:	2301      	movs	r3, #1
 8001f66:	465d      	mov	r5, fp
 8001f68:	4698      	mov	r8, r3
 8001f6a:	e55e      	b.n	8001a2a <__aeabi_dsub+0xa2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08ff      	lsrs	r7, r7, #3
 8001f70:	433b      	orrs	r3, r7
 8001f72:	08cc      	lsrs	r4, r1, #3
 8001f74:	e692      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001f76:	1bdc      	subs	r4, r3, r7
 8001f78:	4660      	mov	r0, ip
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	41b6      	sbcs	r6, r6
 8001f7e:	1a40      	subs	r0, r0, r1
 8001f80:	4276      	negs	r6, r6
 8001f82:	1b80      	subs	r0, r0, r6
 8001f84:	4681      	mov	r9, r0
 8001f86:	0200      	lsls	r0, r0, #8
 8001f88:	d560      	bpl.n	800204c <__aeabi_dsub+0x6c4>
 8001f8a:	1afc      	subs	r4, r7, r3
 8001f8c:	42a7      	cmp	r7, r4
 8001f8e:	41bf      	sbcs	r7, r7
 8001f90:	4663      	mov	r3, ip
 8001f92:	427f      	negs	r7, r7
 8001f94:	1ac9      	subs	r1, r1, r3
 8001f96:	1bcb      	subs	r3, r1, r7
 8001f98:	4699      	mov	r9, r3
 8001f9a:	465d      	mov	r5, fp
 8001f9c:	e576      	b.n	8001a8c <__aeabi_dsub+0x104>
 8001f9e:	08ff      	lsrs	r7, r7, #3
 8001fa0:	074b      	lsls	r3, r1, #29
 8001fa2:	433b      	orrs	r3, r7
 8001fa4:	08cc      	lsrs	r4, r1, #3
 8001fa6:	e667      	b.n	8001c78 <__aeabi_dsub+0x2f0>
 8001fa8:	000a      	movs	r2, r1
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	433a      	orrs	r2, r7
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x62a>
 8001fb0:	e66f      	b.n	8001c92 <__aeabi_dsub+0x30a>
 8001fb2:	4662      	mov	r2, ip
 8001fb4:	0752      	lsls	r2, r2, #29
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	4662      	mov	r2, ip
 8001fba:	08d4      	lsrs	r4, r2, #3
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0312      	lsls	r2, r2, #12
 8001fc0:	4214      	tst	r4, r2
 8001fc2:	d007      	beq.n	8001fd4 <__aeabi_dsub+0x64c>
 8001fc4:	08c8      	lsrs	r0, r1, #3
 8001fc6:	4210      	tst	r0, r2
 8001fc8:	d104      	bne.n	8001fd4 <__aeabi_dsub+0x64c>
 8001fca:	465d      	mov	r5, fp
 8001fcc:	0004      	movs	r4, r0
 8001fce:	08fb      	lsrs	r3, r7, #3
 8001fd0:	0749      	lsls	r1, r1, #29
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	0f5a      	lsrs	r2, r3, #29
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	0752      	lsls	r2, r2, #29
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	e65d      	b.n	8001c9c <__aeabi_dsub+0x314>
 8001fe0:	074b      	lsls	r3, r1, #29
 8001fe2:	08ff      	lsrs	r7, r7, #3
 8001fe4:	433b      	orrs	r3, r7
 8001fe6:	08cc      	lsrs	r4, r1, #3
 8001fe8:	e649      	b.n	8001c7e <__aeabi_dsub+0x2f6>
 8001fea:	19dc      	adds	r4, r3, r7
 8001fec:	429c      	cmp	r4, r3
 8001fee:	419b      	sbcs	r3, r3
 8001ff0:	4461      	add	r1, ip
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	425b      	negs	r3, r3
 8001ff6:	4499      	add	r9, r3
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	d400      	bmi.n	8002000 <__aeabi_dsub+0x678>
 8001ffe:	e631      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8002000:	464a      	mov	r2, r9
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <__aeabi_dsub+0x6d8>)
 8002004:	401a      	ands	r2, r3
 8002006:	2301      	movs	r3, #1
 8002008:	4691      	mov	r9, r2
 800200a:	4698      	mov	r8, r3
 800200c:	e62a      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 800200e:	0016      	movs	r6, r2
 8002010:	4664      	mov	r4, ip
 8002012:	3e20      	subs	r6, #32
 8002014:	40f4      	lsrs	r4, r6
 8002016:	46a0      	mov	r8, r4
 8002018:	2a20      	cmp	r2, #32
 800201a:	d005      	beq.n	8002028 <__aeabi_dsub+0x6a0>
 800201c:	2640      	movs	r6, #64	; 0x40
 800201e:	4664      	mov	r4, ip
 8002020:	1ab2      	subs	r2, r6, r2
 8002022:	4094      	lsls	r4, r2
 8002024:	4323      	orrs	r3, r4
 8002026:	469a      	mov	sl, r3
 8002028:	4654      	mov	r4, sl
 800202a:	1e63      	subs	r3, r4, #1
 800202c:	419c      	sbcs	r4, r3
 800202e:	4643      	mov	r3, r8
 8002030:	431c      	orrs	r4, r3
 8002032:	e5db      	b.n	8001bec <__aeabi_dsub+0x264>
 8002034:	0002      	movs	r2, r0
 8002036:	2400      	movs	r4, #0
 8002038:	2300      	movs	r3, #0
 800203a:	e548      	b.n	8001ace <__aeabi_dsub+0x146>
 800203c:	19dc      	adds	r4, r3, r7
 800203e:	42bc      	cmp	r4, r7
 8002040:	41bf      	sbcs	r7, r7
 8002042:	4461      	add	r1, ip
 8002044:	4689      	mov	r9, r1
 8002046:	427f      	negs	r7, r7
 8002048:	44b9      	add	r9, r7
 800204a:	e738      	b.n	8001ebe <__aeabi_dsub+0x536>
 800204c:	464b      	mov	r3, r9
 800204e:	4323      	orrs	r3, r4
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x6cc>
 8002052:	e69f      	b.n	8001d94 <__aeabi_dsub+0x40c>
 8002054:	e606      	b.n	8001c64 <__aeabi_dsub+0x2dc>
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	000007fe 	.word	0x000007fe
 800205c:	000007ff 	.word	0x000007ff
 8002060:	ff7fffff 	.word	0xff7fffff
 8002064:	08ff      	lsrs	r7, r7, #3
 8002066:	074b      	lsls	r3, r1, #29
 8002068:	433b      	orrs	r3, r7
 800206a:	08cc      	lsrs	r4, r1, #3
 800206c:	e616      	b.n	8001c9c <__aeabi_dsub+0x314>
 800206e:	4662      	mov	r2, ip
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	0752      	lsls	r2, r2, #29
 8002074:	4313      	orrs	r3, r2
 8002076:	4662      	mov	r2, ip
 8002078:	08d4      	lsrs	r4, r2, #3
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0312      	lsls	r2, r2, #12
 800207e:	4214      	tst	r4, r2
 8002080:	d007      	beq.n	8002092 <__aeabi_dsub+0x70a>
 8002082:	08c8      	lsrs	r0, r1, #3
 8002084:	4210      	tst	r0, r2
 8002086:	d104      	bne.n	8002092 <__aeabi_dsub+0x70a>
 8002088:	465d      	mov	r5, fp
 800208a:	0004      	movs	r4, r0
 800208c:	08fb      	lsrs	r3, r7, #3
 800208e:	0749      	lsls	r1, r1, #29
 8002090:	430b      	orrs	r3, r1
 8002092:	0f5a      	lsrs	r2, r3, #29
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	0752      	lsls	r2, r2, #29
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	4313      	orrs	r3, r2
 800209c:	e5fe      	b.n	8001c9c <__aeabi_dsub+0x314>
 800209e:	2300      	movs	r3, #0
 80020a0:	4a01      	ldr	r2, [pc, #4]	; (80020a8 <__aeabi_dsub+0x720>)
 80020a2:	001c      	movs	r4, r3
 80020a4:	e513      	b.n	8001ace <__aeabi_dsub+0x146>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	000007ff 	.word	0x000007ff

080020ac <__aeabi_d2iz>:
 80020ac:	000a      	movs	r2, r1
 80020ae:	b530      	push	{r4, r5, lr}
 80020b0:	4c13      	ldr	r4, [pc, #76]	; (8002100 <__aeabi_d2iz+0x54>)
 80020b2:	0053      	lsls	r3, r2, #1
 80020b4:	0309      	lsls	r1, r1, #12
 80020b6:	0005      	movs	r5, r0
 80020b8:	0b09      	lsrs	r1, r1, #12
 80020ba:	2000      	movs	r0, #0
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	0fd2      	lsrs	r2, r2, #31
 80020c0:	42a3      	cmp	r3, r4
 80020c2:	dd04      	ble.n	80020ce <__aeabi_d2iz+0x22>
 80020c4:	480f      	ldr	r0, [pc, #60]	; (8002104 <__aeabi_d2iz+0x58>)
 80020c6:	4283      	cmp	r3, r0
 80020c8:	dd02      	ble.n	80020d0 <__aeabi_d2iz+0x24>
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <__aeabi_d2iz+0x5c>)
 80020cc:	18d0      	adds	r0, r2, r3
 80020ce:	bd30      	pop	{r4, r5, pc}
 80020d0:	2080      	movs	r0, #128	; 0x80
 80020d2:	0340      	lsls	r0, r0, #13
 80020d4:	4301      	orrs	r1, r0
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <__aeabi_d2iz+0x60>)
 80020d8:	1ac0      	subs	r0, r0, r3
 80020da:	281f      	cmp	r0, #31
 80020dc:	dd08      	ble.n	80020f0 <__aeabi_d2iz+0x44>
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <__aeabi_d2iz+0x64>)
 80020e0:	1ac3      	subs	r3, r0, r3
 80020e2:	40d9      	lsrs	r1, r3
 80020e4:	000b      	movs	r3, r1
 80020e6:	4258      	negs	r0, r3
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d1f0      	bne.n	80020ce <__aeabi_d2iz+0x22>
 80020ec:	0018      	movs	r0, r3
 80020ee:	e7ee      	b.n	80020ce <__aeabi_d2iz+0x22>
 80020f0:	4c08      	ldr	r4, [pc, #32]	; (8002114 <__aeabi_d2iz+0x68>)
 80020f2:	40c5      	lsrs	r5, r0
 80020f4:	46a4      	mov	ip, r4
 80020f6:	4463      	add	r3, ip
 80020f8:	4099      	lsls	r1, r3
 80020fa:	000b      	movs	r3, r1
 80020fc:	432b      	orrs	r3, r5
 80020fe:	e7f2      	b.n	80020e6 <__aeabi_d2iz+0x3a>
 8002100:	000003fe 	.word	0x000003fe
 8002104:	0000041d 	.word	0x0000041d
 8002108:	7fffffff 	.word	0x7fffffff
 800210c:	00000433 	.word	0x00000433
 8002110:	00000413 	.word	0x00000413
 8002114:	fffffbed 	.word	0xfffffbed

08002118 <__aeabi_ui2d>:
 8002118:	b510      	push	{r4, lr}
 800211a:	1e04      	subs	r4, r0, #0
 800211c:	d010      	beq.n	8002140 <__aeabi_ui2d+0x28>
 800211e:	f000 f869 	bl	80021f4 <__clzsi2>
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <__aeabi_ui2d+0x48>)
 8002124:	1a1b      	subs	r3, r3, r0
 8002126:	280a      	cmp	r0, #10
 8002128:	dc11      	bgt.n	800214e <__aeabi_ui2d+0x36>
 800212a:	220b      	movs	r2, #11
 800212c:	0021      	movs	r1, r4
 800212e:	1a12      	subs	r2, r2, r0
 8002130:	40d1      	lsrs	r1, r2
 8002132:	3015      	adds	r0, #21
 8002134:	030a      	lsls	r2, r1, #12
 8002136:	055b      	lsls	r3, r3, #21
 8002138:	4084      	lsls	r4, r0
 800213a:	0b12      	lsrs	r2, r2, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	e001      	b.n	8002144 <__aeabi_ui2d+0x2c>
 8002140:	2300      	movs	r3, #0
 8002142:	2200      	movs	r2, #0
 8002144:	051b      	lsls	r3, r3, #20
 8002146:	4313      	orrs	r3, r2
 8002148:	0020      	movs	r0, r4
 800214a:	0019      	movs	r1, r3
 800214c:	bd10      	pop	{r4, pc}
 800214e:	0022      	movs	r2, r4
 8002150:	380b      	subs	r0, #11
 8002152:	4082      	lsls	r2, r0
 8002154:	055b      	lsls	r3, r3, #21
 8002156:	0312      	lsls	r2, r2, #12
 8002158:	2400      	movs	r4, #0
 800215a:	0b12      	lsrs	r2, r2, #12
 800215c:	0d5b      	lsrs	r3, r3, #21
 800215e:	e7f1      	b.n	8002144 <__aeabi_ui2d+0x2c>
 8002160:	0000041e 	.word	0x0000041e

08002164 <__aeabi_f2d>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	0043      	lsls	r3, r0, #1
 8002168:	0246      	lsls	r6, r0, #9
 800216a:	0fc4      	lsrs	r4, r0, #31
 800216c:	20fe      	movs	r0, #254	; 0xfe
 800216e:	0e1b      	lsrs	r3, r3, #24
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	0a75      	lsrs	r5, r6, #9
 8002174:	4208      	tst	r0, r1
 8002176:	d00c      	beq.n	8002192 <__aeabi_f2d+0x2e>
 8002178:	22e0      	movs	r2, #224	; 0xe0
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4694      	mov	ip, r2
 800217e:	076d      	lsls	r5, r5, #29
 8002180:	0b36      	lsrs	r6, r6, #12
 8002182:	4463      	add	r3, ip
 8002184:	051b      	lsls	r3, r3, #20
 8002186:	4333      	orrs	r3, r6
 8002188:	07e4      	lsls	r4, r4, #31
 800218a:	4323      	orrs	r3, r4
 800218c:	0028      	movs	r0, r5
 800218e:	0019      	movs	r1, r3
 8002190:	bd70      	pop	{r4, r5, r6, pc}
 8002192:	2b00      	cmp	r3, #0
 8002194:	d114      	bne.n	80021c0 <__aeabi_f2d+0x5c>
 8002196:	2d00      	cmp	r5, #0
 8002198:	d01b      	beq.n	80021d2 <__aeabi_f2d+0x6e>
 800219a:	0028      	movs	r0, r5
 800219c:	f000 f82a 	bl	80021f4 <__clzsi2>
 80021a0:	280a      	cmp	r0, #10
 80021a2:	dc1c      	bgt.n	80021de <__aeabi_f2d+0x7a>
 80021a4:	230b      	movs	r3, #11
 80021a6:	002e      	movs	r6, r5
 80021a8:	1a1b      	subs	r3, r3, r0
 80021aa:	40de      	lsrs	r6, r3
 80021ac:	0003      	movs	r3, r0
 80021ae:	3315      	adds	r3, #21
 80021b0:	409d      	lsls	r5, r3
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <__aeabi_f2d+0x88>)
 80021b4:	0336      	lsls	r6, r6, #12
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	0552      	lsls	r2, r2, #21
 80021ba:	0b36      	lsrs	r6, r6, #12
 80021bc:	0d53      	lsrs	r3, r2, #21
 80021be:	e7e1      	b.n	8002184 <__aeabi_f2d+0x20>
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	d009      	beq.n	80021d8 <__aeabi_f2d+0x74>
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0b36      	lsrs	r6, r6, #12
 80021c8:	0312      	lsls	r2, r2, #12
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <__aeabi_f2d+0x8c>)
 80021cc:	076d      	lsls	r5, r5, #29
 80021ce:	4316      	orrs	r6, r2
 80021d0:	e7d8      	b.n	8002184 <__aeabi_f2d+0x20>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2600      	movs	r6, #0
 80021d6:	e7d5      	b.n	8002184 <__aeabi_f2d+0x20>
 80021d8:	2600      	movs	r6, #0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <__aeabi_f2d+0x8c>)
 80021dc:	e7d2      	b.n	8002184 <__aeabi_f2d+0x20>
 80021de:	0003      	movs	r3, r0
 80021e0:	3b0b      	subs	r3, #11
 80021e2:	409d      	lsls	r5, r3
 80021e4:	002e      	movs	r6, r5
 80021e6:	2500      	movs	r5, #0
 80021e8:	e7e3      	b.n	80021b2 <__aeabi_f2d+0x4e>
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	00000389 	.word	0x00000389
 80021f0:	000007ff 	.word	0x000007ff

080021f4 <__clzsi2>:
 80021f4:	211c      	movs	r1, #28
 80021f6:	2301      	movs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0xe>
 80021fe:	0c00      	lsrs	r0, r0, #16
 8002200:	3910      	subs	r1, #16
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	4298      	cmp	r0, r3
 8002206:	d301      	bcc.n	800220c <__clzsi2+0x18>
 8002208:	0a00      	lsrs	r0, r0, #8
 800220a:	3908      	subs	r1, #8
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	4298      	cmp	r0, r3
 8002210:	d301      	bcc.n	8002216 <__clzsi2+0x22>
 8002212:	0900      	lsrs	r0, r0, #4
 8002214:	3904      	subs	r1, #4
 8002216:	a202      	add	r2, pc, #8	; (adr r2, 8002220 <__clzsi2+0x2c>)
 8002218:	5c10      	ldrb	r0, [r2, r0]
 800221a:	1840      	adds	r0, r0, r1
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	02020304 	.word	0x02020304
 8002224:	01010101 	.word	0x01010101
	...

08002230 <__clzdi2>:
 8002230:	b510      	push	{r4, lr}
 8002232:	2900      	cmp	r1, #0
 8002234:	d103      	bne.n	800223e <__clzdi2+0xe>
 8002236:	f7ff ffdd 	bl	80021f4 <__clzsi2>
 800223a:	3020      	adds	r0, #32
 800223c:	e002      	b.n	8002244 <__clzdi2+0x14>
 800223e:	0008      	movs	r0, r1
 8002240:	f7ff ffd8 	bl	80021f4 <__clzsi2>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	46c0      	nop			; (mov r8, r8)

08002248 <MX_ADC_Init>:
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
  hadc1.Init.LowPowerAutoWait      = DISABLE;
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002248:	2107      	movs	r1, #7
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800224a:	2201      	movs	r2, #1
{
 800224c:	b510      	push	{r4, lr}
  hadc1.Init.OversamplingMode      = DISABLE;
 800224e:	4c13      	ldr	r4, [pc, #76]	; (800229c <MX_ADC_Init+0x54>)
 8002250:	2300      	movs	r3, #0
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002252:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc1.Instance  = ADC1;
 8002254:	4912      	ldr	r1, [pc, #72]	; (80022a0 <MX_ADC_Init+0x58>)
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8002256:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8002258:	6122      	str	r2, [r4, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800225a:	3203      	adds	r2, #3
  hadc1.Instance  = ADC1;
 800225c:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800225e:	6162      	str	r2, [r4, #20]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002260:	2180      	movs	r1, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002262:	0022      	movs	r2, r4
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002264:	0609      	lsls	r1, r1, #24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002266:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002268:	0020      	movs	r0, r4
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800226a:	8423      	strh	r3, [r4, #32]
  hadc1.Init.OversamplingMode      = DISABLE;
 800226c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800226e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002270:	6061      	str	r1, [r4, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8002272:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002274:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8002276:	61a3      	str	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8002278:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800227a:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800227c:	f002 f8b6 	bl	80043ec <HAL_ADC_Init>
 8002280:	2800      	cmp	r0, #0
 8002282:	d001      	beq.n	8002288 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8002284:	f000 f936 	bl	80024f4 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	0020      	movs	r0, r4
 800228c:	f002 fadc 	bl	8004848 <HAL_ADCEx_Calibration_Start>
 8002290:	2800      	cmp	r0, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8002294:	f000 f92e 	bl	80024f4 <Error_Handler>
  }
}
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	200001b8 	.word	0x200001b8
 80022a0:	40012400 	.word	0x40012400

080022a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_ADC_MspInit+0x18>)
 80022a6:	6802      	ldr	r2, [r0, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_ADC_MspInit+0x1c>)
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 80022b8:	4770      	bx	lr
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40012400 	.word	0x40012400
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_ADC_MspDeInit+0x24>)
 80022c6:	6802      	ldr	r2, [r0, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d10c      	bne.n	80022e6 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_ADC_MspDeInit+0x28>)
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 80022d6:	430a      	orrs	r2, r1
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80022da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022dc:	4001      	ands	r1, r0
 80022de:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80022e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e2:	4002      	ands	r2, r0
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80022e6:	4770      	bx	lr
 80022e8:	40012400 	.word	0x40012400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	fffffdff 	.word	0xfffffdff

080022f4 <SYS_InitMeasurement>:
void SYS_InitMeasurement(void)
{
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <SYS_InitMeasurement+0x8>)
 80022f6:	4a02      	ldr	r2, [pc, #8]	; (8002300 <SYS_InitMeasurement+0xc>)
 80022f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80022fa:	4770      	bx	lr
 80022fc:	200001b8 	.word	0x200001b8
 8002300:	40012400 	.word	0x40012400

08002304 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002304:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002306:	2208      	movs	r2, #8
 8002308:	2100      	movs	r1, #0
{
 800230a:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800230c:	4668      	mov	r0, sp
 800230e:	f00c fe64 	bl	800efda <memset>

  MX_ADC_Init();
 8002312:	f7ff ff99 	bl	8002248 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8002316:	2308      	movs	r3, #8
 8002318:	491f      	ldr	r1, [pc, #124]	; (8002398 <ADC_ReadChannels+0x94>)
 800231a:	684a      	ldr	r2, [r1, #4]
 800231c:	421a      	tst	r2, r3
 800231e:	d0fc      	beq.n	800231a <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	4d1e      	ldr	r5, [pc, #120]	; (800239c <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002324:	4c1e      	ldr	r4, [pc, #120]	; (80023a0 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8002326:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800232c:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 800232e:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002330:	0020      	movs	r0, r4
 8002332:	f002 fa89 	bl	8004848 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002338:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 800233a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800233e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 8002340:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002342:	f002 fa2d 	bl	80047a0 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002346:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002348:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800234a:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234c:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 800234e:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002350:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002352:	f002 fa25 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8002356:	2800      	cmp	r0, #0
 8002358:	d001      	beq.n	800235e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 800235a:	f000 f8cb 	bl	80024f4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800235e:	0020      	movs	r0, r4
 8002360:	f002 f972 	bl	8004648 <HAL_ADC_Start>
 8002364:	2800      	cmp	r0, #0
 8002366:	d001      	beq.n	800236c <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 8002368:	f000 f8c4 	bl	80024f4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800236c:	2101      	movs	r1, #1
 800236e:	0020      	movs	r0, r4
 8002370:	4249      	negs	r1, r1
 8002372:	f002 f9b3 	bl	80046dc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8002376:	0020      	movs	r0, r4
 8002378:	f002 f992 	bl	80046a0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 800237c:	0020      	movs	r0, r4
 800237e:	f002 fa0b 	bl	8004798 <HAL_ADC_GetValue>
 8002382:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc1);
 8002384:	0020      	movs	r0, r4
 8002386:	f002 f90b 	bl	80045a0 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 800238a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800238e:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8002390:	4013      	ands	r3, r2
 8002392:	636b      	str	r3, [r5, #52]	; 0x34
}
 8002394:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40007000 	.word	0x40007000
 800239c:	40021000 	.word	0x40021000
 80023a0:	200001b8 	.word	0x200001b8
 80023a4:	0007ffff 	.word	0x0007ffff
 80023a8:	00001001 	.word	0x00001001
 80023ac:	fffffdff 	.word	0xfffffdff

080023b0 <SYS_GetBatteryLevel>:
{
 80023b0:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80023b2:	4808      	ldr	r0, [pc, #32]	; (80023d4 <SYS_GetBatteryLevel+0x24>)
 80023b4:	f7ff ffa6 	bl	8002304 <ADC_ReadChannels>
 80023b8:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 80023ba:	2000      	movs	r0, #0
  if (measuredLevel == 0){
 80023bc:	4281      	cmp	r1, r0
 80023be:	d008      	beq.n	80023d2 <SYS_GetBatteryLevel+0x22>
	  tmp = ((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL));
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SYS_GetBatteryLevel+0x28>)
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <SYS_GetBatteryLevel+0x2c>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	4343      	muls	r3, r0
	  tmp += measuredLevel/2;
 80023c8:	0848      	lsrs	r0, r1, #1
 80023ca:	18c0      	adds	r0, r0, r3
    batteryLevelmV = (tmp / measuredLevel);
 80023cc:	f7fd fec2 	bl	8000154 <__udivsi3>
 80023d0:	b280      	uxth	r0, r0
}
 80023d2:	bd10      	pop	{r4, pc}
 80023d4:	44020000 	.word	0x44020000
 80023d8:	1ff80078 	.word	0x1ff80078
 80023dc:	00000bb8 	.word	0x00000bb8

080023e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023e0:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80023e2:	2001      	movs	r0, #1
 80023e4:	4a08      	ldr	r2, [pc, #32]	; (8002408 <MX_DMA_Init+0x28>)
 80023e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023e8:	4301      	orrs	r1, r0
 80023ea:	6311      	str	r1, [r2, #48]	; 0x30
 80023ec:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f0:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023f2:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023f6:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80023fa:	f002 fa75 	bl	80048e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80023fe:	200b      	movs	r0, #11
 8002400:	f002 fa9c 	bl	800493c <HAL_NVIC_EnableIRQ>

}
 8002404:	bd07      	pop	{r0, r1, r2, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000

0800240c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800240c:	b510      	push	{r4, lr}
 800240e:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002410:	2228      	movs	r2, #40	; 0x28
 8002412:	2100      	movs	r1, #0
 8002414:	a806      	add	r0, sp, #24
 8002416:	f00c fde0 	bl	800efda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800241a:	2214      	movs	r2, #20
 800241c:	2100      	movs	r1, #0
 800241e:	4668      	mov	r0, sp
 8002420:	f00c fddb 	bl	800efda <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002424:	2302      	movs	r3, #2
 8002426:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;//RCC_PLL_OFF;//RCC_PLL_ON;
 8002428:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;//RCC_PLLMUL_3;//RCC_PLLMUL_6;
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	031b      	lsls	r3, r3, #12
 800242e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002430:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002432:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002434:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002436:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002438:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800243a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800243c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800243e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f003 fafc 	bl	8005a3c <HAL_RCC_OscConfig>
 8002444:	2800      	cmp	r0, #0
 8002446:	d000      	beq.n	800244a <SystemClock_Config+0x3e>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8002448:	e7fe      	b.n	8002448 <SystemClock_Config+0x3c>
  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <SystemClock_Config+0x88>)
 800244e:	055b      	lsls	r3, r3, #21
 8002450:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002452:	430b      	orrs	r3, r1
 8002454:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <SystemClock_Config+0x8c>)
 8002458:	4910      	ldr	r1, [pc, #64]	; (800249c <SystemClock_Config+0x90>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4011      	ands	r1, r2
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	000a      	movs	r2, r1
 800246a:	4022      	ands	r2, r4
 800246c:	4221      	tst	r1, r4
 800246e:	d1fa      	bne.n	8002466 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002470:	230f      	movs	r3, #15
 8002472:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;//RCC_SYSCLKSOURCE_HSI;//RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	3b0c      	subs	r3, #12
 8002476:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002478:	23e0      	movs	r3, #224	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800247a:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800247c:	00db      	lsls	r3, r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800247e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002480:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002482:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002484:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002486:	f003 fd1f 	bl	8005ec8 <HAL_RCC_ClockConfig>
 800248a:	2800      	cmp	r0, #0
 800248c:	d000      	beq.n	8002490 <SystemClock_Config+0x84>
  while (1)
 800248e:	e7fe      	b.n	800248e <SystemClock_Config+0x82>
}
 8002490:	b012      	add	sp, #72	; 0x48
 8002492:	bd10      	pop	{r4, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	40007000 	.word	0x40007000
 800249c:	ffffe7ff 	.word	0xffffe7ff

080024a0 <main>:
{
 80024a0:	b510      	push	{r4, lr}
  HAL_Init();
 80024a2:	f001 fec5 	bl	8004230 <HAL_Init>
  SystemClock_Config();//SystemLowClock_Config();//SystemClock_Config();
 80024a6:	f7ff ffb1 	bl	800240c <SystemClock_Config>
  hwwdg.Instance = WWDG;
 80024aa:	4c10      	ldr	r4, [pc, #64]	; (80024ec <main+0x4c>)
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <main+0x50>)
  HAL_WWDG_Init(&hwwdg);
 80024ae:	0020      	movs	r0, r4
  hwwdg.Instance = WWDG;
 80024b0:	6023      	str	r3, [r4, #0]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	6123      	str	r3, [r4, #16]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80024b6:	3381      	adds	r3, #129	; 0x81
 80024b8:	33ff      	adds	r3, #255	; 0xff
 80024ba:	6063      	str	r3, [r4, #4]
  hwwdg.Init.Window = WWDG_CFR_W;
 80024bc:	3b02      	subs	r3, #2
 80024be:	3bff      	subs	r3, #255	; 0xff
 80024c0:	60a3      	str	r3, [r4, #8]
  hwwdg.Init.Counter = WWDG_CR_T;
 80024c2:	60e3      	str	r3, [r4, #12]
  HAL_WWDG_Init(&hwwdg);
 80024c4:	f005 f96c 	bl	80077a0 <HAL_WWDG_Init>
 MX_LoRaWAN_Init();
 80024c8:	f005 f984 	bl	80077d4 <MX_LoRaWAN_Init>
 TxAppInit();
 80024cc:	f001 faa4 	bl	8003a18 <TxAppInit>
    MX_LoRaWAN_Process();
 80024d0:	f005 f984 	bl	80077dc <MX_LoRaWAN_Process>
    if(getInterruptFlag() == 1)
 80024d4:	f001 f8c8 	bl	8003668 <getInterruptFlag>
 80024d8:	2801      	cmp	r0, #1
 80024da:	d103      	bne.n	80024e4 <main+0x44>
    	tratarInterrupcao();
 80024dc:	f001 f8f4 	bl	80036c8 <tratarInterrupcao>
    	resetInterruptFlag();
 80024e0:	f001 f8c8 	bl	8003674 <resetInterruptFlag>
    HAL_WWDG_Refresh(&hwwdg);
 80024e4:	0020      	movs	r0, r4
 80024e6:	f005 f970 	bl	80077ca <HAL_WWDG_Refresh>
    MX_LoRaWAN_Process();
 80024ea:	e7f1      	b.n	80024d0 <main+0x30>
 80024ec:	20000214 	.word	0x20000214
 80024f0:	40002c00 	.word	0x40002c00

080024f4 <Error_Handler>:
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <Error_Handler>
	...

080024f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024f8:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80024fa:	2500      	movs	r5, #0
{
 80024fc:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80024fe:	2214      	movs	r2, #20
 8002500:	2100      	movs	r1, #0
 8002502:	a801      	add	r0, sp, #4
 8002504:	f00c fd69 	bl	800efda <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8002508:	2228      	movs	r2, #40	; 0x28
 800250a:	0029      	movs	r1, r5
 800250c:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 800250e:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002510:	f00c fd63 	bl	800efda <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002514:	4c26      	ldr	r4, [pc, #152]	; (80025b0 <MX_RTC_Init+0xb8>)
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <MX_RTC_Init+0xbc>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002518:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 800251a:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800251c:	231f      	movs	r3, #31
 800251e:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <MX_RTC_Init+0xc0>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002522:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8002524:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002526:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002528:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800252a:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800252c:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800252e:	f003 ff45 	bl	80063bc <HAL_RTC_Init>
 8002532:	42a8      	cmp	r0, r5
 8002534:	d001      	beq.n	800253a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8002536:	f7ff ffdd 	bl	80024f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800253a:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800253c:	2200      	movs	r2, #0
 800253e:	0020      	movs	r0, r4
  sTime.Hours = 0;
 8002540:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002542:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 8002544:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002546:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002548:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800254a:	f003 ff9f 	bl	800648c <HAL_RTC_SetTime>
 800254e:	2800      	cmp	r0, #0
 8002550:	d001      	beq.n	8002556 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002552:	f7ff ffcf 	bl	80024f4 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002556:	466a      	mov	r2, sp
 8002558:	2301      	movs	r3, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;
 800255a:	2500      	movs	r5, #0
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800255c:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800255e:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 8002560:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 8002562:	70d5      	strb	r5, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002564:	4669      	mov	r1, sp
 8002566:	002a      	movs	r2, r5
 8002568:	0020      	movs	r0, r4
 800256a:	f004 f813 	bl	8006594 <HAL_RTC_SetDate>
 800256e:	42a8      	cmp	r0, r5
 8002570:	d001      	beq.n	8002576 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8002572:	f7ff ffbf 	bl	80024f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002576:	466b      	mov	r3, sp
 8002578:	831d      	strh	r5, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 800257a:	769d      	strb	r5, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 800257c:	23a0      	movs	r3, #160	; 0xa0
 800257e:	051b      	lsls	r3, r3, #20
 8002580:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8002582:	2319      	movs	r3, #25
 8002584:	221e      	movs	r2, #30
 8002586:	446b      	add	r3, sp
 8002588:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800258a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800258c:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 800258e:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002590:	0020      	movs	r0, r4
 8002592:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8002594:	9507      	str	r5, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002596:	9509      	str	r5, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002598:	950a      	str	r5, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800259a:	950b      	str	r5, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800259c:	950d      	str	r5, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 800259e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80025a0:	f004 f864 	bl	800666c <HAL_RTC_SetAlarm_IT>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d001      	beq.n	80025ac <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80025a8:	f7ff ffa4 	bl	80024f4 <Error_Handler>
  }

}
 80025ac:	b011      	add	sp, #68	; 0x44
 80025ae:	bd30      	pop	{r4, r5, pc}
 80025b0:	20000228 	.word	0x20000228
 80025b4:	40002800 	.word	0x40002800
 80025b8:	000003ff 	.word	0x000003ff

080025bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80025bc:	b510      	push	{r4, lr}
 80025be:	0004      	movs	r4, r0
 80025c0:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c2:	2234      	movs	r2, #52	; 0x34
 80025c4:	2100      	movs	r1, #0
 80025c6:	a801      	add	r0, sp, #4
 80025c8:	f00c fd07 	bl	800efda <memset>
  if (rtcHandle->Instance == RTC)
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_RTC_MspInit+0x50>)
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d118      	bne.n	8002606 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80025d4:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	a801      	add	r0, sp, #4
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80025d8:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025da:	33fc      	adds	r3, #252	; 0xfc
 80025dc:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025de:	f003 fa2d 	bl	8005a3c <HAL_RCC_OscConfig>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80025e6:	f7ff ff85 	bl	80024f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_RTC_MspInit+0x54>)
 80025ee:	02db      	lsls	r3, r3, #11
 80025f0:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80025f2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	0011      	movs	r1, r2
 80025fc:	f002 f974 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002600:	2002      	movs	r0, #2
 8002602:	f002 f99b 	bl	800493c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8002606:	b00e      	add	sp, #56	; 0x38
 8002608:	bd10      	pop	{r4, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	40002800 	.word	0x40002800
 8002610:	40021000 	.word	0x40021000

08002614 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8002614:	4b01      	ldr	r3, [pc, #4]	; (800261c <RTC_IF_GetTimerContext+0x8>)
 8002616:	6818      	ldr	r0, [r3, #0]
}
 8002618:	4770      	bx	lr
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	20000278 	.word	0x20000278

08002620 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8002620:	2003      	movs	r0, #3
 8002622:	4770      	bx	lr

08002624 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002624:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002626:	0e41      	lsrs	r1, r0, #25
 8002628:	227d      	movs	r2, #125	; 0x7d
 800262a:	2300      	movs	r3, #0
 800262c:	01c0      	lsls	r0, r0, #7
 800262e:	f7fd ff45 	bl	80004bc <__aeabi_uldivmod>
}
 8002632:	bd10      	pop	{r4, pc}

08002634 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8002634:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002636:	227d      	movs	r2, #125	; 0x7d
 8002638:	2300      	movs	r3, #0
 800263a:	2100      	movs	r1, #0
 800263c:	f7fd ff5e 	bl	80004fc <__aeabi_lmul>
 8002640:	0649      	lsls	r1, r1, #25
 8002642:	09c0      	lsrs	r0, r0, #7
 8002644:	4308      	orrs	r0, r1
}
 8002646:	bd10      	pop	{r4, pc}

08002648 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002648:	4806      	ldr	r0, [pc, #24]	; (8002664 <RTC_IF_StopTimer+0x1c>)
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <RTC_IF_StopTimer+0x20>)
 800264c:	6801      	ldr	r1, [r0, #0]
{
 800264e:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002650:	68ca      	ldr	r2, [r1, #12]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4313      	orrs	r3, r2
 8002656:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0049      	lsls	r1, r1, #1
 800265c:	f003 fde6 	bl	800622c <HAL_RTC_DeactivateAlarm>
}
 8002660:	2000      	movs	r0, #0
 8002662:	bd10      	pop	{r4, pc}
 8002664:	20000228 	.word	0x20000228
 8002668:	fffffe7f 	.word	0xfffffe7f

0800266c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800266e:	4e25      	ldr	r6, [pc, #148]	; (8002704 <RTC_GetCalendarValue+0x98>)
{
 8002670:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002672:	2200      	movs	r2, #0
 8002674:	0030      	movs	r0, r6
{
 8002676:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002678:	f004 f8d8 	bl	800682c <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800267c:	4f22      	ldr	r7, [pc, #136]	; (8002708 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800267e:	2200      	movs	r2, #0
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	0029      	movs	r1, r5
 8002684:	0030      	movs	r0, r6
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	f004 f8fa 	bl	8006880 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800268c:	2200      	movs	r2, #0
 800268e:	0021      	movs	r1, r4
 8002690:	0030      	movs	r0, r6
 8002692:	f004 f8cb 	bl	800682c <HAL_RTC_GetTime>
 8002696:	466b      	mov	r3, sp
 8002698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800269a:	889b      	ldrh	r3, [r3, #4]
 800269c:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800269e:	429a      	cmp	r2, r3
 80026a0:	d1ec      	bne.n	800267c <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80026a2:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80026a4:	78ea      	ldrb	r2, [r5, #3]
 80026a6:	4e19      	ldr	r6, [pc, #100]	; (800270c <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026a8:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80026aa:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80026ac:	400a      	ands	r2, r1
 80026ae:	4253      	negs	r3, r2
 80026b0:	415a      	adcs	r2, r3
 80026b2:	4253      	negs	r3, r2
 80026b4:	4a16      	ldr	r2, [pc, #88]	; (8002710 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026b6:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80026b8:	4013      	ands	r3, r2
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <RTC_GetCalendarValue+0xa8>)
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80026bc:	3603      	adds	r6, #3
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80026be:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026c0:	223d      	movs	r2, #61	; 0x3d
 80026c2:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80026c4:	007f      	lsls	r7, r7, #1
 80026c6:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026c8:	3201      	adds	r2, #1
 80026ca:	0fd0      	lsrs	r0, r2, #31
 80026cc:	1880      	adds	r0, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 80026ce:	78aa      	ldrb	r2, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80026d0:	08b6      	lsrs	r6, r6, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 80026d2:	3a01      	subs	r2, #1
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80026d4:	1040      	asrs	r0, r0, #1
 80026d6:	1996      	adds	r6, r2, r6
 80026d8:	1986      	adds	r6, r0, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80026da:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 80026dc:	480e      	ldr	r0, [pc, #56]	; (8002718 <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 80026de:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 80026e0:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80026e2:	20e1      	movs	r0, #225	; 0xe1
 80026e4:	7822      	ldrb	r2, [r4, #0]
 80026e6:	0100      	lsls	r0, r0, #4
 80026e8:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80026ea:	223c      	movs	r2, #60	; 0x3c
 80026ec:	7861      	ldrb	r1, [r4, #1]
 80026ee:	434a      	muls	r2, r1
 80026f0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80026f2:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80026f4:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80026f6:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	0280      	lsls	r0, r0, #10
 80026fc:	1ac0      	subs	r0, r0, r3
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <RTC_GetCalendarValue+0xb0>)
 8002700:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8002702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002704:	20000228 	.word	0x20000228
 8002708:	40002800 	.word	0x40002800
 800270c:	000005b5 	.word	0x000005b5
 8002710:	ffaaaab0 	.word	0xffaaaab0
 8002714:	0099aaa0 	.word	0x0099aaa0
 8002718:	00015180 	.word	0x00015180
 800271c:	000003ff 	.word	0x000003ff

08002720 <RTC_IF_SetTimerContext>:
{
 8002720:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8002722:	4c04      	ldr	r4, [pc, #16]	; (8002734 <RTC_IF_SetTimerContext+0x14>)
 8002724:	0020      	movs	r0, r4
 8002726:	1d21      	adds	r1, r4, #4
 8002728:	3018      	adds	r0, #24
 800272a:	f7ff ff9f 	bl	800266c <RTC_GetCalendarValue>
 800272e:	6020      	str	r0, [r4, #0]
}
 8002730:	bd10      	pop	{r4, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	20000278 	.word	0x20000278

08002738 <RTC_IF_GetTimerElapsedTime>:
{
 8002738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800273a:	4668      	mov	r0, sp
 800273c:	a901      	add	r1, sp, #4
 800273e:	f7ff ff95 	bl	800266c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8002742:	4b02      	ldr	r3, [pc, #8]	; (800274c <RTC_IF_GetTimerElapsedTime+0x14>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1ac0      	subs	r0, r0, r3
}
 8002748:	b007      	add	sp, #28
 800274a:	bd00      	pop	{pc}
 800274c:	20000278 	.word	0x20000278

08002750 <RTC_IF_StartTimer>:
{
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	b087      	sub	sp, #28
 8002754:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002756:	f7ff ffef 	bl	8002738 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800275a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800275c:	1a30      	subs	r0, r6, r0
 800275e:	2803      	cmp	r0, #3
 8002760:	d800      	bhi.n	8002764 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8002762:	2101      	movs	r1, #1
 8002764:	2002      	movs	r0, #2
 8002766:	f00b fe2f 	bl	800e3c8 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800276a:	f00b fe59 	bl	800e420 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <RTC_IF_StartTimer+0x114>)
 8002770:	795a      	ldrb	r2, [r3, #5]
 8002772:	791d      	ldrb	r5, [r3, #4]
 8002774:	9201      	str	r2, [sp, #4]
 8002776:	799a      	ldrb	r2, [r3, #6]
 8002778:	689f      	ldr	r7, [r3, #8]
 800277a:	9202      	str	r2, [sp, #8]
 800277c:	79da      	ldrb	r2, [r3, #7]
 800277e:	9203      	str	r2, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002780:	7e5a      	ldrb	r2, [r3, #25]
 8002782:	9204      	str	r2, [sp, #16]
 8002784:	7e9c      	ldrb	r4, [r3, #26]
 8002786:	7edb      	ldrb	r3, [r3, #27]
 8002788:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 800278a:	f7ff ff5d 	bl	8002648 <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <RTC_IF_StartTimer+0x118>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002790:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002792:	1bdf      	subs	r7, r3, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002794:	0d92      	lsrs	r2, r2, #22
 8002796:	18ba      	adds	r2, r7, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8002798:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 800279a:	4e34      	ldr	r6, [pc, #208]	; (800286c <RTC_IF_StartTimer+0x11c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800279c:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 800279e:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 80027a0:	42b3      	cmp	r3, r6
 80027a2:	d83f      	bhi.n	8002824 <RTC_IF_StartTimer+0xd4>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80027a4:	21e1      	movs	r1, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80027a6:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80027a8:	0109      	lsls	r1, r1, #4
 80027aa:	428b      	cmp	r3, r1
 80027ac:	d23f      	bcs.n	800282e <RTC_IF_StartTimer+0xde>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80027ae:	4669      	mov	r1, sp
 80027b0:	888e      	ldrh	r6, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80027b2:	2b3b      	cmp	r3, #59	; 0x3b
 80027b4:	d840      	bhi.n	8002838 <RTC_IF_StartTimer+0xe8>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80027b6:	0a97      	lsrs	r7, r2, #10
 80027b8:	02bc      	lsls	r4, r7, #10
 80027ba:	1b14      	subs	r4, r2, r4
 80027bc:	9a02      	ldr	r2, [sp, #8]
 80027be:	b2a4      	uxth	r4, r4
 80027c0:	18bf      	adds	r7, r7, r2
 80027c2:	18ff      	adds	r7, r7, r3
 80027c4:	b2bf      	uxth	r7, r7
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80027c6:	2f3b      	cmp	r7, #59	; 0x3b
 80027c8:	d83a      	bhi.n	8002840 <RTC_IF_StartTimer+0xf0>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80027ca:	2e3b      	cmp	r6, #59	; 0x3b
 80027cc:	d83d      	bhi.n	800284a <RTC_IF_StartTimer+0xfa>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80027ce:	2d17      	cmp	r5, #23
 80027d0:	d840      	bhi.n	8002854 <RTC_IF_StartTimer+0x104>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80027d2:	9b04      	ldr	r3, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 80027d4:	9a05      	ldr	r2, [sp, #20]
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80027d6:	3b01      	subs	r3, #1
  if (RTC_DateStruct.Year % 4 == 0)
 80027d8:	0792      	lsls	r2, r2, #30
 80027da:	d140      	bne.n	800285e <RTC_IF_StartTimer+0x10e>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80027dc:	4a24      	ldr	r2, [pc, #144]	; (8002870 <RTC_IF_StartTimer+0x120>)
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80027de:	5cd1      	ldrb	r1, [r2, r3]
 80027e0:	4288      	cmp	r0, r1
 80027e2:	d902      	bls.n	80027ea <RTC_IF_StartTimer+0x9a>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80027e4:	f7fd fe26 	bl	8000434 <__aeabi_idivmod>
 80027e8:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <RTC_IF_StartTimer+0x118>)
 80027ec:	4921      	ldr	r1, [pc, #132]	; (8002874 <RTC_IF_StartTimer+0x124>)
 80027ee:	1b1c      	subs	r4, r3, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80027f0:	23a0      	movs	r3, #160	; 0xa0
 80027f2:	051b      	lsls	r3, r3, #20
 80027f4:	618b      	str	r3, [r1, #24]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80027f6:	1c4b      	adds	r3, r1, #1
 80027f8:	77d8      	strb	r0, [r3, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80027fa:	9b03      	ldr	r3, [sp, #12]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80027fc:	604c      	str	r4, [r1, #4]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80027fe:	70cb      	strb	r3, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002800:	2400      	movs	r4, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002802:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002804:	0022      	movs	r2, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002806:	005b      	lsls	r3, r3, #1
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002808:	481b      	ldr	r0, [pc, #108]	; (8002878 <RTC_IF_StartTimer+0x128>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800280a:	708f      	strb	r7, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800280c:	704e      	strb	r6, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800280e:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002810:	61cc      	str	r4, [r1, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8002812:	614c      	str	r4, [r1, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002814:	624b      	str	r3, [r1, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002816:	60cc      	str	r4, [r1, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002818:	610c      	str	r4, [r1, #16]
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800281a:	f003 ff27 	bl	800666c <HAL_RTC_SetAlarm_IT>
}
 800281e:	0020      	movs	r0, r4
 8002820:	b007      	add	sp, #28
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8002824:	4915      	ldr	r1, [pc, #84]	; (800287c <RTC_IF_StartTimer+0x12c>)
    rtcAlarmDays++;
 8002826:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8002828:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 800282a:	b280      	uxth	r0, r0
 800282c:	e7b8      	b.n	80027a0 <RTC_IF_StartTimer+0x50>
    timeoutValue -= SECONDS_IN_1HOUR;
 800282e:	4c14      	ldr	r4, [pc, #80]	; (8002880 <RTC_IF_StartTimer+0x130>)
    rtcAlarmHours++;
 8002830:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8002832:	191b      	adds	r3, r3, r4
    rtcAlarmHours++;
 8002834:	b2ad      	uxth	r5, r5
 8002836:	e7b8      	b.n	80027aa <RTC_IF_StartTimer+0x5a>
    rtcAlarmMinutes++;
 8002838:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800283a:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 800283c:	b2b6      	uxth	r6, r6
 800283e:	e7b8      	b.n	80027b2 <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002840:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmMinutes++;
 8002842:	3601      	adds	r6, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002844:	b2bf      	uxth	r7, r7
    rtcAlarmMinutes++;
 8002846:	b2b6      	uxth	r6, r6
 8002848:	e7bd      	b.n	80027c6 <RTC_IF_StartTimer+0x76>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800284a:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmHours++;
 800284c:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800284e:	b2b6      	uxth	r6, r6
    rtcAlarmHours++;
 8002850:	b2ad      	uxth	r5, r5
 8002852:	e7ba      	b.n	80027ca <RTC_IF_StartTimer+0x7a>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002854:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8002856:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002858:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800285a:	b280      	uxth	r0, r0
 800285c:	e7b7      	b.n	80027ce <RTC_IF_StartTimer+0x7e>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <RTC_IF_StartTimer+0x134>)
 8002860:	e7bd      	b.n	80027de <RTC_IF_StartTimer+0x8e>
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	20000278 	.word	0x20000278
 8002868:	000003ff 	.word	0x000003ff
 800286c:	0001517f 	.word	0x0001517f
 8002870:	0800f190 	.word	0x0800f190
 8002874:	2000024c 	.word	0x2000024c
 8002878:	20000228 	.word	0x20000228
 800287c:	fffeae80 	.word	0xfffeae80
 8002880:	fffff1f0 	.word	0xfffff1f0
 8002884:	0800f184 	.word	0x0800f184

08002888 <RTC_IF_GetTime>:
{
 8002888:	b530      	push	{r4, r5, lr}
 800288a:	b087      	sub	sp, #28
 800288c:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800288e:	a901      	add	r1, sp, #4
 8002890:	4668      	mov	r0, sp
 8002892:	f7ff feeb 	bl	800266c <RTC_GetCalendarValue>
 8002896:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002898:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800289a:	227d      	movs	r2, #125	; 0x7d
 800289c:	2300      	movs	r3, #0
 800289e:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80028a0:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80028a2:	f7fd fe2b 	bl	80004fc <__aeabi_lmul>
 80028a6:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 80028a8:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 80028aa:	0aa0      	lsrs	r0, r4, #10
}
 80028ac:	b007      	add	sp, #28
 80028ae:	bd30      	pop	{r4, r5, pc}

080028b0 <RTC_IF_BkUp_Write_Seconds>:
{
 80028b0:	b510      	push	{r4, lr}
 80028b2:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80028b4:	2100      	movs	r1, #0
 80028b6:	4802      	ldr	r0, [pc, #8]	; (80028c0 <RTC_IF_BkUp_Write_Seconds+0x10>)
 80028b8:	f004 f804 	bl	80068c4 <HAL_RTCEx_BKUPWrite>
}
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000228 	.word	0x20000228

080028c4 <RTC_IF_BkUp_Write_SubSeconds>:
{
 80028c4:	b510      	push	{r4, lr}
 80028c6:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80028c8:	2101      	movs	r1, #1
 80028ca:	4802      	ldr	r0, [pc, #8]	; (80028d4 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 80028cc:	f003 fffa 	bl	80068c4 <HAL_RTCEx_BKUPWrite>
}
 80028d0:	bd10      	pop	{r4, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	20000228 	.word	0x20000228

080028d8 <RTC_IF_BkUp_Read_Seconds>:
{
 80028d8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80028da:	2100      	movs	r1, #0
 80028dc:	4801      	ldr	r0, [pc, #4]	; (80028e4 <RTC_IF_BkUp_Read_Seconds+0xc>)
 80028de:	f003 fff7 	bl	80068d0 <HAL_RTCEx_BKUPRead>
}
 80028e2:	bd10      	pop	{r4, pc}
 80028e4:	20000228 	.word	0x20000228

080028e8 <RTC_IF_BkUp_Read_SubSeconds>:
{
 80028e8:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80028ea:	2101      	movs	r1, #1
 80028ec:	4801      	ldr	r0, [pc, #4]	; (80028f4 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80028ee:	f003 ffef 	bl	80068d0 <HAL_RTCEx_BKUPRead>
}
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	20000228 	.word	0x20000228

080028f8 <RTC_IF_Init>:
{
 80028f8:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80028fa:	4c11      	ldr	r4, [pc, #68]	; (8002940 <RTC_IF_Init+0x48>)
{
 80028fc:	b089      	sub	sp, #36	; 0x24
  if (RTC_Initalized == false)
 80028fe:	7823      	ldrb	r3, [r4, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002904:	3320      	adds	r3, #32
 8002906:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002908:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290a:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002910:	f003 fbc8 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 8002914:	2800      	cmp	r0, #0
 8002916:	d000      	beq.n	800291a <RTC_IF_Init+0x22>
      while (1);
 8002918:	e7fe      	b.n	8002918 <RTC_IF_Init+0x20>
    MX_RTC_Init();
 800291a:	f7ff fded 	bl	80024f8 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	4d08      	ldr	r5, [pc, #32]	; (8002944 <RTC_IF_Init+0x4c>)
 8002922:	0049      	lsls	r1, r1, #1
 8002924:	0028      	movs	r0, r5
 8002926:	f003 fc81 	bl	800622c <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800292a:	0028      	movs	r0, r5
 800292c:	f003 ffd6 	bl	80068dc <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8002930:	f7ff fef6 	bl	8002720 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8002934:	2301      	movs	r3, #1
 8002936:	7023      	strb	r3, [r4, #0]
}
 8002938:	2000      	movs	r0, #0
 800293a:	b009      	add	sp, #36	; 0x24
 800293c:	bd30      	pop	{r4, r5, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	20000274 	.word	0x20000274
 8002944:	20000228 	.word	0x20000228

08002948 <RTC_IF_GetTimerValue>:
{
 8002948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 800294a:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <RTC_IF_GetTimerValue+0x18>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4283      	cmp	r3, r0
 8002952:	d003      	beq.n	800295c <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002954:	4668      	mov	r0, sp
 8002956:	a901      	add	r1, sp, #4
 8002958:	f7ff fe88 	bl	800266c <RTC_GetCalendarValue>
}
 800295c:	b007      	add	sp, #28
 800295e:	bd00      	pop	{pc}
 8002960:	20000274 	.word	0x20000274

08002964 <RTC_IF_DelayMs>:
{
 8002964:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8002966:	227d      	movs	r2, #125	; 0x7d
 8002968:	2300      	movs	r3, #0
 800296a:	0e41      	lsrs	r1, r0, #25
 800296c:	01c0      	lsls	r0, r0, #7
 800296e:	f7fd fda5 	bl	80004bc <__aeabi_uldivmod>
 8002972:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002974:	f7ff ffe8 	bl	8002948 <RTC_IF_GetTimerValue>
 8002978:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800297a:	f7ff ffe5 	bl	8002948 <RTC_IF_GetTimerValue>
 800297e:	1b40      	subs	r0, r0, r5
 8002980:	42a0      	cmp	r0, r4
 8002982:	d300      	bcc.n	8002986 <RTC_IF_DelayMs+0x22>
}
 8002984:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	e7f7      	b.n	800297a <RTC_IF_DelayMs+0x16>

0800298a <HAL_RTC_AlarmAEventCallback>:
{
 800298a:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 800298c:	f00c f946 	bl	800ec1c <UTIL_TIMER_IRQ_Handler>
}
 8002990:	bd10      	pop	{r4, pc}

08002992 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002992:	4770      	bx	lr

08002994 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002994:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002996:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800299a:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 800299c:	f001 fb70 	bl	8004080 <SX1262DVK1CAS_RADIO_IoDeInit>
//  HAL_ADC_MspDeInit(&hadc1);
  //APP_LOG(TS_ON, VLEVEL_M, "\r\nAntes de SystemLowClock_Config\r\n");
  //SystemClock_Config();
  //APP_LOG(TS_ON, VLEVEL_M, "\r\nDepois de SystemLowClock_Config\r\n");
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80029a0:	2304      	movs	r3, #4
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <PWR_EnterStopMode+0x24>)
 80029a4:	6811      	ldr	r1, [r2, #0]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029aa:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80029ae:	2101      	movs	r1, #1
 80029b0:	0008      	movs	r0, r1
 80029b2:	f002 ffaf 	bl	8005914 <HAL_PWR_EnterSTOPMode>
}
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	40007000 	.word	0x40007000

080029bc <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80029bc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029be:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80029c2:	b672      	cpsid	i
	//APP_LOG(TS_OFF, VLEVEL_M, "\nA\n");
  UTILS_ENTER_CRITICAL_SECTION();
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 1\r\n");
  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();//__HAL_RCC_MSI_ENABLE();//__HAL_RCC_HSI_ENABLE();
 80029c4:	2201      	movs	r2, #1
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <PWR_ExitStopMode+0x4c>)
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}//while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}//while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80029ce:	2204      	movs	r2, #4
 80029d0:	6819      	ldr	r1, [r3, #0]
 80029d2:	4211      	tst	r1, r2
 80029d4:	d0fc      	beq.n	80029d0 <PWR_ExitStopMode+0x14>
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 2\r\n");
  //__HAL_RCC_MSI_ENABLE();
  //while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 3\r\n");
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	0452      	lsls	r2, r2, #17
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	0492      	lsls	r2, r2, #18
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	4211      	tst	r1, r2
 80029e8:	d0fc      	beq.n	80029e4 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80029ea:	2203      	movs	r2, #3
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {};//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80029f0:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80029f2:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {};//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	400a      	ands	r2, r1
 80029f8:	2a0c      	cmp	r2, #12
 80029fa:	d1fb      	bne.n	80029f4 <PWR_ExitStopMode+0x38>

  //SystemClock_Config();
 // APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 4\r\n");
  /* initializes the peripherals */
  Sx_Board_IoInit();
 80029fc:	f001 fab2 	bl	8003f64 <SX1262DVK1CAS_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	f384 8810 	msr	PRIMASK, r4

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
  UTILS_EXIT_CRITICAL_SECTION();
  //APP_LOG(TS_OFF, VLEVEL_M, "\nB\n");
}
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	40021000 	.word	0x40021000

08002a0c <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002a0c:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2000      	movs	r0, #0
 8002a12:	f002 ff47 	bl	80058a4 <HAL_PWR_EnterSLEEPMode>
}
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <PWR_ExitSleepMode>:
 8002a18:	4770      	bx	lr

08002a1a <PWR_ExitOffMode>:
 8002a1a:	4770      	bx	lr

08002a1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_MspInit+0x28>)
 8002a20:	055b      	lsls	r3, r3, #21
 8002a22:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002a24:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002a2a:	f002 ff33 	bl	8005894 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8002a2e:	f002 ffb3 	bl	8005998 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002a32:	2308      	movs	r3, #8
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_MspInit+0x2c>)
 8002a36:	6811      	ldr	r1, [r2, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002a3c:	f002 ffa2 	bl	8005984 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a40:	bd10      	pop	{r4, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40022000 	.word	0x40022000

08002a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	0004      	movs	r4, r0
 8002a50:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a52:	2214      	movs	r2, #20
 8002a54:	2100      	movs	r1, #0
 8002a56:	a801      	add	r0, sp, #4
 8002a58:	f00c fabf 	bl	800efda <memset>
  if(hi2c->Instance==I2C1)
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_I2C_MspInit+0x50>)
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d119      	bne.n	8002a98 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	2102      	movs	r1, #2
 8002a66:	4c0e      	ldr	r4, [pc, #56]	; (8002aa0 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002a70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a72:	400b      	ands	r3, r1
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7c:	3bae      	subs	r3, #174	; 0xae
 8002a7e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	3b0f      	subs	r3, #15
 8002a82:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002a86:	3b02      	subs	r3, #2
 8002a88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f002 fa79 	bl	8004f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a92:	039b      	lsls	r3, r3, #14
 8002a94:	4313      	orrs	r3, r2
 8002a96:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a98:	b006      	add	sp, #24
 8002a9a:	bd10      	pop	{r4, pc}
 8002a9c:	40005400 	.word	0x40005400
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	50000400 	.word	0x50000400

08002aa8 <HAL_WWDG_MspInit>:
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
  if(hwwdg->Instance==WWDG)
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_WWDG_MspInit+0x18>)
 8002aaa:	6802      	ldr	r2, [r0, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d105      	bne.n	8002abc <HAL_WWDG_MspInit+0x14>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_WWDG_MspInit+0x1c>)
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8002abc:	4770      	bx	lr
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40002c00 	.word	0x40002c00
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ac8:	4770      	bx	lr

08002aca <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8002aca:	46c0      	nop			; (mov r8, r8)
  while (1)
 8002acc:	e7fd      	b.n	8002aca <HardFault_Handler>

08002ace <SVC_Handler>:
 8002ace:	4770      	bx	lr

08002ad0 <PendSV_Handler>:
 8002ad0:	4770      	bx	lr

08002ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad4:	f001 fbc0 	bl	8004258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad8:	bd10      	pop	{r4, pc}

08002ada <EXTI0_1_IRQHandler>:
 8002ada:	4770      	bx	lr

08002adc <EXTI2_3_IRQHandler>:
 8002adc:	4770      	bx	lr
	...

08002ae0 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8002ae0:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_15);
 8002ae2:	4809      	ldr	r0, [pc, #36]	; (8002b08 <EXTI4_15_IRQHandler+0x28>)
 8002ae4:	f002 f8ea 	bl	8004cbc <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_6);
 8002ae8:	4808      	ldr	r0, [pc, #32]	; (8002b0c <EXTI4_15_IRQHandler+0x2c>)
 8002aea:	f002 f8e7 	bl	8004cbc <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_7);
 8002aee:	4808      	ldr	r0, [pc, #32]	; (8002b10 <EXTI4_15_IRQHandler+0x30>)
 8002af0:	f002 f8e4 	bl	8004cbc <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_8);
 8002af4:	4807      	ldr	r0, [pc, #28]	; (8002b14 <EXTI4_15_IRQHandler+0x34>)
 8002af6:	f002 f8e1 	bl	8004cbc <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_13);
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <EXTI4_15_IRQHandler+0x38>)
 8002afc:	f002 f8de 	bl	8004cbc <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_14);
 8002b00:	4806      	ldr	r0, [pc, #24]	; (8002b1c <EXTI4_15_IRQHandler+0x3c>)
 8002b02:	f002 f8db 	bl	8004cbc <HAL_EXTI_IRQHandler>
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
#endif
}
 8002b06:	bd10      	pop	{r4, pc}
 8002b08:	200005e4 	.word	0x200005e4
 8002b0c:	2000044c 	.word	0x2000044c
 8002b10:	2000043c 	.word	0x2000043c
 8002b14:	20000444 	.word	0x20000444
 8002b18:	20000434 	.word	0x20000434
 8002b1c:	2000042c 	.word	0x2000042c

08002b20 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002b20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
	  HAL_DMA_IRQHandler(husart2.hdmatx);
 8002b22:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002b24:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002b26:	f002 f81e 	bl	8004b66 <HAL_DMA_IRQHandler>
  //HAL_DMA_IRQHandler(&hdma_rx);
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002b2a:	bd10      	pop	{r4, pc}
 8002b2c:	20000548 	.word	0x20000548

08002b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8002b32:	4802      	ldr	r0, [pc, #8]	; (8002b3c <USART2_IRQHandler+0xc>)
 8002b34:	f004 f9a2 	bl	8006e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20000548 	.word	0x20000548

08002b40 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8002b40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002b42:	4802      	ldr	r0, [pc, #8]	; (8002b4c <RTC_IRQHandler+0xc>)
 8002b44:	f003 fbd4 	bl	80062f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	20000228 	.word	0x20000228

08002b50 <PVD_IRQHandler>:

/* USER CODE BEGIN 1 */
void PVD_IRQHandler(void){
 8002b50:	b510      	push	{r4, lr}
	HAL_PWR_PVD_IRQHandler();
 8002b52:	f002 ff09 	bl	8005968 <HAL_PWR_PVD_IRQHandler>
}
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8002b58:	b40c      	push	{r2, r3}
 8002b5a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002b5c:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8002b5e:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8002b62:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002b64:	f00b fd3a 	bl	800e5dc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002b68:	b003      	add	sp, #12
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	b002      	add	sp, #8
 8002b6e:	4718      	bx	r3
 8002b70:	0800f1f4 	.word	0x0800f1f4

08002b74 <TimestampNow>:
{
 8002b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002b76:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8002b78:	ae02      	add	r6, sp, #8
 8002b7a:	0030      	movs	r0, r6
{
 8002b7c:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002b7e:	f00b fcef 	bl	800e560 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002b82:	2204      	movs	r2, #4
 8002b84:	5eb3      	ldrsh	r3, [r6, r2]
 8002b86:	2110      	movs	r1, #16
 8002b88:	0020      	movs	r0, r4
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <TimestampNow+0x2c>)
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	9b02      	ldr	r3, [sp, #8]
 8002b90:	f7ff ffe2 	bl	8002b58 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8002b94:	0020      	movs	r0, r4
 8002b96:	f7fd fab7 	bl	8000108 <strlen>
 8002b9a:	8028      	strh	r0, [r5, #0]
}
 8002b9c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	0800f1f4 	.word	0x0800f1f4

08002ba4 <SystemApp_Init>:
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002baa:	2604      	movs	r6, #4
{
 8002bac:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8002bae:	f00b fefd 	bl	800e9ac <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	a807      	add	r0, sp, #28
 8002bb8:	f00c fa0f 	bl	800efda <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bbc:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	4c2b      	ldr	r4, [pc, #172]	; (8002c6c <SystemApp_Init+0xc8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	432b      	orrs	r3, r5
 8002bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	402b      	ands	r3, r5
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bd6:	433b      	orrs	r3, r7
 8002bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bdc:	403b      	ands	r3, r7
 8002bde:	9302      	str	r3, [sp, #8]
 8002be0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002be4:	4333      	orrs	r3, r6
 8002be6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bea:	4033      	ands	r3, r6
 8002bec:	9303      	str	r3, [sp, #12]
 8002bee:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	9304      	str	r3, [sp, #16]
 8002bfc:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <SystemApp_Init+0xcc>)
 8002c04:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f002 f9bb 	bl	8004f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <SystemApp_Init+0xd0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	a905      	add	r1, sp, #20
 8002c0e:	481a      	ldr	r0, [pc, #104]	; (8002c78 <SystemApp_Init+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002c10:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f002 f9b5 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c16:	a905      	add	r1, sp, #20
 8002c18:	4818      	ldr	r0, [pc, #96]	; (8002c7c <SystemApp_Init+0xd8>)
 8002c1a:	f002 f9b1 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c1e:	a905      	add	r1, sp, #20
 8002c20:	4817      	ldr	r0, [pc, #92]	; (8002c80 <SystemApp_Init+0xdc>)
 8002c22:	f002 f9ad 	bl	8004f80 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002c26:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c2a:	43ab      	bics	r3, r5
 8002c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002c2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c30:	43bb      	bics	r3, r7
 8002c32:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c36:	43b3      	bics	r3, r6
 8002c38:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002c3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
  UTIL_ADV_TRACE_Init();
 8002c40:	f00c f87e 	bl	800ed40 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002c44:	480f      	ldr	r0, [pc, #60]	; (8002c84 <SystemApp_Init+0xe0>)
 8002c46:	f00c f89d 	bl	800ed84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002c4a:	0028      	movs	r0, r5
 8002c4c:	f00c f8a0 	bl	800ed90 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002c50:	f7ff fb50 	bl	80022f4 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8002c54:	f001 fac2 	bl	80041dc <SX1262DVK1CAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002c58:	f001 f984 	bl	8003f64 <SX1262DVK1CAS_RADIO_IoInit>
  UTIL_LPM_Init();
 8002c5c:	f00b fbaa 	bl	800e3b4 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002c60:	0029      	movs	r1, r5
 8002c62:	0028      	movs	r0, r5
 8002c64:	f00b fbc6 	bl	800e3f4 <UTIL_LPM_SetOffMode>
}
 8002c68:	b00b      	add	sp, #44	; 0x2c
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	00009fff 	.word	0x00009fff
 8002c74:	0000ffff 	.word	0x0000ffff
 8002c78:	50000400 	.word	0x50000400
 8002c7c:	50000800 	.word	0x50000800
 8002c80:	50001c00 	.word	0x50001c00
 8002c84:	08002b75 	.word	0x08002b75

08002c88 <UTIL_SEQ_Idle>:
{
 8002c88:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8002c8a:	f00b fbdd 	bl	800e448 <UTIL_LPM_EnterLowPower>
}
 8002c8e:	bd10      	pop	{r4, pc}

08002c90 <GetBatteryLevel>:
{
 8002c90:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002c92:	f7ff fb8d 	bl	80023b0 <SYS_GetBatteryLevel>
  batteryLevel = batteryLevelmV/100;
 8002c96:	2164      	movs	r1, #100	; 0x64
 8002c98:	f7fd fa5c 	bl	8000154 <__udivsi3>
 8002c9c:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <GetBatteryLevel+0x20>)
 8002ca4:	9400      	str	r4, [sp, #0]
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f00c f8ba 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002cac:	0020      	movs	r0, r4
 8002cae:	bd16      	pop	{r1, r2, r4, pc}
 8002cb0:	0800f1fd 	.word	0x0800f1fd

08002cb4 <GetTemperatureLevel>:
}
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	4770      	bx	lr

08002cb8 <GetUniqueId>:
void GetUniqueId(uint8_t *id){
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	1e04      	subs	r4, r0, #0
  if(id == NULL){
 8002cbc:	d016      	beq.n	8002cec <GetUniqueId+0x34>
  uid.words[0] = HAL_GetUIDw0();
 8002cbe:	f001 fad7 	bl	8004270 <HAL_GetUIDw0>
 8002cc2:	0005      	movs	r5, r0
  uid.words[1] = HAL_GetUIDw1();
 8002cc4:	f001 fada 	bl	800427c <HAL_GetUIDw1>
  uid.words[2] = HAL_GetUIDw2();
 8002cc8:	f001 fade 	bl	8004288 <HAL_GetUIDw2>
  id[0] = uid.words[0] >> 24;
 8002ccc:	0e2b      	lsrs	r3, r5, #24
 8002cce:	7023      	strb	r3, [r4, #0]
  id[1] = uid.words[0] >> 16;
 8002cd0:	0c2b      	lsrs	r3, r5, #16
 8002cd2:	7063      	strb	r3, [r4, #1]
  id[2] = uid.words[0] >> 8;
 8002cd4:	0a2b      	lsrs	r3, r5, #8
 8002cd6:	70a3      	strb	r3, [r4, #2]
  id[4] = devaddr >> 24;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <GetUniqueId+0x38>)
  id[3] = uid.words[0];
 8002cda:	70e5      	strb	r5, [r4, #3]
  id[4] = devaddr >> 24;
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0e1a      	lsrs	r2, r3, #24
 8002ce0:	7122      	strb	r2, [r4, #4]
  id[5] = devaddr >> 16;
 8002ce2:	0c1a      	lsrs	r2, r3, #16
 8002ce4:	7162      	strb	r2, [r4, #5]
  id[6] = devaddr >> 8;
 8002ce6:	0a1a      	lsrs	r2, r3, #8
 8002ce8:	71a2      	strb	r2, [r4, #6]
  id[7] = devaddr;
 8002cea:	71e3      	strb	r3, [r4, #7]
}
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000294 	.word	0x20000294

08002cf4 <SetDevAddr>:
	devaddr = daddr;
 8002cf4:	4b01      	ldr	r3, [pc, #4]	; (8002cfc <SetDevAddr+0x8>)
 8002cf6:	6018      	str	r0, [r3, #0]
}
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	20000294 	.word	0x20000294

08002d00 <GetDevAddr>:
	return devaddr;
 8002d00:	4b01      	ldr	r3, [pc, #4]	; (8002d08 <GetDevAddr+0x8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
}
 8002d04:	4770      	bx	lr
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	20000294 	.word	0x20000294

08002d0c <UTIL_ADV_TRACE_PreSendHook>:
{
 8002d0c:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2004      	movs	r0, #4
 8002d12:	f00b fb59 	bl	800e3c8 <UTIL_LPM_SetStopMode>
}
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002d18:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2004      	movs	r0, #4
 8002d1e:	f00b fb53 	bl	800e3c8 <UTIL_LPM_SetStopMode>
}
 8002d22:	bd10      	pop	{r4, pc}

08002d24 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002d24:	2000      	movs	r0, #0
 8002d26:	4770      	bx	lr

08002d28 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8002d28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002d2a:	f7ff fe0d 	bl	8002948 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002d2e:	bd10      	pop	{r4, pc}

08002d30 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002d30:	b507      	push	{r0, r1, r2, lr}
 8002d32:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002d34:	9801      	ldr	r0, [sp, #4]
 8002d36:	f7ff fe15 	bl	8002964 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002d3a:	bd07      	pop	{r0, r1, r2, pc}

08002d3c <OnP2PRxDone>:
}

/*
 * Callback de Recepcao P2P *nao usado
 */
static void OnP2PRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 8002d3c:	b510      	push	{r4, lr}
  //APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
  //APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
  Radio.Sleep();
 8002d3e:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <OnP2PRxDone+0xc>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	4798      	blx	r3
}
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	0800fc84 	.word	0x0800fc84

08002d4c <OnP2PRxTimeout>:
}

/*
 * Callback para timeout de recepcao P2P *nao usado
 */
static void OnP2PRxTimeout(void){
 8002d4c:	b510      	push	{r4, lr}
  //APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
  Radio.Sleep();
 8002d4e:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <OnP2PRxTimeout+0xc>)
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	4798      	blx	r3
}
 8002d54:	bd10      	pop	{r4, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	0800fc84 	.word	0x0800fc84

08002d5c <OnP2PRxError>:
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	f7ff fff5 	bl	8002d4c <OnP2PRxTimeout>
 8002d62:	bd10      	pop	{r4, pc}

08002d64 <OnTxData>:

/*
 * Callback para transmissao LoRaWAN finalizada
 */
static void OnTxData(LmHandlerTxParams_t *params){
	app.stt.lora_state = LORA_IDLE;
 8002d64:	2200      	movs	r2, #0
 8002d66:	4b01      	ldr	r3, [pc, #4]	; (8002d6c <OnTxData+0x8>)
 8002d68:	719a      	strb	r2, [r3, #6]
}
 8002d6a:	4770      	bx	lr
 8002d6c:	20000038 	.word	0x20000038

08002d70 <OnJoinRequest>:
/*
 * Callback para Join LoRaWAN *nao usado
 */
static void OnJoinRequest(LmHandlerJoinParams_t *joinParams){

}
 8002d70:	4770      	bx	lr
	...

08002d74 <ReadInput4>:
void ReadInput4(void){
 8002d74:	b510      	push	{r4, lr}
	HAL_EXTI_ClearPending(&hApp_DIO_exti[1], EXTI_TRIGGER_RISING_FALLING);
 8002d76:	4803      	ldr	r0, [pc, #12]	; (8002d84 <ReadInput4+0x10>)
 8002d78:	2103      	movs	r1, #3
 8002d7a:	3008      	adds	r0, #8
 8002d7c:	f001 ffb0 	bl	8004ce0 <HAL_EXTI_ClearPending>
}
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	2000042c 	.word	0x2000042c

08002d88 <ReadInput1>:
	flagInterrupt = 1;
 8002d88:	2201      	movs	r2, #1
void ReadInput1(void){
 8002d8a:	b510      	push	{r4, lr}
	flagInterrupt = 1;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <ReadInput1+0x14>)
	HAL_EXTI_ClearPending(&hApp_DIO_exti[0], EXTI_TRIGGER_RISING_FALLING);
 8002d8e:	2103      	movs	r1, #3
 8002d90:	4803      	ldr	r0, [pc, #12]	; (8002da0 <ReadInput1+0x18>)
	flagInterrupt = 1;
 8002d92:	601a      	str	r2, [r3, #0]
	HAL_EXTI_ClearPending(&hApp_DIO_exti[0], EXTI_TRIGGER_RISING_FALLING);
 8002d94:	f001 ffa4 	bl	8004ce0 <HAL_EXTI_ClearPending>
}
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	20000424 	.word	0x20000424
 8002da0:	2000042c 	.word	0x2000042c

08002da4 <OnP2PTxTimeout>:
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8002da4:	2201      	movs	r2, #1
static void OnP2PTxTimeout(void){
 8002da6:	b510      	push	{r4, lr}
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8002da8:	0010      	movs	r0, r2
 8002daa:	2100      	movs	r1, #0
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <OnP2PTxTimeout+0x1c>)
 8002dae:	f00c f837 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Sleep();
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <OnP2PTxTimeout+0x20>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	4798      	blx	r3
	app.stt.lora_state = LORA_IDLE;
 8002db8:	2200      	movs	r2, #0
 8002dba:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <OnP2PTxTimeout+0x24>)
 8002dbc:	719a      	strb	r2, [r3, #6]
}
 8002dbe:	bd10      	pop	{r4, pc}
 8002dc0:	0800f208 	.word	0x0800f208
 8002dc4:	0800fc84 	.word	0x0800fc84
 8002dc8:	20000038 	.word	0x20000038

08002dcc <OnRxData>:
	APP_LOG(TS_OFF, VLEVEL_L, "Downlink recebido. Rssi: %d\r\n", params->Rssi);
 8002dcc:	2303      	movs	r3, #3
static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params){
 8002dce:	b507      	push	{r0, r1, r2, lr}
	APP_LOG(TS_OFF, VLEVEL_L, "Downlink recebido. Rssi: %d\r\n", params->Rssi);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	56cb      	ldrsb	r3, [r1, r3]
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	0011      	movs	r1, r2
 8002dda:	4b02      	ldr	r3, [pc, #8]	; (8002de4 <OnRxData+0x18>)
 8002ddc:	f00c f820 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002de0:	bd07      	pop	{r0, r1, r2, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	0800f216 	.word	0x0800f216

08002de8 <OnMacProcessNotify>:

/*
 * Callback para interrupcoes LoRaWAN
 */
static void OnMacProcessNotify(void){
 8002de8:	b510      	push	{r4, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002dea:	2100      	movs	r1, #0
 8002dec:	2001      	movs	r0, #1
 8002dee:	f00b fd1f 	bl	800e830 <UTIL_SEQ_SetTask>
}
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <OnP2PTxDone>:
static void OnP2PTxDone(void){
 8002df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8002df6:	2201      	movs	r2, #1
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <OnP2PTxDone+0x48>)
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	f00c f80f 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  app.stt.tx_cnt++;
 8002e02:	4c0f      	ldr	r4, [pc, #60]	; (8002e40 <OnP2PTxDone+0x4c>)
 8002e04:	4d0f      	ldr	r5, [pc, #60]	; (8002e44 <OnP2PTxDone+0x50>)
 8002e06:	8863      	ldrh	r3, [r4, #2]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	8063      	strh	r3, [r4, #2]
  if(app.stt.tx_cnt >= SEND_TIMES){
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <OnP2PTxDone+0x2a>
	Radio.Sleep();
 8002e12:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	4798      	blx	r3
	app.stt.lora_state = LORA_IDLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	71a3      	strb	r3, [r4, #6]
}
 8002e1c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	Radio.SetChannel(P2P_RF_FREQUENCY);
 8002e1e:	68eb      	ldr	r3, [r5, #12]
 8002e20:	4809      	ldr	r0, [pc, #36]	; (8002e48 <OnP2PTxDone+0x54>)
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	4798      	blx	r3
	Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <OnP2PTxDone+0x58>)
 8002e28:	4809      	ldr	r0, [pc, #36]	; (8002e50 <OnP2PTxDone+0x5c>)
 8002e2a:	8819      	ldrh	r1, [r3, #0]
 8002e2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e2e:	3902      	subs	r1, #2
 8002e30:	b2c9      	uxtb	r1, r1
 8002e32:	3002      	adds	r0, #2
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	4798      	blx	r3
}
 8002e38:	e7f0      	b.n	8002e1c <OnP2PTxDone+0x28>
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	0800f234 	.word	0x0800f234
 8002e40:	20000038 	.word	0x20000038
 8002e44:	0800fc84 	.word	0x0800fc84
 8002e48:	3689cac0 	.word	0x3689cac0
 8002e4c:	20000036 	.word	0x20000036
 8002e50:	200003a4 	.word	0x200003a4

08002e54 <SendTxData>:
static void SendTxData(void){
 8002e54:	b507      	push	{r0, r1, r2, lr}
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002e56:	2100      	movs	r1, #0
	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)){
 8002e58:	4806      	ldr	r0, [pc, #24]	; (8002e74 <SendTxData+0x20>)
 8002e5a:	000b      	movs	r3, r1
 8002e5c:	aa01      	add	r2, sp, #4
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002e5e:	9101      	str	r1, [sp, #4]
	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)){
 8002e60:	f005 fca2 	bl	80087a8 <LmHandlerSend>
 8002e64:	1e01      	subs	r1, r0, #0
 8002e66:	d104      	bne.n	8002e72 <SendTxData+0x1e>
		APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <SendTxData+0x24>)
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	f00b ffd7 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 8002e72:	bd07      	pop	{r0, r1, r2, pc}
 8002e74:	20000000 	.word	0x20000000
 8002e78:	0800f23f 	.word	0x0800f23f

08002e7c <FXOS8700CQStandby>:
{
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002e7e:	27fa      	movs	r7, #250	; 0xfa
 8002e80:	2617      	movs	r6, #23
 8002e82:	2401      	movs	r4, #1
{
 8002e84:	0005      	movs	r5, r0
 8002e86:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002e88:	446e      	add	r6, sp
 8002e8a:	007f      	lsls	r7, r7, #1
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	222a      	movs	r2, #42	; 0x2a
 8002e90:	213c      	movs	r1, #60	; 0x3c
 8002e92:	9702      	str	r7, [sp, #8]
 8002e94:	9401      	str	r4, [sp, #4]
 8002e96:	9600      	str	r6, [sp, #0]
 8002e98:	f002 fc1a 	bl	80056d0 <HAL_I2C_Mem_Read>
	CTRL_REG1_Data = CTRL_REG1_Data & ~(0x01); // Limpar o bit Active 0x01
 8002e9c:	7833      	ldrb	r3, [r6, #0]
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002e9e:	222a      	movs	r2, #42	; 0x2a
	CTRL_REG1_Data = CTRL_REG1_Data & ~(0x01); // Limpar o bit Active 0x01
 8002ea0:	43a3      	bics	r3, r4
 8002ea2:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002ea4:	213c      	movs	r1, #60	; 0x3c
 8002ea6:	0023      	movs	r3, r4
 8002ea8:	0028      	movs	r0, r5
 8002eaa:	9702      	str	r7, [sp, #8]
 8002eac:	9401      	str	r4, [sp, #4]
 8002eae:	9600      	str	r6, [sp, #0]
 8002eb0:	f002 fb30 	bl	8005514 <HAL_I2C_Mem_Write>
}
 8002eb4:	b007      	add	sp, #28
 8002eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eb8 <FXOS8700CQActive>:
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002eba:	27fa      	movs	r7, #250	; 0xfa
 8002ebc:	2617      	movs	r6, #23
 8002ebe:	2401      	movs	r4, #1
{
 8002ec0:	0005      	movs	r5, r0
 8002ec2:	b087      	sub	sp, #28
  HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002ec4:	446e      	add	r6, sp
 8002ec6:	007f      	lsls	r7, r7, #1
 8002ec8:	0023      	movs	r3, r4
 8002eca:	222a      	movs	r2, #42	; 0x2a
 8002ecc:	213c      	movs	r1, #60	; 0x3c
 8002ece:	9702      	str	r7, [sp, #8]
 8002ed0:	9401      	str	r4, [sp, #4]
 8002ed2:	9600      	str	r6, [sp, #0]
 8002ed4:	f002 fbfc 	bl	80056d0 <HAL_I2C_Mem_Read>
  CTRL_REG1_Data = CTRL_REG1_Data | 0x01; // Limpar o bit Active
 8002ed8:	7833      	ldrb	r3, [r6, #0]
  HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002eda:	222a      	movs	r2, #42	; 0x2a
  CTRL_REG1_Data = CTRL_REG1_Data | 0x01; // Limpar o bit Active
 8002edc:	4323      	orrs	r3, r4
 8002ede:	7033      	strb	r3, [r6, #0]
  HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002ee0:	213c      	movs	r1, #60	; 0x3c
 8002ee2:	0023      	movs	r3, r4
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	9702      	str	r7, [sp, #8]
 8002ee8:	9401      	str	r4, [sp, #4]
 8002eea:	9600      	str	r6, [sp, #0]
 8002eec:	f002 fb12 	bl	8005514 <HAL_I2C_Mem_Write>
}
 8002ef0:	b007      	add	sp, #28
 8002ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef4 <FXOS8700CQReset>:
{
 8002ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t value = 0x40;
 8002ef6:	2617      	movs	r6, #23
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8002ef8:	27fa      	movs	r7, #250	; 0xfa
 8002efa:	2501      	movs	r5, #1
	uint8_t value = 0x40;
 8002efc:	2340      	movs	r3, #64	; 0x40
{
 8002efe:	0004      	movs	r4, r0
 8002f00:	b087      	sub	sp, #28
	uint8_t value = 0x40;
 8002f02:	446e      	add	r6, sp
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8002f04:	007f      	lsls	r7, r7, #1
	uint8_t value = 0x40;
 8002f06:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8002f08:	222b      	movs	r2, #43	; 0x2b
 8002f0a:	002b      	movs	r3, r5
 8002f0c:	213c      	movs	r1, #60	; 0x3c
 8002f0e:	9702      	str	r7, [sp, #8]
 8002f10:	9501      	str	r5, [sp, #4]
 8002f12:	9600      	str	r6, [sp, #0]
 8002f14:	f002 fafe 	bl	8005514 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8002f18:	002b      	movs	r3, r5
 8002f1a:	225c      	movs	r2, #92	; 0x5c
 8002f1c:	213c      	movs	r1, #60	; 0x3c
 8002f1e:	0020      	movs	r0, r4
 8002f20:	9702      	str	r7, [sp, #8]
 8002f22:	9501      	str	r5, [sp, #4]
 8002f24:	9600      	str	r6, [sp, #0]
 8002f26:	f002 faf5 	bl	8005514 <HAL_I2C_Mem_Write>
}
 8002f2a:	b007      	add	sp, #28
 8002f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f30 <write_byte>:
void write_byte(uint8_t reg, uint8_t value) {
 8002f30:	b510      	push	{r4, lr}
    HAL_I2C_Mem_Write(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, reg, 1, &databyte, 1, i2c_timeout);
 8002f32:	23fa      	movs	r3, #250	; 0xfa
    uint8_t databyte = value;
 8002f34:	2417      	movs	r4, #23
void write_byte(uint8_t reg, uint8_t value) {
 8002f36:	b086      	sub	sp, #24
    uint8_t databyte = value;
 8002f38:	446c      	add	r4, sp
    HAL_I2C_Mem_Write(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, reg, 1, &databyte, 1, i2c_timeout);
 8002f3a:	005b      	lsls	r3, r3, #1
    uint8_t databyte = value;
 8002f3c:	7021      	strb	r1, [r4, #0]
    HAL_I2C_Mem_Write(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, reg, 1, &databyte, 1, i2c_timeout);
 8002f3e:	9302      	str	r3, [sp, #8]
 8002f40:	3bf4      	subs	r3, #244	; 0xf4
 8002f42:	3bff      	subs	r3, #255	; 0xff
 8002f44:	0002      	movs	r2, r0
 8002f46:	213c      	movs	r1, #60	; 0x3c
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	9400      	str	r4, [sp, #0]
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <write_byte+0x28>)
 8002f4e:	f002 fae1 	bl	8005514 <HAL_I2C_Mem_Write>
}
 8002f52:	b006      	add	sp, #24
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	2000043c 	.word	0x2000043c

08002f5c <FXOS8700CQInitFlux.constprop.0>:
static uint8_t FXOS8700CQInitFlux(I2C_HandleTypeDef *I2Cx)
 8002f5c:	b570      	push	{r4, r5, r6, lr}
	FXOS8700CQReset(I2Cx);
 8002f5e:	4d31      	ldr	r5, [pc, #196]	; (8003024 <FXOS8700CQInitFlux.constprop.0+0xc8>)
static uint8_t FXOS8700CQInitFlux(I2C_HandleTypeDef *I2Cx)
 8002f60:	b086      	sub	sp, #24
	FXOS8700CQReset(I2Cx);
 8002f62:	0028      	movs	r0, r5
 8002f64:	f7ff ffc6 	bl	8002ef4 <FXOS8700CQReset>
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_WHOAMI, 1, &check, 1, i2c_timeout);
 8002f68:	2617      	movs	r6, #23
 8002f6a:	23fa      	movs	r3, #250	; 0xfa
 8002f6c:	2401      	movs	r4, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	446e      	add	r6, sp
 8002f72:	9302      	str	r3, [sp, #8]
 8002f74:	220d      	movs	r2, #13
 8002f76:	0023      	movs	r3, r4
 8002f78:	213c      	movs	r1, #60	; 0x3c
 8002f7a:	0028      	movs	r0, r5
 8002f7c:	9401      	str	r4, [sp, #4]
 8002f7e:	9600      	str	r6, [sp, #0]
 8002f80:	f002 fba6 	bl	80056d0 <HAL_I2C_Mem_Read>
	if(check == FXOS8700CQ_WHOAMI_VAL)
 8002f84:	7833      	ldrb	r3, [r6, #0]
 8002f86:	2bc7      	cmp	r3, #199	; 0xc7
 8002f88:	d148      	bne.n	800301c <FXOS8700CQInitFlux.constprop.0+0xc0>
		FXOS8700CQStandby(I2Cx);
 8002f8a:	0028      	movs	r0, r5
 8002f8c:	f7ff ff76 	bl	8002e7c <FXOS8700CQStandby>
		HAL_Delay(1);
 8002f90:	0020      	movs	r0, r4
 8002f92:	f7ff fecd 	bl	8002d30 <HAL_Delay>
		write_byte(0x6A, 0x80 | magThresholdHi);
 8002f96:	2185      	movs	r1, #133	; 0x85
 8002f98:	206a      	movs	r0, #106	; 0x6a
 8002f9a:	f7ff ffc9 	bl	8002f30 <write_byte>
		write_byte(0x6B, magThresholdLo);
 8002f9e:	2114      	movs	r1, #20
 8002fa0:	206b      	movs	r0, #107	; 0x6b
 8002fa2:	f7ff ffc5 	bl	8002f30 <write_byte>
		write_byte(0x6C, 0x01);
 8002fa6:	0021      	movs	r1, r4
 8002fa8:	206c      	movs	r0, #108	; 0x6c
 8002faa:	f7ff ffc1 	bl	8002f30 <write_byte>
		write_byte(0x6D, (refMagX & 0xFF00) >> 8);
 8002fae:	4e1e      	ldr	r6, [pc, #120]	; (8003028 <FXOS8700CQInitFlux.constprop.0+0xcc>)
 8002fb0:	206d      	movs	r0, #109	; 0x6d
 8002fb2:	7871      	ldrb	r1, [r6, #1]
 8002fb4:	f7ff ffbc 	bl	8002f30 <write_byte>
		write_byte(0x6E, refMagX & 0xFF);
 8002fb8:	7831      	ldrb	r1, [r6, #0]
 8002fba:	206e      	movs	r0, #110	; 0x6e
 8002fbc:	f7ff ffb8 	bl	8002f30 <write_byte>
		write_byte(0x6F, (refMagY & 0xFF00) >> 8);
 8002fc0:	4e1a      	ldr	r6, [pc, #104]	; (800302c <FXOS8700CQInitFlux.constprop.0+0xd0>)
 8002fc2:	206f      	movs	r0, #111	; 0x6f
 8002fc4:	7871      	ldrb	r1, [r6, #1]
 8002fc6:	f7ff ffb3 	bl	8002f30 <write_byte>
		write_byte(0x70, refMagY & 0xFF);
 8002fca:	7831      	ldrb	r1, [r6, #0]
 8002fcc:	2070      	movs	r0, #112	; 0x70
 8002fce:	f7ff ffaf 	bl	8002f30 <write_byte>
		write_byte(0x71, (refMagZ & 0xFF00) >> 8);
 8002fd2:	4e17      	ldr	r6, [pc, #92]	; (8003030 <FXOS8700CQInitFlux.constprop.0+0xd4>)
 8002fd4:	2071      	movs	r0, #113	; 0x71
 8002fd6:	7871      	ldrb	r1, [r6, #1]
 8002fd8:	f7ff ffaa 	bl	8002f30 <write_byte>
		write_byte(0x72, refMagZ & 0xFF);
 8002fdc:	2072      	movs	r0, #114	; 0x72
 8002fde:	7831      	ldrb	r1, [r6, #0]
 8002fe0:	f7ff ffa6 	bl	8002f30 <write_byte>
		write_byte(0x69, 0x7B);
 8002fe4:	217b      	movs	r1, #123	; 0x7b
 8002fe6:	2069      	movs	r0, #105	; 0x69
 8002fe8:	f7ff ffa2 	bl	8002f30 <write_byte>
		write_byte(0x2D, 0x01);
 8002fec:	0021      	movs	r1, r4
 8002fee:	202d      	movs	r0, #45	; 0x2d
 8002ff0:	f7ff ff9e 	bl	8002f30 <write_byte>
		write_byte(0x2E, 0x01);
 8002ff4:	0021      	movs	r1, r4
 8002ff6:	202e      	movs	r0, #46	; 0x2e
 8002ff8:	f7ff ff9a 	bl	8002f30 <write_byte>
		write_byte(0x5B, 0x01);
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	205b      	movs	r0, #91	; 0x5b
 8003000:	f7ff ff96 	bl	8002f30 <write_byte>
		write_byte(0x5C, 0x20);
 8003004:	2120      	movs	r1, #32
 8003006:	205c      	movs	r0, #92	; 0x5c
 8003008:	f7ff ff92 	bl	8002f30 <write_byte>
		write_byte(0x2A, 0xA9);
 800300c:	21a9      	movs	r1, #169	; 0xa9
 800300e:	202a      	movs	r0, #42	; 0x2a
 8003010:	f7ff ff8e 	bl	8002f30 <write_byte>
		FXOS8700CQActive(I2Cx);
 8003014:	0028      	movs	r0, r5
 8003016:	f7ff ff4f 	bl	8002eb8 <FXOS8700CQActive>
 800301a:	2400      	movs	r4, #0
}
 800301c:	0020      	movs	r0, r4
 800301e:	b006      	add	sp, #24
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	2000043c 	.word	0x2000043c
 8003028:	200004ac 	.word	0x200004ac
 800302c:	200004ae 	.word	0x200004ae
 8003030:	200004b0 	.word	0x200004b0

08003034 <squareRoot>:
int16_t squareRoot(int32_t number) {
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	0005      	movs	r5, r0
    int32_t x = number;
 8003038:	0004      	movs	r4, r0
    int32_t y = 1;
 800303a:	2001      	movs	r0, #1
    while (x - y > 1) {
 800303c:	1a23      	subs	r3, r4, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	dc01      	bgt.n	8003046 <squareRoot+0x12>
    return (int16_t)x;
 8003042:	b220      	sxth	r0, r4
}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
        x = (x + y) / 2;
 8003046:	1820      	adds	r0, r4, r0
 8003048:	0fc4      	lsrs	r4, r0, #31
 800304a:	1824      	adds	r4, r4, r0
 800304c:	1064      	asrs	r4, r4, #1
        y = number / x;
 800304e:	0021      	movs	r1, r4
 8003050:	0028      	movs	r0, r5
 8003052:	f7fd f909 	bl	8000268 <__divsi3>
        if (x - y < 0) {
 8003056:	e7f1      	b.n	800303c <squareRoot+0x8>

08003058 <EEPROM_Write>:
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8003058:	2201      	movs	r2, #1
void EEPROM_Write(uint32_t d, uint32_t *addr){
 800305a:	b510      	push	{r4, lr}
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <EEPROM_Write+0x2c>)
 800305e:	699c      	ldr	r4, [r3, #24]
 8003060:	4214      	tst	r4, r2
 8003062:	d1fc      	bne.n	800305e <EEPROM_Write+0x6>
	if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0){
 8003064:	685c      	ldr	r4, [r3, #4]
 8003066:	4214      	tst	r4, r2
 8003068:	d003      	beq.n	8003072 <EEPROM_Write+0x1a>
		FLASH->PEKEYR = FLASH_PEKEY1;
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <EEPROM_Write+0x30>)
 800306c:	60da      	str	r2, [r3, #12]
		FLASH->PEKEYR = FLASH_PEKEY2;
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <EEPROM_Write+0x34>)
 8003070:	60da      	str	r2, [r3, #12]
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8003072:	2201      	movs	r2, #1
	*addr = d;
 8003074:	6008      	str	r0, [r1, #0]
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8003076:	6999      	ldr	r1, [r3, #24]
 8003078:	4211      	tst	r1, r2
 800307a:	d1fc      	bne.n	8003076 <EEPROM_Write+0x1e>
	FLASH->PECR |= FLASH_PECR_PELOCK;
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
}
 8003082:	bd10      	pop	{r4, pc}
 8003084:	40022000 	.word	0x40022000
 8003088:	89abcdef 	.word	0x89abcdef
 800308c:	02030405 	.word	0x02030405

08003090 <P2P_Radio_Init>:
void P2P_Radio_Init(void){
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(app.stt.lora_state == LORA_IDLE){
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <P2P_Radio_Init+0x74>)
void P2P_Radio_Init(void){
 8003094:	b08d      	sub	sp, #52	; 0x34
	if(app.stt.lora_state == LORA_IDLE){
 8003096:	799c      	ldrb	r4, [r3, #6]
 8003098:	2c00      	cmp	r4, #0
 800309a:	d131      	bne.n	8003100 <P2P_Radio_Init+0x70>
		app.stt.lora_state = LORA_BUSY;
 800309c:	2501      	movs	r5, #1
		RadioEvents.TxDone = OnP2PTxDone;
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <P2P_Radio_Init+0x78>)
		app.stt.lora_state = LORA_BUSY;
 80030a0:	719d      	strb	r5, [r3, #6]
		RadioEvents.TxDone = OnP2PTxDone;
 80030a2:	4b1a      	ldr	r3, [pc, #104]	; (800310c <P2P_Radio_Init+0x7c>)
		Radio.Init(&RadioEvents);
 80030a4:	4f1a      	ldr	r7, [pc, #104]	; (8003110 <P2P_Radio_Init+0x80>)
		RadioEvents.TxDone = OnP2PTxDone;
 80030a6:	6003      	str	r3, [r0, #0]
		RadioEvents.RxDone = OnP2PRxDone;
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <P2P_Radio_Init+0x84>)
 80030aa:	6083      	str	r3, [r0, #8]
		RadioEvents.TxTimeout = OnP2PTxTimeout;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <P2P_Radio_Init+0x88>)
 80030ae:	6043      	str	r3, [r0, #4]
		RadioEvents.RxTimeout = OnP2PRxTimeout;
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <P2P_Radio_Init+0x8c>)
 80030b2:	60c3      	str	r3, [r0, #12]
		RadioEvents.RxError = OnP2PRxError;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <P2P_Radio_Init+0x90>)
 80030b6:	6103      	str	r3, [r0, #16]
		Radio.Init(&RadioEvents);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80030bc:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, P2P_TX_OUTPUT_POWER, 0, P2P_BANDWIDTH,
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <P2P_Radio_Init+0x94>)
 80030c0:	0022      	movs	r2, r4
 80030c2:	9308      	str	r3, [sp, #32]
 80030c4:	2308      	movs	r3, #8
 80030c6:	9302      	str	r3, [sp, #8]
 80030c8:	3304      	adds	r3, #4
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2116      	movs	r1, #22
 80030d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80030d2:	0028      	movs	r0, r5
 80030d4:	0023      	movs	r3, r4
 80030d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80030d8:	9407      	str	r4, [sp, #28]
 80030da:	9406      	str	r4, [sp, #24]
 80030dc:	9405      	str	r4, [sp, #20]
 80030de:	9504      	str	r5, [sp, #16]
 80030e0:	9403      	str	r4, [sp, #12]
 80030e2:	9501      	str	r5, [sp, #4]
 80030e4:	47b0      	blx	r6
		Radio.SetMaxPayloadLength(MODEM_LORA, LORA_BUFFER_SIZE);
 80030e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e8:	2140      	movs	r1, #64	; 0x40
 80030ea:	0028      	movs	r0, r5
 80030ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ee:	4798      	blx	r3
		APP_LOG(TS_ON, VLEVEL_L,  "Modo P2P\n\r");
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <P2P_Radio_Init+0x98>)
 80030f2:	002a      	movs	r2, r5
 80030f4:	0021      	movs	r1, r4
 80030f6:	0028      	movs	r0, r5
 80030f8:	f00b fe92 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
		app.stt.lora_state = LORA_IDLE;
 80030fc:	4b01      	ldr	r3, [pc, #4]	; (8003104 <P2P_Radio_Init+0x74>)
 80030fe:	719c      	strb	r4, [r3, #6]
}
 8003100:	b00d      	add	sp, #52	; 0x34
 8003102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003104:	20000038 	.word	0x20000038
 8003108:	200003ec 	.word	0x200003ec
 800310c:	08002df5 	.word	0x08002df5
 8003110:	0800fc84 	.word	0x0800fc84
 8003114:	08002d3d 	.word	0x08002d3d
 8003118:	08002da5 	.word	0x08002da5
 800311c:	08002d4d 	.word	0x08002d4d
 8003120:	08002d5d 	.word	0x08002d5d
 8003124:	00001388 	.word	0x00001388
 8003128:	0800f24e 	.word	0x0800f24e

0800312c <LoRaWAN_Mode_Init>:
void LoRaWAN_Mode_Init(void){
 800312c:	b570      	push	{r4, r5, r6, lr}
	if(app.stt.lora_state == LORA_IDLE){
 800312e:	4d0c      	ldr	r5, [pc, #48]	; (8003160 <LoRaWAN_Mode_Init+0x34>)
 8003130:	79ae      	ldrb	r6, [r5, #6]
 8003132:	2e00      	cmp	r6, #0
 8003134:	d113      	bne.n	800315e <LoRaWAN_Mode_Init+0x32>
		app.stt.lora_state = LORA_BUSY;
 8003136:	2401      	movs	r4, #1
 8003138:	71ac      	strb	r4, [r5, #6]
		LoraInfo_Init();
 800313a:	f004 fb55 	bl	80077e8 <LoraInfo_Init>
		LmHandlerInit(&LmHandlerCallbacks);
 800313e:	4809      	ldr	r0, [pc, #36]	; (8003164 <LoRaWAN_Mode_Init+0x38>)
 8003140:	f005 fbc0 	bl	80088c4 <LmHandlerInit>
		LmHandlerConfigure(&LmHandlerParams);
 8003144:	4808      	ldr	r0, [pc, #32]	; (8003168 <LoRaWAN_Mode_Init+0x3c>)
 8003146:	f005 f9c7 	bl	80084d8 <LmHandlerConfigure>
		LmHandlerJoin(LORAWAN_DEFAULT_ACTIVATION_TYPE);
 800314a:	0020      	movs	r0, r4
 800314c:	f005 fae0 	bl	8008710 <LmHandlerJoin>
		APP_LOG(TS_ON, VLEVEL_L,  "Modo LORAWAN\n\r");
 8003150:	0022      	movs	r2, r4
 8003152:	0031      	movs	r1, r6
 8003154:	0020      	movs	r0, r4
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <LoRaWAN_Mode_Init+0x40>)
 8003158:	f00b fe62 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
		app.stt.lora_state = LORA_IDLE;
 800315c:	71ae      	strb	r6, [r5, #6]
}
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	20000038 	.word	0x20000038
 8003164:	20000010 	.word	0x20000010
 8003168:	20000030 	.word	0x20000030
 800316c:	0800f259 	.word	0x0800f259

08003170 <rx_bytes>:
}*/

/*
 * Processa comandos recebidos pela serial
 */
void rx_bytes(uint8_t *bytes, uint16_t sz, uint8_t error){
 8003170:	b530      	push	{r4, r5, lr}
 8003172:	b08d      	sub	sp, #52	; 0x34
	if(sz >= 4){
 8003174:	2903      	cmp	r1, #3
 8003176:	d800      	bhi.n	800317a <rx_bytes+0xa>
 8003178:	e086      	b.n	8003288 <rx_bytes+0x118>
		if(bytes[0] == '$' && bytes[1] == 'W' && bytes[3] == '#' && bytes[sz-1]){
 800317a:	7803      	ldrb	r3, [r0, #0]
 800317c:	2b24      	cmp	r3, #36	; 0x24
 800317e:	d000      	beq.n	8003182 <rx_bytes+0x12>
 8003180:	e082      	b.n	8003288 <rx_bytes+0x118>
 8003182:	7843      	ldrb	r3, [r0, #1]
 8003184:	2b57      	cmp	r3, #87	; 0x57
 8003186:	d17f      	bne.n	8003288 <rx_bytes+0x118>
 8003188:	78c3      	ldrb	r3, [r0, #3]
 800318a:	2b23      	cmp	r3, #35	; 0x23
 800318c:	d17c      	bne.n	8003288 <rx_bytes+0x118>
 800318e:	1841      	adds	r1, r0, r1
 8003190:	3901      	subs	r1, #1
 8003192:	780b      	ldrb	r3, [r1, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d077      	beq.n	8003288 <rx_bytes+0x118>
			if(bytes[2] == 'A'){
 8003198:	7883      	ldrb	r3, [r0, #2]
 800319a:	2b41      	cmp	r3, #65	; 0x41
 800319c:	d149      	bne.n	8003232 <rx_bytes+0xc2>
 800319e:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <rx_bytes+0x1d8>)
 80031a0:	1d01      	adds	r1, r0, #4
 80031a2:	0014      	movs	r4, r2
 80031a4:	300c      	adds	r0, #12
				for(int i = 0; i < 4; i++){
					if(bytes[4+i*2] >= 'a' && bytes[4+i*2] <= 'f'){
 80031a6:	780b      	ldrb	r3, [r1, #0]
 80031a8:	001d      	movs	r5, r3
 80031aa:	3d61      	subs	r5, #97	; 0x61
 80031ac:	2d05      	cmp	r5, #5
 80031ae:	d803      	bhi.n	80031b8 <rx_bytes+0x48>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] = (bytes[4+i*2] - 'a' + 10) * 16;
 80031b0:	3b57      	subs	r3, #87	; 0x57
					}else if(bytes[4+i*2] >= '0' && bytes[4+i*2] <= '9'){
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] = (bytes[4+i*2] - '0') * 16;
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	72d3      	strb	r3, [r2, #11]
 80031b6:	e003      	b.n	80031c0 <rx_bytes+0x50>
					}else if(bytes[4+i*2] >= '0' && bytes[4+i*2] <= '9'){
 80031b8:	3b30      	subs	r3, #48	; 0x30
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d9f8      	bls.n	80031b2 <rx_bytes+0x42>
					}
					if(bytes[5+i*2] >= 'a' && bytes[5+i*2] <= 'f'){
 80031c0:	784b      	ldrb	r3, [r1, #1]
 80031c2:	001d      	movs	r5, r3
 80031c4:	3d61      	subs	r5, #97	; 0x61
 80031c6:	2d05      	cmp	r5, #5
 80031c8:	d82b      	bhi.n	8003222 <rx_bytes+0xb2>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - 'a' + 10;
 80031ca:	7ad5      	ldrb	r5, [r2, #11]
 80031cc:	195b      	adds	r3, r3, r5
 80031ce:	3b57      	subs	r3, #87	; 0x57
					}else if(bytes[5+i*2] >= '0' && bytes[5+i*2] <= '9'){
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - '0';
 80031d0:	72d3      	strb	r3, [r2, #11]
				for(int i = 0; i < 4; i++){
 80031d2:	3102      	adds	r1, #2
 80031d4:	3a01      	subs	r2, #1
 80031d6:	4288      	cmp	r0, r1
 80031d8:	d1e5      	bne.n	80031a6 <rx_bytes+0x36>
					}
				}
				EEPROM_Write(((uint32_t *)(&app.cfg))[offsetof(cfg_t, cfg.dev_addr)/sizeof(uint32_t)], &eeprom_cfg.word[offsetof(cfg_t, cfg.dev_addr)/sizeof(uint32_t)]);
 80031da:	495c      	ldr	r1, [pc, #368]	; (800334c <rx_bytes+0x1dc>)
 80031dc:	68a0      	ldr	r0, [r4, #8]
 80031de:	f7ff ff3b 	bl	8003058 <EEPROM_Write>
				SetDevAddr(app.cfg.cfg.dev_addr);
 80031e2:	68a0      	ldr	r0, [r4, #8]
				LoRaWAN_Mode_Init();
				uint8_t eui[8];
				LmHandlerGetDevEUI(&eui[0]);
 80031e4:	ac0a      	add	r4, sp, #40	; 0x28
				SetDevAddr(app.cfg.cfg.dev_addr);
 80031e6:	f7ff fd85 	bl	8002cf4 <SetDevAddr>
				LoRaWAN_Mode_Init();
 80031ea:	f7ff ff9f 	bl	800312c <LoRaWAN_Mode_Init>
				LmHandlerGetDevEUI(&eui[0]);
 80031ee:	0020      	movs	r0, r4
 80031f0:	f005 fc72 	bl	8008ad8 <LmHandlerGetDevEUI>
				APP_LOG(TS_OFF, VLEVEL_L, "DEV_EUI:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80031f4:	79e3      	ldrb	r3, [r4, #7]
 80031f6:	9307      	str	r3, [sp, #28]
 80031f8:	79a3      	ldrb	r3, [r4, #6]
 80031fa:	9306      	str	r3, [sp, #24]
 80031fc:	7963      	ldrb	r3, [r4, #5]
 80031fe:	9305      	str	r3, [sp, #20]
 8003200:	7923      	ldrb	r3, [r4, #4]
 8003202:	9304      	str	r3, [sp, #16]
 8003204:	78e3      	ldrb	r3, [r4, #3]
 8003206:	9303      	str	r3, [sp, #12]
 8003208:	78a3      	ldrb	r3, [r4, #2]
 800320a:	9302      	str	r3, [sp, #8]
 800320c:	7863      	ldrb	r3, [r4, #1]
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	7823      	ldrb	r3, [r4, #0]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	4b4e      	ldr	r3, [pc, #312]	; (8003350 <rx_bytes+0x1e0>)
				}
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
			}else if(bytes[2] == 'N'){
				uint8_t eui[8];
				LmHandlerGetDevEUI(&eui[0]);
				APP_LOG(TS_OFF, VLEVEL_L, "%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003216:	2200      	movs	r2, #0
 8003218:	2001      	movs	r0, #1
 800321a:	0011      	movs	r1, r2
 800321c:	f00b fe00 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
			}
		}
	}
}
 8003220:	e032      	b.n	8003288 <rx_bytes+0x118>
					}else if(bytes[5+i*2] >= '0' && bytes[5+i*2] <= '9'){
 8003222:	001d      	movs	r5, r3
 8003224:	3d30      	subs	r5, #48	; 0x30
 8003226:	2d09      	cmp	r5, #9
 8003228:	d8d3      	bhi.n	80031d2 <rx_bytes+0x62>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - '0';
 800322a:	7ad5      	ldrb	r5, [r2, #11]
 800322c:	195b      	adds	r3, r3, r5
 800322e:	3b30      	subs	r3, #48	; 0x30
 8003230:	e7ce      	b.n	80031d0 <rx_bytes+0x60>
			}else if(bytes[2] == 'R'){
 8003232:	2b52      	cmp	r3, #82	; 0x52
 8003234:	d12a      	bne.n	800328c <rx_bytes+0x11c>
				SX126xSetStandby( STDBY_XOSC );
 8003236:	2001      	movs	r0, #1
 8003238:	f00a fd24 	bl	800dc84 <SX126xSetStandby>
				SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 800323c:	4c42      	ldr	r4, [pc, #264]	; (8003348 <rx_bytes+0x1d8>)
 800323e:	4845      	ldr	r0, [pc, #276]	; (8003354 <rx_bytes+0x1e4>)
 8003240:	7ba1      	ldrb	r1, [r4, #14]
 8003242:	f00a ff21 	bl	800e088 <SX126xWriteRegister>
				SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 8003246:	7ba1      	ldrb	r1, [r4, #14]
 8003248:	4843      	ldr	r0, [pc, #268]	; (8003358 <rx_bytes+0x1e8>)
 800324a:	f00a ff1d 	bl	800e088 <SX126xWriteRegister>
				Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <rx_bytes+0x1ec>)
 8003250:	223c      	movs	r2, #60	; 0x3c
 8003252:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003254:	2116      	movs	r1, #22
 8003256:	4842      	ldr	r0, [pc, #264]	; (8003360 <rx_bytes+0x1f0>)
 8003258:	47a8      	blx	r5
				SX126xSetStandby( STDBY_XOSC );
 800325a:	2001      	movs	r0, #1
 800325c:	f00a fd12 	bl	800dc84 <SX126xSetStandby>
				SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 8003260:	7ba1      	ldrb	r1, [r4, #14]
 8003262:	483c      	ldr	r0, [pc, #240]	; (8003354 <rx_bytes+0x1e4>)
 8003264:	f00a ff10 	bl	800e088 <SX126xWriteRegister>
				SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 8003268:	7ba1      	ldrb	r1, [r4, #14]
 800326a:	483b      	ldr	r0, [pc, #236]	; (8003358 <rx_bytes+0x1e8>)
 800326c:	f00a ff0c 	bl	800e088 <SX126xWriteRegister>
				Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 8003270:	223c      	movs	r2, #60	; 0x3c
 8003272:	2116      	movs	r1, #22
 8003274:	483a      	ldr	r0, [pc, #232]	; (8003360 <rx_bytes+0x1f0>)
 8003276:	47a8      	blx	r5
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%d\n\r", app.cfg.cfg.xta_trim);
 8003278:	7ba3      	ldrb	r3, [r4, #14]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <rx_bytes+0x1f4>)
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
 800327e:	2200      	movs	r2, #0
 8003280:	2001      	movs	r0, #1
 8003282:	0011      	movs	r1, r2
 8003284:	f00b fdcc 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 8003288:	b00d      	add	sp, #52	; 0x34
 800328a:	bd30      	pop	{r4, r5, pc}
			}else if(bytes[2] == 'S'){
 800328c:	2b53      	cmp	r3, #83	; 0x53
 800328e:	d100      	bne.n	8003292 <rx_bytes+0x122>
				while(1);
 8003290:	e7fe      	b.n	8003290 <rx_bytes+0x120>
			}else if(bytes[2] == '+'){
 8003292:	2b2b      	cmp	r3, #43	; 0x2b
 8003294:	d11e      	bne.n	80032d4 <rx_bytes+0x164>
				if(app.cfg.cfg.xta_trim < 0x2F){
 8003296:	4c2c      	ldr	r4, [pc, #176]	; (8003348 <rx_bytes+0x1d8>)
 8003298:	7ba0      	ldrb	r0, [r4, #14]
 800329a:	282e      	cmp	r0, #46	; 0x2e
 800329c:	d816      	bhi.n	80032cc <rx_bytes+0x15c>
					app.cfg.cfg.xta_trim++;
 800329e:	3001      	adds	r0, #1
					app.cfg.cfg.xta_trim--;
 80032a0:	b2c0      	uxtb	r0, r0
 80032a2:	73a0      	strb	r0, [r4, #14]
					SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 80032a4:	f00a fc90 	bl	800dbc8 <SX126xFreqCorrection>
					SX126xSetStandby( STDBY_XOSC );
 80032a8:	2001      	movs	r0, #1
 80032aa:	f00a fceb 	bl	800dc84 <SX126xSetStandby>
					SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 80032ae:	7ba1      	ldrb	r1, [r4, #14]
 80032b0:	4828      	ldr	r0, [pc, #160]	; (8003354 <rx_bytes+0x1e4>)
 80032b2:	f00a fee9 	bl	800e088 <SX126xWriteRegister>
					SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 80032b6:	7ba1      	ldrb	r1, [r4, #14]
 80032b8:	4827      	ldr	r0, [pc, #156]	; (8003358 <rx_bytes+0x1e8>)
 80032ba:	f00a fee5 	bl	800e088 <SX126xWriteRegister>
					Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 80032be:	4b27      	ldr	r3, [pc, #156]	; (800335c <rx_bytes+0x1ec>)
 80032c0:	223c      	movs	r2, #60	; 0x3c
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	2116      	movs	r1, #22
 80032c6:	4826      	ldr	r0, [pc, #152]	; (8003360 <rx_bytes+0x1f0>)
 80032c8:	9309      	str	r3, [sp, #36]	; 0x24
 80032ca:	4798      	blx	r3
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
 80032cc:	7ba3      	ldrb	r3, [r4, #14]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <rx_bytes+0x1f8>)
 80032d2:	e7d4      	b.n	800327e <rx_bytes+0x10e>
			}else if(bytes[2] == '-'){
 80032d4:	2b2d      	cmp	r3, #45	; 0x2d
 80032d6:	d105      	bne.n	80032e4 <rx_bytes+0x174>
				if(app.cfg.cfg.xta_trim > 0){
 80032d8:	4c1b      	ldr	r4, [pc, #108]	; (8003348 <rx_bytes+0x1d8>)
 80032da:	7ba0      	ldrb	r0, [r4, #14]
 80032dc:	2800      	cmp	r0, #0
 80032de:	d0f5      	beq.n	80032cc <rx_bytes+0x15c>
					app.cfg.cfg.xta_trim--;
 80032e0:	3801      	subs	r0, #1
 80032e2:	e7dd      	b.n	80032a0 <rx_bytes+0x130>
			}else if(bytes[2] == 'E' ){
 80032e4:	2b45      	cmp	r3, #69	; 0x45
 80032e6:	d0cf      	beq.n	8003288 <rx_bytes+0x118>
			}else if(bytes[2] == '>'){
 80032e8:	2b3e      	cmp	r3, #62	; 0x3e
 80032ea:	d109      	bne.n	8003300 <rx_bytes+0x190>
				if(app.cfg.cfg.xta_trim < 47){
 80032ec:	4c16      	ldr	r4, [pc, #88]	; (8003348 <rx_bytes+0x1d8>)
 80032ee:	7ba3      	ldrb	r3, [r4, #14]
 80032f0:	2b2e      	cmp	r3, #46	; 0x2e
 80032f2:	d8eb      	bhi.n	80032cc <rx_bytes+0x15c>
						app.cfg.cfg.xta_trim = 47;
 80032f4:	202f      	movs	r0, #47	; 0x2f
					if(app.cfg.cfg.xta_trim <= 42){
 80032f6:	2b2a      	cmp	r3, #42	; 0x2a
 80032f8:	d8d3      	bhi.n	80032a2 <rx_bytes+0x132>
						app.cfg.cfg.xta_trim += 5;
 80032fa:	3305      	adds	r3, #5
						app.cfg.cfg.xta_trim -= 5;
 80032fc:	b2d8      	uxtb	r0, r3
 80032fe:	e7d0      	b.n	80032a2 <rx_bytes+0x132>
			}else if(bytes[2] == '<'){
 8003300:	2b3c      	cmp	r3, #60	; 0x3c
 8003302:	d108      	bne.n	8003316 <rx_bytes+0x1a6>
				if(app.cfg.cfg.xta_trim > 0){
 8003304:	4c10      	ldr	r4, [pc, #64]	; (8003348 <rx_bytes+0x1d8>)
 8003306:	7ba3      	ldrb	r3, [r4, #14]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0df      	beq.n	80032cc <rx_bytes+0x15c>
						app.cfg.cfg.xta_trim = 0;
 800330c:	2000      	movs	r0, #0
					if(app.cfg.cfg.xta_trim >= 5){
 800330e:	2b04      	cmp	r3, #4
 8003310:	d9c7      	bls.n	80032a2 <rx_bytes+0x132>
						app.cfg.cfg.xta_trim -= 5;
 8003312:	3b05      	subs	r3, #5
 8003314:	e7f2      	b.n	80032fc <rx_bytes+0x18c>
			}else if(bytes[2] == 'N'){
 8003316:	2b4e      	cmp	r3, #78	; 0x4e
 8003318:	d1b6      	bne.n	8003288 <rx_bytes+0x118>
				LmHandlerGetDevEUI(&eui[0]);
 800331a:	ac0a      	add	r4, sp, #40	; 0x28
 800331c:	0020      	movs	r0, r4
 800331e:	f005 fbdb 	bl	8008ad8 <LmHandlerGetDevEUI>
				APP_LOG(TS_OFF, VLEVEL_L, "%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003322:	79e3      	ldrb	r3, [r4, #7]
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	79a3      	ldrb	r3, [r4, #6]
 8003328:	9306      	str	r3, [sp, #24]
 800332a:	7963      	ldrb	r3, [r4, #5]
 800332c:	9305      	str	r3, [sp, #20]
 800332e:	7923      	ldrb	r3, [r4, #4]
 8003330:	9304      	str	r3, [sp, #16]
 8003332:	78e3      	ldrb	r3, [r4, #3]
 8003334:	9303      	str	r3, [sp, #12]
 8003336:	78a3      	ldrb	r3, [r4, #2]
 8003338:	9302      	str	r3, [sp, #8]
 800333a:	7863      	ldrb	r3, [r4, #1]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	7823      	ldrb	r3, [r4, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <rx_bytes+0x1fc>)
 8003344:	e767      	b.n	8003216 <rx_bytes+0xa6>
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	20000038 	.word	0x20000038
 800334c:	08080000 	.word	0x08080000
 8003350:	0800f268 	.word	0x0800f268
 8003354:	00000911 	.word	0x00000911
 8003358:	00000912 	.word	0x00000912
 800335c:	0800fc84 	.word	0x0800fc84
 8003360:	3695ffc0 	.word	0x3695ffc0
 8003364:	0800f293 	.word	0x0800f293
 8003368:	0800f2a1 	.word	0x0800f2a1
 800336c:	0800f94a 	.word	0x0800f94a

08003370 <fillBufferAutoTx>:
	buffer[i++] = 5;
 8003370:	2305      	movs	r3, #5
uint16_t fillBufferAutoTx(uint8_t *buffer){
 8003372:	b510      	push	{r4, lr}
	buffer[i++] = 5;
 8003374:	7003      	strb	r3, [r0, #0]
uint16_t fillBufferAutoTx(uint8_t *buffer){
 8003376:	0004      	movs	r4, r0
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 8003378:	f7ff f81a 	bl	80023b0 <SYS_GetBatteryLevel>
 800337c:	2164      	movs	r1, #100	; 0x64
 800337e:	3032      	adds	r0, #50	; 0x32
 8003380:	f7fc ff72 	bl	8000268 <__divsi3>
	buffer[i++] = vagaStatus;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <fillBufferAutoTx+0x20>)
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 8003386:	7060      	strb	r0, [r4, #1]
	buffer[i++] = vagaStatus;
 8003388:	781b      	ldrb	r3, [r3, #0]
}
 800338a:	2003      	movs	r0, #3
	buffer[i++] = vagaStatus;
 800338c:	70a3      	strb	r3, [r4, #2]
}
 800338e:	bd10      	pop	{r4, pc}
 8003390:	200004b4 	.word	0x200004b4

08003394 <fillBufferManualTx>:
	buffer[i++] = 0;
 8003394:	2300      	movs	r3, #0
uint16_t fillBufferManualTx(uint8_t *buffer){
 8003396:	b510      	push	{r4, lr}
	buffer[i++] = 0;
 8003398:	7003      	strb	r3, [r0, #0]
uint16_t fillBufferManualTx(uint8_t *buffer){
 800339a:	0004      	movs	r4, r0
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 800339c:	f7ff f808 	bl	80023b0 <SYS_GetBatteryLevel>
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	3032      	adds	r0, #50	; 0x32
 80033a4:	f7fc ff60 	bl	8000268 <__divsi3>
	buffer[i++] = vagaStatus;
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <fillBufferManualTx+0x20>)
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 80033aa:	7060      	strb	r0, [r4, #1]
	buffer[i++] = vagaStatus;
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	2003      	movs	r0, #3
	buffer[i++] = vagaStatus;
 80033b0:	70a3      	strb	r3, [r4, #2]
}
 80033b2:	bd10      	pop	{r4, pc}
 80033b4:	200004b4 	.word	0x200004b4

080033b8 <LED_TX>:
void LED_TX(GPIO_PinState state){
 80033b8:	b530      	push	{r4, r5, lr}
	gpio_cfg.Pin = LED_TX_PIN;
 80033ba:	2580      	movs	r5, #128	; 0x80
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 80033bc:	2300      	movs	r3, #0
void LED_TX(GPIO_PinState state){
 80033be:	b087      	sub	sp, #28
	gpio_cfg.Pin = LED_TX_PIN;
 80033c0:	006d      	lsls	r5, r5, #1
void LED_TX(GPIO_PinState state){
 80033c2:	0004      	movs	r4, r0
	gpio_cfg.Pin = LED_TX_PIN;
 80033c4:	9501      	str	r5, [sp, #4]
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 80033c6:	9304      	str	r3, [sp, #16]
	if(state == false){
 80033c8:	4298      	cmp	r0, r3
 80033ca:	d10f      	bne.n	80033ec <LED_TX+0x34>
		HAL_GPIO_WritePin(LED_TX_PORT, LED_TX_PIN, state);
 80033cc:	0002      	movs	r2, r0
 80033ce:	20a0      	movs	r0, #160	; 0xa0
 80033d0:	0029      	movs	r1, r5
 80033d2:	05c0      	lsls	r0, r0, #23
 80033d4:	f001 ff12 	bl	80051fc <HAL_GPIO_WritePin>
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 80033d8:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Pull = GPIO_PULLDOWN;
 80033da:	2302      	movs	r3, #2
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 80033dc:	a901      	add	r1, sp, #4
 80033de:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Mode = GPIO_MODE_INPUT;
 80033e0:	9402      	str	r4, [sp, #8]
		gpio_cfg.Pull = GPIO_PULLDOWN;
 80033e2:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 80033e4:	f001 fdcc 	bl	8004f80 <HAL_GPIO_Init>
}
 80033e8:	b007      	add	sp, #28
 80033ea:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 80033ec:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 80033ee:	2201      	movs	r2, #1
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 80033f0:	a901      	add	r1, sp, #4
 80033f2:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 80033f4:	9202      	str	r2, [sp, #8]
		gpio_cfg.Pull = GPIO_NOPULL;
 80033f6:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 80033f8:	f001 fdc2 	bl	8004f80 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(LED_TX_PORT, LED_TX_PIN, state);
 80033fc:	20a0      	movs	r0, #160	; 0xa0
 80033fe:	0022      	movs	r2, r4
 8003400:	0029      	movs	r1, r5
 8003402:	05c0      	lsls	r0, r0, #23
 8003404:	f001 fefa 	bl	80051fc <HAL_GPIO_WritePin>
}
 8003408:	e7ee      	b.n	80033e8 <LED_TX+0x30>
	...

0800340c <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context){
 800340c:	b570      	push	{r4, r5, r6, lr}
	switch(app.stt.led_mode){
 800340e:	4c2b      	ldr	r4, [pc, #172]	; (80034bc <OnTxTimerLedEvent+0xb0>)
 8003410:	7963      	ldrb	r3, [r4, #5]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d021      	beq.n	800345a <OnTxTimerLedEvent+0x4e>
 8003416:	2b02      	cmp	r3, #2
 8003418:	d032      	beq.n	8003480 <OnTxTimerLedEvent+0x74>
 800341a:	4d29      	ldr	r5, [pc, #164]	; (80034c0 <OnTxTimerLedEvent+0xb4>)
 800341c:	2b00      	cmp	r3, #0
 800341e:	d141      	bne.n	80034a4 <OnTxTimerLedEvent+0x98>
		if(blinkCntTX & 0x01){
 8003420:	782a      	ldrb	r2, [r5, #0]
 8003422:	3301      	adds	r3, #1
 8003424:	0010      	movs	r0, r2
 8003426:	4018      	ands	r0, r3
 8003428:	421a      	tst	r2, r3
 800342a:	d000      	beq.n	800342e <OnTxTimerLedEvent+0x22>
			LED_TX(true);
 800342c:	0018      	movs	r0, r3
			LED_TX(false);
 800342e:	f7ff ffc3 	bl	80033b8 <LED_TX>
		if(blinkCntTX){
 8003432:	782b      	ldrb	r3, [r5, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <OnTxTimerLedEvent+0x44>
			blinkCntTX--;
 8003438:	3b01      	subs	r3, #1
 800343a:	702b      	strb	r3, [r5, #0]
			if(app.cfg.cfg.tx_mode == P2P_MODE){
 800343c:	7be3      	ldrb	r3, [r4, #15]
				UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_LORAWAN_BLINK_TIME);
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	4820      	ldr	r0, [pc, #128]	; (80034c4 <OnTxTimerLedEvent+0xb8>)
			if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <OnTxTimerLedEvent+0x3e>
				UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_P2P_BLINK_TIME);
 8003446:	21fa      	movs	r1, #250	; 0xfa
 8003448:	0049      	lsls	r1, r1, #1
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 800344a:	f00b fbb1 	bl	800ebb0 <UTIL_TIMER_StartWithPeriod>
}
 800344e:	bd70      	pop	{r4, r5, r6, pc}
			blinkCntTX = (LED_TX_BLINK_TIMES*2);
 8003450:	230a      	movs	r3, #10
			blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 8003452:	702b      	strb	r3, [r5, #0]
		app.stt.led_mode = LED_MODE_OFF;
 8003454:	2303      	movs	r3, #3
 8003456:	7163      	strb	r3, [r4, #5]
}
 8003458:	e7f9      	b.n	800344e <OnTxTimerLedEvent+0x42>
		if(blinkCntLoRa & 0x01){
 800345a:	4d1b      	ldr	r5, [pc, #108]	; (80034c8 <OnTxTimerLedEvent+0xbc>)
 800345c:	782a      	ldrb	r2, [r5, #0]
 800345e:	0010      	movs	r0, r2
 8003460:	4018      	ands	r0, r3
 8003462:	421a      	tst	r2, r3
 8003464:	d000      	beq.n	8003468 <OnTxTimerLedEvent+0x5c>
			LED_TX(true);
 8003466:	0018      	movs	r0, r3
			LED_TX(false);
 8003468:	f7ff ffa6 	bl	80033b8 <LED_TX>
		if(blinkCntLoRa){
 800346c:	782b      	ldrb	r3, [r5, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <OnTxTimerLedEvent+0x70>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_LORAWAN_BLINK_TIME);
 8003472:	2164      	movs	r1, #100	; 0x64
			blinkCntLoRa--;
 8003474:	3b01      	subs	r3, #1
 8003476:	702b      	strb	r3, [r5, #0]
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 8003478:	4812      	ldr	r0, [pc, #72]	; (80034c4 <OnTxTimerLedEvent+0xb8>)
 800347a:	e7e6      	b.n	800344a <OnTxTimerLedEvent+0x3e>
			blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 800347c:	2312      	movs	r3, #18
 800347e:	e7e8      	b.n	8003452 <OnTxTimerLedEvent+0x46>
		if(blinkCntP2P & 0x01){
 8003480:	4d12      	ldr	r5, [pc, #72]	; (80034cc <OnTxTimerLedEvent+0xc0>)
 8003482:	2301      	movs	r3, #1
 8003484:	782a      	ldrb	r2, [r5, #0]
 8003486:	0010      	movs	r0, r2
 8003488:	4018      	ands	r0, r3
 800348a:	421a      	tst	r2, r3
 800348c:	d000      	beq.n	8003490 <OnTxTimerLedEvent+0x84>
			LED_TX(true);
 800348e:	0018      	movs	r0, r3
			LED_TX(false);
 8003490:	f7ff ff92 	bl	80033b8 <LED_TX>
		if(blinkCntP2P){
 8003494:	782b      	ldrb	r3, [r5, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0dc      	beq.n	8003454 <OnTxTimerLedEvent+0x48>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 800349a:	21fa      	movs	r1, #250	; 0xfa
			blinkCntP2P--;
 800349c:	3b01      	subs	r3, #1
 800349e:	702b      	strb	r3, [r5, #0]
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 80034a0:	0089      	lsls	r1, r1, #2
 80034a2:	e7e9      	b.n	8003478 <OnTxTimerLedEvent+0x6c>
		blinkCntTX = (LED_TX_BLINK_TIMES*2);
 80034a4:	230a      	movs	r3, #10
		blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 80034a6:	2212      	movs	r2, #18
		blinkCntP2P = (LED_P2P_BLINK_TIMES*2);
 80034a8:	2000      	movs	r0, #0
		blinkCntTX = (LED_TX_BLINK_TIMES*2);
 80034aa:	702b      	strb	r3, [r5, #0]
		blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <OnTxTimerLedEvent+0xbc>)
 80034ae:	701a      	strb	r2, [r3, #0]
		blinkCntP2P = (LED_P2P_BLINK_TIMES*2);
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <OnTxTimerLedEvent+0xc0>)
 80034b2:	7018      	strb	r0, [r3, #0]
		LED_TX(false);
 80034b4:	f7ff ff80 	bl	80033b8 <LED_TX>
 80034b8:	e7cc      	b.n	8003454 <OnTxTimerLedEvent+0x48>
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000038 	.word	0x20000038
 80034c0:	20000049 	.word	0x20000049
 80034c4:	2000038c 	.word	0x2000038c
 80034c8:	20000048 	.word	0x20000048
 80034cc:	20000408 	.word	0x20000408

080034d0 <LED_Blink>:
void LED_Blink(led_mode_t mode){
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	0004      	movs	r4, r0
	if(mode > LED_MODE_P2P || app.stt.led_mode != LED_MODE_OFF){
 80034d4:	2802      	cmp	r0, #2
 80034d6:	d818      	bhi.n	800350a <LED_Blink+0x3a>
 80034d8:	4e0f      	ldr	r6, [pc, #60]	; (8003518 <LED_Blink+0x48>)
 80034da:	7973      	ldrb	r3, [r6, #5]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d114      	bne.n	800350a <LED_Blink+0x3a>
	LED_TX(true);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7ff ff69 	bl	80033b8 <LED_TX>
	UTIL_TIMER_Stop(&LedTimer);
 80034e6:	4d0d      	ldr	r5, [pc, #52]	; (800351c <LED_Blink+0x4c>)
	app.stt.led_mode = mode;
 80034e8:	7174      	strb	r4, [r6, #5]
	UTIL_TIMER_Stop(&LedTimer);
 80034ea:	0028      	movs	r0, r5
 80034ec:	f00b faca 	bl	800ea84 <UTIL_TIMER_Stop>
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_LORAWAN_ON_TIME);
 80034f0:	2164      	movs	r1, #100	; 0x64
	switch(mode){
 80034f2:	2c01      	cmp	r4, #1
 80034f4:	d006      	beq.n	8003504 <LED_Blink+0x34>
 80034f6:	2c02      	cmp	r4, #2
 80034f8:	d00a      	beq.n	8003510 <LED_Blink+0x40>
		if(app.cfg.cfg.tx_mode == P2P_MODE){
 80034fa:	7bf3      	ldrb	r3, [r6, #15]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <LED_Blink+0x3c>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_P2P_ON_TIME);
 8003500:	21fa      	movs	r1, #250	; 0xfa
 8003502:	0049      	lsls	r1, r1, #1
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_ON_TIME);
 8003504:	0028      	movs	r0, r5
 8003506:	f00b fb53 	bl	800ebb0 <UTIL_TIMER_StartWithPeriod>
}
 800350a:	bd70      	pop	{r4, r5, r6, pc}
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_LORAWAN_ON_TIME);
 800350c:	4904      	ldr	r1, [pc, #16]	; (8003520 <LED_Blink+0x50>)
 800350e:	e7f9      	b.n	8003504 <LED_Blink+0x34>
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_ON_TIME);
 8003510:	21fa      	movs	r1, #250	; 0xfa
 8003512:	00c9      	lsls	r1, r1, #3
 8003514:	e7f6      	b.n	8003504 <LED_Blink+0x34>
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	20000038 	.word	0x20000038
 800351c:	2000038c 	.word	0x2000038c
 8003520:	00001770 	.word	0x00001770

08003524 <App_Send>:
void App_Send(send_mode_t mode){
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(app.stt.lora_state == LORA_IDLE){
 8003526:	4d30      	ldr	r5, [pc, #192]	; (80035e8 <App_Send+0xc4>)
void App_Send(send_mode_t mode){
 8003528:	b08f      	sub	sp, #60	; 0x3c
 800352a:	9008      	str	r0, [sp, #32]
	if(app.stt.lora_state == LORA_IDLE){
 800352c:	79af      	ldrb	r7, [r5, #6]
 800352e:	2f00      	cmp	r7, #0
 8003530:	d12e      	bne.n	8003590 <App_Send+0x6c>
		app.stt.lora_state = LORA_BUSY;
 8003532:	2601      	movs	r6, #1
		LmHandlerGetDevEUI(&eui[0]);
 8003534:	ac0b      	add	r4, sp, #44	; 0x2c
 8003536:	0020      	movs	r0, r4
		app.stt.lora_state = LORA_BUSY;
 8003538:	71ae      	strb	r6, [r5, #6]
		LmHandlerGetDevEUI(&eui[0]);
 800353a:	f005 facd 	bl	8008ad8 <LmHandlerGetDevEUI>
		APP_LOG(TS_OFF, VLEVEL_L, "SN:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 800353e:	79e3      	ldrb	r3, [r4, #7]
 8003540:	003a      	movs	r2, r7
 8003542:	9307      	str	r3, [sp, #28]
 8003544:	79a3      	ldrb	r3, [r4, #6]
 8003546:	0039      	movs	r1, r7
 8003548:	9306      	str	r3, [sp, #24]
 800354a:	7963      	ldrb	r3, [r4, #5]
 800354c:	0030      	movs	r0, r6
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	7923      	ldrb	r3, [r4, #4]
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	78e3      	ldrb	r3, [r4, #3]
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	78a3      	ldrb	r3, [r4, #2]
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	7863      	ldrb	r3, [r4, #1]
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	7823      	ldrb	r3, [r4, #0]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <App_Send+0xc8>)
 8003566:	f00b fc5b 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
		LED_Blink(LED_MODE_TX);
 800356a:	0038      	movs	r0, r7
 800356c:	f7ff ffb0 	bl	80034d0 <LED_Blink>
		if(app.cfg.cfg.tx_mode == LORAWAN_MODE){
 8003570:	7beb      	ldrb	r3, [r5, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d111      	bne.n	800359a <App_Send+0x76>
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 8003576:	4c1e      	ldr	r4, [pc, #120]	; (80035f0 <App_Send+0xcc>)
			if(mode == SEND_MODE_AUTO){
 8003578:	9b08      	ldr	r3, [sp, #32]
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 800357a:	6860      	ldr	r0, [r4, #4]
				AppData.Port = LORAWAN_USER_APP_PORT;
 800357c:	7026      	strb	r6, [r4, #0]
			if(mode == SEND_MODE_AUTO){
 800357e:	2b00      	cmp	r3, #0
 8003580:	d108      	bne.n	8003594 <App_Send+0x70>
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 8003582:	f7ff fef5 	bl	8003370 <fillBufferAutoTx>
				AppData.BufferSize = fillBufferManualTx(AppData.Buffer);
 8003586:	7060      	strb	r0, [r4, #1]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003588:	2100      	movs	r1, #0
 800358a:	2002      	movs	r0, #2
 800358c:	f00b f950 	bl	800e830 <UTIL_SEQ_SetTask>
}
 8003590:	b00f      	add	sp, #60	; 0x3c
 8003592:	bdf0      	pop	{r4, r5, r6, r7, pc}
				AppData.BufferSize = fillBufferManualTx(AppData.Buffer);
 8003594:	f7ff fefe 	bl	8003394 <fillBufferManualTx>
 8003598:	e7f5      	b.n	8003586 <App_Send+0x62>
		}else if(app.cfg.cfg.tx_mode == P2P_MODE){
 800359a:	2b01      	cmp	r3, #1
 800359c:	d1f8      	bne.n	8003590 <App_Send+0x6c>
			Radio.SetChannel(P2P_RF_FREQUENCY);
 800359e:	4f15      	ldr	r7, [pc, #84]	; (80035f4 <App_Send+0xd0>)
 80035a0:	4815      	ldr	r0, [pc, #84]	; (80035f8 <App_Send+0xd4>)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	9309      	str	r3, [sp, #36]	; 0x24
 80035a6:	4798      	blx	r3
			LmHandlerGetDevEUI(&LoRaBuffer[0]);
 80035a8:	4e14      	ldr	r6, [pc, #80]	; (80035fc <App_Send+0xd8>)
 80035aa:	0030      	movs	r0, r6
 80035ac:	f005 fa94 	bl	8008ad8 <LmHandlerGetDevEUI>
			LoRaBufferSize = 8;
 80035b0:	2308      	movs	r3, #8
 80035b2:	4c13      	ldr	r4, [pc, #76]	; (8003600 <App_Send+0xdc>)
 80035b4:	18f0      	adds	r0, r6, r3
 80035b6:	8023      	strh	r3, [r4, #0]
			if(mode == SEND_MODE_AUTO){
 80035b8:	9b08      	ldr	r3, [sp, #32]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d110      	bne.n	80035e0 <App_Send+0xbc>
				LoRaBufferSize += fillBufferAutoTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 80035be:	f7ff fed7 	bl	8003370 <fillBufferAutoTx>
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 80035c2:	8823      	ldrh	r3, [r4, #0]
 80035c4:	18c0      	adds	r0, r0, r3
 80035c6:	8020      	strh	r0, [r4, #0]
			app.stt.send_mode = mode;
 80035c8:	9b08      	ldr	r3, [sp, #32]
			Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 80035ca:	8821      	ldrh	r1, [r4, #0]
			app.stt.send_mode = mode;
 80035cc:	712b      	strb	r3, [r5, #4]
			Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 80035ce:	3902      	subs	r1, #2
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	b2c9      	uxtb	r1, r1
 80035d4:	1cb0      	adds	r0, r6, #2
 80035d6:	9308      	str	r3, [sp, #32]
 80035d8:	4798      	blx	r3
			app.stt.tx_cnt = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	806b      	strh	r3, [r5, #2]
}
 80035de:	e7d7      	b.n	8003590 <App_Send+0x6c>
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 80035e0:	f7ff fed8 	bl	8003394 <fillBufferManualTx>
 80035e4:	e7ed      	b.n	80035c2 <App_Send+0x9e>
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000038 	.word	0x20000038
 80035ec:	0800f2b1 	.word	0x0800f2b1
 80035f0:	20000000 	.word	0x20000000
 80035f4:	0800fc84 	.word	0x0800fc84
 80035f8:	3689cac0 	.word	0x3689cac0
 80035fc:	200003a4 	.word	0x200003a4
 8003600:	20000036 	.word	0x20000036

08003604 <OnBtnTimeoutTimer>:
static void OnBtnTimeoutTimer(void *contextid){
 8003604:	b513      	push	{r0, r1, r4, lr}
	if(app.stt.btnCnt >= CLICKS_TO_TX && app.stt.btnCnt < (CLICKS_TO_CHANGE_MODE)){
 8003606:	4c14      	ldr	r4, [pc, #80]	; (8003658 <OnBtnTimeoutTimer+0x54>)
 8003608:	8823      	ldrh	r3, [r4, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	2a03      	cmp	r2, #3
 800360e:	d80a      	bhi.n	8003626 <OnBtnTimeoutTimer+0x22>
		savedValue = flux + 50;
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <OnBtnTimeoutTimer+0x58>)
 8003612:	4a13      	ldr	r2, [pc, #76]	; (8003660 <OnBtnTimeoutTimer+0x5c>)
 8003614:	881b      	ldrh	r3, [r3, #0]
		App_Send(SEND_MODE_MANUAL);
 8003616:	2001      	movs	r0, #1
		savedValue = flux + 50;
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	8013      	strh	r3, [r2, #0]
		App_Send(SEND_MODE_MANUAL);
 800361c:	f7ff ff82 	bl	8003524 <App_Send>
	app.stt.btnCnt = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	8023      	strh	r3, [r4, #0]
}
 8003624:	bd13      	pop	{r0, r1, r4, pc}
	}else if(app.stt.btnCnt >= (CLICKS_TO_CHANGE_MODE)){
 8003626:	2b04      	cmp	r3, #4
 8003628:	d9fa      	bls.n	8003620 <OnBtnTimeoutTimer+0x1c>
		if(app.cfg.cfg.tx_mode != P2P_MODE){
 800362a:	7be0      	ldrb	r0, [r4, #15]
 800362c:	2801      	cmp	r0, #1
 800362e:	d00b      	beq.n	8003648 <OnBtnTimeoutTimer+0x44>
			app.cfg.cfg.tx_mode = P2P_MODE;
 8003630:	2301      	movs	r3, #1
			LED_Blink(LED_MODE_P2P);
 8003632:	2002      	movs	r0, #2
			app.cfg.cfg.tx_mode = P2P_MODE;
 8003634:	73e3      	strb	r3, [r4, #15]
			LED_Blink(LED_MODE_P2P);
 8003636:	f7ff ff4b 	bl	80034d0 <LED_Blink>
			P2P_Radio_Init();
 800363a:	f7ff fd29 	bl	8003090 <P2P_Radio_Init>
			Radio.Sleep();
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <OnBtnTimeoutTimer+0x60>)
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	4798      	blx	r3
 8003646:	e7eb      	b.n	8003620 <OnBtnTimeoutTimer+0x1c>
			app.cfg.cfg.tx_mode = LORAWAN_MODE;
 8003648:	2300      	movs	r3, #0
 800364a:	73e3      	strb	r3, [r4, #15]
			LED_Blink(LED_MODE_LORAWAN);
 800364c:	f7ff ff40 	bl	80034d0 <LED_Blink>
			LoRaWAN_Mode_Init();
 8003650:	f7ff fd6c 	bl	800312c <LoRaWAN_Mode_Init>
 8003654:	e7e4      	b.n	8003620 <OnBtnTimeoutTimer+0x1c>
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	20000038 	.word	0x20000038
 800365c:	20000428 	.word	0x20000428
 8003660:	200004b2 	.word	0x200004b2
 8003664:	0800fc84 	.word	0x0800fc84

08003668 <getInterruptFlag>:
	return flagInterrupt;
 8003668:	4b01      	ldr	r3, [pc, #4]	; (8003670 <getInterruptFlag+0x8>)
 800366a:	6818      	ldr	r0, [r3, #0]
}
 800366c:	4770      	bx	lr
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000424 	.word	0x20000424

08003674 <resetInterruptFlag>:
	flagInterrupt = 0;
 8003674:	2200      	movs	r2, #0
 8003676:	4b01      	ldr	r3, [pc, #4]	; (800367c <resetInterruptFlag+0x8>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	4770      	bx	lr
 800367c:	20000424 	.word	0x20000424

08003680 <FXOS8700CQForceSleep>:
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_SYSMOD, 1, &Sysmod, 1, i2c_timeout);
 8003680:	23fa      	movs	r3, #250	; 0xfa
{
 8003682:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_SYSMOD, 1, &Sysmod, 1, i2c_timeout);
 8003684:	2517      	movs	r5, #23
{
 8003686:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_SYSMOD, 1, &Sysmod, 1, i2c_timeout);
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4c0b      	ldr	r4, [pc, #44]	; (80036b8 <FXOS8700CQForceSleep+0x38>)
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	3bf4      	subs	r3, #244	; 0xf4
 8003690:	3bff      	subs	r3, #255	; 0xff
 8003692:	446d      	add	r5, sp
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	220b      	movs	r2, #11
 8003698:	213c      	movs	r1, #60	; 0x3c
 800369a:	0020      	movs	r0, r4
 800369c:	9500      	str	r5, [sp, #0]
 800369e:	f002 f817 	bl	80056d0 <HAL_I2C_Mem_Read>
	if(Sysmod != 0x02)
 80036a2:	782b      	ldrb	r3, [r5, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d005      	beq.n	80036b4 <FXOS8700CQForceSleep+0x34>
		FXOS8700CQReset(&hi2c1);
 80036a8:	0020      	movs	r0, r4
 80036aa:	f7ff fc23 	bl	8002ef4 <FXOS8700CQReset>
		HAL_Delay(10000);
 80036ae:	4803      	ldr	r0, [pc, #12]	; (80036bc <FXOS8700CQForceSleep+0x3c>)
 80036b0:	f7ff fb3e 	bl	8002d30 <HAL_Delay>
}
 80036b4:	b007      	add	sp, #28
 80036b6:	bd30      	pop	{r4, r5, pc}
 80036b8:	2000043c 	.word	0x2000043c
 80036bc:	00002710 	.word	0x00002710

080036c0 <OnTimer>:
static void OnTimer(void *contextid){
 80036c0:	b510      	push	{r4, lr}
	FXOS8700CQForceSleep();
 80036c2:	f7ff ffdd 	bl	8003680 <FXOS8700CQForceSleep>
}
 80036c6:	bd10      	pop	{r4, pc}

080036c8 <tratarInterrupcao>:
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_INT_SRC_REG, 1, &Int_Source, 1, i2c_timeout);
 80036c8:	23fa      	movs	r3, #250	; 0xfa
{
 80036ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_INT_SRC_REG, 1, &Int_Source, 1, i2c_timeout);
 80036cc:	2415      	movs	r4, #21
{
 80036ce:	b089      	sub	sp, #36	; 0x24
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_INT_SRC_REG, 1, &Int_Source, 1, i2c_timeout);
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4d9b      	ldr	r5, [pc, #620]	; (8003940 <tratarInterrupcao+0x278>)
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	aa02      	add	r2, sp, #8
 80036d8:	3bf4      	subs	r3, #244	; 0xf4
 80036da:	3bff      	subs	r3, #255	; 0xff
 80036dc:	18a4      	adds	r4, r4, r2
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	225e      	movs	r2, #94	; 0x5e
 80036e2:	213c      	movs	r1, #60	; 0x3c
 80036e4:	0028      	movs	r0, r5
 80036e6:	9400      	str	r4, [sp, #0]
 80036e8:	f001 fff2 	bl	80056d0 <HAL_I2C_Mem_Read>
	if (Int_Source & 0x02)
 80036ec:	7823      	ldrb	r3, [r4, #0]
 80036ee:	079b      	lsls	r3, r3, #30
 80036f0:	d50d      	bpl.n	800370e <tratarInterrupcao+0x46>
		magXMax = magYMax = magZMax = ( 0x8000 );
 80036f2:	4b94      	ldr	r3, [pc, #592]	; (8003944 <tratarInterrupcao+0x27c>)
 80036f4:	4a94      	ldr	r2, [pc, #592]	; (8003948 <tratarInterrupcao+0x280>)
 80036f6:	8013      	strh	r3, [r2, #0]
 80036f8:	4a94      	ldr	r2, [pc, #592]	; (800394c <tratarInterrupcao+0x284>)
 80036fa:	8013      	strh	r3, [r2, #0]
 80036fc:	4a94      	ldr	r2, [pc, #592]	; (8003950 <tratarInterrupcao+0x288>)
 80036fe:	8013      	strh	r3, [r2, #0]
		magXMin = magYMin = magZMin = ( 0x7FFF );
 8003700:	4b94      	ldr	r3, [pc, #592]	; (8003954 <tratarInterrupcao+0x28c>)
 8003702:	4a95      	ldr	r2, [pc, #596]	; (8003958 <tratarInterrupcao+0x290>)
 8003704:	8013      	strh	r3, [r2, #0]
 8003706:	4a95      	ldr	r2, [pc, #596]	; (800395c <tratarInterrupcao+0x294>)
 8003708:	8013      	strh	r3, [r2, #0]
 800370a:	4a95      	ldr	r2, [pc, #596]	; (8003960 <tratarInterrupcao+0x298>)
 800370c:	8013      	strh	r3, [r2, #0]
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INT_SOURCE, 1, &Int_Source, 1, i2c_timeout);
 800370e:	23fa      	movs	r3, #250	; 0xfa
 8003710:	2615      	movs	r6, #21
 8003712:	2401      	movs	r4, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	ab02      	add	r3, sp, #8
 800371a:	18f6      	adds	r6, r6, r3
 800371c:	220c      	movs	r2, #12
 800371e:	0023      	movs	r3, r4
 8003720:	213c      	movs	r1, #60	; 0x3c
 8003722:	0028      	movs	r0, r5
 8003724:	9401      	str	r4, [sp, #4]
 8003726:	9600      	str	r6, [sp, #0]
 8003728:	f001 ffd2 	bl	80056d0 <HAL_I2C_Mem_Read>
	if (Int_Source & 0x01) //Data ready interrupt
 800372c:	7833      	ldrb	r3, [r6, #0]
 800372e:	4223      	tst	r3, r4
 8003730:	d100      	bne.n	8003734 <tratarInterrupcao+0x6c>
 8003732:	e0fd      	b.n	8003930 <tratarInterrupcao+0x268>
		uint8_t databyteHI=0, databyteLO = 0;
 8003734:	2716      	movs	r7, #22
 8003736:	ab02      	add	r3, sp, #8
 8003738:	2617      	movs	r6, #23
 800373a:	18ff      	adds	r7, r7, r3
 800373c:	2300      	movs	r3, #0
 800373e:	aa02      	add	r2, sp, #8
 8003740:	18b6      	adds	r6, r6, r2
 8003742:	703b      	strb	r3, [r7, #0]
 8003744:	7033      	strb	r3, [r6, #0]
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x33, 1, &databyteHI, 1, i2c_timeout);
 8003746:	33f5      	adds	r3, #245	; 0xf5
 8003748:	33ff      	adds	r3, #255	; 0xff
 800374a:	2233      	movs	r2, #51	; 0x33
 800374c:	213c      	movs	r1, #60	; 0x3c
 800374e:	0028      	movs	r0, r5
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	9401      	str	r4, [sp, #4]
 8003754:	0023      	movs	r3, r4
 8003756:	9700      	str	r7, [sp, #0]
 8003758:	f001 ffba 	bl	80056d0 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x34, 1, &databyteLO, 1, i2c_timeout);
 800375c:	23fa      	movs	r3, #250	; 0xfa
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2234      	movs	r2, #52	; 0x34
 8003762:	213c      	movs	r1, #60	; 0x3c
 8003764:	0028      	movs	r0, r5
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	9401      	str	r4, [sp, #4]
 800376a:	0023      	movs	r3, r4
 800376c:	9600      	str	r6, [sp, #0]
 800376e:	f001 ffaf 	bl	80056d0 <HAL_I2C_Mem_Read>
		MAG.x = (databyteHI << 8) | databyteLO;
 8003772:	783a      	ldrb	r2, [r7, #0]
 8003774:	7833      	ldrb	r3, [r6, #0]
 8003776:	0212      	lsls	r2, r2, #8
 8003778:	4313      	orrs	r3, r2
 800377a:	4a7a      	ldr	r2, [pc, #488]	; (8003964 <tratarInterrupcao+0x29c>)
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x35, 1, &databyteHI, 1, i2c_timeout);
 800377c:	213c      	movs	r1, #60	; 0x3c
		MAG.x = (databyteHI << 8) | databyteLO;
 800377e:	8013      	strh	r3, [r2, #0]
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x35, 1, &databyteHI, 1, i2c_timeout);
 8003780:	23fa      	movs	r3, #250	; 0xfa
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2235      	movs	r2, #53	; 0x35
 8003786:	0028      	movs	r0, r5
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	9401      	str	r4, [sp, #4]
 800378c:	0023      	movs	r3, r4
 800378e:	9700      	str	r7, [sp, #0]
 8003790:	f001 ff9e 	bl	80056d0 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x36, 1, &databyteLO, 1, i2c_timeout);
 8003794:	23fa      	movs	r3, #250	; 0xfa
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	2236      	movs	r2, #54	; 0x36
 800379a:	213c      	movs	r1, #60	; 0x3c
 800379c:	0028      	movs	r0, r5
 800379e:	9302      	str	r3, [sp, #8]
 80037a0:	9401      	str	r4, [sp, #4]
 80037a2:	0023      	movs	r3, r4
 80037a4:	9600      	str	r6, [sp, #0]
 80037a6:	f001 ff93 	bl	80056d0 <HAL_I2C_Mem_Read>
		MAG.y = (databyteHI << 8) | databyteLO;
 80037aa:	783a      	ldrb	r2, [r7, #0]
 80037ac:	7833      	ldrb	r3, [r6, #0]
 80037ae:	0212      	lsls	r2, r2, #8
 80037b0:	4313      	orrs	r3, r2
 80037b2:	4a6c      	ldr	r2, [pc, #432]	; (8003964 <tratarInterrupcao+0x29c>)
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x37, 1, &databyteHI, 1, i2c_timeout);
 80037b4:	213c      	movs	r1, #60	; 0x3c
		MAG.y = (databyteHI << 8) | databyteLO;
 80037b6:	8053      	strh	r3, [r2, #2]
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x37, 1, &databyteHI, 1, i2c_timeout);
 80037b8:	23fa      	movs	r3, #250	; 0xfa
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	2237      	movs	r2, #55	; 0x37
 80037be:	0028      	movs	r0, r5
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	9401      	str	r4, [sp, #4]
 80037c4:	0023      	movs	r3, r4
 80037c6:	9700      	str	r7, [sp, #0]
 80037c8:	f001 ff82 	bl	80056d0 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, 0x38, 1, &databyteLO, 1, i2c_timeout);
 80037cc:	23fa      	movs	r3, #250	; 0xfa
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2238      	movs	r2, #56	; 0x38
 80037d2:	213c      	movs	r1, #60	; 0x3c
 80037d4:	0028      	movs	r0, r5
 80037d6:	9302      	str	r3, [sp, #8]
 80037d8:	9401      	str	r4, [sp, #4]
 80037da:	0023      	movs	r3, r4
 80037dc:	9600      	str	r6, [sp, #0]
 80037de:	f001 ff77 	bl	80056d0 <HAL_I2C_Mem_Read>
		MAG.z = (databyteHI << 8) | databyteLO;
 80037e2:	7838      	ldrb	r0, [r7, #0]
 80037e4:	7834      	ldrb	r4, [r6, #0]
 80037e6:	0200      	lsls	r0, r0, #8
 80037e8:	4b5e      	ldr	r3, [pc, #376]	; (8003964 <tratarInterrupcao+0x29c>)
 80037ea:	4304      	orrs	r4, r0
 80037ec:	b224      	sxth	r4, r4
 80037ee:	809c      	strh	r4, [r3, #4]
		return MAG.y;
 80037f0:	2502      	movs	r5, #2
 80037f2:	5f5d      	ldrsh	r5, [r3, r5]
		return MAG.x;
 80037f4:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <tratarInterrupcao+0x29c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	5e9b      	ldrsh	r3, [r3, r2]
 80037fa:	9305      	str	r3, [sp, #20]
		tick = UTIL_TIMER_GetCurrentTime();
 80037fc:	f00b f8fe 	bl	800e9fc <UTIL_TIMER_GetCurrentTime>
		if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8003800:	4f59      	ldr	r7, [pc, #356]	; (8003968 <tratarInterrupcao+0x2a0>)
 8003802:	4e5a      	ldr	r6, [pc, #360]	; (800396c <tratarInterrupcao+0x2a4>)
 8003804:	683a      	ldr	r2, [r7, #0]
		tick = UTIL_TIMER_GetCurrentTime();
 8003806:	9004      	str	r0, [sp, #16]
		if(tick - last_tick >= INPUT_DEBOUNCE_TIME){
 8003808:	1a83      	subs	r3, r0, r2
 800380a:	4a59      	ldr	r2, [pc, #356]	; (8003970 <tratarInterrupcao+0x2a8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d90a      	bls.n	8003826 <tratarInterrupcao+0x15e>
		int32_t magZ = FXOS8700CQGetData(GET_MAG_X) * FXOS8700CQGetData(GET_MAG_X);
 8003810:	9805      	ldr	r0, [sp, #20]
		int32_t magY = FXOS8700CQGetData(GET_MAG_Y) * FXOS8700CQGetData(GET_MAG_Y);
 8003812:	436d      	muls	r5, r5
		int32_t magZ = FXOS8700CQGetData(GET_MAG_X) * FXOS8700CQGetData(GET_MAG_X);
 8003814:	4340      	muls	r0, r0
		int32_t magX = FXOS8700CQGetData(GET_MAG_Z) * FXOS8700CQGetData(GET_MAG_Z);
 8003816:	4364      	muls	r4, r4
			flux = squareRoot(magZ + magY + magX);
 8003818:	1828      	adds	r0, r5, r0
 800381a:	1900      	adds	r0, r0, r4
 800381c:	f7ff fc0a 	bl	8003034 <squareRoot>
			last_tick = tick;
 8003820:	9b04      	ldr	r3, [sp, #16]
			flux = squareRoot(magZ + magY + magX);
 8003822:	8030      	strh	r0, [r6, #0]
			last_tick = tick;
 8003824:	603b      	str	r3, [r7, #0]
		APP_LOG(TS_OFF, VLEVEL_L, "flux: %d\r\n", flux);
 8003826:	2200      	movs	r2, #0
 8003828:	5eb3      	ldrsh	r3, [r6, r2]
 800382a:	2200      	movs	r2, #0
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	0011      	movs	r1, r2
 8003830:	4b50      	ldr	r3, [pc, #320]	; (8003974 <tratarInterrupcao+0x2ac>)
 8003832:	2001      	movs	r0, #1
 8003834:	f00b faf4 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
		if (flux > savedValue)
 8003838:	2300      	movs	r3, #0
 800383a:	5ef2      	ldrsh	r2, [r6, r3]
 800383c:	4b4e      	ldr	r3, [pc, #312]	; (8003978 <tratarInterrupcao+0x2b0>)
 800383e:	4c4f      	ldr	r4, [pc, #316]	; (800397c <tratarInterrupcao+0x2b4>)
 8003840:	2100      	movs	r1, #0
 8003842:	5e5b      	ldrsh	r3, [r3, r1]
 8003844:	4d4e      	ldr	r5, [pc, #312]	; (8003980 <tratarInterrupcao+0x2b8>)
 8003846:	429a      	cmp	r2, r3
 8003848:	dc00      	bgt.n	800384c <tratarInterrupcao+0x184>
 800384a:	e073      	b.n	8003934 <tratarInterrupcao+0x26c>
			APP_LOG(TS_OFF, VLEVEL_L, "Magnetometer Vector Magnitude interrupt should have been triggered\r\n");
 800384c:	2200      	movs	r2, #0
 800384e:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <tratarInterrupcao+0x2bc>)
 8003850:	0011      	movs	r1, r2
 8003852:	2001      	movs	r0, #1
 8003854:	f00b fae4 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
			if(vagaStatus == 0)
 8003858:	7823      	ldrb	r3, [r4, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <tratarInterrupcao+0x19a>
				transmiteStatusVaga = 1;
 800385e:	3301      	adds	r3, #1
 8003860:	702b      	strb	r3, [r5, #0]
			vagaStatus = 1;
 8003862:	2301      	movs	r3, #1
			vagaStatus = 0;
 8003864:	7023      	strb	r3, [r4, #0]
		return MAG.x;
 8003866:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <tratarInterrupcao+0x29c>)
 8003868:	2100      	movs	r1, #0
 800386a:	5e59      	ldrsh	r1, [r3, r1]
		if (FXOS8700CQGetData(GET_MAG_X) < magXMin)
 800386c:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <tratarInterrupcao+0x298>)
 800386e:	2200      	movs	r2, #0
 8003870:	5e9b      	ldrsh	r3, [r3, r2]
 8003872:	428b      	cmp	r3, r1
 8003874:	dd01      	ble.n	800387a <tratarInterrupcao+0x1b2>
			magXMin = FXOS8700CQGetData(GET_MAG_X);
 8003876:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <tratarInterrupcao+0x298>)
 8003878:	8019      	strh	r1, [r3, #0]
		return MAG.y;
 800387a:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <tratarInterrupcao+0x29c>)
 800387c:	2202      	movs	r2, #2
 800387e:	5e9a      	ldrsh	r2, [r3, r2]
		if (FXOS8700CQGetData(GET_MAG_Y) < magYMin)
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <tratarInterrupcao+0x294>)
 8003882:	2000      	movs	r0, #0
 8003884:	5e1b      	ldrsh	r3, [r3, r0]
 8003886:	4293      	cmp	r3, r2
 8003888:	dd01      	ble.n	800388e <tratarInterrupcao+0x1c6>
			magYMin = FXOS8700CQGetData(GET_MAG_Y);
 800388a:	4b34      	ldr	r3, [pc, #208]	; (800395c <tratarInterrupcao+0x294>)
 800388c:	801a      	strh	r2, [r3, #0]
		return MAG.z;
 800388e:	4b35      	ldr	r3, [pc, #212]	; (8003964 <tratarInterrupcao+0x29c>)
		if (FXOS8700CQGetData(GET_MAG_Z) < magZMin)
 8003890:	4f31      	ldr	r7, [pc, #196]	; (8003958 <tratarInterrupcao+0x290>)
		return MAG.z;
 8003892:	2004      	movs	r0, #4
 8003894:	5e1b      	ldrsh	r3, [r3, r0]
		if (FXOS8700CQGetData(GET_MAG_Z) < magZMin)
 8003896:	2000      	movs	r0, #0
 8003898:	5e3f      	ldrsh	r7, [r7, r0]
 800389a:	429f      	cmp	r7, r3
 800389c:	dd01      	ble.n	80038a2 <tratarInterrupcao+0x1da>
			magZMin = FXOS8700CQGetData(GET_MAG_Z);
 800389e:	4f2e      	ldr	r7, [pc, #184]	; (8003958 <tratarInterrupcao+0x290>)
 80038a0:	803b      	strh	r3, [r7, #0]
		if (FXOS8700CQGetData(GET_MAG_X) > magXMax)
 80038a2:	4f2b      	ldr	r7, [pc, #172]	; (8003950 <tratarInterrupcao+0x288>)
 80038a4:	2600      	movs	r6, #0
 80038a6:	5fb8      	ldrsh	r0, [r7, r6]
 80038a8:	4288      	cmp	r0, r1
 80038aa:	da00      	bge.n	80038ae <tratarInterrupcao+0x1e6>
			magXMax = FXOS8700CQGetData(GET_MAG_X);
 80038ac:	8039      	strh	r1, [r7, #0]
		if (FXOS8700CQGetData(GET_MAG_Y) > magYMax)
 80038ae:	4927      	ldr	r1, [pc, #156]	; (800394c <tratarInterrupcao+0x284>)
 80038b0:	2600      	movs	r6, #0
 80038b2:	5f88      	ldrsh	r0, [r1, r6]
 80038b4:	4290      	cmp	r0, r2
 80038b6:	da00      	bge.n	80038ba <tratarInterrupcao+0x1f2>
			magYMax = FXOS8700CQGetData(GET_MAG_Y);
 80038b8:	800a      	strh	r2, [r1, #0]
		if (FXOS8700CQGetData(GET_MAG_Z) > magZMax)
 80038ba:	4a23      	ldr	r2, [pc, #140]	; (8003948 <tratarInterrupcao+0x280>)
 80038bc:	2000      	movs	r0, #0
 80038be:	5e11      	ldrsh	r1, [r2, r0]
 80038c0:	4299      	cmp	r1, r3
 80038c2:	da00      	bge.n	80038c6 <tratarInterrupcao+0x1fe>
			magZMax = FXOS8700CQGetData(GET_MAG_Z);
 80038c4:	8013      	strh	r3, [r2, #0]
		refMagX = (magXMax + magXMin) / 2;
 80038c6:	2200      	movs	r2, #0
 80038c8:	5ebb      	ldrsh	r3, [r7, r2]
 80038ca:	4a25      	ldr	r2, [pc, #148]	; (8003960 <tratarInterrupcao+0x298>)
		if(transmiteStatusVaga == 1)
 80038cc:	782e      	ldrb	r6, [r5, #0]
		refMagX = (magXMax + magXMin) / 2;
 80038ce:	2100      	movs	r1, #0
 80038d0:	5e52      	ldrsh	r2, [r2, r1]
 80038d2:	189a      	adds	r2, r3, r2
 80038d4:	0fd3      	lsrs	r3, r2, #31
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	4a2b      	ldr	r2, [pc, #172]	; (8003988 <tratarInterrupcao+0x2c0>)
 80038da:	105b      	asrs	r3, r3, #1
 80038dc:	8013      	strh	r3, [r2, #0]
		refMagY = (magYMax + magYMin) / 2;
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <tratarInterrupcao+0x284>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	5e9b      	ldrsh	r3, [r3, r2]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <tratarInterrupcao+0x294>)
 80038e6:	2100      	movs	r1, #0
 80038e8:	5e52      	ldrsh	r2, [r2, r1]
 80038ea:	189a      	adds	r2, r3, r2
 80038ec:	0fd3      	lsrs	r3, r2, #31
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <tratarInterrupcao+0x2c4>)
 80038f2:	105b      	asrs	r3, r3, #1
 80038f4:	8013      	strh	r3, [r2, #0]
		refMagZ = (magZMax + magZMin) / 2;
 80038f6:	4b14      	ldr	r3, [pc, #80]	; (8003948 <tratarInterrupcao+0x280>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	5e9b      	ldrsh	r3, [r3, r2]
 80038fc:	4a16      	ldr	r2, [pc, #88]	; (8003958 <tratarInterrupcao+0x290>)
 80038fe:	2100      	movs	r1, #0
 8003900:	5e52      	ldrsh	r2, [r2, r1]
 8003902:	189a      	adds	r2, r3, r2
 8003904:	0fd3      	lsrs	r3, r2, #31
 8003906:	189b      	adds	r3, r3, r2
 8003908:	4a21      	ldr	r2, [pc, #132]	; (8003990 <tratarInterrupcao+0x2c8>)
 800390a:	105b      	asrs	r3, r3, #1
 800390c:	8013      	strh	r3, [r2, #0]
		if(transmiteStatusVaga == 1)
 800390e:	2e01      	cmp	r6, #1
 8003910:	d10c      	bne.n	800392c <tratarInterrupcao+0x264>
			transmiteStatusVaga = 0;
 8003912:	2700      	movs	r7, #0
			App_Send(SEND_MODE_MANUAL);
 8003914:	0030      	movs	r0, r6
			transmiteStatusVaga = 0;
 8003916:	702f      	strb	r7, [r5, #0]
			App_Send(SEND_MODE_MANUAL);
 8003918:	f7ff fe04 	bl	8003524 <App_Send>
			APP_LOG(TS_OFF, VLEVEL_L, "Enviou %d\r\n", vagaStatus);
 800391c:	7823      	ldrb	r3, [r4, #0]
 800391e:	003a      	movs	r2, r7
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	0039      	movs	r1, r7
 8003924:	0030      	movs	r0, r6
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <tratarInterrupcao+0x2cc>)
 8003928:	f00b fa7a 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
		 FXOS8700CQInitFlux(&hi2c1);
 800392c:	f7ff fb16 	bl	8002f5c <FXOS8700CQInitFlux.constprop.0>
}
 8003930:	b009      	add	sp, #36	; 0x24
 8003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(vagaStatus == 1)
 8003934:	7823      	ldrb	r3, [r4, #0]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d100      	bne.n	800393c <tratarInterrupcao+0x274>
				transmiteStatusVaga = 1;
 800393a:	702b      	strb	r3, [r5, #0]
			vagaStatus = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	e791      	b.n	8003864 <tratarInterrupcao+0x19c>
 8003940:	2000043c 	.word	0x2000043c
 8003944:	ffff8000 	.word	0xffff8000
 8003948:	20000052 	.word	0x20000052
 800394c:	2000004e 	.word	0x2000004e
 8003950:	2000004a 	.word	0x2000004a
 8003954:	00007fff 	.word	0x00007fff
 8003958:	20000054 	.word	0x20000054
 800395c:	20000050 	.word	0x20000050
 8003960:	2000004c 	.word	0x2000004c
 8003964:	200003e4 	.word	0x200003e4
 8003968:	200004a8 	.word	0x200004a8
 800396c:	20000428 	.word	0x20000428
 8003970:	0000270f 	.word	0x0000270f
 8003974:	0800f2d7 	.word	0x0800f2d7
 8003978:	200004b2 	.word	0x200004b2
 800397c:	200004b4 	.word	0x200004b4
 8003980:	20000056 	.word	0x20000056
 8003984:	0800f2e2 	.word	0x0800f2e2
 8003988:	200004ac 	.word	0x200004ac
 800398c:	200004ae 	.word	0x200004ae
 8003990:	200004b0 	.word	0x200004b0
 8003994:	0800f327 	.word	0x0800f327

08003998 <EXTI_Init>:
	pExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 8003998:	2301      	movs	r3, #1
void EXTI_Init(AppDioIrqHandler **irqHandlers){
 800399a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399c:	b085      	sub	sp, #20
	pExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 800399e:	9301      	str	r3, [sp, #4]
	pExtiConfig.Trigger = EXTI_TRIGGER_FALLING;
 80039a0:	18db      	adds	r3, r3, r3
void EXTI_Init(AppDioIrqHandler **irqHandlers){
 80039a2:	0006      	movs	r6, r0
	pExtiConfig.Trigger = EXTI_TRIGGER_FALLING;
 80039a4:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80039aa:	b672      	cpsid	i
		pExtiConfig.GPIOSel = app_exti_cnt[i].exti_port;
 80039ac:	2400      	movs	r4, #0
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 80039ae:	4d17      	ldr	r5, [pc, #92]	; (8003a0c <EXTI_Init+0x74>)
		pExtiConfig.Line = app_exti_cnt[i].line;
 80039b0:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <EXTI_Init+0x78>)
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 80039b2:	4669      	mov	r1, sp
 80039b4:	0028      	movs	r0, r5
		pExtiConfig.Line = app_exti_cnt[i].line;
 80039b6:	9300      	str	r3, [sp, #0]
		pExtiConfig.GPIOSel = app_exti_cnt[i].exti_port;
 80039b8:	9403      	str	r4, [sp, #12]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 80039ba:	f001 f91f 	bl	8004bfc <HAL_EXTI_SetConfigLine>
		HAL_EXTI_RegisterCallback(&hApp_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80039be:	0021      	movs	r1, r4
 80039c0:	6832      	ldr	r2, [r6, #0]
 80039c2:	0028      	movs	r0, r5
 80039c4:	f001 f96c 	bl	8004ca0 <HAL_EXTI_RegisterCallback>
		HAL_NVIC_SetPriority(app_exti_cnt[i].irqn, app_exti_cnt[i].prio, 0x00);
 80039c8:	0022      	movs	r2, r4
 80039ca:	0021      	movs	r1, r4
 80039cc:	2007      	movs	r0, #7
 80039ce:	f000 ff8b 	bl	80048e8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(app_exti_cnt[i].irqn);
 80039d2:	2007      	movs	r0, #7
 80039d4:	f000 ffb2 	bl	800493c <HAL_NVIC_EnableIRQ>
		pExtiConfig.Line = app_exti_btn[i].line;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <EXTI_Init+0x7c>)
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 80039da:	3508      	adds	r5, #8
		pExtiConfig.Line = app_exti_btn[i].line;
 80039dc:	9300      	str	r3, [sp, #0]
		pExtiConfig.GPIOSel = app_exti_btn[i].exti_port;
 80039de:	2301      	movs	r3, #1
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 80039e0:	4669      	mov	r1, sp
 80039e2:	0028      	movs	r0, r5
		pExtiConfig.GPIOSel = app_exti_btn[i].exti_port;
 80039e4:	9303      	str	r3, [sp, #12]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 80039e6:	f001 f909 	bl	8004bfc <HAL_EXTI_SetConfigLine>
		HAL_EXTI_RegisterCallback(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], HAL_EXTI_COMMON_CB_ID, irqHandlers[i+APP_EXTI_CNT_NUM]);
 80039ea:	0021      	movs	r1, r4
 80039ec:	6872      	ldr	r2, [r6, #4]
 80039ee:	0028      	movs	r0, r5
 80039f0:	f001 f956 	bl	8004ca0 <HAL_EXTI_RegisterCallback>
		HAL_NVIC_SetPriority(app_exti_btn[i].irqn, app_exti_btn[i].prio, 0x00);
 80039f4:	0022      	movs	r2, r4
 80039f6:	0021      	movs	r1, r4
 80039f8:	2007      	movs	r0, #7
 80039fa:	f000 ff75 	bl	80048e8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(app_exti_btn[i].irqn);
 80039fe:	2007      	movs	r0, #7
 8003a00:	f000 ff9c 	bl	800493c <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a04:	f387 8810 	msr	PRIMASK, r7
}
 8003a08:	b005      	add	sp, #20
 8003a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0c:	2000042c 	.word	0x2000042c
 8003a10:	0600000d 	.word	0x0600000d
 8003a14:	06000006 	.word	0x06000006

08003a18 <TxAppInit>:
void TxAppInit(void){
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	flagInterrupt = 0;
 8003a1a:	2400      	movs	r4, #0
 8003a1c:	4b6e      	ldr	r3, [pc, #440]	; (8003bd8 <TxAppInit+0x1c0>)
void TxAppInit(void){
 8003a1e:	b095      	sub	sp, #84	; 0x54
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003a20:	0021      	movs	r1, r4
 8003a22:	2001      	movs	r0, #1
 8003a24:	4a6d      	ldr	r2, [pc, #436]	; (8003bdc <TxAppInit+0x1c4>)
	flagInterrupt = 0;
 8003a26:	601c      	str	r4, [r3, #0]
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003a28:	f00a ffb0 	bl	800e98c <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003a2c:	0021      	movs	r1, r4
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <TxAppInit+0x1c8>)
 8003a30:	2002      	movs	r0, #2
 8003a32:	f00a ffab 	bl	800e98c <UTIL_SEQ_RegTask>
		((uint32_t *)(&app.cfg))[i] = ((uint32_t *)(&eeprom_cfg))[i];
 8003a36:	4e6b      	ldr	r6, [pc, #428]	; (8003be4 <TxAppInit+0x1cc>)
 8003a38:	4d6b      	ldr	r5, [pc, #428]	; (8003be8 <TxAppInit+0x1d0>)
 8003a3a:	6833      	ldr	r3, [r6, #0]
	SetDevAddr(app.cfg.cfg.dev_addr);
 8003a3c:	6830      	ldr	r0, [r6, #0]
		((uint32_t *)(&app.cfg))[i] = ((uint32_t *)(&eeprom_cfg))[i];
 8003a3e:	60ab      	str	r3, [r5, #8]
 8003a40:	6873      	ldr	r3, [r6, #4]
 8003a42:	60eb      	str	r3, [r5, #12]
	SetDevAddr(app.cfg.cfg.dev_addr);
 8003a44:	f7ff f956 	bl	8002cf4 <SetDevAddr>
	app.cfg.cfg.tx_time = DEFAULT_TIME_TX;
 8003a48:	4b68      	ldr	r3, [pc, #416]	; (8003bec <TxAppInit+0x1d4>)
	SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 8003a4a:	2014      	movs	r0, #20
	app.cfg.cfg.tx_time = DEFAULT_TIME_TX;
 8003a4c:	60eb      	str	r3, [r5, #12]
	SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 8003a4e:	f00a f8bb 	bl	800dbc8 <SX126xFreqCorrection>
	UTIL_ADV_TRACE_StartRxProcess(rx_bytes);
 8003a52:	4867      	ldr	r0, [pc, #412]	; (8003bf0 <TxAppInit+0x1d8>)
 8003a54:	f00b f98e 	bl	800ed74 <UTIL_ADV_TRACE_StartRxProcess>
	LoRaWAN_Mode_Init();
 8003a58:	f7ff fb68 	bl	800312c <LoRaWAN_Mode_Init>
	FLASH_OBProgramInitTypeDef pOBInit = {
 8003a5c:	220c      	movs	r2, #12
 8003a5e:	0021      	movs	r1, r4
 8003a60:	a80c      	add	r0, sp, #48	; 0x30
 8003a62:	f00b faba 	bl	800efda <memset>
 8003a66:	2308      	movs	r3, #8
	HAL_FLASHEx_OBProgram(&pOBInit);
 8003a68:	a80b      	add	r0, sp, #44	; 0x2c
	FLASH_OBProgramInitTypeDef pOBInit = {
 8003a6a:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_FLASHEx_OBProgram(&pOBInit);
 8003a6c:	f001 f9fe 	bl	8004e6c <HAL_FLASHEx_OBProgram>
	EXTI_Init(AppDioIrq);
 8003a70:	4860      	ldr	r0, [pc, #384]	; (8003bf4 <TxAppInit+0x1dc>)
 8003a72:	f7ff ff91 	bl	8003998 <EXTI_Init>
	GPIO_InitTypeDef gpio_cfg = {
 8003a76:	2210      	movs	r2, #16
 8003a78:	0021      	movs	r1, r4
 8003a7a:	a810      	add	r0, sp, #64	; 0x40
 8003a7c:	f00b faad 	bl	800efda <memset>
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003a80:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003a82:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003a84:	019b      	lsls	r3, r3, #6
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003a86:	a90f      	add	r1, sp, #60	; 0x3c
 8003a88:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003a8a:	930f      	str	r3, [sp, #60]	; 0x3c
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003a8c:	f001 fa78 	bl	8004f80 <HAL_GPIO_Init>
	if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003a90:	7beb      	ldrb	r3, [r5, #15]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <TxAppInit+0x82>
		P2P_Radio_Init();
 8003a96:	f7ff fafb 	bl	8003090 <P2P_Radio_Init>
	gpio_cfg.Speed = GPIO_SPEED_FAST;
 8003a9a:	2302      	movs	r3, #2
	gpio_cfg.Pull = GPIO_PULLUP;
 8003a9c:	2501      	movs	r5, #1
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003a9e:	4856      	ldr	r0, [pc, #344]	; (8003bf8 <TxAppInit+0x1e0>)
	gpio_cfg.Speed = GPIO_SPEED_FAST;
 8003aa0:	9312      	str	r3, [sp, #72]	; 0x48
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003aa2:	a90f      	add	r1, sp, #60	; 0x3c
		gpio_cfg.Pin = app_exti_btn[i].pin;
 8003aa4:	333e      	adds	r3, #62	; 0x3e
 8003aa6:	930f      	str	r3, [sp, #60]	; 0x3c
	gpio_cfg.Pull = GPIO_PULLUP;
 8003aa8:	9511      	str	r5, [sp, #68]	; 0x44
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003aaa:	f001 fa69 	bl	8004f80 <HAL_GPIO_Init>
		gpio_cfg.Pin = output_pin[i].pin;
 8003aae:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003ab0:	20a0      	movs	r0, #160	; 0xa0
	gpio_cfg.Pull = GPIO_NOPULL;
 8003ab2:	2400      	movs	r4, #0
		gpio_cfg.Pin = output_pin[i].pin;
 8003ab4:	2720      	movs	r7, #32
 8003ab6:	005b      	lsls	r3, r3, #1
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003ab8:	a90f      	add	r1, sp, #60	; 0x3c
 8003aba:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Pin = output_pin[i].pin;
 8003abc:	930f      	str	r3, [sp, #60]	; 0x3c
	gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8003abe:	9510      	str	r5, [sp, #64]	; 0x40
	gpio_cfg.Pull = GPIO_NOPULL;
 8003ac0:	9411      	str	r4, [sp, #68]	; 0x44
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 8003ac2:	9412      	str	r4, [sp, #72]	; 0x48
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003ac4:	f001 fa5c 	bl	8004f80 <HAL_GPIO_Init>
 8003ac8:	a90f      	add	r1, sp, #60	; 0x3c
 8003aca:	484b      	ldr	r0, [pc, #300]	; (8003bf8 <TxAppInit+0x1e0>)
		gpio_cfg.Pin = output_pin[i].pin;
 8003acc:	970f      	str	r7, [sp, #60]	; 0x3c
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003ace:	f001 fa57 	bl	8004f80 <HAL_GPIO_Init>
	LED_TX(false);
 8003ad2:	0020      	movs	r0, r4
 8003ad4:	f7ff fc70 	bl	80033b8 <LED_TX>
	HAL_GPIO_WritePin(EN_INPUT_PULSE_PORT, EN_INPUT_PULSE_PIN, GPIO_PIN_SET);
 8003ad8:	0039      	movs	r1, r7
 8003ada:	002a      	movs	r2, r5
 8003adc:	4846      	ldr	r0, [pc, #280]	; (8003bf8 <TxAppInit+0x1e0>)
 8003ade:	f001 fb8d 	bl	80051fc <HAL_GPIO_WritePin>
	UTIL_TIMER_Create(&inputTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnTimer, NULL);
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4f45      	ldr	r7, [pc, #276]	; (8003bfc <TxAppInit+0x1e4>)
 8003ae6:	002a      	movs	r2, r5
 8003ae8:	0038      	movs	r0, r7
 8003aea:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <TxAppInit+0x1e8>)
 8003aec:	4249      	negs	r1, r1
 8003aee:	9400      	str	r4, [sp, #0]
 8003af0:	f00a ff68 	bl	800e9c4 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&inputTimer, app.cfg.cfg.tx_time*1000);//60000
 8003af4:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <TxAppInit+0x1d0>)
 8003af6:	0038      	movs	r0, r7
 8003af8:	8999      	ldrh	r1, [r3, #12]
 8003afa:	23fa      	movs	r3, #250	; 0xfa
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4359      	muls	r1, r3
 8003b00:	f00b f870 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Start(&inputTimer);
 8003b04:	0038      	movs	r0, r7
 8003b06:	f00b f811 	bl	800eb2c <UTIL_TIMER_Start>
	UTIL_TIMER_Create(&btnTimeOutTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnBtnTimeoutTimer, NULL);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4f3d      	ldr	r7, [pc, #244]	; (8003c04 <TxAppInit+0x1ec>)
 8003b0e:	0022      	movs	r2, r4
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <TxAppInit+0x1f0>)
 8003b12:	0038      	movs	r0, r7
 8003b14:	4249      	negs	r1, r1
 8003b16:	9400      	str	r4, [sp, #0]
 8003b18:	f00a ff54 	bl	800e9c4 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&btnTimeOutTimer, BTN_TIMEOUT);
 8003b1c:	21fa      	movs	r1, #250	; 0xfa
 8003b1e:	0038      	movs	r0, r7
 8003b20:	0089      	lsls	r1, r1, #2
 8003b22:	f00b f85f 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Create(&LedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003b26:	2101      	movs	r1, #1
	LmHandlerGetDevEUI(&eui[0]);
 8003b28:	af09      	add	r7, sp, #36	; 0x24
	UTIL_TIMER_Create(&LedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003b2a:	0022      	movs	r2, r4
 8003b2c:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <TxAppInit+0x1f4>)
 8003b2e:	4249      	negs	r1, r1
 8003b30:	4837      	ldr	r0, [pc, #220]	; (8003c10 <TxAppInit+0x1f8>)
 8003b32:	9400      	str	r4, [sp, #0]
 8003b34:	f00a ff46 	bl	800e9c4 <UTIL_TIMER_Create>
	LmHandlerGetDevEUI(&eui[0]);
 8003b38:	0038      	movs	r0, r7
 8003b3a:	f004 ffcd 	bl	8008ad8 <LmHandlerGetDevEUI>
	APP_LOG(TS_OFF, VLEVEL_L, "SN:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	0022      	movs	r2, r4
 8003b42:	9307      	str	r3, [sp, #28]
 8003b44:	79bb      	ldrb	r3, [r7, #6]
 8003b46:	0021      	movs	r1, r4
 8003b48:	9306      	str	r3, [sp, #24]
 8003b4a:	797b      	ldrb	r3, [r7, #5]
 8003b4c:	0028      	movs	r0, r5
 8003b4e:	9305      	str	r3, [sp, #20]
 8003b50:	793b      	ldrb	r3, [r7, #4]
 8003b52:	9304      	str	r3, [sp, #16]
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	78bb      	ldrb	r3, [r7, #2]
 8003b5a:	9302      	str	r3, [sp, #8]
 8003b5c:	787b      	ldrb	r3, [r7, #1]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	783b      	ldrb	r3, [r7, #0]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <TxAppInit+0x1fc>)
 8003b66:	f00b f95b 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", fver);
 8003b6a:	0033      	movs	r3, r6
 8003b6c:	4f2a      	ldr	r7, [pc, #168]	; (8003c18 <TxAppInit+0x200>)
 8003b6e:	3308      	adds	r3, #8
 8003b70:	0022      	movs	r2, r4
 8003b72:	0021      	movs	r1, r4
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	0028      	movs	r0, r5
 8003b78:	003b      	movs	r3, r7
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", model);
 8003b7a:	360f      	adds	r6, #15
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", fver);
 8003b7c:	f00b f950 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", model);
 8003b80:	003b      	movs	r3, r7
 8003b82:	0022      	movs	r2, r4
 8003b84:	0021      	movs	r1, r4
 8003b86:	0028      	movs	r0, r5
 8003b88:	9600      	str	r6, [sp, #0]
 8003b8a:	f00b f949 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
	  hi2c1.Instance = I2C1;
 8003b8e:	4823      	ldr	r0, [pc, #140]	; (8003c1c <TxAppInit+0x204>)
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <TxAppInit+0x208>)
	  hi2c1.Init.OwnAddress1 = 0;
 8003b92:	6084      	str	r4, [r0, #8]
	  hi2c1.Instance = I2C1;
 8003b94:	6003      	str	r3, [r0, #0]
	  hi2c1.Init.Timing = 0x10909CEC;//0x00303D5B; // Timing configurado para operação a 400 kHz em Fast Mode
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <TxAppInit+0x20c>)
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b98:	60c5      	str	r5, [r0, #12]
	  hi2c1.Init.Timing = 0x10909CEC;//0x00303D5B; // Timing configurado para operação a 400 kHz em Fast Mode
 8003b9a:	6043      	str	r3, [r0, #4]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b9c:	6104      	str	r4, [r0, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8003b9e:	6144      	str	r4, [r0, #20]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ba0:	61c4      	str	r4, [r0, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ba2:	6204      	str	r4, [r0, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ba4:	f001 fc60 	bl	8005468 <HAL_I2C_Init>
 8003ba8:	42a0      	cmp	r0, r4
 8003baa:	d001      	beq.n	8003bb0 <TxAppInit+0x198>
	    Error_Handler(); // Tratamento de erro
 8003bac:	f7fe fca2 	bl	80024f4 <Error_Handler>
	uint8_t wiam = FXOS8700CQInitFlux(&hi2c1);//FXOS8700CQInitSleep(&hi2c1, FXOS8700CQCalibrate(INTERRUPT_MAIOR_QUE), INTERRUPT_MAIOR_QUE);//magnetometter_init(&hi2c1);//magnetometter_init_sleep(&hi2c1, 65097);
 8003bb0:	f7ff f9d4 	bl	8002f5c <FXOS8700CQInitFlux.constprop.0>
	APP_LOG(TS_OFF, VLEVEL_L, "WHO I AM %02X\r\n", wiam);
 8003bb4:	2200      	movs	r2, #0
	uint8_t wiam = FXOS8700CQInitFlux(&hi2c1);//FXOS8700CQInitSleep(&hi2c1, FXOS8700CQCalibrate(INTERRUPT_MAIOR_QUE), INTERRUPT_MAIOR_QUE);//magnetometter_init(&hi2c1);//magnetometter_init_sleep(&hi2c1, 65097);
 8003bb6:	0004      	movs	r4, r0
	APP_LOG(TS_OFF, VLEVEL_L, "WHO I AM %02X\r\n", wiam);
 8003bb8:	9000      	str	r0, [sp, #0]
 8003bba:	0011      	movs	r1, r2
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <TxAppInit+0x210>)
 8003bc0:	f00b f92e 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
	if(wiam != 0)
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	d002      	beq.n	8003bce <TxAppInit+0x1b6>
		HAL_Delay(10000);
 8003bc8:	4818      	ldr	r0, [pc, #96]	; (8003c2c <TxAppInit+0x214>)
 8003bca:	f7ff f8b1 	bl	8002d30 <HAL_Delay>
	savedValue = 1300;
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <TxAppInit+0x218>)
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <TxAppInit+0x21c>)
 8003bd2:	801a      	strh	r2, [r3, #0]
}
 8003bd4:	b015      	add	sp, #84	; 0x54
 8003bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd8:	20000424 	.word	0x20000424
 8003bdc:	0800862d 	.word	0x0800862d
 8003be0:	08002e55 	.word	0x08002e55
 8003be4:	08080000 	.word	0x08080000
 8003be8:	20000038 	.word	0x20000038
 8003bec:	0014003c 	.word	0x0014003c
 8003bf0:	08003171 	.word	0x08003171
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	50000400 	.word	0x50000400
 8003bfc:	20000490 	.word	0x20000490
 8003c00:	080036c1 	.word	0x080036c1
 8003c04:	2000040c 	.word	0x2000040c
 8003c08:	08003605 	.word	0x08003605
 8003c0c:	0800340d 	.word	0x0800340d
 8003c10:	2000038c 	.word	0x2000038c
 8003c14:	0800f2b1 	.word	0x0800f2b1
 8003c18:	0800f333 	.word	0x0800f333
 8003c1c:	2000043c 	.word	0x2000043c
 8003c20:	40005400 	.word	0x40005400
 8003c24:	10909cec 	.word	0x10909cec
 8003c28:	0800f338 	.word	0x0800f338
 8003c2c:	00002710 	.word	0x00002710
 8003c30:	200004b2 	.word	0x200004b2
 8003c34:	00000514 	.word	0x00000514

08003c38 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8003c38:	480a      	ldr	r0, [pc, #40]	; (8003c64 <MX_USART2_Init+0x2c>)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <MX_USART2_Init+0x30>)
{
 8003c3c:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8003c3e:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003c40:	2396      	movs	r3, #150	; 0x96
 8003c42:	019b      	lsls	r3, r3, #6
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX_RX;//UART_MODE_TX;
 8003c44:	220c      	movs	r2, #12
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003c46:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c48:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX_RX;//UART_MODE_TX;
 8003c4a:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c4c:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8003c4e:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8003c50:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003c52:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8003c54:	f003 fc9a 	bl	800758c <HAL_UART_Init>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8003c5c:	f7fe fc4a 	bl	80024f4 <Error_Handler>
  }
}
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000548 	.word	0x20000548
 8003c68:	40004400 	.word	0x40004400

08003c6c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8003c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6e:	0004      	movs	r4, r0
 8003c70:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c72:	2214      	movs	r2, #20
 8003c74:	2100      	movs	r1, #0
 8003c76:	a804      	add	r0, sp, #16
 8003c78:	f00b f9af 	bl	800efda <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c7c:	221c      	movs	r2, #28
 8003c7e:	2100      	movs	r1, #0
 8003c80:	a809      	add	r0, sp, #36	; 0x24
 8003c82:	f00b f9aa 	bl	800efda <memset>
  if (uartHandle->Instance == USART2)
 8003c86:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <HAL_UART_MspInit+0x12c>)
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d000      	beq.n	8003c90 <HAL_UART_MspInit+0x24>
 8003c8e:	e081      	b.n	8003d94 <HAL_UART_MspInit+0x128>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8003c90:	2201      	movs	r2, #1
 8003c92:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <HAL_UART_MspInit+0x130>)
 8003c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c96:	4311      	orrs	r1, r2
 8003c98:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003c9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c9c:	4011      	ands	r1, r2
 8003c9e:	9101      	str	r1, [sp, #4]
 8003ca0:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8003ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003caa:	4011      	ands	r1, r2
 8003cac:	9102      	str	r1, [sp, #8]
 8003cae:	9902      	ldr	r1, [sp, #8]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cb4:	0289      	lsls	r1, r1, #10
 8003cb6:	4308      	orrs	r0, r1
 8003cb8:	6398      	str	r0, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8003cba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cbc:	4310      	orrs	r0, r2
 8003cbe:	6318      	str	r0, [r3, #48]	; 0x30
 8003cc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cc2:	4002      	ands	r2, r0
 8003cc4:	9203      	str	r2, [sp, #12]
 8003cc6:	9a03      	ldr	r2, [sp, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;//RCC_USART2CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cca:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;//RCC_USART2CLKSOURCE_SYSCLK;
 8003cd4:	3306      	adds	r3, #6
 8003cd6:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cd8:	f002 f9e4 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8003ce0:	f7fe fc08 	bl	80024f4 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003ce4:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003ce8:	2604      	movs	r6, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003cec:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003cee:	a904      	add	r1, sp, #16
 8003cf0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003cf4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003cf6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003cfa:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003cfc:	f001 f940 	bl	8004f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003d00:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003d02:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003d04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d06:	3b07      	subs	r3, #7
 8003d08:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003d0a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003d0c:	19db      	adds	r3, r3, r7
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003d0e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003d12:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003d14:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003d16:	f001 f933 	bl	8004f80 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003d1a:	4f21      	ldr	r7, [pc, #132]	; (8003da0 <HAL_UART_MspInit+0x134>)
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_UART_MspInit+0x138>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003d1e:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003d20:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003d22:	2310      	movs	r3, #16
 8003d24:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003d26:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8003d28:	607e      	str	r6, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003d2a:	60fd      	str	r5, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003d2c:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d2e:	617d      	str	r5, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8003d30:	61bd      	str	r5, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8003d32:	61fd      	str	r5, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8003d34:	623d      	str	r5, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003d36:	f000 fe1d 	bl	8004974 <HAL_DMA_Init>
 8003d3a:	42a8      	cmp	r0, r5
 8003d3c:	d001      	beq.n	8003d42 <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8003d3e:	f7fe fbd9 	bl	80024f4 <Error_Handler>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* USART2_RX Init */
    hdma_rx.Instance = USARTx_RX_DMA_CHANNEL;
 8003d42:	4d19      	ldr	r5, [pc, #100]	; (8003da8 <HAL_UART_MspInit+0x13c>)
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_UART_MspInit+0x140>)
    hdma_rx.Init.Request = USARTx_RX_DMA_REQUEST;
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d46:	2280      	movs	r2, #128	; 0x80
    hdma_rx.Instance = USARTx_RX_DMA_CHANNEL;
 8003d48:	602b      	str	r3, [r5, #0]
    hdma_rx.Init.Request = USARTx_RX_DMA_REQUEST;
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	606b      	str	r3, [r5, #4]
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d4e:	2300      	movs	r3, #0
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_rx.Init.Mode = DMA_NORMAL;
    hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8003d50:	0028      	movs	r0, r5
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8003d52:	66e7      	str	r7, [r4, #108]	; 0x6c
 8003d54:	62bc      	str	r4, [r7, #40]	; 0x28
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d56:	60ab      	str	r3, [r5, #8]
    hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d58:	60eb      	str	r3, [r5, #12]
    hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5a:	612a      	str	r2, [r5, #16]
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d5c:	616b      	str	r3, [r5, #20]
    hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d5e:	61ab      	str	r3, [r5, #24]
    hdma_rx.Init.Mode = DMA_NORMAL;
 8003d60:	61eb      	str	r3, [r5, #28]
    hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d62:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8003d64:	f000 fe06 	bl	8004974 <HAL_DMA_Init>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003d6c:	f7fe fbc2 	bl	80024f4 <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_rx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8003d70:	2201      	movs	r2, #1
 8003d72:	2100      	movs	r1, #0
 8003d74:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_rx);
 8003d76:	6725      	str	r5, [r4, #112]	; 0x70
 8003d78:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8003d7a:	f000 fdb5 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8003d7e:	200b      	movs	r0, #11
 8003d80:	f000 fddc 	bl	800493c <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8003d84:	201c      	movs	r0, #28
 8003d86:	2201      	movs	r2, #1
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f000 fdad 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8003d8e:	201c      	movs	r0, #28
 8003d90:	f000 fdd4 	bl	800493c <HAL_NVIC_EnableIRQ>
    //HAL_UART_ReceiverTimeout_Config(uartHandle, 2);
    //HAL_UART_EnableReceiverTimeout(uartHandle);
    //HAL_UART_Receive_IT(uartHandle, rxBuffer, RX_BUFFER_SIZE);
    /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d94:	b011      	add	sp, #68	; 0x44
 8003d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d98:	40004400 	.word	0x40004400
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	20000500 	.word	0x20000500
 8003da4:	40020080 	.word	0x40020080
 8003da8:	200004b8 	.word	0x200004b8
 8003dac:	4002006c 	.word	0x4002006c

08003db0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_UART_MspDeInit+0x30>)
 8003db2:	6802      	ldr	r2, [r0, #0]
{
 8003db4:	b510      	push	{r4, lr}
 8003db6:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d10f      	bne.n	8003ddc <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003dbc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_UART_MspDeInit+0x34>)
 8003dc0:	4909      	ldr	r1, [pc, #36]	; (8003de8 <HAL_UART_MspDeInit+0x38>)
 8003dc2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003dc4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003dca:	210c      	movs	r1, #12
 8003dcc:	f001 f996 	bl	80050fc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003dd0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003dd2:	f000 fe13 	bl	80049fc <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003dd6:	201c      	movs	r0, #28
 8003dd8:	f000 fdbc 	bl	8004954 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40004400 	.word	0x40004400
 8003de4:	40021000 	.word	0x40021000
 8003de8:	fffdffff 	.word	0xfffdffff

08003dec <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003dec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <vcom_Init+0x14>)
 8003df0:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8003df2:	f7fe faf5 	bl	80023e0 <MX_DMA_Init>
  MX_USART2_Init();
 8003df6:	f7ff ff1f 	bl	8003c38 <MX_USART2_Init>
  //HAL_UART_ReceiverTimeout_Config(&UartHandle, 2);
  //HAL_UART_EnableReceiverTimeout(&UartHandle);
  //HAL_UART_Receive_IT(&UartHandle, rxBuffer, USART_RX_BUFFER_SIZE);
  /* USER CODE END vcom_Init_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	200005d0 	.word	0x200005d0

08003e04 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <vcom_DeInit+0x28>)
 8003e08:	0292      	lsls	r2, r2, #10
 8003e0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8003e0c:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8003e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e14:	4906      	ldr	r1, [pc, #24]	; (8003e30 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8003e16:	4807      	ldr	r0, [pc, #28]	; (8003e34 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8003e18:	400a      	ands	r2, r1
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8003e1c:	f7ff ffc8 	bl	8003db0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003e20:	200b      	movs	r0, #11
 8003e22:	f000 fd97 	bl	8004954 <HAL_NVIC_DisableIRQ>
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003e26:	2000      	movs	r0, #0
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	fffdffff 	.word	0xfffdffff
 8003e34:	20000548 	.word	0x20000548

08003e38 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8003e3c:	0001      	movs	r1, r0
 8003e3e:	4802      	ldr	r0, [pc, #8]	; (8003e48 <vcom_Trace_DMA+0x10>)
 8003e40:	f002 ff72 	bl	8006d28 <HAL_UART_Transmit_DMA>
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003e44:	2000      	movs	r0, #0
 8003e46:	bd10      	pop	{r4, pc}
 8003e48:	20000548 	.word	0x20000548

08003e4c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003e4c:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003e4e:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003e52:	4c11      	ldr	r4, [pc, #68]	; (8003e98 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8003e54:	6018      	str	r0, [r3, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003e56:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003e58:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003e5a:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003e5c:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003e5e:	f003 fc47 	bl	80076f0 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	0252      	lsls	r2, r2, #9
 8003e68:	69d9      	ldr	r1, [r3, #28]
 8003e6a:	4211      	tst	r1, r2
 8003e6c:	d1fc      	bne.n	8003e68 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	03d2      	lsls	r2, r2, #15
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	4211      	tst	r1, r2
 8003e76:	d0fc      	beq.n	8003e72 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);//UART_IT_IDLE);//UART_IT_WUF);
 8003e78:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003e7a:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);//UART_IT_IDLE);//UART_IT_WUF);
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003e80:	f003 fc7e 	bl	8007780 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, rxBuf, sizeof(rxBuf));
 8003e84:	2210      	movs	r2, #16
 8003e86:	0020      	movs	r0, r4
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <vcom_ReceiveInit+0x50>)
 8003e8a:	f003 fbfb 	bl	8007684 <HAL_UART_Receive_IT>

  /* USER CODE BEGIN vcom_ReceiveInit_2 */
  /* USER CODE END vcom_ReceiveInit_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003e8e:	2000      	movs	r0, #0
 8003e90:	bd16      	pop	{r1, r2, r4, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	200005cc 	.word	0x200005cc
 8003e98:	20000548 	.word	0x20000548
 8003e9c:	200005d4 	.word	0x200005d4

08003ea0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003ea0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8003ea2:	4b02      	ldr	r3, [pc, #8]	; (8003eac <HAL_UART_TxCpltCallback+0xc>)
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003eaa:	bd10      	pop	{r4, pc}
 8003eac:	200005d0 	.word	0x200005d0

08003eb0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_UART_RxCpltCallback+0x30>)
{
 8003eb2:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003eb4:	681b      	ldr	r3, [r3, #0]
{
 8003eb6:	0004      	movs	r4, r0
 8003eb8:	4d0a      	ldr	r5, [pc, #40]	; (8003ee4 <HAL_UART_RxCpltCallback+0x34>)
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_UART_RxCpltCallback+0x24>
  {
	    RxCpltCallback(rxBuf, UartHandle->RxXferSize - UartHandle->RxXferCount, 0);
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	0001      	movs	r1, r0
 8003ec2:	325a      	adds	r2, #90	; 0x5a
 8003ec4:	3158      	adds	r1, #88	; 0x58
 8003ec6:	8812      	ldrh	r2, [r2, #0]
 8003ec8:	8809      	ldrh	r1, [r1, #0]
 8003eca:	0028      	movs	r0, r5
 8003ecc:	1a89      	subs	r1, r1, r2
 8003ece:	b289      	uxth	r1, r1
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, rxBuf, sizeof(rxBuf));
 8003ed4:	0029      	movs	r1, r5
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	0020      	movs	r0, r4
 8003eda:	f003 fbd3 	bl	8007684 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	200005cc 	.word	0x200005cc
 8003ee4:	200005d4 	.word	0x200005d4

08003ee8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_UARTEx_RxEventCallback+0x20>)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
 8003eea:	b570      	push	{r4, r5, r6, lr}
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003eec:	681b      	ldr	r3, [r3, #0]
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
 8003eee:	0004      	movs	r4, r0
 8003ef0:	4d06      	ldr	r5, [pc, #24]	; (8003f0c <HAL_UARTEx_RxEventCallback+0x24>)
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UARTEx_RxEventCallback+0x14>
	{
		RxCpltCallback(rxBuf, size, 0);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	0028      	movs	r0, r5
 8003efa:	4798      	blx	r3
	}
	HAL_UART_Receive_IT(UartHandle, rxBuf, sizeof(rxBuf));
 8003efc:	0029      	movs	r1, r5
 8003efe:	2210      	movs	r2, #16
 8003f00:	0020      	movs	r0, r4
 8003f02:	f003 fbbf 	bl	8007684 <HAL_UART_Receive_IT>
}
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	200005cc 	.word	0x200005cc
 8003f0c:	200005d4 	.word	0x200005d4

08003f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003f12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f14:	480d      	ldr	r0, [pc, #52]	; (8003f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003f16:	490e      	ldr	r1, [pc, #56]	; (8003f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f18:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <LoopForever+0xe>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f1c:	e002      	b.n	8003f24 <LoopCopyDataInit>

08003f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f22:	3304      	adds	r3, #4

08003f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f28:	d3f9      	bcc.n	8003f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f2c:	4c0b      	ldr	r4, [pc, #44]	; (8003f5c <LoopForever+0x16>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f30:	e001      	b.n	8003f36 <LoopFillZerobss>

08003f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f34:	3204      	adds	r2, #4

08003f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f38:	d3fb      	bcc.n	8003f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003f3a:	f000 f977 	bl	800422c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f3e:	f00b f81f 	bl	800ef80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f42:	f7fe faad 	bl	80024a0 <main>

08003f46 <LoopForever>:

LoopForever:
    b LoopForever
 8003f46:	e7fe      	b.n	8003f46 <LoopForever>
   ldr   r0, =_estack
 8003f48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f50:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8003f54:	0800fd58 	.word	0x0800fd58
  ldr r2, =_sbss
 8003f58:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8003f5c:	200018a4 	.word	0x200018a4

08003f60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f60:	e7fe      	b.n	8003f60 <ADC1_COMP_IRQHandler>
	...

08003f64 <SX1262DVK1CAS_RADIO_IoInit>:
static void SX1262DVK1CAS_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX1262DVK1CAS_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX1262DVK1CAS_RADIO_IoInit(void)
{
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003f66:	2501      	movs	r5, #1
{
 8003f68:	b091      	sub	sp, #68	; 0x44
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003f6a:	4c42      	ldr	r4, [pc, #264]	; (8004074 <SX1262DVK1CAS_RADIO_IoInit+0x110>)
  GPIO_InitTypeDef initStruct = {0};
 8003f6c:	220c      	movs	r2, #12
 8003f6e:	2100      	movs	r1, #0
 8003f70:	a808      	add	r0, sp, #32
 8003f72:	f00b f832 	bl	800efda <memset>
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003f78:	27a0      	movs	r7, #160	; 0xa0
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003f7a:	432b      	orrs	r3, r5
 8003f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003f80:	05ff      	lsls	r7, r7, #23
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003f82:	402b      	ands	r3, r5
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	9b00      	ldr	r3, [sp, #0]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8003f88:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <SX1262DVK1CAS_RADIO_IoInit+0x114>)
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003f8a:	0038      	movs	r0, r7
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8003f8c:	9307      	str	r3, [sp, #28]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	9309      	str	r3, [sp, #36]	; 0x24
  initStruct.Pin = RADIO_DIO_1_PIN;
 8003f92:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003f94:	a906      	add	r1, sp, #24
  initStruct.Pin = RADIO_DIO_1_PIN;
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8003f9a:	f000 fff1 	bl	8004f80 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_BUSY_CLK_ENABLE();
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_INPUT;
 8003fa2:	2600      	movs	r6, #0
  RADIO_BUSY_CLK_ENABLE();
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Pin = RADIO_BUSY_PIN;
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003faa:	a906      	add	r1, sp, #24
  RADIO_BUSY_CLK_ENABLE();
 8003fac:	4013      	ands	r3, r2
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	9b01      	ldr	r3, [sp, #4]
  initStruct.Pin = RADIO_BUSY_PIN;
 8003fb2:	2308      	movs	r3, #8
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003fb4:	4831      	ldr	r0, [pc, #196]	; (800407c <SX1262DVK1CAS_RADIO_IoInit+0x118>)
  initStruct.Pin = RADIO_BUSY_PIN;
 8003fb6:	9306      	str	r3, [sp, #24]
  initStruct.Mode = GPIO_MODE_INPUT;
 8003fb8:	9607      	str	r6, [sp, #28]
  initStruct.Pull = GPIO_NOPULL;
 8003fba:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8003fbc:	f000 ffe0 	bl	8004f80 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003fc0:	2202      	movs	r2, #2
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8003fc2:	2104      	movs	r1, #4
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8003fc6:	482d      	ldr	r0, [pc, #180]	; (800407c <SX1262DVK1CAS_RADIO_IoInit+0x118>)
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8003fce:	9106      	str	r1, [sp, #24]
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8003fd4:	a906      	add	r1, sp, #24
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8003fd6:	9b02      	ldr	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 8003fd8:	9608      	str	r6, [sp, #32]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fda:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8003fdc:	f000 ffd0 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8003fe0:	0032      	movs	r2, r6
 8003fe2:	2104      	movs	r1, #4
 8003fe4:	4825      	ldr	r0, [pc, #148]	; (800407c <SX1262DVK1CAS_RADIO_IoInit+0x118>)
 8003fe6:	f001 f909 	bl	80051fc <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003fea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2202      	movs	r2, #2
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003fee:	432b      	orrs	r3, r5
 8003ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ff2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003ff4:	0038      	movs	r0, r7
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8003ff6:	402b      	ands	r3, r5
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	9b03      	ldr	r3, [sp, #12]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8003ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003ffe:	a90b      	add	r1, sp, #44	; 0x2c
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8004000:	432b      	orrs	r3, r5
 8004002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004004:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004006:	402b      	ands	r3, r5
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	9b04      	ldr	r3, [sp, #16]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800400c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800400e:	432b      	orrs	r3, r5
 8004010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	920c      	str	r2, [sp, #48]	; 0x30
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8004016:	402b      	ands	r3, r5
 8004018:	9305      	str	r3, [sp, #20]
 800401a:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401c:	2303      	movs	r3, #3
 800401e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004020:	337d      	adds	r3, #125	; 0x7d
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004022:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004024:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8004026:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004028:	f000 ffaa 	bl	8004f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800402c:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800402e:	0038      	movs	r0, r7
 8004030:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004032:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8004034:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004036:	f000 ffa3 	bl	8004f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800403a:	2320      	movs	r3, #32
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800403c:	0038      	movs	r0, r7
 800403e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004040:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8004042:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004044:	f000 ff9c 	bl	8004f80 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 8004048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 800404a:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 800404c:	432b      	orrs	r3, r5
 800404e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 8004052:	2410      	movs	r4, #16
  RADIO_NSS_CLK_ENABLE();
 8004054:	402b      	ands	r3, r5
 8004056:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8004058:	a906      	add	r1, sp, #24
  RADIO_NSS_CLK_ENABLE();
 800405a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800405c:	9507      	str	r5, [sp, #28]
  initStruct.Pull = GPIO_NOPULL;
 800405e:	9608      	str	r6, [sp, #32]
  initStruct.Pin = RADIO_NSS_PIN;
 8004060:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8004062:	f000 ff8d 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 8004066:	002a      	movs	r2, r5
 8004068:	0021      	movs	r1, r4
 800406a:	0038      	movs	r0, r7
 800406c:	f001 f8c6 	bl	80051fc <HAL_GPIO_WritePin>
}
 8004070:	b011      	add	sp, #68	; 0x44
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	10110000 	.word	0x10110000
 800407c:	50000400 	.word	0x50000400

08004080 <SX1262DVK1CAS_RADIO_IoDeInit>:
{
 8004080:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8004082:	2200      	movs	r2, #0
{
 8004084:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8004086:	2104      	movs	r1, #4
 8004088:	4815      	ldr	r0, [pc, #84]	; (80040e0 <SX1262DVK1CAS_RADIO_IoDeInit+0x60>)
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800408a:	24a0      	movs	r4, #160	; 0xa0
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 800408c:	f001 f8b6 	bl	80051fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004090:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004092:	2780      	movs	r7, #128	; 0x80
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004094:	2640      	movs	r6, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004096:	2520      	movs	r5, #32
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004098:	05e4      	lsls	r4, r4, #23
 800409a:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800409e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040a0:	18db      	adds	r3, r3, r3
 80040a2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80040a4:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80040a6:	f000 ff6b 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040aa:	0020      	movs	r0, r4
 80040ac:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80040ae:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040b0:	f000 ff66 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040b4:	0020      	movs	r0, r4
 80040b6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80040b8:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040ba:	f000 ff61 	bl	8004f80 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80040be:	0039      	movs	r1, r7
 80040c0:	0020      	movs	r0, r4
 80040c2:	2200      	movs	r2, #0
 80040c4:	f001 f89a 	bl	80051fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80040c8:	0031      	movs	r1, r6
 80040ca:	0020      	movs	r0, r4
 80040cc:	2200      	movs	r2, #0
 80040ce:	f001 f895 	bl	80051fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80040d2:	2200      	movs	r2, #0
 80040d4:	0029      	movs	r1, r5
 80040d6:	0020      	movs	r0, r4
 80040d8:	f001 f890 	bl	80051fc <HAL_GPIO_WritePin>
}
 80040dc:	b007      	add	sp, #28
 80040de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e0:	50000400 	.word	0x50000400

080040e4 <SX1262DVK1CAS_RADIO_IoIrqInit>:
{
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	0004      	movs	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 80040e8:	4d09      	ldr	r5, [pc, #36]	; (8004110 <SX1262DVK1CAS_RADIO_IoIrqInit+0x2c>)
 80040ea:	490a      	ldr	r1, [pc, #40]	; (8004114 <SX1262DVK1CAS_RADIO_IoIrqInit+0x30>)
 80040ec:	0028      	movs	r0, r5
 80040ee:	f000 fdde 	bl	8004cae <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 80040f2:	0028      	movs	r0, r5
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	2100      	movs	r1, #0
 80040f8:	f000 fdd2 	bl	8004ca0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 80040fc:	2200      	movs	r2, #0
 80040fe:	2007      	movs	r0, #7
 8004100:	0011      	movs	r1, r2
 8004102:	f000 fbf1 	bl	80048e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 8004106:	2007      	movs	r0, #7
 8004108:	f000 fc18 	bl	800493c <HAL_NVIC_EnableIRQ>
}
 800410c:	bd70      	pop	{r4, r5, r6, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	200005e4 	.word	0x200005e4
 8004114:	0600000f 	.word	0x0600000f

08004118 <SX1262DVK1CAS_RADIO_GetWakeUpTime>:
}
 8004118:	2005      	movs	r0, #5
 800411a:	4770      	bx	lr

0800411c <SX1262DVK1CAS_RADIO_Reset>:
{
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 800411e:	2614      	movs	r6, #20
{
 8004120:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8004122:	0032      	movs	r2, r6
 8004124:	2100      	movs	r1, #0
 8004126:	a801      	add	r0, sp, #4
 8004128:	f00a ff57 	bl	800efda <memset>
  RADIO_RESET_CLK_ENABLE();
 800412c:	2002      	movs	r0, #2
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412e:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004130:	2703      	movs	r7, #3
  RADIO_RESET_CLK_ENABLE();
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <SX1262DVK1CAS_RADIO_Reset+0x6c>)
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004134:	4d15      	ldr	r5, [pc, #84]	; (800418c <SX1262DVK1CAS_RADIO_Reset+0x70>)
  RADIO_RESET_CLK_ENABLE();
 8004136:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004138:	4301      	orrs	r1, r0
 800413a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800413c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800413e:	9402      	str	r4, [sp, #8]
  RADIO_RESET_CLK_ENABLE();
 8004140:	4003      	ands	r3, r0
 8004142:	9300      	str	r3, [sp, #0]
  HAL_Delay(10);
 8004144:	3008      	adds	r0, #8
  RADIO_RESET_CLK_ENABLE();
 8004146:	9b00      	ldr	r3, [sp, #0]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004148:	9704      	str	r7, [sp, #16]
  HAL_Delay(10);
 800414a:	f7fe fdf1 	bl	8002d30 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800414e:	0028      	movs	r0, r5
 8004150:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 8004152:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004154:	f000 ff14 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8004158:	2200      	movs	r2, #0
 800415a:	0021      	movs	r1, r4
 800415c:	0028      	movs	r0, r5
 800415e:	f001 f84d 	bl	80051fc <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8004162:	0030      	movs	r0, r6
 8004164:	f7fe fde4 	bl	8002d30 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004168:	0028      	movs	r0, r5
 800416a:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_MODE_ANALOG;
 800416c:	9702      	str	r7, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 800416e:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004170:	f000 ff06 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 8004174:	2200      	movs	r2, #0
 8004176:	0021      	movs	r1, r4
 8004178:	0028      	movs	r0, r5
 800417a:	f001 f83f 	bl	80051fc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800417e:	200a      	movs	r0, #10
 8004180:	f7fe fdd6 	bl	8002d30 <HAL_Delay>
}
 8004184:	b007      	add	sp, #28
 8004186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	50000400 	.word	0x50000400

08004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>:
{
 8004190:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 8004192:	2108      	movs	r1, #8
 8004194:	4802      	ldr	r0, [pc, #8]	; (80041a0 <SX1262DVK1CAS_RADIO_WaitOnBusy+0x10>)
 8004196:	f001 f82b 	bl	80051f0 <HAL_GPIO_ReadPin>
 800419a:	2801      	cmp	r0, #1
 800419c:	d0f9      	beq.n	8004192 <SX1262DVK1CAS_RADIO_WaitOnBusy+0x2>
}
 800419e:	bd10      	pop	{r4, pc}
 80041a0:	50000400 	.word	0x50000400

080041a4 <SX1262DVK1CAS_RADIO_ChipSelect>:
{
 80041a4:	0002      	movs	r2, r0
 80041a6:	b510      	push	{r4, lr}
  if (state == 0)
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d105      	bne.n	80041b8 <SX1262DVK1CAS_RADIO_ChipSelect+0x14>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80041ac:	20a0      	movs	r0, #160	; 0xa0
 80041ae:	2110      	movs	r1, #16
 80041b0:	05c0      	lsls	r0, r0, #23
 80041b2:	f001 f823 	bl	80051fc <HAL_GPIO_WritePin>
}
 80041b6:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80041b8:	2201      	movs	r2, #1
 80041ba:	e7f7      	b.n	80041ac <SX1262DVK1CAS_RADIO_ChipSelect+0x8>

080041bc <SX1262DVK1CAS_RADIO_SetAntSw>:
{
 80041bc:	0002      	movs	r2, r0
 80041be:	b510      	push	{r4, lr}
  switch (state)
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d104      	bne.n	80041ce <SX1262DVK1CAS_RADIO_SetAntSw+0x12>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 80041c4:	2104      	movs	r1, #4
 80041c6:	4803      	ldr	r0, [pc, #12]	; (80041d4 <SX1262DVK1CAS_RADIO_SetAntSw+0x18>)
 80041c8:	f001 f818 	bl	80051fc <HAL_GPIO_WritePin>
}
 80041cc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 80041ce:	2201      	movs	r2, #1
 80041d0:	e7f8      	b.n	80041c4 <SX1262DVK1CAS_RADIO_SetAntSw+0x8>
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	50000400 	.word	0x50000400

080041d8 <SX1262DVK1CAS_RADIO_BoardIsTcxo>:
}
 80041d8:	2000      	movs	r0, #0
 80041da:	4770      	bx	lr

080041dc <SX1262DVK1CAS_RADIO_Bus_Init>:
{
 80041dc:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80041de:	f003 fb57 	bl	8007890 <BSP_SPI1_Init>
}
 80041e2:	bd10      	pop	{r4, pc}

080041e4 <SX1262DVK1CAS_RADIO_SendRecv>:
{
 80041e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80041e6:	240e      	movs	r4, #14
{
 80041e8:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80041ea:	446c      	add	r4, sp
{
 80041ec:	80d8      	strh	r0, [r3, #6]
 80041ee:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80041f0:	2201      	movs	r2, #1
 80041f2:	0021      	movs	r1, r4
 80041f4:	0018      	movs	r0, r3
 80041f6:	f003 fb07 	bl	8007808 <BSP_SPI1_SendRecv>
  return rxData;
 80041fa:	8820      	ldrh	r0, [r4, #0]
}
 80041fc:	b004      	add	sp, #16
 80041fe:	bd10      	pop	{r4, pc}

08004200 <SX1262DVK1CAS_RADIO_WakeUp>:
{
 8004200:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8004202:	24a0      	movs	r4, #160	; 0xa0
 8004204:	05e4      	lsls	r4, r4, #23
 8004206:	2200      	movs	r2, #0
 8004208:	2110      	movs	r1, #16
 800420a:	0020      	movs	r0, r4
 800420c:	f000 fff6 	bl	80051fc <HAL_GPIO_WritePin>
  SX1262DVK1CAS_RADIO_SendRecv(RADIO_GET_STATUS);
 8004210:	20c0      	movs	r0, #192	; 0xc0
 8004212:	f7ff ffe7 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
  SX1262DVK1CAS_RADIO_SendRecv(0);
 8004216:	2000      	movs	r0, #0
 8004218:	f7ff ffe4 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800421c:	2201      	movs	r2, #1
 800421e:	2110      	movs	r1, #16
 8004220:	0020      	movs	r0, r4
 8004222:	f000 ffeb 	bl	80051fc <HAL_GPIO_WritePin>
  SX1262DVK1CAS_RADIO_WaitOnBusy();
 8004226:	f7ff ffb3 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800422a:	bd10      	pop	{r4, pc}

0800422c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800422c:	4770      	bx	lr
	...

08004230 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004230:	2302      	movs	r3, #2
 8004232:	4a08      	ldr	r2, [pc, #32]	; (8004254 <HAL_Init+0x24>)
{
 8004234:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004236:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004238:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800423a:	430b      	orrs	r3, r1
 800423c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800423e:	f7fe fd71 	bl	8002d24 <HAL_InitTick>
 8004242:	1e04      	subs	r4, r0, #0
 8004244:	d103      	bne.n	800424e <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004246:	f7fe fbe9 	bl	8002a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800424a:	0020      	movs	r0, r4
 800424c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800424e:	2401      	movs	r4, #1
 8004250:	e7fb      	b.n	800424a <HAL_Init+0x1a>
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	40022000 	.word	0x40022000

08004258 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004258:	4a03      	ldr	r2, [pc, #12]	; (8004268 <HAL_IncTick+0x10>)
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_IncTick+0x14>)
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	185b      	adds	r3, r3, r1
 8004262:	6013      	str	r3, [r2, #0]
}
 8004264:	4770      	bx	lr
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	200005ec 	.word	0x200005ec
 800426c:	2000005c 	.word	0x2000005c

08004270 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004270:	4b01      	ldr	r3, [pc, #4]	; (8004278 <HAL_GetUIDw0+0x8>)
 8004272:	6818      	ldr	r0, [r3, #0]
}
 8004274:	4770      	bx	lr
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	1ff80050 	.word	0x1ff80050

0800427c <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800427c:	4b01      	ldr	r3, [pc, #4]	; (8004284 <HAL_GetUIDw1+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
}
 8004280:	4770      	bx	lr
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	1ff80054 	.word	0x1ff80054

08004288 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <HAL_GetUIDw2+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
}
 800428c:	4770      	bx	lr
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	1ff80064 	.word	0x1ff80064

08004294 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <ADC_DelayMicroSecond+0x24>)
{
 8004296:	b513      	push	{r0, r1, r4, lr}
 8004298:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800429a:	4908      	ldr	r1, [pc, #32]	; (80042bc <ADC_DelayMicroSecond+0x28>)
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	f7fb ff59 	bl	8000154 <__udivsi3>
 80042a2:	4344      	muls	r4, r0
 80042a4:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80042a6:	9b01      	ldr	r3, [sp, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d100      	bne.n	80042ae <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80042ac:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	e7f7      	b.n	80042a6 <ADC_DelayMicroSecond+0x12>
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	20000058 	.word	0x20000058
 80042bc:	000f4240 	.word	0x000f4240

080042c0 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042c0:	2103      	movs	r1, #3
 80042c2:	6803      	ldr	r3, [r0, #0]
{
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042c8:	6898      	ldr	r0, [r3, #8]
 80042ca:	4008      	ands	r0, r1
 80042cc:	2801      	cmp	r0, #1
 80042ce:	d001      	beq.n	80042d4 <ADC_Disable+0x14>
  return HAL_OK;
 80042d0:	2000      	movs	r0, #0
}
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4202      	tst	r2, r0
 80042d8:	d0fa      	beq.n	80042d0 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80042da:	2205      	movs	r2, #5
 80042dc:	689d      	ldr	r5, [r3, #8]
 80042de:	4015      	ands	r5, r2
 80042e0:	2d01      	cmp	r5, #1
 80042e2:	d119      	bne.n	8004318 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 80042e4:	6898      	ldr	r0, [r3, #8]
 80042e6:	3a03      	subs	r2, #3
 80042e8:	4302      	orrs	r2, r0
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80042ee:	f7fe fd1b 	bl	8002d28 <HAL_GetTick>
 80042f2:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	422b      	tst	r3, r5
 80042fa:	d0e9      	beq.n	80042d0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042fc:	f7fe fd14 	bl	8002d28 <HAL_GetTick>
 8004300:	1b80      	subs	r0, r0, r6
 8004302:	280a      	cmp	r0, #10
 8004304:	d9f6      	bls.n	80042f4 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004306:	2310      	movs	r3, #16
 8004308:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800430a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430c:	4313      	orrs	r3, r2
 800430e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004310:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004312:	431d      	orrs	r5, r3
 8004314:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004316:	e7dc      	b.n	80042d2 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004318:	2310      	movs	r3, #16
 800431a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800431c:	4313      	orrs	r3, r2
 800431e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004322:	4303      	orrs	r3, r0
 8004324:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004326:	e7d4      	b.n	80042d2 <ADC_Disable+0x12>

08004328 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004328:	2103      	movs	r1, #3
 800432a:	6803      	ldr	r3, [r0, #0]
{
 800432c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800432e:	689a      	ldr	r2, [r3, #8]
{
 8004330:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004332:	400a      	ands	r2, r1
 8004334:	2a01      	cmp	r2, #1
 8004336:	d104      	bne.n	8004342 <ADC_Enable+0x1a>
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	4211      	tst	r1, r2
 800433c:	d001      	beq.n	8004342 <ADC_Enable+0x1a>
  return HAL_OK;
 800433e:	2000      	movs	r0, #0
}
 8004340:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <ADC_Enable+0x6c>)
 8004346:	4211      	tst	r1, r2
 8004348:	d008      	beq.n	800435c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004350:	4313      	orrs	r3, r2
 8004352:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004356:	4303      	orrs	r3, r0
 8004358:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800435a:	e7f1      	b.n	8004340 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800435c:	2501      	movs	r5, #1
 800435e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004360:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8004362:	432a      	orrs	r2, r5
 8004364:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004366:	f7ff ff95 	bl	8004294 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800436a:	f7fe fcdd 	bl	8002d28 <HAL_GetTick>
 800436e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	422b      	tst	r3, r5
 8004376:	d1e2      	bne.n	800433e <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004378:	f7fe fcd6 	bl	8002d28 <HAL_GetTick>
 800437c:	1b80      	subs	r0, r0, r6
 800437e:	280a      	cmp	r0, #10
 8004380:	d9f6      	bls.n	8004370 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004382:	2310      	movs	r3, #16
 8004384:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004386:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004388:	4313      	orrs	r3, r2
 800438a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800438e:	431d      	orrs	r5, r3
 8004390:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004392:	e7d5      	b.n	8004340 <ADC_Enable+0x18>
 8004394:	80000017 	.word	0x80000017

08004398 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004398:	2204      	movs	r2, #4
 800439a:	6803      	ldr	r3, [r0, #0]
{
 800439c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800439e:	6899      	ldr	r1, [r3, #8]
{
 80043a0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80043a2:	4211      	tst	r1, r2
 80043a4:	d101      	bne.n	80043aa <ADC_ConversionStop+0x12>
  return HAL_OK;
 80043a6:	2000      	movs	r0, #0
}
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	4211      	tst	r1, r2
 80043ae:	d006      	beq.n	80043be <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80043b0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80043b2:	0792      	lsls	r2, r2, #30
 80043b4:	d403      	bmi.n	80043be <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80043b6:	2210      	movs	r2, #16
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80043be:	f7fe fcb3 	bl	8002d28 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80043c2:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80043c4:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4233      	tst	r3, r6
 80043cc:	d0eb      	beq.n	80043a6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80043ce:	f7fe fcab 	bl	8002d28 <HAL_GetTick>
 80043d2:	1b40      	subs	r0, r0, r5
 80043d4:	280a      	cmp	r0, #10
 80043d6:	d9f6      	bls.n	80043c6 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043da:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80043de:	4313      	orrs	r3, r2
 80043e0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043e4:	4303      	orrs	r3, r0
 80043e6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80043e8:	e7de      	b.n	80043a8 <ADC_ConversionStop+0x10>
	...

080043ec <HAL_ADC_Init>:
{
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	0004      	movs	r4, r0
    return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80043f2:	2c00      	cmp	r4, #0
 80043f4:	d01b      	beq.n	800442e <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80043fc:	0022      	movs	r2, r4
 80043fe:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004400:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004402:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004404:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004406:	f7fd ff4d 	bl	80022a4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800440a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800440c:	06db      	lsls	r3, r3, #27
 800440e:	d406      	bmi.n	800441e <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	2204      	movs	r2, #4
 8004414:	6899      	ldr	r1, [r3, #8]
 8004416:	0008      	movs	r0, r1
 8004418:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800441a:	4211      	tst	r1, r2
 800441c:	d008      	beq.n	8004430 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	2310      	movs	r3, #16
 8004420:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004422:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004424:	4313      	orrs	r3, r2
 8004426:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004428:	2300      	movs	r3, #0
 800442a:	3450      	adds	r4, #80	; 0x50
 800442c:	7023      	strb	r3, [r4, #0]
}
 800442e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004430:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004432:	4955      	ldr	r1, [pc, #340]	; (8004588 <HAL_ADC_Init+0x19c>)
 8004434:	4011      	ands	r1, r2
 8004436:	2202      	movs	r2, #2
 8004438:	430a      	orrs	r2, r1
 800443a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800443c:	2203      	movs	r2, #3
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	4011      	ands	r1, r2
 8004442:	4a52      	ldr	r2, [pc, #328]	; (800458c <HAL_ADC_Init+0x1a0>)
 8004444:	2901      	cmp	r1, #1
 8004446:	d102      	bne.n	800444e <HAL_ADC_Init+0x62>
 8004448:	681d      	ldr	r5, [r3, #0]
 800444a:	420d      	tst	r5, r1
 800444c:	d119      	bne.n	8004482 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800444e:	2680      	movs	r6, #128	; 0x80
 8004450:	6861      	ldr	r1, [r4, #4]
 8004452:	05f6      	lsls	r6, r6, #23
 8004454:	004d      	lsls	r5, r1, #1
 8004456:	086d      	lsrs	r5, r5, #1
 8004458:	42b5      	cmp	r5, r6
 800445a:	d003      	beq.n	8004464 <HAL_ADC_Init+0x78>
 800445c:	2580      	movs	r5, #128	; 0x80
 800445e:	062d      	lsls	r5, r5, #24
 8004460:	42a9      	cmp	r1, r5
 8004462:	d176      	bne.n	8004552 <HAL_ADC_Init+0x166>
 8004464:	691d      	ldr	r5, [r3, #16]
 8004466:	00ad      	lsls	r5, r5, #2
 8004468:	08ad      	lsrs	r5, r5, #2
 800446a:	611d      	str	r5, [r3, #16]
 800446c:	691d      	ldr	r5, [r3, #16]
 800446e:	4329      	orrs	r1, r5
 8004470:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004472:	2518      	movs	r5, #24
 8004474:	68d9      	ldr	r1, [r3, #12]
 8004476:	43a9      	bics	r1, r5
 8004478:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800447a:	68d9      	ldr	r1, [r3, #12]
 800447c:	68a5      	ldr	r5, [r4, #8]
 800447e:	4329      	orrs	r1, r5
 8004480:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004482:	6811      	ldr	r1, [r2, #0]
 8004484:	4d42      	ldr	r5, [pc, #264]	; (8004590 <HAL_ADC_Init+0x1a4>)
 8004486:	4029      	ands	r1, r5
 8004488:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800448a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800448c:	6815      	ldr	r5, [r2, #0]
 800448e:	0649      	lsls	r1, r1, #25
 8004490:	4329      	orrs	r1, r5
 8004492:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	6899      	ldr	r1, [r3, #8]
 8004498:	0552      	lsls	r2, r2, #21
 800449a:	4211      	tst	r1, r2
 800449c:	d102      	bne.n	80044a4 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	493b      	ldr	r1, [pc, #236]	; (8004594 <HAL_ADC_Init+0x1a8>)
 80044a8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80044aa:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80044ac:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044ae:	68dd      	ldr	r5, [r3, #12]
 80044b0:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80044b2:	2902      	cmp	r1, #2
 80044b4:	d100      	bne.n	80044b8 <HAL_ADC_Init+0xcc>
 80044b6:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044b8:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044ba:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044bc:	4332      	orrs	r2, r6
 80044be:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80044c0:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044c2:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80044c4:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044c6:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80044c8:	69e5      	ldr	r5, [r4, #28]
 80044ca:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044cc:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044ce:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044d0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80044d2:	0025      	movs	r5, r4
 80044d4:	352c      	adds	r5, #44	; 0x2c
 80044d6:	782d      	ldrb	r5, [r5, #0]
 80044d8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044da:	432a      	orrs	r2, r5
 80044dc:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044de:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80044e0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044e4:	30ff      	adds	r0, #255	; 0xff
 80044e6:	4282      	cmp	r2, r0
 80044e8:	d004      	beq.n	80044f4 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80044ea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80044ec:	68d8      	ldr	r0, [r3, #12]
 80044ee:	432a      	orrs	r2, r5
 80044f0:	4302      	orrs	r2, r0
 80044f2:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044f4:	1ca2      	adds	r2, r4, #2
 80044f6:	7fd2      	ldrb	r2, [r2, #31]
 80044f8:	2a01      	cmp	r2, #1
 80044fa:	d106      	bne.n	800450a <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80044fc:	2900      	cmp	r1, #0
 80044fe:	d134      	bne.n	800456a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	68d9      	ldr	r1, [r3, #12]
 8004504:	0252      	lsls	r2, r2, #9
 8004506:	430a      	orrs	r2, r1
 8004508:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800450a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800450c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800450e:	2901      	cmp	r1, #1
 8004510:	d133      	bne.n	800457a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004512:	4821      	ldr	r0, [pc, #132]	; (8004598 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004514:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004516:	4002      	ands	r2, r0
 8004518:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800451a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800451c:	6918      	ldr	r0, [r3, #16]
 800451e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004520:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004522:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004524:	4302      	orrs	r2, r0
 8004526:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	4311      	orrs	r1, r2
 800452c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800452e:	2107      	movs	r1, #7
 8004530:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004532:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004534:	438a      	bics	r2, r1
 8004536:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800453c:	430a      	orrs	r2, r1
 800453e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004540:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8004542:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8004544:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004546:	4393      	bics	r3, r2
 8004548:	001a      	movs	r2, r3
 800454a:	2301      	movs	r3, #1
 800454c:	4313      	orrs	r3, r2
 800454e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004550:	e76d      	b.n	800442e <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004552:	691d      	ldr	r5, [r3, #16]
 8004554:	4e11      	ldr	r6, [pc, #68]	; (800459c <HAL_ADC_Init+0x1b0>)
 8004556:	00ad      	lsls	r5, r5, #2
 8004558:	08ad      	lsrs	r5, r5, #2
 800455a:	611d      	str	r5, [r3, #16]
 800455c:	6815      	ldr	r5, [r2, #0]
 800455e:	4035      	ands	r5, r6
 8004560:	6015      	str	r5, [r2, #0]
 8004562:	6815      	ldr	r5, [r2, #0]
 8004564:	4329      	orrs	r1, r5
 8004566:	6011      	str	r1, [r2, #0]
 8004568:	e783      	b.n	8004472 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800456a:	2120      	movs	r1, #32
 800456c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800456e:	4301      	orrs	r1, r0
 8004570:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004572:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004574:	430a      	orrs	r2, r1
 8004576:	65a2      	str	r2, [r4, #88]	; 0x58
 8004578:	e7c7      	b.n	800450a <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800457a:	2101      	movs	r1, #1
 800457c:	420a      	tst	r2, r1
 800457e:	d0d6      	beq.n	800452e <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	438a      	bics	r2, r1
 8004584:	611a      	str	r2, [r3, #16]
 8004586:	e7d2      	b.n	800452e <HAL_ADC_Init+0x142>
 8004588:	fffffefd 	.word	0xfffffefd
 800458c:	40012708 	.word	0x40012708
 8004590:	fdffffff 	.word	0xfdffffff
 8004594:	fffe0219 	.word	0xfffe0219
 8004598:	fffffc03 	.word	0xfffffc03
 800459c:	ffc3ffff 	.word	0xffc3ffff

080045a0 <HAL_ADC_DeInit>:
{
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80045a4:	2501      	movs	r5, #1
  if(hadc == NULL)
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d011      	beq.n	80045ce <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80045aa:	2302      	movs	r3, #2
 80045ac:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80045ae:	4313      	orrs	r3, r2
 80045b0:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80045b2:	f7ff fef1 	bl	8004398 <ADC_ConversionStop>
 80045b6:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 80045b8:	d137      	bne.n	800462a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 80045ba:	0020      	movs	r0, r4
 80045bc:	f7ff fe80 	bl	80042c0 <ADC_Disable>
 80045c0:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 80045c2:	2801      	cmp	r0, #1
 80045c4:	d105      	bne.n	80045d2 <HAL_ADC_DeInit+0x32>
{
 80045c6:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 80045c8:	2300      	movs	r3, #0
 80045ca:	3450      	adds	r4, #80	; 0x50
 80045cc:	7023      	strb	r3, [r4, #0]
}
 80045ce:	0028      	movs	r0, r5
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 80045d2:	2301      	movs	r3, #1
 80045d4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	4915      	ldr	r1, [pc, #84]	; (8004630 <HAL_ADC_DeInit+0x90>)
 80045da:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 80045dc:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80045de:	400a      	ands	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80045e4:	4914      	ldr	r1, [pc, #80]	; (8004638 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80045e6:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	400a      	ands	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4912      	ldr	r1, [pc, #72]	; (800463c <HAL_ADC_DeInit+0x9c>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	4911      	ldr	r1, [pc, #68]	; (8004640 <HAL_ADC_DeInit+0xa0>)
 80045fa:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80045fc:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80045fe:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	438a      	bics	r2, r1
 8004604:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <HAL_ADC_DeInit+0xa4>)
 800460a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800460c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800460e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004610:	33b4      	adds	r3, #180	; 0xb4
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	438a      	bics	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 800461e:	f7fd fe51 	bl	80022c4 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004622:	2300      	movs	r3, #0
 8004624:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8004626:	6563      	str	r3, [r4, #84]	; 0x54
 8004628:	e7ce      	b.n	80045c8 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800462a:	2801      	cmp	r0, #1
 800462c:	d0cb      	beq.n	80045c6 <HAL_ADC_DeInit+0x26>
 800462e:	e7d2      	b.n	80045d6 <HAL_ADC_DeInit+0x36>
 8004630:	fffff760 	.word	0xfffff760
 8004634:	0000089f 	.word	0x0000089f
 8004638:	efffffff 	.word	0xefffffff
 800463c:	833e0200 	.word	0x833e0200
 8004640:	3ffffc02 	.word	0x3ffffc02
 8004644:	f000f000 	.word	0xf000f000

08004648 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004648:	6803      	ldr	r3, [r0, #0]
{
 800464a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800464c:	689b      	ldr	r3, [r3, #8]
{
 800464e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004650:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004652:	075b      	lsls	r3, r3, #29
 8004654:	d41a      	bmi.n	800468c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004656:	0025      	movs	r5, r4
 8004658:	3550      	adds	r5, #80	; 0x50
 800465a:	782b      	ldrb	r3, [r5, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d015      	beq.n	800468c <HAL_ADC_Start+0x44>
 8004660:	2301      	movs	r3, #1
 8004662:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004664:	69e3      	ldr	r3, [r4, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d111      	bne.n	800468e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800466a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800466e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004670:	401a      	ands	r2, r3
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004678:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800467a:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800467c:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800467e:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004684:	6899      	ldr	r1, [r3, #8]
 8004686:	3a18      	subs	r2, #24
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800468e:	0020      	movs	r0, r4
 8004690:	f7ff fe4a 	bl	8004328 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004694:	2800      	cmp	r0, #0
 8004696:	d0e8      	beq.n	800466a <HAL_ADC_Start+0x22>
 8004698:	e7f8      	b.n	800468c <HAL_ADC_Start+0x44>
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	fffff0fe 	.word	0xfffff0fe

080046a0 <HAL_ADC_Stop>:
{
 80046a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80046a2:	0006      	movs	r6, r0
 80046a4:	3650      	adds	r6, #80	; 0x50
 80046a6:	7833      	ldrb	r3, [r6, #0]
{
 80046a8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80046aa:	2002      	movs	r0, #2
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d012      	beq.n	80046d6 <HAL_ADC_Stop+0x36>
 80046b0:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 80046b2:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80046b4:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80046b6:	f7ff fe6f 	bl	8004398 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80046be:	0020      	movs	r0, r4
 80046c0:	f7ff fdfe 	bl	80042c0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80046c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ca:	4a03      	ldr	r2, [pc, #12]	; (80046d8 <HAL_ADC_Stop+0x38>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	431d      	orrs	r5, r3
 80046d0:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80046d2:	2300      	movs	r3, #0
 80046d4:	7033      	strb	r3, [r6, #0]
}
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	fffffefe 	.word	0xfffffefe

080046dc <HAL_ADC_PollForConversion>:
{
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80046de:	6946      	ldr	r6, [r0, #20]
{
 80046e0:	0004      	movs	r4, r0
 80046e2:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80046e4:	2e08      	cmp	r6, #8
 80046e6:	d00d      	beq.n	8004704 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80046e8:	6803      	ldr	r3, [r0, #0]
 80046ea:	2001      	movs	r0, #1
 80046ec:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80046ee:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80046f0:	4203      	tst	r3, r0
 80046f2:	d007      	beq.n	8004704 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f4:	2320      	movs	r3, #32
 80046f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 80046f8:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046fa:	4313      	orrs	r3, r2
 80046fc:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80046fe:	2300      	movs	r3, #0
 8004700:	7023      	strb	r3, [r4, #0]
}
 8004702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004704:	f7fe fb10 	bl	8002d28 <HAL_GetTick>
 8004708:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4216      	tst	r6, r2
 8004710:	d024      	beq.n	800475c <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004716:	0092      	lsls	r2, r2, #2
 8004718:	430a      	orrs	r2, r1
 800471a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800471c:	22c0      	movs	r2, #192	; 0xc0
 800471e:	68d9      	ldr	r1, [r3, #12]
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	4211      	tst	r1, r2
 8004724:	d113      	bne.n	800474e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004726:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004728:	7fd2      	ldrb	r2, [r2, #31]
 800472a:	2a00      	cmp	r2, #0
 800472c:	d10f      	bne.n	800474e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	0712      	lsls	r2, r2, #28
 8004732:	d50c      	bpl.n	800474e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	0752      	lsls	r2, r2, #29
 8004738:	d423      	bmi.n	8004782 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800473a:	210c      	movs	r1, #12
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	438a      	bics	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8004742:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004744:	4913      	ldr	r1, [pc, #76]	; (8004794 <HAL_ADC_PollForConversion+0xb8>)
 8004746:	4011      	ands	r1, r2
 8004748:	2201      	movs	r2, #1
 800474a:	430a      	orrs	r2, r1
 800474c:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800474e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004750:	69a2      	ldr	r2, [r4, #24]
 8004752:	4282      	cmp	r2, r0
 8004754:	d1d5      	bne.n	8004702 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004756:	220c      	movs	r2, #12
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e7d2      	b.n	8004702 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800475c:	1c6a      	adds	r2, r5, #1
 800475e:	d0d5      	beq.n	800470c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004760:	2d00      	cmp	r5, #0
 8004762:	d108      	bne.n	8004776 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004764:	2304      	movs	r3, #4
 8004766:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004768:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800476a:	4313      	orrs	r3, r2
 800476c:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800476e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004770:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8004772:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004774:	e7c5      	b.n	8004702 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004776:	f7fe fad7 	bl	8002d28 <HAL_GetTick>
 800477a:	1bc0      	subs	r0, r0, r7
 800477c:	42a8      	cmp	r0, r5
 800477e:	d9c4      	bls.n	800470a <HAL_ADC_PollForConversion+0x2e>
 8004780:	e7f0      	b.n	8004764 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004782:	2220      	movs	r2, #32
 8004784:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004786:	430a      	orrs	r2, r1
 8004788:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800478a:	2201      	movs	r2, #1
 800478c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800478e:	430a      	orrs	r2, r1
 8004790:	65a2      	str	r2, [r4, #88]	; 0x58
 8004792:	e7dc      	b.n	800474e <HAL_ADC_PollForConversion+0x72>
 8004794:	fffffefe 	.word	0xfffffefe

08004798 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004798:	6803      	ldr	r3, [r0, #0]
 800479a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_ADC_ConfigChannel>:
{
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80047a2:	0004      	movs	r4, r0
 80047a4:	3450      	adds	r4, #80	; 0x50
 80047a6:	7822      	ldrb	r2, [r4, #0]
{
 80047a8:	0003      	movs	r3, r0
 80047aa:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80047ac:	2002      	movs	r0, #2
 80047ae:	2a01      	cmp	r2, #1
 80047b0:	d00b      	beq.n	80047ca <HAL_ADC_ConfigChannel+0x2a>
 80047b2:	3801      	subs	r0, #1
 80047b4:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	6891      	ldr	r1, [r2, #8]
 80047ba:	0749      	lsls	r1, r1, #29
 80047bc:	d506      	bpl.n	80047cc <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047be:	2220      	movs	r2, #32
 80047c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047c2:	430a      	orrs	r2, r1
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80047c6:	2300      	movs	r3, #0
 80047c8:	7023      	strb	r3, [r4, #0]
}
 80047ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80047cc:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80047ce:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 80047d0:	4e19      	ldr	r6, [pc, #100]	; (8004838 <HAL_ADC_ConfigChannel+0x98>)
 80047d2:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80047d4:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80047d6:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80047d8:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80047da:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 80047dc:	42b7      	cmp	r7, r6
 80047de:	d019      	beq.n	8004814 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80047e0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80047e2:	4301      	orrs	r1, r0
 80047e4:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <HAL_ADC_ConfigChannel+0x9c>)
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80047f2:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80047f8:	f7ff fd4c 	bl	8004294 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	039b      	lsls	r3, r3, #14
 8004800:	d505      	bpl.n	800480e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	4a0d      	ldr	r2, [pc, #52]	; (800483c <HAL_ADC_ConfigChannel+0x9c>)
 8004806:	03db      	lsls	r3, r3, #15
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800480c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800480e:	2000      	movs	r0, #0
 8004810:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004812:	e7da      	b.n	80047ca <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004814:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8004816:	438d      	bics	r5, r1
 8004818:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <HAL_ADC_ConfigChannel+0x9c>)
 8004820:	4907      	ldr	r1, [pc, #28]	; (8004840 <HAL_ADC_ConfigChannel+0xa0>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	400b      	ands	r3, r1
 8004826:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004828:	0383      	lsls	r3, r0, #14
 800482a:	d5f0      	bpl.n	800480e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800482c:	4a03      	ldr	r2, [pc, #12]	; (800483c <HAL_ADC_ConfigChannel+0x9c>)
 800482e:	4905      	ldr	r1, [pc, #20]	; (8004844 <HAL_ADC_ConfigChannel+0xa4>)
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	400b      	ands	r3, r1
 8004834:	e7ea      	b.n	800480c <HAL_ADC_ConfigChannel+0x6c>
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	00001001 	.word	0x00001001
 800483c:	40012708 	.word	0x40012708
 8004840:	ff7fffff 	.word	0xff7fffff
 8004844:	ffbfffff 	.word	0xffbfffff

08004848 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800484a:	0005      	movs	r5, r0
 800484c:	3550      	adds	r5, #80	; 0x50
 800484e:	782b      	ldrb	r3, [r5, #0]
{
 8004850:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004852:	2002      	movs	r0, #2
 8004854:	2b01      	cmp	r3, #1
 8004856:	d044      	beq.n	80048e2 <HAL_ADCEx_Calibration_Start+0x9a>
 8004858:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800485a:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 800485c:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	6898      	ldr	r0, [r3, #8]
 8004862:	4010      	ands	r0, r2
 8004864:	2801      	cmp	r0, #1
 8004866:	d109      	bne.n	800487c <HAL_ADCEx_Calibration_Start+0x34>
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4202      	tst	r2, r0
 800486c:	d006      	beq.n	800487c <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800486e:	2320      	movs	r3, #32
 8004870:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004872:	4313      	orrs	r3, r2
 8004874:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004876:	2300      	movs	r3, #0
 8004878:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800487a:	e032      	b.n	80048e2 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 800487c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800487e:	4919      	ldr	r1, [pc, #100]	; (80048e4 <HAL_ADCEx_Calibration_Start+0x9c>)
 8004880:	4011      	ands	r1, r2
 8004882:	2202      	movs	r2, #2
 8004884:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004886:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8004888:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800488a:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	438a      	bics	r2, r1
 8004890:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	0612      	lsls	r2, r2, #24
 8004898:	430a      	orrs	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800489c:	f7fe fa44 	bl	8002d28 <HAL_GetTick>
 80048a0:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	db0c      	blt.n	80048c4 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80048aa:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80048ac:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80048ae:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80048b0:	430e      	orrs	r6, r1
 80048b2:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80048b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048b6:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80048b8:	4393      	bics	r3, r2
 80048ba:	001a      	movs	r2, r3
 80048bc:	2301      	movs	r3, #1
 80048be:	4313      	orrs	r3, r2
 80048c0:	6563      	str	r3, [r4, #84]	; 0x54
 80048c2:	e7d8      	b.n	8004876 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80048c4:	f7fe fa30 	bl	8002d28 <HAL_GetTick>
 80048c8:	1bc0      	subs	r0, r0, r7
 80048ca:	280a      	cmp	r0, #10
 80048cc:	d9e9      	bls.n	80048a2 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 80048ce:	2212      	movs	r2, #18
 80048d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80048d2:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80048d4:	4393      	bics	r3, r2
 80048d6:	001a      	movs	r2, r3
 80048d8:	2310      	movs	r3, #16
 80048da:	4313      	orrs	r3, r2
 80048dc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80048de:	2300      	movs	r3, #0
 80048e0:	702b      	strb	r3, [r5, #0]
}
 80048e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e4:	fffffefd 	.word	0xfffffefd

080048e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048ea:	25ff      	movs	r5, #255	; 0xff
 80048ec:	2403      	movs	r4, #3
 80048ee:	002a      	movs	r2, r5
 80048f0:	4004      	ands	r4, r0
 80048f2:	00e4      	lsls	r4, r4, #3
 80048f4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048f6:	0189      	lsls	r1, r1, #6
 80048f8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048fa:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80048fc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048fe:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8004900:	2800      	cmp	r0, #0
 8004902:	db0a      	blt.n	800491a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004904:	24c0      	movs	r4, #192	; 0xc0
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_NVIC_SetPriority+0x4c>)
 8004908:	0880      	lsrs	r0, r0, #2
 800490a:	0080      	lsls	r0, r0, #2
 800490c:	18c0      	adds	r0, r0, r3
 800490e:	00a4      	lsls	r4, r4, #2
 8004910:	5903      	ldr	r3, [r0, r4]
 8004912:	401a      	ands	r2, r3
 8004914:	4311      	orrs	r1, r2
 8004916:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004918:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800491a:	200f      	movs	r0, #15
 800491c:	4003      	ands	r3, r0
 800491e:	3b08      	subs	r3, #8
 8004920:	4805      	ldr	r0, [pc, #20]	; (8004938 <HAL_NVIC_SetPriority+0x50>)
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	181b      	adds	r3, r3, r0
 8004928:	69d8      	ldr	r0, [r3, #28]
 800492a:	4002      	ands	r2, r0
 800492c:	4311      	orrs	r1, r2
 800492e:	61d9      	str	r1, [r3, #28]
 8004930:	e7f2      	b.n	8004918 <HAL_NVIC_SetPriority+0x30>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	e000e100 	.word	0xe000e100
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800493c:	2800      	cmp	r0, #0
 800493e:	db05      	blt.n	800494c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004940:	231f      	movs	r3, #31
 8004942:	4018      	ands	r0, r3
 8004944:	3b1e      	subs	r3, #30
 8004946:	4083      	lsls	r3, r0
 8004948:	4a01      	ldr	r2, [pc, #4]	; (8004950 <HAL_NVIC_EnableIRQ+0x14>)
 800494a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800494c:	4770      	bx	lr
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	e000e100 	.word	0xe000e100

08004954 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004954:	2800      	cmp	r0, #0
 8004956:	db09      	blt.n	800496c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004958:	231f      	movs	r3, #31
 800495a:	4018      	ands	r0, r3
 800495c:	3b1e      	subs	r3, #30
 800495e:	4083      	lsls	r3, r0
 8004960:	4a03      	ldr	r2, [pc, #12]	; (8004970 <HAL_NVIC_DisableIRQ+0x1c>)
 8004962:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004968:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800496c:	4770      	bx	lr
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	e000e104 	.word	0xe000e104

08004974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004978:	2001      	movs	r0, #1
  if(hdma == NULL)
 800497a:	2c00      	cmp	r4, #0
 800497c:	d035      	beq.n	80049ea <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800497e:	6825      	ldr	r5, [r4, #0]
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <HAL_DMA_Init+0x78>)
 8004982:	2114      	movs	r1, #20
 8004984:	18e8      	adds	r0, r5, r3
 8004986:	f7fb fbe5 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800498c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 800498e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004994:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8004996:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004998:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800499a:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800499c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800499e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80049a0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a2:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80049a4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a6:	433b      	orrs	r3, r7
 80049a8:	6967      	ldr	r7, [r4, #20]
 80049aa:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ac:	69a7      	ldr	r7, [r4, #24]
 80049ae:	433b      	orrs	r3, r7
 80049b0:	69e7      	ldr	r7, [r4, #28]
 80049b2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b4:	6a27      	ldr	r7, [r4, #32]
 80049b6:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80049b8:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049ba:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	01db      	lsls	r3, r3, #7
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d00c      	beq.n	80049de <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049c4:	251c      	movs	r5, #28
 80049c6:	4028      	ands	r0, r5
 80049c8:	3d0d      	subs	r5, #13
 80049ca:	4085      	lsls	r5, r0
 80049cc:	490a      	ldr	r1, [pc, #40]	; (80049f8 <HAL_DMA_Init+0x84>)
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	43ab      	bics	r3, r5
 80049d2:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	680d      	ldr	r5, [r1, #0]
 80049d8:	4083      	lsls	r3, r0
 80049da:	432b      	orrs	r3, r5
 80049dc:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049de:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049e0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049e2:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049e4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80049e6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80049e8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ec:	bffdfff8 	.word	0xbffdfff8
 80049f0:	40020000 	.word	0x40020000
 80049f4:	ffff800f 	.word	0xffff800f
 80049f8:	400200a8 	.word	0x400200a8

080049fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	2501      	movs	r5, #1
 8004a00:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8004a02:	0028      	movs	r0, r5
  if (NULL == hdma )
 8004a04:	2c00      	cmp	r4, #0
 8004a06:	d021      	beq.n	8004a4c <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004a08:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a0a:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8004a0c:	6833      	ldr	r3, [r6, #0]
 8004a0e:	43ab      	bics	r3, r5
 8004a10:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <HAL_DMA_DeInit+0x54>)
 8004a14:	18f0      	adds	r0, r6, r3
 8004a16:	f7fb fb9d 	bl	8000154 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a1a:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a1c:	0083      	lsls	r3, r0, #2
 8004a1e:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a20:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8004a22:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a24:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a26:	390d      	subs	r1, #13
 8004a28:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a2c:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8004a2e:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8004a30:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a32:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a34:	4d08      	ldr	r5, [pc, #32]	; (8004a58 <HAL_DMA_DeInit+0x5c>)
 8004a36:	682a      	ldr	r2, [r5, #0]
 8004a38:	438a      	bics	r2, r1
 8004a3a:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8004a3c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004a3e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004a40:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004a42:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a44:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a46:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8004a48:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8004a4a:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	bffdfff8 	.word	0xbffdfff8
 8004a54:	40020000 	.word	0x40020000
 8004a58:	400200a8 	.word	0x400200a8

08004a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a5e:	1d45      	adds	r5, r0, #5
{
 8004a60:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8004a62:	7feb      	ldrb	r3, [r5, #31]
{
 8004a64:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004a66:	2002      	movs	r0, #2
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d029      	beq.n	8004ac0 <HAL_DMA_Start_IT+0x64>
 8004a6c:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a6e:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8004a70:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a72:	7ffb      	ldrb	r3, [r7, #31]
 8004a74:	2600      	movs	r6, #0
 8004a76:	469c      	mov	ip, r3
 8004a78:	4660      	mov	r0, ip
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2801      	cmp	r0, #1
 8004a7e:	d12a      	bne.n	8004ad6 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a80:	3001      	adds	r0, #1
 8004a82:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a84:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a86:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a88:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004a8a:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a8c:	361c      	adds	r6, #28
 8004a8e:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8004a90:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a92:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8004a94:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a96:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004a98:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004aa4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004aa6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004aa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aae:	230e      	movs	r3, #14
 8004ab0:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	6802      	ldr	r2, [r0, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2000      	movs	r0, #0
}
 8004ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004ac2:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004ac4:	60c2      	str	r2, [r0, #12]
 8004ac6:	e7ef      	b.n	8004aa8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ac8:	2204      	movs	r2, #4
 8004aca:	6803      	ldr	r3, [r0, #0]
 8004acc:	4393      	bics	r3, r2
 8004ace:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ad0:	6802      	ldr	r2, [r0, #0]
 8004ad2:	230a      	movs	r3, #10
 8004ad4:	e7ed      	b.n	8004ab2 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8004ad6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8004ad8:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8004ada:	e7f1      	b.n	8004ac0 <HAL_DMA_Start_IT+0x64>

08004adc <HAL_DMA_Abort>:
{
 8004adc:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ade:	1d85      	adds	r5, r0, #6
 8004ae0:	7feb      	ldrb	r3, [r5, #31]
 8004ae2:	1d44      	adds	r4, r0, #5
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d005      	beq.n	8004af4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae8:	2304      	movs	r3, #4
 8004aea:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004aec:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004aee:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004af0:	77e3      	strb	r3, [r4, #31]
}
 8004af2:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af4:	210e      	movs	r1, #14
 8004af6:	6803      	ldr	r3, [r0, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	438a      	bics	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004afe:	2201      	movs	r2, #1
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	4391      	bics	r1, r2
 8004b04:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b06:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b08:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004b0a:	201c      	movs	r0, #28
 8004b0c:	4003      	ands	r3, r0
 8004b0e:	0010      	movs	r0, r2
 8004b10:	4098      	lsls	r0, r3
 8004b12:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004b14:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004b16:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8004b18:	77e0      	strb	r0, [r4, #31]
    return status;
 8004b1a:	e7ea      	b.n	8004af2 <HAL_DMA_Abort+0x16>

08004b1c <HAL_DMA_Abort_IT>:
{
 8004b1c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b1e:	1d84      	adds	r4, r0, #6
 8004b20:	7fe3      	ldrb	r3, [r4, #31]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d004      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b26:	2304      	movs	r3, #4
 8004b28:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004b2a:	3b03      	subs	r3, #3
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b30:	210e      	movs	r1, #14
 8004b32:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b34:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	438a      	bics	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	6819      	ldr	r1, [r3, #0]
 8004b40:	4391      	bics	r1, r2
 8004b42:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b44:	231c      	movs	r3, #28
 8004b46:	402b      	ands	r3, r5
 8004b48:	0015      	movs	r5, r2
 8004b4a:	409d      	lsls	r5, r3
 8004b4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8004b4e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b50:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004b52:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8004b54:	2400      	movs	r4, #0
 8004b56:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8004b58:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8004b5c:	42a2      	cmp	r2, r4
 8004b5e:	d0e5      	beq.n	8004b2c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004b60:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	0023      	movs	r3, r4
 8004b64:	e7e2      	b.n	8004b2c <HAL_DMA_Abort_IT+0x10>

08004b66 <HAL_DMA_IRQHandler>:
{
 8004b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b68:	221c      	movs	r2, #28
 8004b6a:	2704      	movs	r7, #4
 8004b6c:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b6e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b70:	4032      	ands	r2, r6
 8004b72:	003e      	movs	r6, r7
 8004b74:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b76:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004b78:	6803      	ldr	r3, [r0, #0]
 8004b7a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b7c:	4235      	tst	r5, r6
 8004b7e:	d00d      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x36>
 8004b80:	423c      	tst	r4, r7
 8004b82:	d00b      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	0692      	lsls	r2, r2, #26
 8004b88:	d402      	bmi.n	8004b90 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	43ba      	bics	r2, r7
 8004b8e:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004b90:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004b92:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8004b98:	4798      	blx	r3
  return;
 8004b9a:	e017      	b.n	8004bcc <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004b9c:	2702      	movs	r7, #2
 8004b9e:	003e      	movs	r6, r7
 8004ba0:	4096      	lsls	r6, r2
 8004ba2:	4235      	tst	r5, r6
 8004ba4:	d013      	beq.n	8004bce <HAL_DMA_IRQHandler+0x68>
 8004ba6:	423c      	tst	r4, r7
 8004ba8:	d011      	beq.n	8004bce <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	0692      	lsls	r2, r2, #26
 8004bae:	d406      	bmi.n	8004bbe <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bb0:	240a      	movs	r4, #10
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	43a2      	bics	r2, r4
 8004bb6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004bb8:	2201      	movs	r2, #1
 8004bba:	1d83      	adds	r3, r0, #6
 8004bbc:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bc2:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004bc4:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8004bc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d1e5      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x32>
}
 8004bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004bce:	2608      	movs	r6, #8
 8004bd0:	0037      	movs	r7, r6
 8004bd2:	4097      	lsls	r7, r2
 8004bd4:	423d      	tst	r5, r7
 8004bd6:	d0f9      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x66>
 8004bd8:	4234      	tst	r4, r6
 8004bda:	d0f7      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bdc:	250e      	movs	r5, #14
 8004bde:	681c      	ldr	r4, [r3, #0]
 8004be0:	43ac      	bics	r4, r5
 8004be2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004be4:	2301      	movs	r3, #1
 8004be6:	001c      	movs	r4, r3
 8004be8:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8004bea:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bec:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bee:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004bf0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	1d43      	adds	r3, r0, #5
 8004bf6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004bf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bfa:	e7e5      	b.n	8004bc8 <HAL_DMA_IRQHandler+0x62>

08004bfc <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	b570      	push	{r4, r5, r6, lr}
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
  {
    return HAL_ERROR;
 8004c00:	2001      	movs	r0, #1
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d03a      	beq.n	8004c7c <HAL_EXTI_SetConfigLine+0x80>
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d038      	beq.n	8004c7c <HAL_EXTI_SetConfigLine+0x80>

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8004c0a:	221f      	movs	r2, #31
  maskline = (1uL << linepos);
 8004c0c:	0005      	movs	r5, r0
  hexti->Line = pExtiConfig->Line;
 8004c0e:	680c      	ldr	r4, [r1, #0]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8004c10:	4022      	ands	r2, r4
  hexti->Line = pExtiConfig->Line;
 8004c12:	601c      	str	r4, [r3, #0]
  maskline = (1uL << linepos);
 8004c14:	4095      	lsls	r5, r2

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_EXTI_SetConfigLine+0x9c>)
 8004c18:	01a6      	lsls	r6, r4, #6
 8004c1a:	d520      	bpl.n	8004c5e <HAL_EXTI_SetConfigLine+0x62>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8004c1c:	688e      	ldr	r6, [r1, #8]
 8004c1e:	4206      	tst	r6, r0
 8004c20:	d02d      	beq.n	8004c7e <HAL_EXTI_SetConfigLine+0x82>
    {
      EXTI->RTSR |= maskline;
 8004c22:	6898      	ldr	r0, [r3, #8]
 8004c24:	4328      	orrs	r0, r5
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8004c26:	6098      	str	r0, [r3, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8004c28:	07b0      	lsls	r0, r6, #30
 8004c2a:	d52b      	bpl.n	8004c84 <HAL_EXTI_SetConfigLine+0x88>
    {
      EXTI->FTSR |= maskline;
 8004c2c:	68d8      	ldr	r0, [r3, #12]
 8004c2e:	4328      	orrs	r0, r5
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8004c30:	60d8      	str	r0, [r3, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8004c32:	20c0      	movs	r0, #192	; 0xc0
 8004c34:	0026      	movs	r6, r4
 8004c36:	04c0      	lsls	r0, r0, #19
 8004c38:	4006      	ands	r6, r0
 8004c3a:	4286      	cmp	r6, r0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_EXTI_SetConfigLine+0x62>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004c3e:	2603      	movs	r6, #3
 8004c40:	4034      	ands	r4, r6
 8004c42:	00a4      	lsls	r4, r4, #2
 8004c44:	360c      	adds	r6, #12
 8004c46:	40a6      	lsls	r6, r4
 8004c48:	4814      	ldr	r0, [pc, #80]	; (8004c9c <HAL_EXTI_SetConfigLine+0xa0>)
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8004c4a:	0892      	lsrs	r2, r2, #2
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	1812      	adds	r2, r2, r0
 8004c50:	6890      	ldr	r0, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004c52:	43b0      	bics	r0, r6
 8004c54:	0006      	movs	r6, r0
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004c56:	68c8      	ldr	r0, [r1, #12]
 8004c58:	40a0      	lsls	r0, r4
 8004c5a:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8004c5c:	6090      	str	r0, [r2, #8]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8004c5e:	684a      	ldr	r2, [r1, #4]
 8004c60:	07d1      	lsls	r1, r2, #31
 8004c62:	d512      	bpl.n	8004c8a <HAL_EXTI_SetConfigLine+0x8e>
  {
    EXTI->IMR |= maskline;
 8004c64:	6819      	ldr	r1, [r3, #0]
 8004c66:	4329      	orrs	r1, r5
    EXTI->IMR &= ~maskline;
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8004c68:	0010      	movs	r0, r2
    EXTI->IMR &= ~maskline;
 8004c6a:	6019      	str	r1, [r3, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	4008      	ands	r0, r1
 8004c70:	420a      	tst	r2, r1
 8004c72:	d00d      	beq.n	8004c90 <HAL_EXTI_SetConfigLine+0x94>
  else
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
 8004c74:	2000      	movs	r0, #0
    EXTI->EMR |= maskline;
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	4315      	orrs	r5, r2
 8004c7a:	605d      	str	r5, [r3, #4]
}
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
      EXTI->RTSR &= ~maskline;
 8004c7e:	6898      	ldr	r0, [r3, #8]
 8004c80:	43a8      	bics	r0, r5
 8004c82:	e7d0      	b.n	8004c26 <HAL_EXTI_SetConfigLine+0x2a>
      EXTI->FTSR &= ~maskline;
 8004c84:	68d8      	ldr	r0, [r3, #12]
 8004c86:	43a8      	bics	r0, r5
 8004c88:	e7d2      	b.n	8004c30 <HAL_EXTI_SetConfigLine+0x34>
    EXTI->IMR &= ~maskline;
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	43a9      	bics	r1, r5
 8004c8e:	e7eb      	b.n	8004c68 <HAL_EXTI_SetConfigLine+0x6c>
    EXTI->EMR &= ~maskline;
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	43aa      	bics	r2, r5
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	e7f1      	b.n	8004c7c <HAL_EXTI_SetConfigLine+0x80>
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40010000 	.word	0x40010000

08004ca0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8004ca4:	d101      	bne.n	8004caa <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004ca6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004ca8:	4770      	bx	lr
      status = HAL_ERROR;
 8004caa:	2001      	movs	r0, #1
 8004cac:	e7fc      	b.n	8004ca8 <HAL_EXTI_RegisterCallback+0x8>

08004cae <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004cae:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8004cb0:	2001      	movs	r0, #1
  if (hexti == NULL)
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8004cb6:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8004cb8:	6019      	str	r1, [r3, #0]
  }
}
 8004cba:	4770      	bx	lr

08004cbc <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004cbc:	221f      	movs	r2, #31
 8004cbe:	6803      	ldr	r3, [r0, #0]
{
 8004cc0:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_EXTI_IRQHandler+0x20>)
 8004cca:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8004ccc:	420b      	tst	r3, r1
 8004cce:	d004      	beq.n	8004cda <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004cd0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004cd2:	6843      	ldr	r3, [r0, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d000      	beq.n	8004cda <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004cd8:	4798      	blx	r3
    }
  }
}
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	40010400 	.word	0x40010400

08004ce0 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004ce0:	231f      	movs	r3, #31
 8004ce2:	6802      	ldr	r2, [r0, #0]
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	3b1e      	subs	r3, #30
 8004ce8:	4093      	lsls	r3, r2

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004cea:	4a01      	ldr	r2, [pc, #4]	; (8004cf0 <HAL_EXTI_ClearPending+0x10>)
 8004cec:	6153      	str	r3, [r2, #20]
}
 8004cee:	4770      	bx	lr
 8004cf0:	40010400 	.word	0x40010400

08004cf4 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004cf4:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <FLASH_SetErrorCode+0xa4>)
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	6990      	ldr	r0, [r2, #24]
 8004cfa:	0049      	lsls	r1, r1, #1
 8004cfc:	0003      	movs	r3, r0
{
 8004cfe:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004d00:	400b      	ands	r3, r1
 8004d02:	4208      	tst	r0, r1
 8004d04:	d005      	beq.n	8004d12 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d06:	2302      	movs	r3, #2
 8004d08:	4824      	ldr	r0, [pc, #144]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
 8004d0a:	6944      	ldr	r4, [r0, #20]
 8004d0c:	4323      	orrs	r3, r4
 8004d0e:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004d10:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004d12:	2080      	movs	r0, #128	; 0x80
 8004d14:	6991      	ldr	r1, [r2, #24]
 8004d16:	0080      	lsls	r0, r0, #2
 8004d18:	4201      	tst	r1, r0
 8004d1a:	d005      	beq.n	8004d28 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4c1f      	ldr	r4, [pc, #124]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8004d20:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d22:	6965      	ldr	r5, [r4, #20]
 8004d24:	4329      	orrs	r1, r5
 8004d26:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004d28:	2080      	movs	r0, #128	; 0x80
 8004d2a:	6991      	ldr	r1, [r2, #24]
 8004d2c:	00c0      	lsls	r0, r0, #3
 8004d2e:	4201      	tst	r1, r0
 8004d30:	d005      	beq.n	8004d3e <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004d32:	2108      	movs	r1, #8
 8004d34:	4c19      	ldr	r4, [pc, #100]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8004d36:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004d38:	6965      	ldr	r5, [r4, #20]
 8004d3a:	4329      	orrs	r1, r5
 8004d3c:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004d3e:	2080      	movs	r0, #128	; 0x80
 8004d40:	6991      	ldr	r1, [r2, #24]
 8004d42:	0100      	lsls	r0, r0, #4
 8004d44:	4201      	tst	r1, r0
 8004d46:	d005      	beq.n	8004d54 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004d48:	2104      	movs	r1, #4
 8004d4a:	4c14      	ldr	r4, [pc, #80]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8004d4c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004d4e:	6965      	ldr	r5, [r4, #20]
 8004d50:	4329      	orrs	r1, r5
 8004d52:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8004d54:	2080      	movs	r0, #128	; 0x80
 8004d56:	6991      	ldr	r1, [r2, #24]
 8004d58:	0180      	lsls	r0, r0, #6
 8004d5a:	4201      	tst	r1, r0
 8004d5c:	d005      	beq.n	8004d6a <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d5e:	2110      	movs	r1, #16
 8004d60:	4c0e      	ldr	r4, [pc, #56]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 8004d62:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d64:	6965      	ldr	r5, [r4, #20]
 8004d66:	4329      	orrs	r1, r5
 8004d68:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8004d6a:	6991      	ldr	r1, [r2, #24]
 8004d6c:	0389      	lsls	r1, r1, #14
 8004d6e:	d505      	bpl.n	8004d7c <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8004d70:	2020      	movs	r0, #32
 8004d72:	4c0a      	ldr	r4, [pc, #40]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8004d74:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8004d76:	6961      	ldr	r1, [r4, #20]
 8004d78:	4301      	orrs	r1, r0
 8004d7a:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8004d7c:	2080      	movs	r0, #128	; 0x80
 8004d7e:	6991      	ldr	r1, [r2, #24]
 8004d80:	0240      	lsls	r0, r0, #9
 8004d82:	4201      	tst	r1, r0
 8004d84:	d005      	beq.n	8004d92 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8004d86:	2140      	movs	r1, #64	; 0x40
 8004d88:	4c04      	ldr	r4, [pc, #16]	; (8004d9c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8004d8a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8004d8c:	6965      	ldr	r5, [r4, #20]
 8004d8e:	4329      	orrs	r1, r5
 8004d90:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004d92:	6193      	str	r3, [r2, #24]
}  
 8004d94:	bd30      	pop	{r4, r5, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	200005f0 	.word	0x200005f0

08004da0 <FLASH_WaitForLastOperation>:
{
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004da4:	f7fd ffc0 	bl	8002d28 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004da8:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8004daa:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004dac:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <FLASH_WaitForLastOperation+0x70>)
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	4232      	tst	r2, r6
 8004db2:	d121      	bne.n	8004df8 <FLASH_WaitForLastOperation+0x58>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004db4:	2202      	movs	r2, #2
 8004db6:	6999      	ldr	r1, [r3, #24]
 8004db8:	4211      	tst	r1, r2
 8004dba:	d000      	beq.n	8004dbe <FLASH_WaitForLastOperation+0x1e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004dbc:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	05d2      	lsls	r2, r2, #23
 8004dc2:	d415      	bmi.n	8004df0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8004dc4:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8004dc6:	0592      	lsls	r2, r2, #22
 8004dc8:	d412      	bmi.n	8004df0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8004dca:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8004dcc:	0552      	lsls	r2, r2, #21
 8004dce:	d40f      	bmi.n	8004df0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8004dd0:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8004dd2:	0512      	lsls	r2, r2, #20
 8004dd4:	d40c      	bmi.n	8004df0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004dd6:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8004dd8:	0492      	lsls	r2, r2, #18
 8004dda:	d409      	bmi.n	8004df0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	0008      	movs	r0, r1
 8004de2:	0292      	lsls	r2, r2, #10
 8004de4:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004de6:	4211      	tst	r1, r2
 8004de8:	d102      	bne.n	8004df0 <FLASH_WaitForLastOperation+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8004dea:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004dec:	03db      	lsls	r3, r3, #15
 8004dee:	d508      	bpl.n	8004e02 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 8004df0:	f7ff ff80 	bl	8004cf4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004df4:	2001      	movs	r0, #1
 8004df6:	e004      	b.n	8004e02 <FLASH_WaitForLastOperation+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	1c62      	adds	r2, r4, #1
 8004dfa:	d0d8      	beq.n	8004dae <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	d101      	bne.n	8004e04 <FLASH_WaitForLastOperation+0x64>
        return HAL_TIMEOUT;
 8004e00:	2003      	movs	r0, #3
}
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004e04:	f7fd ff90 	bl	8002d28 <HAL_GetTick>
 8004e08:	1b40      	subs	r0, r0, r5
 8004e0a:	42a0      	cmp	r0, r4
 8004e0c:	d9ce      	bls.n	8004dac <FLASH_WaitForLastOperation+0xc>
 8004e0e:	e7f7      	b.n	8004e00 <FLASH_WaitForLastOperation+0x60>
 8004e10:	40022000 	.word	0x40022000

08004e14 <FLASH_OB_ProtectedSectorsConfig>:
  *        @arg @ref OB_WRPSTATE_DISABLE
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef FLASH_OB_ProtectedSectorsConfig(uint32_t Sector, uint32_t NewState)
#endif
{
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t WRP_Data = 0;
  uint32_t OB_WRP = Sector;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e18:	4811      	ldr	r0, [pc, #68]	; (8004e60 <FLASH_OB_ProtectedSectorsConfig+0x4c>)
{
 8004e1a:	000e      	movs	r6, r1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e1c:	f7ff ffc0 	bl	8004da0 <FLASH_WaitForLastOperation>
 
  if(status == HAL_OK)
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d111      	bne.n	8004e48 <FLASH_OB_ProtectedSectorsConfig+0x34>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <FLASH_OB_ProtectedSectorsConfig+0x50>)
 8004e26:	6158      	str	r0, [r3, #20]

    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	d00d      	beq.n	8004e48 <FLASH_OB_ProtectedSectorsConfig+0x34>
    {
      if ((OB_WRP & WRP_MASK_LOW) != 0x00000000U)
 8004e2c:	b2a3      	uxth	r3, r4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <FLASH_OB_ProtectedSectorsConfig+0x34>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
        {
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8004e32:	001c      	movs	r4, r3
 8004e34:	4d0c      	ldr	r5, [pc, #48]	; (8004e68 <FLASH_OB_ProtectedSectorsConfig+0x54>)
        if (NewState != OB_WRPSTATE_DISABLE)
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	d00a      	beq.n	8004e50 <FLASH_OB_ProtectedSectorsConfig+0x3c>
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8004e3a:	68a8      	ldr	r0, [r5, #8]
 8004e3c:	4304      	orrs	r4, r0
 8004e3e:	b2a4      	uxth	r4, r4
          OB->WRP01 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 8004e40:	43e0      	mvns	r0, r4
 8004e42:	0400      	lsls	r0, r0, #16
 8004e44:	4304      	orrs	r4, r0
 8004e46:	60ac      	str	r4, [r5, #8]
      }
    }
#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e48:	4805      	ldr	r0, [pc, #20]	; (8004e60 <FLASH_OB_ProtectedSectorsConfig+0x4c>)
 8004e4a:	f7ff ffa9 	bl	8004da0 <FLASH_WaitForLastOperation>

  /* Return the write protection operation Status */
  return status;      
}
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
          WRP_Data = (uint16_t)(~OB_WRP & (WRP_MASK_LOW & OB->WRP01));
 8004e50:	68ab      	ldr	r3, [r5, #8]
 8004e52:	43a3      	bics	r3, r4
 8004e54:	b29b      	uxth	r3, r3
          OB->WRP01 =  (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 8004e56:	43da      	mvns	r2, r3
 8004e58:	0412      	lsls	r2, r2, #16
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60ab      	str	r3, [r5, #8]
 8004e5e:	e7f3      	b.n	8004e48 <FLASH_OB_ProtectedSectorsConfig+0x34>
 8004e60:	0000c350 	.word	0x0000c350
 8004e64:	200005f0 	.word	0x200005f0
 8004e68:	1ff80000 	.word	0x1ff80000

08004e6c <HAL_FLASHEx_OBProgram>:
{
 8004e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004e6e:	4d3f      	ldr	r5, [pc, #252]	; (8004f6c <HAL_FLASHEx_OBProgram+0x100>)
{
 8004e70:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8004e72:	7c2b      	ldrb	r3, [r5, #16]
 8004e74:	2002      	movs	r0, #2
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d00c      	beq.n	8004e94 <HAL_FLASHEx_OBProgram+0x28>
 8004e7a:	3801      	subs	r0, #1
 8004e7c:	7428      	strb	r0, [r5, #16]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	4203      	tst	r3, r0
 8004e82:	d008      	beq.n	8004e96 <HAL_FLASHEx_OBProgram+0x2a>
    status = FLASH_OB_ProtectedSectorsConfig(pOBInit->WRPSector, pOBInit->WRPState);
 8004e84:	6861      	ldr	r1, [r4, #4]
 8004e86:	68a0      	ldr	r0, [r4, #8]
 8004e88:	f7ff ffc4 	bl	8004e14 <FLASH_OB_ProtectedSectorsConfig>
    if (status != HAL_OK)
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_FLASHEx_OBProgram+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004e90:	2300      	movs	r3, #0
 8004e92:	742b      	strb	r3, [r5, #16]
}
 8004e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	079b      	lsls	r3, r3, #30
 8004e9a:	d518      	bpl.n	8004ece <HAL_FLASHEx_OBProgram+0x62>
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004e9c:	7b23      	ldrb	r3, [r4, #12]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8004e9e:	4f34      	ldr	r7, [pc, #208]	; (8004f70 <HAL_FLASHEx_OBProgram+0x104>)
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ea0:	4834      	ldr	r0, [pc, #208]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004ea2:	9301      	str	r3, [sp, #4]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8004ea4:	683b      	ldr	r3, [r7, #0]
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8004ea6:	683e      	ldr	r6, [r7, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ea8:	f7ff ff7a 	bl	8004da0 <FLASH_WaitForLastOperation>
    if(status == HAL_OK)
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d1ef      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	401e      	ands	r6, r3
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8004eb6:	9b01      	ldr	r3, [sp, #4]
      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004eb8:	6168      	str	r0, [r5, #20]
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8004eba:	431e      	orrs	r6, r3
 8004ebc:	43f3      	mvns	r3, r6
    tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	431e      	orrs	r6, r3
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ec2:	482c      	ldr	r0, [pc, #176]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
      OB->RDP = tmp2;
 8004ec4:	603e      	str	r6, [r7, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ec6:	f7ff ff6b 	bl	8004da0 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1e0      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	075b      	lsls	r3, r3, #29
 8004ed2:	d518      	bpl.n	8004f06 <HAL_FLASHEx_OBProgram+0x9a>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8004ed4:	7ba3      	ldrb	r3, [r4, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004ed6:	4f26      	ldr	r7, [pc, #152]	; (8004f70 <HAL_FLASHEx_OBProgram+0x104>)
  /* Calculate the user option byte to write */ 
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ed8:	4826      	ldr	r0, [pc, #152]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004eda:	687e      	ldr	r6, [r7, #4]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8004edc:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ede:	f7ff ff5f 	bl	8004da0 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d1d4      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <HAL_FLASHEx_OBProgram+0x10c>)
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004ee8:	9a01      	ldr	r2, [sp, #4]
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004eea:	401e      	ands	r6, r3
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004eec:	2370      	movs	r3, #112	; 0x70
 8004eee:	401a      	ands	r2, r3
 8004ef0:	4316      	orrs	r6, r2
 8004ef2:	43f3      	mvns	r3, r6
 8004ef4:	041b      	lsls	r3, r3, #16
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 8004ef6:	431e      	orrs	r6, r3
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ef8:	6168      	str	r0, [r5, #20]

    /* Write the User Option Byte */
    OB->USER = tmp;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004efa:	481e      	ldr	r0, [pc, #120]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
    OB->USER = tmp;
 8004efc:	607e      	str	r6, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004efe:	f7ff ff4f 	bl	8004da0 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d1c4      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	d516      	bpl.n	8004f3a <HAL_FLASHEx_OBProgram+0xce>
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004f0c:	7b63      	ldrb	r3, [r4, #13]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004f0e:	4f18      	ldr	r7, [pc, #96]	; (8004f70 <HAL_FLASHEx_OBProgram+0x104>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f10:	4818      	ldr	r0, [pc, #96]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004f12:	687e      	ldr	r6, [r7, #4]
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004f14:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f16:	f7ff ff43 	bl	8004da0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d1b8      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_FLASHEx_OBProgram+0x110>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f20:	6168      	str	r0, [r5, #20]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004f22:	401e      	ands	r6, r3
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004f24:	9b01      	ldr	r3, [sp, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f26:	4813      	ldr	r0, [pc, #76]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004f28:	431e      	orrs	r6, r3
 8004f2a:	43f3      	mvns	r3, r6
 8004f2c:	041b      	lsls	r3, r3, #16
  tmp |= (OB_BOR | tmp1);
 8004f2e:	431e      	orrs	r6, r3
    OB->USER = tmp;
 8004f30:	607e      	str	r6, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f32:	f7ff ff35 	bl	8004da0 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d1aa      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_BIT1) == OPTIONBYTE_BOOT_BIT1)
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	06db      	lsls	r3, r3, #27
 8004f3e:	d5a7      	bpl.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004f40:	4f0b      	ldr	r7, [pc, #44]	; (8004f70 <HAL_FLASHEx_OBProgram+0x104>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f42:	480c      	ldr	r0, [pc, #48]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
    status = FLASH_OB_BOOTBit1Config(pOBInit->BOOTBit1Config);
 8004f44:	7be4      	ldrb	r4, [r4, #15]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004f46:	687e      	ldr	r6, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f48:	f7ff ff2a 	bl	8004da0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d19f      	bne.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004f50:	0476      	lsls	r6, r6, #17
 8004f52:	0c76      	lsrs	r6, r6, #17
  uint32_t tmp = 0, tmp1 = 0, OB_Bits = ((uint32_t) OB_BootBit1) << 15;
 8004f54:	03e4      	lsls	r4, r4, #15
  tmp = (~(OB_Bits | tmp1)) << 16U;
 8004f56:	4334      	orrs	r4, r6
 8004f58:	43e6      	mvns	r6, r4
 8004f5a:	0436      	lsls	r6, r6, #16
  tmp |= OB_Bits | tmp1;
 8004f5c:	4334      	orrs	r4, r6
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f5e:	6168      	str	r0, [r5, #20]
    OB->USER = tmp; 
 8004f60:	607c      	str	r4, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f62:	4804      	ldr	r0, [pc, #16]	; (8004f74 <HAL_FLASHEx_OBProgram+0x108>)
 8004f64:	f7ff ff1c 	bl	8004da0 <FLASH_WaitForLastOperation>
 8004f68:	e792      	b.n	8004e90 <HAL_FLASHEx_OBProgram+0x24>
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	200005f0 	.word	0x200005f0
 8004f70:	1ff80000 	.word	0x1ff80000
 8004f74:	0000c350 	.word	0x0000c350
 8004f78:	0000ff8f 	.word	0x0000ff8f
 8004f7c:	0000fff0 	.word	0x0000fff0

08004f80 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004f80:	4a57      	ldr	r2, [pc, #348]	; (80050e0 <HAL_GPIO_Init+0x160>)
{
 8004f82:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004f84:	1882      	adds	r2, r0, r2
 8004f86:	1e54      	subs	r4, r2, #1
 8004f88:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8004f8a:	2300      	movs	r3, #0
{
 8004f8c:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004f8e:	3205      	adds	r2, #5
 8004f90:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f92:	680a      	ldr	r2, [r1, #0]
 8004f94:	0014      	movs	r4, r2
 8004f96:	40dc      	lsrs	r4, r3
 8004f98:	d101      	bne.n	8004f9e <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004f9a:	b005      	add	sp, #20
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f9e:	2701      	movs	r7, #1
 8004fa0:	003c      	movs	r4, r7
 8004fa2:	0015      	movs	r5, r2
 8004fa4:	409c      	lsls	r4, r3
 8004fa6:	4025      	ands	r5, r4
 8004fa8:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8004faa:	4222      	tst	r2, r4
 8004fac:	d100      	bne.n	8004fb0 <HAL_GPIO_Init+0x30>
 8004fae:	e095      	b.n	80050dc <HAL_GPIO_Init+0x15c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fb0:	684a      	ldr	r2, [r1, #4]
 8004fb2:	9200      	str	r2, [sp, #0]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	9d00      	ldr	r5, [sp, #0]
 8004fb8:	4395      	bics	r5, r2
 8004fba:	9502      	str	r5, [sp, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fbc:	3a0d      	subs	r2, #13
 8004fbe:	005d      	lsls	r5, r3, #1
 8004fc0:	40aa      	lsls	r2, r5
 8004fc2:	43d2      	mvns	r2, r2
 8004fc4:	4694      	mov	ip, r2
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fc6:	9a02      	ldr	r2, [sp, #8]
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	42ba      	cmp	r2, r7
 8004fcc:	d80f      	bhi.n	8004fee <HAL_GPIO_Init+0x6e>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fce:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR;
 8004fd0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fd2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd4:	68ca      	ldr	r2, [r1, #12]
 8004fd6:	40aa      	lsls	r2, r5
 8004fd8:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8004fda:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8004fdc:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fde:	43a2      	bics	r2, r4
 8004fe0:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fe2:	9a00      	ldr	r2, [sp, #0]
 8004fe4:	0912      	lsrs	r2, r2, #4
 8004fe6:	403a      	ands	r2, r7
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004fec:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fee:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8004ff0:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ff2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff4:	688a      	ldr	r2, [r1, #8]
 8004ff6:	40aa      	lsls	r2, r5
 8004ff8:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8004ffa:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffc:	9a02      	ldr	r2, [sp, #8]
 8004ffe:	2a02      	cmp	r2, #2
 8005000:	d10d      	bne.n	800501e <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005002:	2407      	movs	r4, #7
 8005004:	270f      	movs	r7, #15
 8005006:	401c      	ands	r4, r3
 8005008:	00a4      	lsls	r4, r4, #2
 800500a:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800500c:	08da      	lsrs	r2, r3, #3
 800500e:	0092      	lsls	r2, r2, #2
 8005010:	1882      	adds	r2, r0, r2
 8005012:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005014:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005016:	690f      	ldr	r7, [r1, #16]
 8005018:	40a7      	lsls	r7, r4
 800501a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800501c:	6216      	str	r6, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800501e:	4662      	mov	r2, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005020:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8005022:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005024:	4022      	ands	r2, r4
 8005026:	0014      	movs	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005028:	9a00      	ldr	r2, [sp, #0]
 800502a:	4032      	ands	r2, r6
 800502c:	40aa      	lsls	r2, r5
 800502e:	4314      	orrs	r4, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005030:	9a00      	ldr	r2, [sp, #0]
      GPIOx->MODER = temp;
 8005032:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005034:	00d2      	lsls	r2, r2, #3
 8005036:	d551      	bpl.n	80050dc <HAL_GPIO_Init+0x15c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005038:	2501      	movs	r5, #1
 800503a:	4c2a      	ldr	r4, [pc, #168]	; (80050e4 <HAL_GPIO_Init+0x164>)
 800503c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800503e:	432a      	orrs	r2, r5
 8005040:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8005042:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_GPIO_Init+0x168>)
 8005044:	089c      	lsrs	r4, r3, #2
 8005046:	00a4      	lsls	r4, r4, #2
 8005048:	18a4      	adds	r4, r4, r2
 800504a:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800504c:	001d      	movs	r5, r3
        temp = SYSCFG->EXTICR[position >> 2U];
 800504e:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005050:	220f      	movs	r2, #15
 8005052:	4035      	ands	r5, r6
 8005054:	00ad      	lsls	r5, r5, #2
 8005056:	40aa      	lsls	r2, r5
 8005058:	4667      	mov	r7, ip
 800505a:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800505c:	22a0      	movs	r2, #160	; 0xa0
 800505e:	05d2      	lsls	r2, r2, #23
 8005060:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005062:	9702      	str	r7, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005064:	2200      	movs	r2, #0
 8005066:	4560      	cmp	r0, ip
 8005068:	d00d      	beq.n	8005086 <HAL_GPIO_Init+0x106>
 800506a:	4a20      	ldr	r2, [pc, #128]	; (80050ec <HAL_GPIO_Init+0x16c>)
 800506c:	4694      	mov	ip, r2
 800506e:	2201      	movs	r2, #1
 8005070:	4560      	cmp	r0, ip
 8005072:	d008      	beq.n	8005086 <HAL_GPIO_Init+0x106>
 8005074:	4f1e      	ldr	r7, [pc, #120]	; (80050f0 <HAL_GPIO_Init+0x170>)
 8005076:	1892      	adds	r2, r2, r2
 8005078:	42b8      	cmp	r0, r7
 800507a:	d004      	beq.n	8005086 <HAL_GPIO_Init+0x106>
 800507c:	4f1d      	ldr	r7, [pc, #116]	; (80050f4 <HAL_GPIO_Init+0x174>)
 800507e:	0032      	movs	r2, r6
 8005080:	42b8      	cmp	r0, r7
 8005082:	d000      	beq.n	8005086 <HAL_GPIO_Init+0x106>
 8005084:	9a03      	ldr	r2, [sp, #12]
 8005086:	40aa      	lsls	r2, r5
 8005088:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800508a:	9f00      	ldr	r7, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800508c:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800508e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 8005092:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8005094:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8005096:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8005098:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800509a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800509c:	03ff      	lsls	r7, r7, #15
 800509e:	d401      	bmi.n	80050a4 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 80050a0:	0035      	movs	r5, r6
 80050a2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80050a4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80050a6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80050a8:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050aa:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80050ac:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ae:	03bf      	lsls	r7, r7, #14
 80050b0:	d401      	bmi.n	80050b6 <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 80050b2:	0035      	movs	r5, r6
 80050b4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80050b6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80050b8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80050ba:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050bc:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80050be:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050c0:	02ff      	lsls	r7, r7, #11
 80050c2:	d401      	bmi.n	80050c8 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 80050c4:	0035      	movs	r5, r6
 80050c6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80050c8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80050ca:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80050cc:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050ce:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80050d0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050d2:	02bf      	lsls	r7, r7, #10
 80050d4:	d401      	bmi.n	80050da <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 80050d6:	4025      	ands	r5, r4
 80050d8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80050da:	60d6      	str	r6, [r2, #12]
    position++;
 80050dc:	3301      	adds	r3, #1
 80050de:	e758      	b.n	8004f92 <HAL_GPIO_Init+0x12>
 80050e0:	afffe400 	.word	0xafffe400
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40010000 	.word	0x40010000
 80050ec:	50000400 	.word	0x50000400
 80050f0:	50000800 	.word	0x50000800
 80050f4:	50000c00 	.word	0x50000c00
 80050f8:	40010400 	.word	0x40010400

080050fc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80050fe:	4a36      	ldr	r2, [pc, #216]	; (80051d8 <HAL_GPIO_DeInit+0xdc>)
{
 8005100:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005102:	1882      	adds	r2, r0, r2
{
 8005104:	9101      	str	r1, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005106:	1e51      	subs	r1, r2, #1
 8005108:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 800510a:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800510c:	3205      	adds	r2, #5
 800510e:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 8005110:	9a01      	ldr	r2, [sp, #4]
 8005112:	40da      	lsrs	r2, r3
 8005114:	d101      	bne.n	800511a <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8005116:	b005      	add	sp, #20
 8005118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800511a:	2701      	movs	r7, #1
 800511c:	003a      	movs	r2, r7
 800511e:	409a      	lsls	r2, r3
 8005120:	9c01      	ldr	r4, [sp, #4]
 8005122:	9200      	str	r2, [sp, #0]
 8005124:	4014      	ands	r4, r2
    if (iocurrent)
 8005126:	9900      	ldr	r1, [sp, #0]
 8005128:	9a01      	ldr	r2, [sp, #4]
 800512a:	420a      	tst	r2, r1
 800512c:	d051      	beq.n	80051d2 <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800512e:	492b      	ldr	r1, [pc, #172]	; (80051dc <HAL_GPIO_DeInit+0xe0>)
 8005130:	089a      	lsrs	r2, r3, #2
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	1852      	adds	r2, r2, r1
 8005136:	6891      	ldr	r1, [r2, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8005138:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800513a:	000e      	movs	r6, r1
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800513c:	2103      	movs	r1, #3
 800513e:	400d      	ands	r5, r1
 8005140:	00ad      	lsls	r5, r5, #2
 8005142:	310c      	adds	r1, #12
 8005144:	40a9      	lsls	r1, r5
 8005146:	9102      	str	r1, [sp, #8]
 8005148:	4031      	ands	r1, r6
 800514a:	000e      	movs	r6, r1
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800514c:	21a0      	movs	r1, #160	; 0xa0
 800514e:	05c9      	lsls	r1, r1, #23
 8005150:	468c      	mov	ip, r1
 8005152:	2100      	movs	r1, #0
 8005154:	4560      	cmp	r0, ip
 8005156:	d00d      	beq.n	8005174 <HAL_GPIO_DeInit+0x78>
 8005158:	4921      	ldr	r1, [pc, #132]	; (80051e0 <HAL_GPIO_DeInit+0xe4>)
 800515a:	468c      	mov	ip, r1
 800515c:	0039      	movs	r1, r7
 800515e:	4560      	cmp	r0, ip
 8005160:	d008      	beq.n	8005174 <HAL_GPIO_DeInit+0x78>
 8005162:	4f20      	ldr	r7, [pc, #128]	; (80051e4 <HAL_GPIO_DeInit+0xe8>)
 8005164:	1849      	adds	r1, r1, r1
 8005166:	42b8      	cmp	r0, r7
 8005168:	d004      	beq.n	8005174 <HAL_GPIO_DeInit+0x78>
 800516a:	4f1f      	ldr	r7, [pc, #124]	; (80051e8 <HAL_GPIO_DeInit+0xec>)
 800516c:	3101      	adds	r1, #1
 800516e:	42b8      	cmp	r0, r7
 8005170:	d000      	beq.n	8005174 <HAL_GPIO_DeInit+0x78>
 8005172:	9903      	ldr	r1, [sp, #12]
 8005174:	40a9      	lsls	r1, r5
 8005176:	42b1      	cmp	r1, r6
 8005178:	d110      	bne.n	800519c <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800517a:	491c      	ldr	r1, [pc, #112]	; (80051ec <HAL_GPIO_DeInit+0xf0>)
 800517c:	680d      	ldr	r5, [r1, #0]
 800517e:	43a5      	bics	r5, r4
 8005180:	600d      	str	r5, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005182:	684d      	ldr	r5, [r1, #4]
 8005184:	43a5      	bics	r5, r4
 8005186:	604d      	str	r5, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005188:	688d      	ldr	r5, [r1, #8]
 800518a:	43a5      	bics	r5, r4
 800518c:	608d      	str	r5, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800518e:	68cd      	ldr	r5, [r1, #12]
 8005190:	43a5      	bics	r5, r4
 8005192:	60cd      	str	r5, [r1, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005194:	6891      	ldr	r1, [r2, #8]
 8005196:	9c02      	ldr	r4, [sp, #8]
 8005198:	43a1      	bics	r1, r4
 800519a:	6091      	str	r1, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800519c:	2103      	movs	r1, #3
 800519e:	005c      	lsls	r4, r3, #1
 80051a0:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80051a2:	2407      	movs	r4, #7
 80051a4:	260f      	movs	r6, #15
 80051a6:	401c      	ands	r4, r3
 80051a8:	00a4      	lsls	r4, r4, #2
 80051aa:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051ac:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80051ae:	9c00      	ldr	r4, [sp, #0]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80051b0:	430a      	orrs	r2, r1
 80051b2:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80051b4:	08da      	lsrs	r2, r3, #3
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	1882      	adds	r2, r0, r2
 80051ba:	6a15      	ldr	r5, [r2, #32]
 80051bc:	43b5      	bics	r5, r6
 80051be:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051c0:	68c2      	ldr	r2, [r0, #12]
 80051c2:	438a      	bics	r2, r1
 80051c4:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80051c6:	6842      	ldr	r2, [r0, #4]
 80051c8:	43a2      	bics	r2, r4
 80051ca:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80051cc:	6882      	ldr	r2, [r0, #8]
 80051ce:	438a      	bics	r2, r1
 80051d0:	6082      	str	r2, [r0, #8]
    position++;
 80051d2:	3301      	adds	r3, #1
 80051d4:	e79c      	b.n	8005110 <HAL_GPIO_DeInit+0x14>
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	afffe400 	.word	0xafffe400
 80051dc:	40010000 	.word	0x40010000
 80051e0:	50000400 	.word	0x50000400
 80051e4:	50000800 	.word	0x50000800
 80051e8:	50000c00 	.word	0x50000c00
 80051ec:	40010400 	.word	0x40010400

080051f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051f0:	6900      	ldr	r0, [r0, #16]
 80051f2:	4008      	ands	r0, r1
 80051f4:	1e43      	subs	r3, r0, #1
 80051f6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80051f8:	b2c0      	uxtb	r0, r0
}
 80051fa:	4770      	bx	lr

080051fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	d001      	beq.n	8005204 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005200:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005202:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8005204:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005206:	e7fc      	b.n	8005202 <HAL_GPIO_WritePin+0x6>

08005208 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005208:	6803      	ldr	r3, [r0, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	0792      	lsls	r2, r2, #30
 800520e:	d501      	bpl.n	8005214 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005210:	2200      	movs	r2, #0
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005214:	2201      	movs	r2, #1
 8005216:	6999      	ldr	r1, [r3, #24]
 8005218:	4211      	tst	r1, r2
 800521a:	d102      	bne.n	8005222 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	430a      	orrs	r2, r1
 8005220:	619a      	str	r2, [r3, #24]
  }
}
 8005222:	4770      	bx	lr

08005224 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005224:	b530      	push	{r4, r5, lr}
 8005226:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005228:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800522a:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800522c:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800522e:	0589      	lsls	r1, r1, #22
 8005230:	431a      	orrs	r2, r3
 8005232:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <I2C_TransferConfig+0x28>)
 8005236:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005238:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800523a:	0d64      	lsrs	r4, r4, #21
 800523c:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523e:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005240:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005242:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005244:	432a      	orrs	r2, r5
 8005246:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005248:	bd30      	pop	{r4, r5, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	03ff63ff 	.word	0x03ff63ff

08005250 <I2C_IsErrorOccurred>:
{
 8005250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005252:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005254:	6802      	ldr	r2, [r0, #0]
{
 8005256:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8005258:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800525a:	2310      	movs	r3, #16
 800525c:	000f      	movs	r7, r1
{
 800525e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005260:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005264:	4219      	tst	r1, r3
 8005266:	d00e      	beq.n	8005286 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005268:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 800526c:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	423a      	tst	r2, r7
 8005276:	d164      	bne.n	8005342 <I2C_IsErrorOccurred+0xf2>
 8005278:	9a01      	ldr	r2, [sp, #4]
 800527a:	2a00      	cmp	r2, #0
 800527c:	d032      	beq.n	80052e4 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 800527e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8005280:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005286:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8005288:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800528a:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 800528c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800528e:	420a      	tst	r2, r1
 8005290:	d002      	beq.n	8005298 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8005292:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005294:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8005296:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	00c9      	lsls	r1, r1, #3
 800529c:	420a      	tst	r2, r1
 800529e:	d003      	beq.n	80052a8 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80052a0:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052a2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80052a4:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80052a6:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052a8:	2180      	movs	r1, #128	; 0x80
 80052aa:	0089      	lsls	r1, r1, #2
 80052ac:	420a      	tst	r2, r1
 80052ae:	d04d      	beq.n	800534c <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80052b0:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052b2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80052b4:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80052b6:	0020      	movs	r0, r4
 80052b8:	f7ff ffa6 	bl	8005208 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80052bc:	6822      	ldr	r2, [r4, #0]
 80052be:	4925      	ldr	r1, [pc, #148]	; (8005354 <I2C_IsErrorOccurred+0x104>)
 80052c0:	6853      	ldr	r3, [r2, #4]
 80052c2:	400b      	ands	r3, r1
 80052c4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	0023      	movs	r3, r4
 80052c8:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80052ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 80052ce:	4307      	orrs	r7, r0
 80052d0:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d4:	0022      	movs	r2, r4
 80052d6:	2300      	movs	r3, #0
 80052d8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80052da:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052dc:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80052de:	2001      	movs	r0, #1
 80052e0:	7023      	strb	r3, [r4, #0]
 80052e2:	e035      	b.n	8005350 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 80052e4:	1c72      	adds	r2, r6, #1
 80052e6:	d0c4      	beq.n	8005272 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fd fd1e 	bl	8002d28 <HAL_GetTick>
 80052ec:	1b40      	subs	r0, r0, r5
 80052ee:	42b0      	cmp	r0, r6
 80052f0:	d801      	bhi.n	80052f6 <I2C_IsErrorOccurred+0xa6>
 80052f2:	2e00      	cmp	r6, #0
 80052f4:	d1bc      	bne.n	8005270 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80052f6:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052f8:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80052fa:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052fc:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80052fe:	7811      	ldrb	r1, [r2, #0]
 8005300:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005302:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8005304:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	0209      	lsls	r1, r1, #8
 800530a:	420a      	tst	r2, r1
 800530c:	d00c      	beq.n	8005328 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005312:	4210      	tst	r0, r2
 8005314:	d108      	bne.n	8005328 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8005316:	4661      	mov	r1, ip
 8005318:	2920      	cmp	r1, #32
 800531a:	d005      	beq.n	8005328 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005322:	f7fd fd01 	bl	8002d28 <HAL_GetTick>
 8005326:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	423b      	tst	r3, r7
 800532e:	d19f      	bne.n	8005270 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005330:	f7fd fcfa 	bl	8002d28 <HAL_GetTick>
 8005334:	1b40      	subs	r0, r0, r5
 8005336:	2819      	cmp	r0, #25
 8005338:	d9f6      	bls.n	8005328 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800533c:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	e796      	b.n	8005270 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8005342:	9a01      	ldr	r2, [sp, #4]
 8005344:	2a00      	cmp	r2, #0
 8005346:	d19a      	bne.n	800527e <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005348:	61df      	str	r7, [r3, #28]
 800534a:	e798      	b.n	800527e <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 800534c:	2800      	cmp	r0, #0
 800534e:	d1b2      	bne.n	80052b6 <I2C_IsErrorOccurred+0x66>
}
 8005350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	fe00e800 	.word	0xfe00e800

08005358 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	0004      	movs	r4, r0
 800535c:	000d      	movs	r5, r1
 800535e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005360:	2702      	movs	r7, #2
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	423b      	tst	r3, r7
 8005368:	d001      	beq.n	800536e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800536a:	2000      	movs	r0, #0
}
 800536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	0032      	movs	r2, r6
 8005370:	0029      	movs	r1, r5
 8005372:	0020      	movs	r0, r4
 8005374:	f7ff ff6c 	bl	8005250 <I2C_IsErrorOccurred>
 8005378:	2800      	cmp	r0, #0
 800537a:	d118      	bne.n	80053ae <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800537c:	1c6b      	adds	r3, r5, #1
 800537e:	d0f0      	beq.n	8005362 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fd fcd2 	bl	8002d28 <HAL_GetTick>
 8005384:	1b80      	subs	r0, r0, r6
 8005386:	42a8      	cmp	r0, r5
 8005388:	d801      	bhi.n	800538e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800538a:	2d00      	cmp	r5, #0
 800538c:	d1e9      	bne.n	8005362 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	001a      	movs	r2, r3
 8005394:	403a      	ands	r2, r7
 8005396:	423b      	tst	r3, r7
 8005398:	d1e3      	bne.n	8005362 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800539a:	2120      	movs	r1, #32
 800539c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800539e:	430b      	orrs	r3, r1
 80053a0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80053a4:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	3341      	adds	r3, #65	; 0x41
 80053a8:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80053ac:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80053ae:	2001      	movs	r0, #1
 80053b0:	e7dc      	b.n	800536c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080053b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80053b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b4:	0004      	movs	r4, r0
 80053b6:	000d      	movs	r5, r1
 80053b8:	0017      	movs	r7, r2
 80053ba:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	6993      	ldr	r3, [r2, #24]
 80053c0:	402b      	ands	r3, r5
 80053c2:	1b5b      	subs	r3, r3, r5
 80053c4:	4259      	negs	r1, r3
 80053c6:	414b      	adcs	r3, r1
 80053c8:	42bb      	cmp	r3, r7
 80053ca:	d001      	beq.n	80053d0 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80053cc:	2000      	movs	r0, #0
 80053ce:	e01f      	b.n	8005410 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	1c73      	adds	r3, r6, #1
 80053d2:	d0f4      	beq.n	80053be <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d4:	f7fd fca8 	bl	8002d28 <HAL_GetTick>
 80053d8:	9b06      	ldr	r3, [sp, #24]
 80053da:	1ac0      	subs	r0, r0, r3
 80053dc:	42b0      	cmp	r0, r6
 80053de:	d801      	bhi.n	80053e4 <I2C_WaitOnFlagUntilTimeout+0x32>
 80053e0:	2e00      	cmp	r6, #0
 80053e2:	d1eb      	bne.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	402b      	ands	r3, r5
 80053ea:	1b5b      	subs	r3, r3, r5
 80053ec:	425a      	negs	r2, r3
 80053ee:	4153      	adcs	r3, r2
 80053f0:	42bb      	cmp	r3, r7
 80053f2:	d1e3      	bne.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	2220      	movs	r2, #32
 80053f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80053f8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	4313      	orrs	r3, r2
 80053fc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	0023      	movs	r3, r4
 8005400:	3341      	adds	r3, #65	; 0x41
 8005402:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	0022      	movs	r2, r4
 8005406:	2300      	movs	r3, #0
 8005408:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800540a:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800540e:	7023      	strb	r3, [r4, #0]
}
 8005410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005412 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005414:	0004      	movs	r4, r0
 8005416:	000e      	movs	r6, r1
 8005418:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800541a:	2520      	movs	r5, #32
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	422b      	tst	r3, r5
 8005422:	d001      	beq.n	8005428 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8005424:	2000      	movs	r0, #0
}
 8005426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005428:	003a      	movs	r2, r7
 800542a:	0031      	movs	r1, r6
 800542c:	0020      	movs	r0, r4
 800542e:	f7ff ff0f 	bl	8005250 <I2C_IsErrorOccurred>
 8005432:	2800      	cmp	r0, #0
 8005434:	d115      	bne.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fd fc77 	bl	8002d28 <HAL_GetTick>
 800543a:	1bc0      	subs	r0, r0, r7
 800543c:	42b0      	cmp	r0, r6
 800543e:	d801      	bhi.n	8005444 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8005440:	2e00      	cmp	r6, #0
 8005442:	d1eb      	bne.n	800541c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	001a      	movs	r2, r3
 800544a:	402a      	ands	r2, r5
 800544c:	422b      	tst	r3, r5
 800544e:	d1e5      	bne.n	800541c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005452:	432b      	orrs	r3, r5
 8005454:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005456:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8005458:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800545a:	3341      	adds	r3, #65	; 0x41
 800545c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8005460:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8005462:	2001      	movs	r0, #1
 8005464:	e7df      	b.n	8005426 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08005468 <HAL_I2C_Init>:
{
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800546c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800546e:	2c00      	cmp	r4, #0
 8005470:	d03f      	beq.n	80054f2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005472:	0025      	movs	r5, r4
 8005474:	3541      	adds	r5, #65	; 0x41
 8005476:	782b      	ldrb	r3, [r5, #0]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d105      	bne.n	800548a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800547e:	0023      	movs	r3, r4
 8005480:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005482:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8005484:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8005486:	f7fd fae1 	bl	8002a4c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800548a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800548c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800548e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8005490:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005492:	481d      	ldr	r0, [pc, #116]	; (8005508 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8005494:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005496:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8005498:	438a      	bics	r2, r1
 800549a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	4a1b      	ldr	r2, [pc, #108]	; (800550c <HAL_I2C_Init+0xa4>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	4002      	ands	r2, r0
 80054a8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054aa:	68e2      	ldr	r2, [r4, #12]
 80054ac:	2a01      	cmp	r2, #1
 80054ae:	d121      	bne.n	80054f4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0209      	lsls	r1, r1, #8
 80054b4:	4331      	orrs	r1, r6
 80054b6:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	4915      	ldr	r1, [pc, #84]	; (8005510 <HAL_I2C_Init+0xa8>)
 80054bc:	4311      	orrs	r1, r2
 80054be:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054c0:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054c4:	4002      	ands	r2, r0
 80054c6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054c8:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ca:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054cc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ce:	69a1      	ldr	r1, [r4, #24]
 80054d0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054d2:	430a      	orrs	r2, r1
 80054d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054d6:	6a21      	ldr	r1, [r4, #32]
 80054d8:	69e2      	ldr	r2, [r4, #28]
 80054da:	430a      	orrs	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80054de:	2201      	movs	r2, #1
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ee:	3442      	adds	r4, #66	; 0x42
 80054f0:	7020      	strb	r0, [r4, #0]
}
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054f4:	2184      	movs	r1, #132	; 0x84
 80054f6:	0209      	lsls	r1, r1, #8
 80054f8:	4331      	orrs	r1, r6
 80054fa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054fc:	2a02      	cmp	r2, #2
 80054fe:	d1db      	bne.n	80054b8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005500:	2280      	movs	r2, #128	; 0x80
 8005502:	0112      	lsls	r2, r2, #4
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	e7d7      	b.n	80054b8 <HAL_I2C_Init+0x50>
 8005508:	ffff7fff 	.word	0xffff7fff
 800550c:	f0ffffff 	.word	0xf0ffffff
 8005510:	02008000 	.word	0x02008000

08005514 <HAL_I2C_Mem_Write>:
{
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	9304      	str	r3, [sp, #16]
 800551a:	ab0e      	add	r3, sp, #56	; 0x38
 800551c:	9203      	str	r2, [sp, #12]
 800551e:	cb04      	ldmia	r3!, {r2}
 8005520:	0004      	movs	r4, r0
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	9205      	str	r2, [sp, #20]
 8005526:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005528:	0003      	movs	r3, r0
 800552a:	3341      	adds	r3, #65	; 0x41
 800552c:	9307      	str	r3, [sp, #28]
 800552e:	781b      	ldrb	r3, [r3, #0]
{
 8005530:	000f      	movs	r7, r1
    return HAL_BUSY;
 8005532:	2002      	movs	r0, #2
{
 8005534:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005536:	2b20      	cmp	r3, #32
 8005538:	d108      	bne.n	800554c <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 800553a:	2a00      	cmp	r2, #0
 800553c:	d002      	beq.n	8005544 <HAL_I2C_Mem_Write+0x30>
 800553e:	9b06      	ldr	r3, [sp, #24]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800554a:	2001      	movs	r0, #1
}
 800554c:	b009      	add	sp, #36	; 0x24
 800554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8005550:	0023      	movs	r3, r4
 8005552:	3340      	adds	r3, #64	; 0x40
 8005554:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8005556:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8005558:	2a01      	cmp	r2, #1
 800555a:	d0f7      	beq.n	800554c <HAL_I2C_Mem_Write+0x38>
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005560:	f7fd fbe2 	bl	8002d28 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005564:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8005566:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005568:	9000      	str	r0, [sp, #0]
 800556a:	2319      	movs	r3, #25
 800556c:	2201      	movs	r2, #1
 800556e:	0020      	movs	r0, r4
 8005570:	0209      	lsls	r1, r1, #8
 8005572:	f7ff ff1e 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 8005576:	2800      	cmp	r0, #0
 8005578:	d1e7      	bne.n	800554a <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800557a:	2321      	movs	r3, #33	; 0x21
 800557c:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800557e:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005580:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005582:	0023      	movs	r3, r4
 8005584:	3342      	adds	r3, #66	; 0x42
 8005586:	9307      	str	r3, [sp, #28]
 8005588:	2340      	movs	r3, #64	; 0x40
 800558a:	9a07      	ldr	r2, [sp, #28]
 800558c:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800558e:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005592:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005594:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8005596:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005598:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800559a:	466b      	mov	r3, sp
 800559c:	7c1a      	ldrb	r2, [r3, #16]
 800559e:	4b4a      	ldr	r3, [pc, #296]	; (80056c8 <HAL_I2C_Mem_Write+0x1b4>)
 80055a0:	0020      	movs	r0, r4
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	045b      	lsls	r3, r3, #17
 80055a8:	f7ff fe3c 	bl	8005224 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ac:	002a      	movs	r2, r5
 80055ae:	0031      	movs	r1, r6
 80055b0:	0020      	movs	r0, r4
 80055b2:	f7ff fed1 	bl	8005358 <I2C_WaitOnTXISFlagUntilTimeout>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d126      	bne.n	8005608 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ba:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055bc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055be:	2a01      	cmp	r2, #1
 80055c0:	d116      	bne.n	80055f0 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055c2:	466a      	mov	r2, sp
 80055c4:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055c6:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055ca:	0020      	movs	r0, r4
 80055cc:	0033      	movs	r3, r6
 80055ce:	2200      	movs	r2, #0
 80055d0:	9500      	str	r5, [sp, #0]
 80055d2:	f7ff feee 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d116      	bne.n	8005608 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055dc:	2bff      	cmp	r3, #255	; 0xff
 80055de:	d817      	bhi.n	8005610 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055e0:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 80055e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055e4:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80055e6:	b292      	uxth	r2, r2
 80055e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	9000      	str	r0, [sp, #0]
 80055ee:	e014      	b.n	800561a <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055f0:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055f4:	0a12      	lsrs	r2, r2, #8
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f8:	0020      	movs	r0, r4
 80055fa:	002a      	movs	r2, r5
 80055fc:	f7ff feac 	bl	8005358 <I2C_WaitOnTXISFlagUntilTimeout>
 8005600:	2800      	cmp	r0, #0
 8005602:	d101      	bne.n	8005608 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	e7dc      	b.n	80055c2 <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8005608:	2300      	movs	r3, #0
 800560a:	3440      	adds	r4, #64	; 0x40
 800560c:	7023      	strb	r3, [r4, #0]
 800560e:	e79c      	b.n	800554a <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005610:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005612:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005614:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005616:	045b      	lsls	r3, r3, #17
 8005618:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800561a:	0039      	movs	r1, r7
 800561c:	0020      	movs	r0, r4
 800561e:	f7ff fe01 	bl	8005224 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005622:	002a      	movs	r2, r5
 8005624:	0031      	movs	r1, r6
 8005626:	0020      	movs	r0, r4
 8005628:	f7ff fe96 	bl	8005358 <I2C_WaitOnTXISFlagUntilTimeout>
 800562c:	2800      	cmp	r0, #0
 800562e:	d000      	beq.n	8005632 <HAL_I2C_Mem_Write+0x11e>
 8005630:	e78b      	b.n	800554a <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8005638:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800563a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800563c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800563e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005640:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005642:	3b01      	subs	r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005648:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800564a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800564c:	b292      	uxth	r2, r2
 800564e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <HAL_I2C_Mem_Write+0x170>
 8005654:	2a00      	cmp	r2, #0
 8005656:	d115      	bne.n	8005684 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005658:	0033      	movs	r3, r6
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	0020      	movs	r0, r4
 800565e:	9500      	str	r5, [sp, #0]
 8005660:	f7ff fea7 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 8005664:	2800      	cmp	r0, #0
 8005666:	d000      	beq.n	800566a <HAL_I2C_Mem_Write+0x156>
 8005668:	e76f      	b.n	800554a <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800566a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800566c:	2bff      	cmp	r3, #255	; 0xff
 800566e:	d923      	bls.n	80056b8 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005670:	23ff      	movs	r3, #255	; 0xff
 8005672:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	22ff      	movs	r2, #255	; 0xff
 8005678:	9000      	str	r0, [sp, #0]
 800567a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800567c:	0039      	movs	r1, r7
 800567e:	0020      	movs	r0, r4
 8005680:	f7ff fdd0 	bl	8005224 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005684:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1cb      	bne.n	8005622 <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800568a:	002a      	movs	r2, r5
 800568c:	0031      	movs	r1, r6
 800568e:	0020      	movs	r0, r4
 8005690:	f7ff febf 	bl	8005412 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005694:	2800      	cmp	r0, #0
 8005696:	d000      	beq.n	800569a <HAL_I2C_Mem_Write+0x186>
 8005698:	e757      	b.n	800554a <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800569a:	2120      	movs	r1, #32
 800569c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800569e:	4d0b      	ldr	r5, [pc, #44]	; (80056cc <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	402a      	ands	r2, r5
 80056a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80056a8:	0023      	movs	r3, r4
 80056aa:	3341      	adds	r3, #65	; 0x41
 80056ac:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056ae:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80056b0:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056b2:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80056b4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80056b6:	e749      	b.n	800554c <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056b8:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80056ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056bc:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80056be:	b292      	uxth	r2, r2
 80056c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	9000      	str	r0, [sp, #0]
 80056c6:	e7d9      	b.n	800567c <HAL_I2C_Mem_Write+0x168>
 80056c8:	80002000 	.word	0x80002000
 80056cc:	fe00e800 	.word	0xfe00e800

080056d0 <HAL_I2C_Mem_Read>:
{
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	b089      	sub	sp, #36	; 0x24
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	ab0e      	add	r3, sp, #56	; 0x38
 80056d8:	9203      	str	r2, [sp, #12]
 80056da:	cb04      	ldmia	r3!, {r2}
 80056dc:	0004      	movs	r4, r0
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	9205      	str	r2, [sp, #20]
 80056e2:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e4:	0003      	movs	r3, r0
 80056e6:	3341      	adds	r3, #65	; 0x41
 80056e8:	9307      	str	r3, [sp, #28]
 80056ea:	781b      	ldrb	r3, [r3, #0]
{
 80056ec:	000f      	movs	r7, r1
    return HAL_BUSY;
 80056ee:	2002      	movs	r0, #2
{
 80056f0:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d108      	bne.n	8005708 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	d002      	beq.n	8005700 <HAL_I2C_Mem_Read+0x30>
 80056fa:	9b06      	ldr	r3, [sp, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005706:	2001      	movs	r0, #1
}
 8005708:	b009      	add	sp, #36	; 0x24
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800570c:	0023      	movs	r3, r4
 800570e:	3340      	adds	r3, #64	; 0x40
 8005710:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8005712:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8005714:	2a01      	cmp	r2, #1
 8005716:	d0f7      	beq.n	8005708 <HAL_I2C_Mem_Read+0x38>
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800571c:	f7fd fb04 	bl	8002d28 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	2319      	movs	r3, #25
 8005724:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005726:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005728:	2201      	movs	r2, #1
 800572a:	0020      	movs	r0, r4
 800572c:	0209      	lsls	r1, r1, #8
 800572e:	f7ff fe40 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d1e7      	bne.n	8005706 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005736:	2222      	movs	r2, #34	; 0x22
 8005738:	9907      	ldr	r1, [sp, #28]
 800573a:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800573c:	0022      	movs	r2, r4
 800573e:	3242      	adds	r2, #66	; 0x42
 8005740:	9207      	str	r2, [sp, #28]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	9907      	ldr	r1, [sp, #28]
 8005746:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8005748:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800574a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800574c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800574e:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005750:	494d      	ldr	r1, [pc, #308]	; (8005888 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8005752:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005754:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8005756:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005758:	7c12      	ldrb	r2, [r2, #16]
 800575a:	0020      	movs	r0, r4
 800575c:	9100      	str	r1, [sp, #0]
 800575e:	0039      	movs	r1, r7
 8005760:	f7ff fd60 	bl	8005224 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005764:	002a      	movs	r2, r5
 8005766:	0031      	movs	r1, r6
 8005768:	0020      	movs	r0, r4
 800576a:	f7ff fdf5 	bl	8005358 <I2C_WaitOnTXISFlagUntilTimeout>
 800576e:	2800      	cmp	r0, #0
 8005770:	d127      	bne.n	80057c2 <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005772:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005776:	2a01      	cmp	r2, #1
 8005778:	d117      	bne.n	80057aa <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800577a:	466a      	mov	r2, sp
 800577c:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800577e:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005782:	0020      	movs	r0, r4
 8005784:	0033      	movs	r3, r6
 8005786:	2200      	movs	r2, #0
 8005788:	9500      	str	r5, [sp, #0]
 800578a:	f7ff fe12 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 800578e:	2800      	cmp	r0, #0
 8005790:	d117      	bne.n	80057c2 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005794:	4b3d      	ldr	r3, [pc, #244]	; (800588c <HAL_I2C_Mem_Read+0x1bc>)
 8005796:	2aff      	cmp	r2, #255	; 0xff
 8005798:	d817      	bhi.n	80057ca <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 800579a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800579c:	b292      	uxth	r2, r2
 800579e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	049b      	lsls	r3, r3, #18
 80057a8:	e014      	b.n	80057d4 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057aa:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ac:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057ae:	0a12      	lsrs	r2, r2, #8
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b2:	0020      	movs	r0, r4
 80057b4:	002a      	movs	r2, r5
 80057b6:	f7ff fdcf 	bl	8005358 <I2C_WaitOnTXISFlagUntilTimeout>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	e7db      	b.n	800577a <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	3440      	adds	r4, #64	; 0x40
 80057c6:	7023      	strb	r3, [r4, #0]
 80057c8:	e79d      	b.n	8005706 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057ca:	22ff      	movs	r2, #255	; 0xff
 80057cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057d4:	0039      	movs	r1, r7
 80057d6:	0020      	movs	r0, r4
 80057d8:	f7ff fd24 	bl	8005224 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057dc:	0033      	movs	r3, r6
 80057de:	2200      	movs	r2, #0
 80057e0:	2104      	movs	r1, #4
 80057e2:	0020      	movs	r0, r4
 80057e4:	9500      	str	r5, [sp, #0]
 80057e6:	f7ff fde4 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d000      	beq.n	80057f0 <HAL_I2C_Mem_Read+0x120>
 80057ee:	e78a      	b.n	8005706 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80057f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80057fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057fc:	3301      	adds	r3, #1
 80057fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005800:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005802:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005804:	3b01      	subs	r3, #1
 8005806:	b29b      	uxth	r3, r3
 8005808:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800580a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800580c:	b292      	uxth	r2, r2
 800580e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_I2C_Mem_Read+0x174>
 8005814:	2a00      	cmp	r2, #0
 8005816:	d115      	bne.n	8005844 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005818:	0033      	movs	r3, r6
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	0020      	movs	r0, r4
 800581e:	9500      	str	r5, [sp, #0]
 8005820:	f7ff fdc7 	bl	80053b2 <I2C_WaitOnFlagUntilTimeout>
 8005824:	2800      	cmp	r0, #0
 8005826:	d000      	beq.n	800582a <HAL_I2C_Mem_Read+0x15a>
 8005828:	e76d      	b.n	8005706 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800582c:	2bff      	cmp	r3, #255	; 0xff
 800582e:	d923      	bls.n	8005878 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005830:	23ff      	movs	r3, #255	; 0xff
 8005832:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	22ff      	movs	r2, #255	; 0xff
 8005838:	9000      	str	r0, [sp, #0]
 800583a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800583c:	0039      	movs	r1, r7
 800583e:	0020      	movs	r0, r4
 8005840:	f7ff fcf0 	bl	8005224 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005844:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1c8      	bne.n	80057dc <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584a:	002a      	movs	r2, r5
 800584c:	0031      	movs	r1, r6
 800584e:	0020      	movs	r0, r4
 8005850:	f7ff fddf 	bl	8005412 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005854:	2800      	cmp	r0, #0
 8005856:	d000      	beq.n	800585a <HAL_I2C_Mem_Read+0x18a>
 8005858:	e755      	b.n	8005706 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585a:	2120      	movs	r1, #32
 800585c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800585e:	4d0c      	ldr	r5, [pc, #48]	; (8005890 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005860:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	402a      	ands	r2, r5
 8005866:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005868:	0023      	movs	r3, r4
 800586a:	3341      	adds	r3, #65	; 0x41
 800586c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800586e:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8005870:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005872:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005874:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005876:	e747      	b.n	8005708 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005878:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800587a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800587c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800587e:	b292      	uxth	r2, r2
 8005880:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	9000      	str	r0, [sp, #0]
 8005886:	e7d9      	b.n	800583c <HAL_I2C_Mem_Read+0x16c>
 8005888:	80002000 	.word	0x80002000
 800588c:	80002400 	.word	0x80002400
 8005890:	fe00e800 	.word	0xfe00e800

08005894 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005894:	2110      	movs	r1, #16
 8005896:	4a02      	ldr	r2, [pc, #8]	; (80058a0 <HAL_PWR_DisablePVD+0xc>)
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	438b      	bics	r3, r1
 800589c:	6013      	str	r3, [r2, #0]
}
 800589e:	4770      	bx	lr
 80058a0:	40007000 	.word	0x40007000

080058a4 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 80058a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80058a8:	4a17      	ldr	r2, [pc, #92]	; (8005908 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80058aa:	681e      	ldr	r6, [r3, #0]
{
 80058ac:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80058ae:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80058b0:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80058b2:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80058b4:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80058b6:	0080      	lsls	r0, r0, #2
 80058b8:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80058ba:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 80058bc:	4206      	tst	r6, r0
 80058be:	d005      	beq.n	80058cc <HAL_PWR_EnterSLEEPMode+0x28>
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	d003      	beq.n	80058cc <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	4e11      	ldr	r6, [pc, #68]	; (800590c <HAL_PWR_EnterSLEEPMode+0x68>)
 80058c8:	4030      	ands	r0, r6
 80058ca:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80058cc:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80058ce:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80058d0:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80058d2:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80058d4:	4d0e      	ldr	r5, [pc, #56]	; (8005910 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 80058d6:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80058d8:	6928      	ldr	r0, [r5, #16]
 80058da:	3601      	adds	r6, #1
 80058dc:	43b0      	bics	r0, r6
 80058de:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80058e0:	2901      	cmp	r1, #1
 80058e2:	d10b      	bne.n	80058fc <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80058e4:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d006      	beq.n	80058f8 <HAL_PWR_EnterSLEEPMode+0x54>
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	d004      	beq.n	80058f8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80058ee:	2280      	movs	r2, #128	; 0x80
 80058f0:	6819      	ldr	r1, [r3, #0]
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80058f8:	46c0      	nop			; (mov r8, r8)

}
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80058fc:	bf40      	sev
    __WFE();
 80058fe:	bf20      	wfe
    __WFE();
 8005900:	bf20      	wfe
 8005902:	e7f0      	b.n	80058e6 <HAL_PWR_EnterSLEEPMode+0x42>
 8005904:	40007000 	.word	0x40007000
 8005908:	40010000 	.word	0x40010000
 800590c:	fffffdff 	.word	0xfffffdff
 8005910:	e000ed00 	.word	0xe000ed00

08005914 <HAL_PWR_EnterSTOPMode>:
     in Stop mode or in Sleep/Low-power sleep mode */
//  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
//  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
//  if((ulpbit != 0) && (vrefinbit != 0))
//  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005914:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_PWR_EnterSTOPMode+0x44>)
{
 8005916:	b510      	push	{r4, lr}
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005918:	4a10      	ldr	r2, [pc, #64]	; (800595c <HAL_PWR_EnterSTOPMode+0x48>)
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	4014      	ands	r4, r2
 800591e:	601c      	str	r4, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005920:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8005922:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005924:	43a2      	bics	r2, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005926:	4302      	orrs	r2, r0

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005928:	2004      	movs	r0, #4
  PWR->CR = tmpreg;
 800592a:	601a      	str	r2, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800592c:	4a0c      	ldr	r2, [pc, #48]	; (8005960 <HAL_PWR_EnterSTOPMode+0x4c>)
 800592e:	6914      	ldr	r4, [r2, #16]
 8005930:	4320      	orrs	r0, r4
 8005932:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005934:	2901      	cmp	r1, #1
 8005936:	d10a      	bne.n	800594e <HAL_PWR_EnterSTOPMode+0x3a>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005938:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800593a:	2004      	movs	r0, #4
 800593c:	6911      	ldr	r1, [r2, #16]
 800593e:	4381      	bics	r1, r0
 8005940:	6111      	str	r1, [r2, #16]

//  if((ulpbit != 0) && (vrefinbit != 0))
//  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	0092      	lsls	r2, r2, #2
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
//  }
}
 800594c:	bd10      	pop	{r4, pc}
    __SEV();
 800594e:	bf40      	sev
    __WFE();
 8005950:	bf20      	wfe
    __WFE();
 8005952:	bf20      	wfe
 8005954:	e7f1      	b.n	800593a <HAL_PWR_EnterSTOPMode+0x26>
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	40007000 	.word	0x40007000
 800595c:	fffffdff 	.word	0xfffffdff
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005964:	4770      	bx	lr
	...

08005968 <HAL_PWR_PVD_IRQHandler>:
{
 8005968:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800596a:	2580      	movs	r5, #128	; 0x80
 800596c:	4c04      	ldr	r4, [pc, #16]	; (8005980 <HAL_PWR_PVD_IRQHandler+0x18>)
 800596e:	026d      	lsls	r5, r5, #9
 8005970:	6963      	ldr	r3, [r4, #20]
 8005972:	422b      	tst	r3, r5
 8005974:	d002      	beq.n	800597c <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8005976:	f7ff fff5 	bl	8005964 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800597a:	6165      	str	r5, [r4, #20]
}
 800597c:	bd70      	pop	{r4, r5, r6, pc}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	40010400 	.word	0x40010400

08005984 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	4a03      	ldr	r2, [pc, #12]	; (8005994 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	6811      	ldr	r1, [r2, #0]
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	4770      	bx	lr
 8005992:	46c0      	nop			; (mov r8, r8)
 8005994:	40007000 	.word	0x40007000

08005998 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005998:	2380      	movs	r3, #128	; 0x80
 800599a:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	6811      	ldr	r1, [r2, #0]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	4770      	bx	lr
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	40007000 	.word	0x40007000

080059ac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059ac:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80059ae:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80059b0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80059b2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80059b4:	4022      	ands	r2, r4
 80059b6:	2a08      	cmp	r2, #8
 80059b8:	d031      	beq.n	8005a1e <HAL_RCC_GetSysClockFreq+0x72>
 80059ba:	2a0c      	cmp	r2, #12
 80059bc:	d009      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x26>
 80059be:	2a04      	cmp	r2, #4
 80059c0:	d125      	bne.n	8005a0e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80059c2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80059c4:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80059c6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80059c8:	17c0      	asrs	r0, r0, #31
 80059ca:	4018      	ands	r0, r3
 80059cc:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x80>)
 80059ce:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059d2:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059d4:	4816      	ldr	r0, [pc, #88]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059d6:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059d8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059da:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80059dc:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059de:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80059e0:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059e2:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80059e4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059e6:	4211      	tst	r1, r2
 80059e8:	d009      	beq.n	80059fe <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x88>)
 80059ec:	2300      	movs	r3, #0
 80059ee:	2100      	movs	r1, #0
 80059f0:	f7fa fd84 	bl	80004fc <__aeabi_lmul>
 80059f4:	0022      	movs	r2, r4
 80059f6:	2300      	movs	r3, #0
 80059f8:	f7fa fd60 	bl	80004bc <__aeabi_uldivmod>
 80059fc:	e7e8      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	2310      	movs	r3, #16
 8005a02:	421a      	tst	r2, r3
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005a06:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005a08:	e7f0      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a0a:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x80>)
 8005a0c:	e7ee      	b.n	80059ec <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a0e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005a10:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a12:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a18:	3301      	adds	r3, #1
 8005a1a:	4098      	lsls	r0, r3
      break;
 8005a1c:	e7d8      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8005a1e:	4805      	ldr	r0, [pc, #20]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x88>)
 8005a20:	e7d6      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x24>
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	40021000 	.word	0x40021000
 8005a28:	ff48e500 	.word	0xff48e500
 8005a2c:	00f42400 	.word	0x00f42400
 8005a30:	0800f370 	.word	0x0800f370
 8005a34:	007a1200 	.word	0x007a1200
 8005a38:	003d0900 	.word	0x003d0900

08005a3c <HAL_RCC_OscConfig>:
{
 8005a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a3e:	0005      	movs	r5, r0
 8005a40:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d056      	beq.n	8005af4 <HAL_RCC_OscConfig+0xb8>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a46:	230c      	movs	r3, #12
 8005a48:	4cbc      	ldr	r4, [pc, #752]	; (8005d3c <HAL_RCC_OscConfig+0x300>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a4c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a4e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a50:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	025b      	lsls	r3, r3, #9
 8005a56:	0019      	movs	r1, r3
 8005a58:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5a:	07d2      	lsls	r2, r2, #31
 8005a5c:	d43e      	bmi.n	8005adc <HAL_RCC_OscConfig+0xa0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	079b      	lsls	r3, r3, #30
 8005a62:	d500      	bpl.n	8005a66 <HAL_RCC_OscConfig+0x2a>
 8005a64:	e087      	b.n	8005b76 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	06db      	lsls	r3, r3, #27
 8005a6a:	d529      	bpl.n	8005ac0 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	d000      	beq.n	8005a72 <HAL_RCC_OscConfig+0x36>
 8005a70:	e0d8      	b.n	8005c24 <HAL_RCC_OscConfig+0x1e8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	059b      	lsls	r3, r3, #22
 8005a76:	d502      	bpl.n	8005a7e <HAL_RCC_OscConfig+0x42>
 8005a78:	69ab      	ldr	r3, [r5, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03a      	beq.n	8005af4 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	49af      	ldr	r1, [pc, #700]	; (8005d40 <HAL_RCC_OscConfig+0x304>)
 8005a82:	6a2b      	ldr	r3, [r5, #32]
 8005a84:	400a      	ands	r2, r1
 8005a86:	431a      	orrs	r2, r3
 8005a88:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8a:	6861      	ldr	r1, [r4, #4]
 8005a8c:	69ea      	ldr	r2, [r5, #28]
 8005a8e:	0209      	lsls	r1, r1, #8
 8005a90:	0a09      	lsrs	r1, r1, #8
 8005a92:	0612      	lsls	r2, r2, #24
 8005a94:	430a      	orrs	r2, r1
 8005a96:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	0b5b      	lsrs	r3, r3, #13
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	0212      	lsls	r2, r2, #8
 8005aa0:	409a      	lsls	r2, r3
 8005aa2:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005aa4:	68e1      	ldr	r1, [r4, #12]
 8005aa6:	060a      	lsls	r2, r1, #24
 8005aa8:	49a6      	ldr	r1, [pc, #664]	; (8005d44 <HAL_RCC_OscConfig+0x308>)
 8005aaa:	0f12      	lsrs	r2, r2, #28
 8005aac:	5c8a      	ldrb	r2, [r1, r2]
 8005aae:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005ab0:	4aa5      	ldr	r2, [pc, #660]	; (8005d48 <HAL_RCC_OscConfig+0x30c>)
 8005ab2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8005ab4:	4ba5      	ldr	r3, [pc, #660]	; (8005d4c <HAL_RCC_OscConfig+0x310>)
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	f7fd f934 	bl	8002d24 <HAL_InitTick>
        if(status != HAL_OK)
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d130      	bne.n	8005b22 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	071b      	lsls	r3, r3, #28
 8005ac4:	d500      	bpl.n	8005ac8 <HAL_RCC_OscConfig+0x8c>
 8005ac6:	e0e4      	b.n	8005c92 <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	075b      	lsls	r3, r3, #29
 8005acc:	d500      	bpl.n	8005ad0 <HAL_RCC_OscConfig+0x94>
 8005ace:	e106      	b.n	8005cde <HAL_RCC_OscConfig+0x2a2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d000      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x9c>
 8005ad6:	e18a      	b.n	8005dee <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e022      	b.n	8005b22 <HAL_RCC_OscConfig+0xe6>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005adc:	2e08      	cmp	r6, #8
 8005ade:	d003      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xac>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ae0:	2e0c      	cmp	r6, #12
 8005ae2:	d109      	bne.n	8005af8 <HAL_RCC_OscConfig+0xbc>
 8005ae4:	2f00      	cmp	r7, #0
 8005ae6:	d007      	beq.n	8005af8 <HAL_RCC_OscConfig+0xbc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	039b      	lsls	r3, r3, #14
 8005aec:	d5b7      	bpl.n	8005a5e <HAL_RCC_OscConfig+0x22>
 8005aee:	686b      	ldr	r3, [r5, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1b4      	bne.n	8005a5e <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005af8:	686a      	ldr	r2, [r5, #4]
 8005afa:	428a      	cmp	r2, r1
 8005afc:	d113      	bne.n	8005b26 <HAL_RCC_OscConfig+0xea>
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005b04:	f7fd f910 	bl	8002d28 <HAL_GetTick>
 8005b08:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	0292      	lsls	r2, r2, #10
 8005b10:	4213      	tst	r3, r2
 8005b12:	d1a4      	bne.n	8005a5e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fd f908 	bl	8002d28 <HAL_GetTick>
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	1ac0      	subs	r0, r0, r3
 8005b1c:	2864      	cmp	r0, #100	; 0x64
 8005b1e:	d9f4      	bls.n	8005b0a <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8005b20:	2003      	movs	r0, #3
}
 8005b22:	b005      	add	sp, #20
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b26:	21a0      	movs	r1, #160	; 0xa0
 8005b28:	02c9      	lsls	r1, r1, #11
 8005b2a:	428a      	cmp	r2, r1
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCC_OscConfig+0xfe>
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	6821      	ldr	r1, [r4, #0]
 8005b32:	02d2      	lsls	r2, r2, #11
 8005b34:	430a      	orrs	r2, r1
 8005b36:	6022      	str	r2, [r4, #0]
 8005b38:	e7e1      	b.n	8005afe <HAL_RCC_OscConfig+0xc2>
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	4884      	ldr	r0, [pc, #528]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b3e:	4001      	ands	r1, r0
 8005b40:	6021      	str	r1, [r4, #0]
 8005b42:	6821      	ldr	r1, [r4, #0]
 8005b44:	400b      	ands	r3, r1
 8005b46:	9303      	str	r3, [sp, #12]
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	4982      	ldr	r1, [pc, #520]	; (8005d54 <HAL_RCC_OscConfig+0x318>)
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	400b      	ands	r3, r1
 8005b50:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	d1d6      	bne.n	8005b04 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8005b56:	f7fd f8e7 	bl	8002d28 <HAL_GetTick>
 8005b5a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	0292      	lsls	r2, r2, #10
 8005b62:	4213      	tst	r3, r2
 8005b64:	d100      	bne.n	8005b68 <HAL_RCC_OscConfig+0x12c>
 8005b66:	e77a      	b.n	8005a5e <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fd f8de 	bl	8002d28 <HAL_GetTick>
 8005b6c:	9b00      	ldr	r3, [sp, #0]
 8005b6e:	1ac0      	subs	r0, r0, r3
 8005b70:	2864      	cmp	r0, #100	; 0x64
 8005b72:	d9f3      	bls.n	8005b5c <HAL_RCC_OscConfig+0x120>
 8005b74:	e7d4      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
    hsi_state = RCC_OscInitStruct->HSIState;
 8005b76:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b78:	2e04      	cmp	r6, #4
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b7c:	2e0c      	cmp	r6, #12
 8005b7e:	d124      	bne.n	8005bca <HAL_RCC_OscConfig+0x18e>
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	d122      	bne.n	8005bca <HAL_RCC_OscConfig+0x18e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	075b      	lsls	r3, r3, #29
 8005b88:	d501      	bpl.n	8005b8e <HAL_RCC_OscConfig+0x152>
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	d0b2      	beq.n	8005af4 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8e:	6861      	ldr	r1, [r4, #4]
 8005b90:	692b      	ldr	r3, [r5, #16]
 8005b92:	4871      	ldr	r0, [pc, #452]	; (8005d58 <HAL_RCC_OscConfig+0x31c>)
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	4001      	ands	r1, r0
 8005b98:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005b9a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	438b      	bics	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ba6:	f7ff ff01 	bl	80059ac <HAL_RCC_GetSysClockFreq>
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	4a65      	ldr	r2, [pc, #404]	; (8005d44 <HAL_RCC_OscConfig+0x308>)
 8005bae:	061b      	lsls	r3, r3, #24
 8005bb0:	0f1b      	lsrs	r3, r3, #28
 8005bb2:	5cd3      	ldrb	r3, [r2, r3]
 8005bb4:	40d8      	lsrs	r0, r3
 8005bb6:	4b64      	ldr	r3, [pc, #400]	; (8005d48 <HAL_RCC_OscConfig+0x30c>)
 8005bb8:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8005bba:	4b64      	ldr	r3, [pc, #400]	; (8005d4c <HAL_RCC_OscConfig+0x310>)
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f7fd f8b1 	bl	8002d24 <HAL_InitTick>
      if(status != HAL_OK)
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d100      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x18c>
 8005bc6:	e74e      	b.n	8005a66 <HAL_RCC_OscConfig+0x2a>
 8005bc8:	e7ab      	b.n	8005b22 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005bca:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	d018      	beq.n	8005c02 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005bd0:	2109      	movs	r1, #9
 8005bd2:	438b      	bics	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005bd8:	f7fd f8a6 	bl	8002d28 <HAL_GetTick>
 8005bdc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bde:	2204      	movs	r2, #4
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	4213      	tst	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be6:	6862      	ldr	r2, [r4, #4]
 8005be8:	692b      	ldr	r3, [r5, #16]
 8005bea:	495b      	ldr	r1, [pc, #364]	; (8005d58 <HAL_RCC_OscConfig+0x31c>)
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	400a      	ands	r2, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	6063      	str	r3, [r4, #4]
 8005bf4:	e737      	b.n	8005a66 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf6:	f7fd f897 	bl	8002d28 <HAL_GetTick>
 8005bfa:	1bc0      	subs	r0, r0, r7
 8005bfc:	2802      	cmp	r0, #2
 8005bfe:	d9ee      	bls.n	8005bde <HAL_RCC_OscConfig+0x1a2>
 8005c00:	e78e      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8005c02:	2201      	movs	r2, #1
 8005c04:	4393      	bics	r3, r2
 8005c06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005c08:	f7fd f88e 	bl	8002d28 <HAL_GetTick>
 8005c0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c0e:	2204      	movs	r2, #4
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	4213      	tst	r3, r2
 8005c14:	d100      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1dc>
 8005c16:	e726      	b.n	8005a66 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd f886 	bl	8002d28 <HAL_GetTick>
 8005c1c:	1bc0      	subs	r0, r0, r7
 8005c1e:	2802      	cmp	r0, #2
 8005c20:	d9f5      	bls.n	8005c0e <HAL_RCC_OscConfig+0x1d2>
 8005c22:	e77d      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c24:	69ab      	ldr	r3, [r5, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d020      	beq.n	8005c6c <HAL_RCC_OscConfig+0x230>
        __HAL_RCC_MSI_ENABLE();
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005c34:	f7fd f878 	bl	8002d28 <HAL_GetTick>
 8005c38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	0092      	lsls	r2, r2, #2
 8005c40:	4213      	tst	r3, r2
 8005c42:	d00d      	beq.n	8005c60 <HAL_RCC_OscConfig+0x224>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c44:	6863      	ldr	r3, [r4, #4]
 8005c46:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <HAL_RCC_OscConfig+0x304>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	6a2a      	ldr	r2, [r5, #32]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c50:	6862      	ldr	r2, [r4, #4]
 8005c52:	69eb      	ldr	r3, [r5, #28]
 8005c54:	0212      	lsls	r2, r2, #8
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	0a12      	lsrs	r2, r2, #8
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	e72f      	b.n	8005ac0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c60:	f7fd f862 	bl	8002d28 <HAL_GetTick>
 8005c64:	1bc0      	subs	r0, r0, r7
 8005c66:	2802      	cmp	r0, #2
 8005c68:	d9e7      	bls.n	8005c3a <HAL_RCC_OscConfig+0x1fe>
 8005c6a:	e759      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	4a3b      	ldr	r2, [pc, #236]	; (8005d5c <HAL_RCC_OscConfig+0x320>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005c74:	f7fd f858 	bl	8002d28 <HAL_GetTick>
 8005c78:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	4213      	tst	r3, r2
 8005c82:	d100      	bne.n	8005c86 <HAL_RCC_OscConfig+0x24a>
 8005c84:	e71c      	b.n	8005ac0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c86:	f7fd f84f 	bl	8002d28 <HAL_GetTick>
 8005c8a:	1bc0      	subs	r0, r0, r7
 8005c8c:	2802      	cmp	r0, #2
 8005c8e:	d9f4      	bls.n	8005c7a <HAL_RCC_OscConfig+0x23e>
 8005c90:	e746      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c92:	696a      	ldr	r2, [r5, #20]
 8005c94:	2301      	movs	r3, #1
 8005c96:	2a00      	cmp	r2, #0
 8005c98:	d010      	beq.n	8005cbc <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8005c9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005ca0:	f7fd f842 	bl	8002d28 <HAL_GetTick>
 8005ca4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005caa:	4213      	tst	r3, r2
 8005cac:	d000      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x274>
 8005cae:	e70b      	b.n	8005ac8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb0:	f7fd f83a 	bl	8002d28 <HAL_GetTick>
 8005cb4:	1bc0      	subs	r0, r0, r7
 8005cb6:	2802      	cmp	r0, #2
 8005cb8:	d9f5      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x26a>
 8005cba:	e731      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_LSI_DISABLE();
 8005cbc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005cbe:	439a      	bics	r2, r3
 8005cc0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005cc2:	f7fd f831 	bl	8002d28 <HAL_GetTick>
 8005cc6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cc8:	2202      	movs	r2, #2
 8005cca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ccc:	4213      	tst	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x296>
 8005cd0:	e6fa      	b.n	8005ac8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd2:	f7fd f829 	bl	8002d28 <HAL_GetTick>
 8005cd6:	1bc0      	subs	r0, r0, r7
 8005cd8:	2802      	cmp	r0, #2
 8005cda:	d9f5      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x28c>
 8005cdc:	e720      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cde:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005ce0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ce4:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8005ce6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce8:	421a      	tst	r2, r3
 8005cea:	d104      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	4f19      	ldr	r7, [pc, #100]	; (8005d60 <HAL_RCC_OscConfig+0x324>)
 8005cfa:	0052      	lsls	r2, r2, #1
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4213      	tst	r3, r2
 8005d00:	d008      	beq.n	8005d14 <HAL_RCC_OscConfig+0x2d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d02:	2280      	movs	r2, #128	; 0x80
 8005d04:	68ab      	ldr	r3, [r5, #8]
 8005d06:	0052      	lsls	r2, r2, #1
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d12b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x328>
 8005d0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	6523      	str	r3, [r4, #80]	; 0x50
 8005d12:	e04c      	b.n	8005dae <HAL_RCC_OscConfig+0x372>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d14:	2280      	movs	r2, #128	; 0x80
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	0052      	lsls	r2, r2, #1
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005d1e:	f7fd f803 	bl	8002d28 <HAL_GetTick>
 8005d22:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	0052      	lsls	r2, r2, #1
 8005d2a:	4213      	tst	r3, r2
 8005d2c:	d1e9      	bne.n	8005d02 <HAL_RCC_OscConfig+0x2c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fc fffb 	bl	8002d28 <HAL_GetTick>
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	1ac0      	subs	r0, r0, r3
 8005d36:	2864      	cmp	r0, #100	; 0x64
 8005d38:	d9f4      	bls.n	8005d24 <HAL_RCC_OscConfig+0x2e8>
 8005d3a:	e6f1      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	ffff1fff 	.word	0xffff1fff
 8005d44:	0800f358 	.word	0x0800f358
 8005d48:	20000058 	.word	0x20000058
 8005d4c:	20000060 	.word	0x20000060
 8005d50:	fffeffff 	.word	0xfffeffff
 8005d54:	fffbffff 	.word	0xfffbffff
 8005d58:	ffffe0ff 	.word	0xffffe0ff
 8005d5c:	fffffeff 	.word	0xfffffeff
 8005d60:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d116      	bne.n	8005d96 <HAL_RCC_OscConfig+0x35a>
 8005d68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d6a:	4a51      	ldr	r2, [pc, #324]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	6523      	str	r3, [r4, #80]	; 0x50
 8005d70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d72:	4a50      	ldr	r2, [pc, #320]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005d78:	f7fc ffd6 	bl	8002d28 <HAL_GetTick>
 8005d7c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d7e:	2280      	movs	r2, #128	; 0x80
 8005d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d82:	0092      	lsls	r2, r2, #2
 8005d84:	4213      	tst	r3, r2
 8005d86:	d01a      	beq.n	8005dbe <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fc ffce 	bl	8002d28 <HAL_GetTick>
 8005d8c:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCC_OscConfig+0x47c>)
 8005d8e:	1bc0      	subs	r0, r0, r7
 8005d90:	4298      	cmp	r0, r3
 8005d92:	d9f4      	bls.n	8005d7e <HAL_RCC_OscConfig+0x342>
 8005d94:	e6c4      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d96:	21a0      	movs	r1, #160	; 0xa0
 8005d98:	00c9      	lsls	r1, r1, #3
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	d118      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x394>
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6523      	str	r3, [r4, #80]	; 0x50
 8005da8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005daa:	431a      	orrs	r2, r3
 8005dac:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005dae:	f7fc ffbb 	bl	8002d28 <HAL_GetTick>
 8005db2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db4:	2280      	movs	r2, #128	; 0x80
 8005db6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005db8:	0092      	lsls	r2, r2, #2
 8005dba:	4213      	tst	r3, r2
 8005dbc:	d010      	beq.n	8005de0 <HAL_RCC_OscConfig+0x3a4>
    if(pwrclkchanged == SET)
 8005dbe:	9b00      	ldr	r3, [sp, #0]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d000      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x38a>
 8005dc4:	e684      	b.n	8005ad0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dc8:	4a3c      	ldr	r2, [pc, #240]	; (8005ebc <HAL_RCC_OscConfig+0x480>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8005dce:	e67f      	b.n	8005ad0 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005dd2:	4a37      	ldr	r2, [pc, #220]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	6523      	str	r3, [r4, #80]	; 0x50
 8005dd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005dda:	4a36      	ldr	r2, [pc, #216]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	e797      	b.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de0:	f7fc ffa2 	bl	8002d28 <HAL_GetTick>
 8005de4:	4b34      	ldr	r3, [pc, #208]	; (8005eb8 <HAL_RCC_OscConfig+0x47c>)
 8005de6:	1bc0      	subs	r0, r0, r7
 8005de8:	4298      	cmp	r0, r3
 8005dea:	d9e3      	bls.n	8005db4 <HAL_RCC_OscConfig+0x378>
 8005dec:	e698      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dee:	2e0c      	cmp	r6, #12
 8005df0:	d043      	beq.n	8005e7a <HAL_RCC_OscConfig+0x43e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df2:	4a33      	ldr	r2, [pc, #204]	; (8005ec0 <HAL_RCC_OscConfig+0x484>)
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d12e      	bne.n	8005e56 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 8005df8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005dfa:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005e00:	f7fc ff92 	bl	8002d28 <HAL_GetTick>
 8005e04:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e06:	04bf      	lsls	r7, r7, #18
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	423b      	tst	r3, r7
 8005e0c:	d11d      	bne.n	8005e4a <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e0e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005e10:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005e12:	68e2      	ldr	r2, [r4, #12]
 8005e14:	430b      	orrs	r3, r1
 8005e16:	492b      	ldr	r1, [pc, #172]	; (8005ec4 <HAL_RCC_OscConfig+0x488>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e18:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1a:	400a      	ands	r2, r1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e20:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	045b      	lsls	r3, r3, #17
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005e30:	f7fc ff7a 	bl	8002d28 <HAL_GetTick>
 8005e34:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	4233      	tst	r3, r6
 8005e3a:	d000      	beq.n	8005e3e <HAL_RCC_OscConfig+0x402>
 8005e3c:	e64c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3e:	f7fc ff73 	bl	8002d28 <HAL_GetTick>
 8005e42:	1b40      	subs	r0, r0, r5
 8005e44:	2802      	cmp	r0, #2
 8005e46:	d9f6      	bls.n	8005e36 <HAL_RCC_OscConfig+0x3fa>
 8005e48:	e66a      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fc ff6d 	bl	8002d28 <HAL_GetTick>
 8005e4e:	1b80      	subs	r0, r0, r6
 8005e50:	2802      	cmp	r0, #2
 8005e52:	d9d9      	bls.n	8005e08 <HAL_RCC_OscConfig+0x3cc>
 8005e54:	e664      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_PLL_DISABLE();
 8005e56:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e58:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005e5e:	f7fc ff63 	bl	8002d28 <HAL_GetTick>
 8005e62:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e64:	04b6      	lsls	r6, r6, #18
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	4233      	tst	r3, r6
 8005e6a:	d100      	bne.n	8005e6e <HAL_RCC_OscConfig+0x432>
 8005e6c:	e634      	b.n	8005ad8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6e:	f7fc ff5b 	bl	8002d28 <HAL_GetTick>
 8005e72:	1b40      	subs	r0, r0, r5
 8005e74:	2802      	cmp	r0, #2
 8005e76:	d9f6      	bls.n	8005e66 <HAL_RCC_OscConfig+0x42a>
 8005e78:	e652      	b.n	8005b20 <HAL_RCC_OscConfig+0xe4>
        return HAL_ERROR;
 8005e7a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d100      	bne.n	8005e82 <HAL_RCC_OscConfig+0x446>
 8005e80:	e64f      	b.n	8005b22 <HAL_RCC_OscConfig+0xe6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e82:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8005e84:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005e88:	0252      	lsls	r2, r2, #9
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	428a      	cmp	r2, r1
 8005e8e:	d000      	beq.n	8005e92 <HAL_RCC_OscConfig+0x456>
 8005e90:	e630      	b.n	8005af4 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005e92:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e94:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005e96:	0392      	lsls	r2, r2, #14
 8005e98:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9a:	428a      	cmp	r2, r1
 8005e9c:	d000      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x464>
 8005e9e:	e629      	b.n	8005af4 <HAL_RCC_OscConfig+0xb8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005ea0:	22c0      	movs	r2, #192	; 0xc0
 8005ea2:	0412      	lsls	r2, r2, #16
 8005ea4:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ea6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d100      	bne.n	8005eae <HAL_RCC_OscConfig+0x472>
 8005eac:	e614      	b.n	8005ad8 <HAL_RCC_OscConfig+0x9c>
 8005eae:	e621      	b.n	8005af4 <HAL_RCC_OscConfig+0xb8>
 8005eb0:	fffffeff 	.word	0xfffffeff
 8005eb4:	fffffbff 	.word	0xfffffbff
 8005eb8:	00001388 	.word	0x00001388
 8005ebc:	efffffff 	.word	0xefffffff
 8005ec0:	feffffff 	.word	0xfeffffff
 8005ec4:	ff02ffff 	.word	0xff02ffff

08005ec8 <HAL_RCC_ClockConfig>:
{
 8005ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eca:	1e04      	subs	r4, r0, #0
 8005ecc:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005ed0:	2001      	movs	r0, #1
}
 8005ed2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	2501      	movs	r5, #1
 8005ed6:	4e5b      	ldr	r6, [pc, #364]	; (8006044 <HAL_RCC_ClockConfig+0x17c>)
 8005ed8:	9a01      	ldr	r2, [sp, #4]
 8005eda:	6833      	ldr	r3, [r6, #0]
 8005edc:	402b      	ands	r3, r5
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d331      	bcc.n	8005f46 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	0793      	lsls	r3, r2, #30
 8005ee6:	d443      	bmi.n	8005f70 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee8:	07d3      	lsls	r3, r2, #31
 8005eea:	d449      	bmi.n	8005f80 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eec:	2501      	movs	r5, #1
 8005eee:	6833      	ldr	r3, [r6, #0]
 8005ef0:	9a01      	ldr	r2, [sp, #4]
 8005ef2:	402b      	ands	r3, r5
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d909      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef8:	6833      	ldr	r3, [r6, #0]
 8005efa:	43ab      	bics	r3, r5
 8005efc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005efe:	f7fc ff13 	bl	8002d28 <HAL_GetTick>
 8005f02:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f04:	6833      	ldr	r3, [r6, #0]
 8005f06:	422b      	tst	r3, r5
 8005f08:	d000      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x44>
 8005f0a:	e08c      	b.n	8006026 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	4d4e      	ldr	r5, [pc, #312]	; (8006048 <HAL_RCC_ClockConfig+0x180>)
 8005f10:	0753      	lsls	r3, r2, #29
 8005f12:	d500      	bpl.n	8005f16 <HAL_RCC_ClockConfig+0x4e>
 8005f14:	e08f      	b.n	8006036 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f16:	0713      	lsls	r3, r2, #28
 8005f18:	d506      	bpl.n	8005f28 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f1a:	68e9      	ldr	r1, [r5, #12]
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	4a4b      	ldr	r2, [pc, #300]	; (800604c <HAL_RCC_ClockConfig+0x184>)
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	400a      	ands	r2, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f28:	f7ff fd40 	bl	80059ac <HAL_RCC_GetSysClockFreq>
 8005f2c:	68eb      	ldr	r3, [r5, #12]
 8005f2e:	4a48      	ldr	r2, [pc, #288]	; (8006050 <HAL_RCC_ClockConfig+0x188>)
 8005f30:	061b      	lsls	r3, r3, #24
 8005f32:	0f1b      	lsrs	r3, r3, #28
 8005f34:	5cd3      	ldrb	r3, [r2, r3]
 8005f36:	40d8      	lsrs	r0, r3
 8005f38:	4b46      	ldr	r3, [pc, #280]	; (8006054 <HAL_RCC_ClockConfig+0x18c>)
 8005f3a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005f3c:	4b46      	ldr	r3, [pc, #280]	; (8006058 <HAL_RCC_ClockConfig+0x190>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	f7fc fef0 	bl	8002d24 <HAL_InitTick>
  if(status != HAL_OK)
 8005f44:	e7c5      	b.n	8005ed2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	9a01      	ldr	r2, [sp, #4]
 8005f4a:	43ab      	bics	r3, r5
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f50:	f7fc feea 	bl	8002d28 <HAL_GetTick>
 8005f54:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	6833      	ldr	r3, [r6, #0]
 8005f58:	9a01      	ldr	r2, [sp, #4]
 8005f5a:	402b      	ands	r3, r5
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d0c0      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f60:	f7fc fee2 	bl	8002d28 <HAL_GetTick>
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCC_ClockConfig+0x194>)
 8005f66:	1bc0      	subs	r0, r0, r7
 8005f68:	4298      	cmp	r0, r3
 8005f6a:	d9f4      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8005f6c:	2003      	movs	r0, #3
 8005f6e:	e7b0      	b.n	8005ed2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f70:	20f0      	movs	r0, #240	; 0xf0
 8005f72:	4935      	ldr	r1, [pc, #212]	; (8006048 <HAL_RCC_ClockConfig+0x180>)
 8005f74:	68cb      	ldr	r3, [r1, #12]
 8005f76:	4383      	bics	r3, r0
 8005f78:	68a0      	ldr	r0, [r4, #8]
 8005f7a:	4303      	orrs	r3, r0
 8005f7c:	60cb      	str	r3, [r1, #12]
 8005f7e:	e7b3      	b.n	8005ee8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f80:	4d31      	ldr	r5, [pc, #196]	; (8006048 <HAL_RCC_ClockConfig+0x180>)
 8005f82:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f84:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f86:	2a02      	cmp	r2, #2
 8005f88:	d118      	bne.n	8005fbc <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f8a:	039b      	lsls	r3, r3, #14
 8005f8c:	d5a0      	bpl.n	8005ed0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f8e:	2103      	movs	r1, #3
 8005f90:	68eb      	ldr	r3, [r5, #12]
 8005f92:	438b      	bics	r3, r1
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8005f98:	f7fc fec6 	bl	8002d28 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005f9e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d118      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fa4:	220c      	movs	r2, #12
 8005fa6:	68eb      	ldr	r3, [r5, #12]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d09e      	beq.n	8005eec <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fae:	f7fc febb 	bl	8002d28 <HAL_GetTick>
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCC_ClockConfig+0x194>)
 8005fb4:	1bc0      	subs	r0, r0, r7
 8005fb6:	4298      	cmp	r0, r3
 8005fb8:	d9f4      	bls.n	8005fa4 <HAL_RCC_ClockConfig+0xdc>
 8005fba:	e7d7      	b.n	8005f6c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fbc:	2a03      	cmp	r2, #3
 8005fbe:	d102      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	d4e4      	bmi.n	8005f8e <HAL_RCC_ClockConfig+0xc6>
 8005fc4:	e784      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fc6:	2a01      	cmp	r2, #1
 8005fc8:	d102      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fca:	075b      	lsls	r3, r3, #29
 8005fcc:	d4df      	bmi.n	8005f8e <HAL_RCC_ClockConfig+0xc6>
 8005fce:	e77f      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005fd0:	059b      	lsls	r3, r3, #22
 8005fd2:	d4dc      	bmi.n	8005f8e <HAL_RCC_ClockConfig+0xc6>
 8005fd4:	e77c      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fda:	220c      	movs	r2, #12
 8005fdc:	68eb      	ldr	r3, [r5, #12]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d083      	beq.n	8005eec <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe4:	f7fc fea0 	bl	8002d28 <HAL_GetTick>
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <HAL_RCC_ClockConfig+0x194>)
 8005fea:	1bc0      	subs	r0, r0, r7
 8005fec:	4298      	cmp	r0, r3
 8005fee:	d9f4      	bls.n	8005fda <HAL_RCC_ClockConfig+0x112>
 8005ff0:	e7bc      	b.n	8005f6c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d011      	beq.n	800601a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ff6:	220c      	movs	r2, #12
 8005ff8:	68eb      	ldr	r3, [r5, #12]
 8005ffa:	4213      	tst	r3, r2
 8005ffc:	d100      	bne.n	8006000 <HAL_RCC_ClockConfig+0x138>
 8005ffe:	e775      	b.n	8005eec <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fc fe92 	bl	8002d28 <HAL_GetTick>
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <HAL_RCC_ClockConfig+0x194>)
 8006006:	1bc0      	subs	r0, r0, r7
 8006008:	4298      	cmp	r0, r3
 800600a:	d9f4      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x12e>
 800600c:	e7ae      	b.n	8005f6c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800600e:	f7fc fe8b 	bl	8002d28 <HAL_GetTick>
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_RCC_ClockConfig+0x194>)
 8006014:	1bc0      	subs	r0, r0, r7
 8006016:	4298      	cmp	r0, r3
 8006018:	d8a8      	bhi.n	8005f6c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800601a:	220c      	movs	r2, #12
 800601c:	68eb      	ldr	r3, [r5, #12]
 800601e:	4013      	ands	r3, r2
 8006020:	2b04      	cmp	r3, #4
 8006022:	d1f4      	bne.n	800600e <HAL_RCC_ClockConfig+0x146>
 8006024:	e762      	b.n	8005eec <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006026:	f7fc fe7f 	bl	8002d28 <HAL_GetTick>
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCC_ClockConfig+0x194>)
 800602c:	1bc0      	subs	r0, r0, r7
 800602e:	4298      	cmp	r0, r3
 8006030:	d800      	bhi.n	8006034 <HAL_RCC_ClockConfig+0x16c>
 8006032:	e767      	b.n	8005f04 <HAL_RCC_ClockConfig+0x3c>
 8006034:	e79a      	b.n	8005f6c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006036:	68eb      	ldr	r3, [r5, #12]
 8006038:	4909      	ldr	r1, [pc, #36]	; (8006060 <HAL_RCC_ClockConfig+0x198>)
 800603a:	400b      	ands	r3, r1
 800603c:	68e1      	ldr	r1, [r4, #12]
 800603e:	430b      	orrs	r3, r1
 8006040:	60eb      	str	r3, [r5, #12]
 8006042:	e768      	b.n	8005f16 <HAL_RCC_ClockConfig+0x4e>
 8006044:	40022000 	.word	0x40022000
 8006048:	40021000 	.word	0x40021000
 800604c:	ffffc7ff 	.word	0xffffc7ff
 8006050:	0800f358 	.word	0x0800f358
 8006054:	20000058 	.word	0x20000058
 8006058:	20000060 	.word	0x20000060
 800605c:	00001388 	.word	0x00001388
 8006060:	fffff8ff 	.word	0xfffff8ff

08006064 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006066:	4a05      	ldr	r2, [pc, #20]	; (800607c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	055b      	lsls	r3, r3, #21
 800606c:	0f5b      	lsrs	r3, r3, #29
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	4a03      	ldr	r2, [pc, #12]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006072:	6810      	ldr	r0, [r2, #0]
 8006074:	40d8      	lsrs	r0, r3
}
 8006076:	4770      	bx	lr
 8006078:	40021000 	.word	0x40021000
 800607c:	0800f368 	.word	0x0800f368
 8006080:	20000058 	.word	0x20000058

08006084 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006086:	4a05      	ldr	r2, [pc, #20]	; (800609c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	049b      	lsls	r3, r3, #18
 800608c:	0f5b      	lsrs	r3, r3, #29
 800608e:	5cd3      	ldrb	r3, [r2, r3]
 8006090:	4a03      	ldr	r2, [pc, #12]	; (80060a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006092:	6810      	ldr	r0, [r2, #0]
 8006094:	40d8      	lsrs	r0, r3
}
 8006096:	4770      	bx	lr
 8006098:	40021000 	.word	0x40021000
 800609c:	0800f368 	.word	0x0800f368
 80060a0:	20000058 	.word	0x20000058

080060a4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a4:	6803      	ldr	r3, [r0, #0]
{
 80060a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060aa:	069b      	lsls	r3, r3, #26
 80060ac:	d53c      	bpl.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ae:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80060b0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060b2:	4c54      	ldr	r4, [pc, #336]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b4:	055b      	lsls	r3, r3, #21
 80060b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80060b8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ba:	421a      	tst	r2, r3
 80060bc:	d104      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060c0:	4313      	orrs	r3, r2
 80060c2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80060c4:	2301      	movs	r3, #1
 80060c6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c8:	2780      	movs	r7, #128	; 0x80
 80060ca:	4e4f      	ldr	r6, [pc, #316]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060cc:	007f      	lsls	r7, r7, #1
 80060ce:	6833      	ldr	r3, [r6, #0]
 80060d0:	423b      	tst	r3, r7
 80060d2:	d059      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060d4:	686a      	ldr	r2, [r5, #4]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80060d6:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060d8:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80060da:	0016      	movs	r6, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80060dc:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060de:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	401e      	ands	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060e4:	4002      	ands	r2, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80060e6:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80060e8:	428a      	cmp	r2, r1
 80060ea:	d15e      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x106>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80060ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80060ee:	0011      	movs	r1, r2
 80060f0:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80060f2:	421a      	tst	r2, r3
 80060f4:	d160      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060f6:	6869      	ldr	r1, [r5, #4]
 80060f8:	23c0      	movs	r3, #192	; 0xc0
 80060fa:	000a      	movs	r2, r1
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	401a      	ands	r2, r3
 8006100:	429a      	cmp	r2, r3
 8006102:	d107      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	4841      	ldr	r0, [pc, #260]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006108:	4003      	ands	r3, r0
 800610a:	20c0      	movs	r0, #192	; 0xc0
 800610c:	0380      	lsls	r0, r0, #14
 800610e:	4001      	ands	r1, r0
 8006110:	430b      	orrs	r3, r1
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006116:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006118:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611a:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800611c:	2b01      	cmp	r3, #1
 800611e:	d103      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006122:	4a3b      	ldr	r2, [pc, #236]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8006124:	4013      	ands	r3, r2
 8006126:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	07da      	lsls	r2, r3, #31
 800612c:	d506      	bpl.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800612e:	2003      	movs	r0, #3
 8006130:	4934      	ldr	r1, [pc, #208]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006132:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006134:	4382      	bics	r2, r0
 8006136:	68a8      	ldr	r0, [r5, #8]
 8006138:	4302      	orrs	r2, r0
 800613a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800613c:	079a      	lsls	r2, r3, #30
 800613e:	d506      	bpl.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006140:	200c      	movs	r0, #12
 8006142:	4930      	ldr	r1, [pc, #192]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006144:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006146:	4382      	bics	r2, r0
 8006148:	68e8      	ldr	r0, [r5, #12]
 800614a:	4302      	orrs	r2, r0
 800614c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800614e:	075a      	lsls	r2, r3, #29
 8006150:	d506      	bpl.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006152:	492c      	ldr	r1, [pc, #176]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006154:	482f      	ldr	r0, [pc, #188]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8006156:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006158:	4002      	ands	r2, r0
 800615a:	6928      	ldr	r0, [r5, #16]
 800615c:	4302      	orrs	r2, r0
 800615e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006160:	071a      	lsls	r2, r3, #28
 8006162:	d506      	bpl.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006164:	4927      	ldr	r1, [pc, #156]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006166:	482c      	ldr	r0, [pc, #176]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8006168:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800616a:	4002      	ands	r2, r0
 800616c:	6968      	ldr	r0, [r5, #20]
 800616e:	4302      	orrs	r2, r0
 8006170:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006172:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	d517      	bpl.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006178:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800617a:	4928      	ldr	r1, [pc, #160]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800617c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800617e:	400b      	ands	r3, r1
 8006180:	69a9      	ldr	r1, [r5, #24]
 8006182:	430b      	orrs	r3, r1
 8006184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006186:	e00f      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	433b      	orrs	r3, r7
 800618c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800618e:	f7fc fdcb 	bl	8002d28 <HAL_GetTick>
 8006192:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	423b      	tst	r3, r7
 8006198:	d19c      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619a:	f7fc fdc5 	bl	8002d28 <HAL_GetTick>
 800619e:	9b01      	ldr	r3, [sp, #4]
 80061a0:	1ac0      	subs	r0, r0, r3
 80061a2:	2864      	cmp	r0, #100	; 0x64
 80061a4:	d9f6      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          return HAL_TIMEOUT;
 80061a6:	2003      	movs	r0, #3
}
 80061a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80061aa:	429e      	cmp	r6, r3
 80061ac:	d19e      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061ae:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80061b0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061b2:	0392      	lsls	r2, r2, #14
 80061b4:	d59a      	bpl.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x48>
 80061b6:	e7f7      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80061b8:	42b1      	cmp	r1, r6
 80061ba:	d09c      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	069b      	lsls	r3, r3, #26
 80061c0:	d599      	bpl.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 80061c2:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80061c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80061c8:	0312      	lsls	r2, r2, #12
 80061ca:	4302      	orrs	r2, r0
 80061cc:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061d0:	4b13      	ldr	r3, [pc, #76]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d2:	4814      	ldr	r0, [pc, #80]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x180>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061d4:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d6:	4002      	ands	r2, r0
 80061d8:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80061da:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80061dc:	05cb      	lsls	r3, r1, #23
 80061de:	d400      	bmi.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80061e0:	e789      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80061e2:	f7fc fda1 	bl	8002d28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061e6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80061e8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061ea:	00bf      	lsls	r7, r7, #2
 80061ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061ee:	423b      	tst	r3, r7
 80061f0:	d000      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80061f2:	e780      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f4:	f7fc fd98 	bl	8002d28 <HAL_GetTick>
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80061fa:	1b80      	subs	r0, r0, r6
 80061fc:	4298      	cmp	r0, r3
 80061fe:	d9f5      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006200:	e7d1      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	40021000 	.word	0x40021000
 8006208:	40007000 	.word	0x40007000
 800620c:	ffcfffff 	.word	0xffcfffff
 8006210:	efffffff 	.word	0xefffffff
 8006214:	fffff3ff 	.word	0xfffff3ff
 8006218:	ffffcfff 	.word	0xffffcfff
 800621c:	fff3ffff 	.word	0xfff3ffff
 8006220:	fffcffff 	.word	0xfffcffff
 8006224:	fff7ffff 	.word	0xfff7ffff
 8006228:	00001388 	.word	0x00001388

0800622c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800622c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800622e:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006230:	1c45      	adds	r5, r0, #1
 8006232:	7feb      	ldrb	r3, [r5, #31]
{
 8006234:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006236:	0038      	movs	r0, r7
 8006238:	2b01      	cmp	r3, #1
 800623a:	d027      	beq.n	800628c <HAL_RTC_DeactivateAlarm+0x60>
 800623c:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800623e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006240:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8006242:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006244:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	625a      	str	r2, [r3, #36]	; 0x24
 800624a:	3a77      	subs	r2, #119	; 0x77
 800624c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800624e:	32ad      	adds	r2, #173	; 0xad
 8006250:	4291      	cmp	r1, r2
 8006252:	d12a      	bne.n	80062aa <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	4922      	ldr	r1, [pc, #136]	; (80062e0 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006258:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800625a:	400a      	ands	r2, r1
 800625c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	4920      	ldr	r1, [pc, #128]	; (80062e4 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006262:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006264:	400a      	ands	r2, r1
 8006266:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006268:	f7fc fd5e 	bl	8002d28 <HAL_GetTick>
 800626c:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800626e:	2201      	movs	r2, #1
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	401a      	ands	r2, r3
 8006276:	9201      	str	r2, [sp, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	4213      	tst	r3, r2
 800627c:	d007      	beq.n	800628e <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006282:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006284:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006286:	2301      	movs	r3, #1
 8006288:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800628a:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 800628c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800628e:	f7fc fd4b 	bl	8002d28 <HAL_GetTick>
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	1ac0      	subs	r0, r0, r3
 8006296:	42b8      	cmp	r0, r7
 8006298:	d9e9      	bls.n	800626e <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800629c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062a2:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 80062a8:	e7f0      	b.n	800628c <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	490e      	ldr	r1, [pc, #56]	; (80062e8 <HAL_RTC_DeactivateAlarm+0xbc>)
 80062ae:	400a      	ands	r2, r1
 80062b0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	490d      	ldr	r1, [pc, #52]	; (80062ec <HAL_RTC_DeactivateAlarm+0xc0>)
 80062b6:	400a      	ands	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80062ba:	f7fc fd35 	bl	8002d28 <HAL_GetTick>
 80062be:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	001a      	movs	r2, r3
 80062c6:	403a      	ands	r2, r7
 80062c8:	9201      	str	r2, [sp, #4]
 80062ca:	423b      	tst	r3, r7
 80062cc:	d1d7      	bne.n	800627e <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062ce:	f7fc fd2b 	bl	8002d28 <HAL_GetTick>
 80062d2:	9b00      	ldr	r3, [sp, #0]
 80062d4:	1ac0      	subs	r0, r0, r3
 80062d6:	23fa      	movs	r3, #250	; 0xfa
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4298      	cmp	r0, r3
 80062dc:	d9f0      	bls.n	80062c0 <HAL_RTC_DeactivateAlarm+0x94>
 80062de:	e7dc      	b.n	800629a <HAL_RTC_DeactivateAlarm+0x6e>
 80062e0:	fffffeff 	.word	0xfffffeff
 80062e4:	ffffefff 	.word	0xffffefff
 80062e8:	fffffdff 	.word	0xfffffdff
 80062ec:	ffffdfff 	.word	0xffffdfff

080062f0 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80062f0:	6803      	ldr	r3, [r0, #0]
{
 80062f2:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80062f4:	689a      	ldr	r2, [r3, #8]
{
 80062f6:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80062f8:	04d2      	lsls	r2, r2, #19
 80062fa:	d50a      	bpl.n	8006312 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	05db      	lsls	r3, r3, #23
 8006300:	d507      	bpl.n	8006312 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006302:	f7fc fb42 	bl	800298a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <HAL_RTC_AlarmIRQHandler+0x54>)
 800630a:	68ca      	ldr	r2, [r1, #12]
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	4313      	orrs	r3, r2
 8006310:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	0492      	lsls	r2, r2, #18
 8006318:	d50b      	bpl.n	8006332 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	059b      	lsls	r3, r3, #22
 800631e:	d508      	bpl.n	8006332 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006320:	0020      	movs	r0, r4
 8006322:	f000 faf5 	bl	8006910 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006326:	6821      	ldr	r1, [r4, #0]
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <HAL_RTC_AlarmIRQHandler+0x58>)
 800632a:	68ca      	ldr	r2, [r1, #12]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	4313      	orrs	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006332:	2280      	movs	r2, #128	; 0x80
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006336:	0292      	lsls	r2, r2, #10
 8006338:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800633a:	2301      	movs	r3, #1
 800633c:	3402      	adds	r4, #2
 800633e:	77e3      	strb	r3, [r4, #31]
}
 8006340:	bd10      	pop	{r4, pc}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	fffffe7f 	.word	0xfffffe7f
 8006348:	fffffd7f 	.word	0xfffffd7f
 800634c:	40010400 	.word	0x40010400

08006350 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006350:	21a0      	movs	r1, #160	; 0xa0
 8006352:	6802      	ldr	r2, [r0, #0]
{
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006356:	68d3      	ldr	r3, [r2, #12]
{
 8006358:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800635a:	438b      	bics	r3, r1
 800635c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800635e:	f7fc fce3 	bl	8002d28 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006362:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006364:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006366:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006368:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4233      	tst	r3, r6
 8006370:	d001      	beq.n	8006376 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006372:	2000      	movs	r0, #0
}
 8006374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006376:	f7fc fcd7 	bl	8002d28 <HAL_GetTick>
 800637a:	1b40      	subs	r0, r0, r5
 800637c:	42b8      	cmp	r0, r7
 800637e:	d9f4      	bls.n	800636a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8006380:	2003      	movs	r0, #3
 8006382:	e7f7      	b.n	8006374 <HAL_RTC_WaitForSynchro+0x24>

08006384 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006386:	2640      	movs	r6, #64	; 0x40
 8006388:	6803      	ldr	r3, [r0, #0]
{
 800638a:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	4232      	tst	r2, r6
 8006390:	d001      	beq.n	8006396 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006392:	2000      	movs	r0, #0
}
 8006394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006396:	2201      	movs	r2, #1
 8006398:	4252      	negs	r2, r2
 800639a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800639c:	f7fc fcc4 	bl	8002d28 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063a0:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80063a2:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063a4:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4233      	tst	r3, r6
 80063ac:	d1f1      	bne.n	8006392 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063ae:	f7fc fcbb 	bl	8002d28 <HAL_GetTick>
 80063b2:	1b40      	subs	r0, r0, r5
 80063b4:	42b8      	cmp	r0, r7
 80063b6:	d9f6      	bls.n	80063a6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80063b8:	2003      	movs	r0, #3
 80063ba:	e7eb      	b.n	8006394 <RTC_EnterInitMode+0x10>

080063bc <HAL_RTC_Init>:
{
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	0004      	movs	r4, r0
    return HAL_ERROR;
 80063c0:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d01a      	beq.n	80063fc <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063c6:	1c86      	adds	r6, r0, #2
 80063c8:	7ff3      	ldrb	r3, [r6, #31]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80063d0:	1943      	adds	r3, r0, r5
 80063d2:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 80063d4:	f7fc f8f2 	bl	80025bc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063d8:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063da:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063dc:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063de:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063e0:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24
 80063e4:	3a77      	subs	r2, #119	; 0x77
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063e8:	f7ff ffcc 	bl	8006384 <RTC_EnterInitMode>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	1e05      	subs	r5, r0, #0
 80063f0:	d006      	beq.n	8006400 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f2:	22ff      	movs	r2, #255	; 0xff
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063f6:	2304      	movs	r3, #4
 80063f8:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80063fa:	2501      	movs	r5, #1
}
 80063fc:	0028      	movs	r0, r5
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	491b      	ldr	r1, [pc, #108]	; (8006470 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006404:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006406:	400a      	ands	r2, r1
 8006408:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800640a:	6862      	ldr	r2, [r4, #4]
 800640c:	6899      	ldr	r1, [r3, #8]
 800640e:	4302      	orrs	r2, r0
 8006410:	69a0      	ldr	r0, [r4, #24]
 8006412:	4302      	orrs	r2, r0
 8006414:	430a      	orrs	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006418:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800641a:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800641c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800641e:	68a2      	ldr	r2, [r4, #8]
 8006420:	6919      	ldr	r1, [r3, #16]
 8006422:	0412      	lsls	r2, r2, #16
 8006424:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006426:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006428:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	438a      	bics	r2, r1
 800642e:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006432:	397d      	subs	r1, #125	; 0x7d
 8006434:	438a      	bics	r2, r1
 8006436:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006438:	69e2      	ldr	r2, [r4, #28]
 800643a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800643c:	4302      	orrs	r2, r0
 800643e:	430a      	orrs	r2, r1
 8006440:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	069b      	lsls	r3, r3, #26
 8006446:	d40c      	bmi.n	8006462 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006448:	0020      	movs	r0, r4
 800644a:	f7ff ff81 	bl	8006350 <HAL_RTC_WaitForSynchro>
 800644e:	2800      	cmp	r0, #0
 8006450:	d007      	beq.n	8006462 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006452:	22ff      	movs	r2, #255	; 0xff
 8006454:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8006456:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006458:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800645a:	2304      	movs	r3, #4
 800645c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800645e:	77e5      	strb	r5, [r4, #31]
 8006460:	e7cb      	b.n	80063fa <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006468:	2301      	movs	r3, #1
 800646a:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800646c:	e7c6      	b.n	80063fc <HAL_RTC_Init+0x40>
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	ff8fffbf 	.word	0xff8fffbf

08006474 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006474:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8006476:	2809      	cmp	r0, #9
 8006478:	d803      	bhi.n	8006482 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	4318      	orrs	r0, r3
 800647e:	b2c0      	uxtb	r0, r0
}
 8006480:	4770      	bx	lr
    Param -= 10U;
 8006482:	380a      	subs	r0, #10
    bcdhigh++;
 8006484:	3301      	adds	r3, #1
    Param -= 10U;
 8006486:	b2c0      	uxtb	r0, r0
 8006488:	e7f5      	b.n	8006476 <RTC_ByteToBcd2+0x2>
	...

0800648c <HAL_RTC_SetTime>:
{
 800648c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800648e:	1c43      	adds	r3, r0, #1
{
 8006490:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006492:	9301      	str	r3, [sp, #4]
{
 8006494:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8006496:	7fd9      	ldrb	r1, [r3, #31]
 8006498:	2302      	movs	r3, #2
{
 800649a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800649c:	001f      	movs	r7, r3
 800649e:	2901      	cmp	r1, #1
 80064a0:	d036      	beq.n	8006510 <HAL_RTC_SetTime+0x84>
 80064a2:	2101      	movs	r1, #1
 80064a4:	1840      	adds	r0, r0, r1
 80064a6:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064a8:	18e9      	adds	r1, r5, r3
 80064aa:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064ac:	682f      	ldr	r7, [r5, #0]
 80064ae:	7820      	ldrb	r0, [r4, #0]
 80064b0:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064b2:	9102      	str	r1, [sp, #8]
 80064b4:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	d12d      	bne.n	8006516 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	0011      	movs	r1, r2
 80064be:	4019      	ands	r1, r3
 80064c0:	421a      	tst	r2, r3
 80064c2:	d100      	bne.n	80064c6 <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 80064c4:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064c6:	f7ff ffd5 	bl	8006474 <RTC_ByteToBcd2>
 80064ca:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80064cc:	0030      	movs	r0, r6
 80064ce:	f7ff ffd1 	bl	8006474 <RTC_ByteToBcd2>
 80064d2:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80064d4:	78a0      	ldrb	r0, [r4, #2]
 80064d6:	f7ff ffcd 	bl	8006474 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80064da:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064dc:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80064de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80064e0:	4303      	orrs	r3, r0
 80064e2:	0412      	lsls	r2, r2, #16
 80064e4:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80064e6:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80064e8:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064ea:	23ca      	movs	r3, #202	; 0xca
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	3b77      	subs	r3, #119	; 0x77
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80064f2:	0028      	movs	r0, r5
 80064f4:	f7ff ff46 	bl	8006384 <RTC_EnterInitMode>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	1e07      	subs	r7, r0, #0
 80064fc:	d019      	beq.n	8006532 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006502:	2304      	movs	r3, #4
 8006504:	9a02      	ldr	r2, [sp, #8]
 8006506:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006508:	2300      	movs	r3, #0
 800650a:	9a01      	ldr	r2, [sp, #4]
 800650c:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 800650e:	2701      	movs	r7, #1
}
 8006510:	0038      	movs	r0, r7
 8006512:	b005      	add	sp, #20
 8006514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	0011      	movs	r1, r2
 800651a:	4019      	ands	r1, r3
 800651c:	421a      	tst	r2, r3
 800651e:	d100      	bne.n	8006522 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8006520:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006522:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006524:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006526:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006528:	78e3      	ldrb	r3, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 800652a:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800652c:	041b      	lsls	r3, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800652e:	4306      	orrs	r6, r0
 8006530:	e7da      	b.n	80064e8 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006532:	4816      	ldr	r0, [pc, #88]	; (800658c <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006534:	4916      	ldr	r1, [pc, #88]	; (8006590 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006536:	4006      	ands	r6, r0
 8006538:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800653a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800653c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800653e:	400a      	ands	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006542:	68e2      	ldr	r2, [r4, #12]
 8006544:	6899      	ldr	r1, [r3, #8]
 8006546:	4302      	orrs	r2, r0
 8006548:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800654a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800654c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	438a      	bics	r2, r1
 8006552:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	069b      	lsls	r3, r3, #26
 8006558:	d40d      	bmi.n	8006576 <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800655a:	0028      	movs	r0, r5
 800655c:	f7ff fef8 	bl	8006350 <HAL_RTC_WaitForSynchro>
 8006560:	2800      	cmp	r0, #0
 8006562:	d008      	beq.n	8006576 <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006564:	22ff      	movs	r2, #255	; 0xff
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800656a:	2304      	movs	r3, #4
 800656c:	9a02      	ldr	r2, [sp, #8]
 800656e:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	77df      	strb	r7, [r3, #31]
 8006574:	e7cb      	b.n	800650e <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006576:	22ff      	movs	r2, #255	; 0xff
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800657c:	2301      	movs	r3, #1
 800657e:	9a02      	ldr	r2, [sp, #8]
 8006580:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006582:	2300      	movs	r3, #0
 8006584:	9a01      	ldr	r2, [sp, #4]
 8006586:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8006588:	e7c2      	b.n	8006510 <HAL_RTC_SetTime+0x84>
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	007f7f7f 	.word	0x007f7f7f
 8006590:	fffbffff 	.word	0xfffbffff

08006594 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006594:	2302      	movs	r3, #2
{
 8006596:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006598:	1c47      	adds	r7, r0, #1
{
 800659a:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 800659c:	7ff9      	ldrb	r1, [r7, #31]
{
 800659e:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80065a0:	001d      	movs	r5, r3
{
 80065a2:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80065a4:	2901      	cmp	r1, #1
 80065a6:	d036      	beq.n	8006616 <HAL_RTC_SetDate+0x82>
 80065a8:	2101      	movs	r1, #1
 80065aa:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ac:	18c1      	adds	r1, r0, r3
 80065ae:	77cb      	strb	r3, [r1, #31]
 80065b0:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 80065b2:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065b4:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 80065b6:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065b8:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80065ba:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 80065bc:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065be:	2a00      	cmp	r2, #0
 80065c0:	d14c      	bne.n	800665c <HAL_RTC_SetDate+0xc8>
 80065c2:	3210      	adds	r2, #16
 80065c4:	4213      	tst	r3, r2
 80065c6:	d002      	beq.n	80065ce <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065c8:	4393      	bics	r3, r2
 80065ca:	330a      	adds	r3, #10
 80065cc:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065ce:	f7ff ff51 	bl	8006474 <RTC_ByteToBcd2>
 80065d2:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80065d4:	7870      	ldrb	r0, [r6, #1]
 80065d6:	f7ff ff4d 	bl	8006474 <RTC_ByteToBcd2>
 80065da:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80065dc:	0028      	movs	r0, r5
 80065de:	f7ff ff49 	bl	8006474 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065e2:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80065e4:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065e6:	041d      	lsls	r5, r3, #16
 80065e8:	9b02      	ldr	r3, [sp, #8]
 80065ea:	4318      	orrs	r0, r3
 80065ec:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ee:	22ca      	movs	r2, #202	; 0xca
 80065f0:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065f2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24
 80065f6:	3a77      	subs	r2, #119	; 0x77
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065fa:	f7ff fec3 	bl	8006384 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80065fe:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	1e05      	subs	r5, r0, #0
 8006604:	d00a      	beq.n	800661c <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006606:	22ff      	movs	r2, #255	; 0xff
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800660a:	2304      	movs	r3, #4
 800660c:	9a01      	ldr	r2, [sp, #4]
 800660e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006610:	2300      	movs	r3, #0
 8006612:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8006614:	2501      	movs	r5, #1
}
 8006616:	0028      	movs	r0, r5
 8006618:	b005      	add	sp, #20
 800661a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800661c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800661e:	4812      	ldr	r0, [pc, #72]	; (8006668 <HAL_RTC_SetDate+0xd4>)
 8006620:	4006      	ands	r6, r0
 8006622:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	438a      	bics	r2, r1
 8006628:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	069b      	lsls	r3, r3, #26
 800662e:	d40c      	bmi.n	800664a <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006630:	0020      	movs	r0, r4
 8006632:	f7ff fe8d 	bl	8006350 <HAL_RTC_WaitForSynchro>
 8006636:	2800      	cmp	r0, #0
 8006638:	d007      	beq.n	800664a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800663a:	22ff      	movs	r2, #255	; 0xff
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006640:	2304      	movs	r3, #4
 8006642:	9a01      	ldr	r2, [sp, #4]
 8006644:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006646:	77fd      	strb	r5, [r7, #31]
 8006648:	e7e4      	b.n	8006614 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800664a:	22ff      	movs	r2, #255	; 0xff
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8006650:	2301      	movs	r3, #1
 8006652:	9a01      	ldr	r2, [sp, #4]
 8006654:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006656:	2300      	movs	r3, #0
 8006658:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800665a:	e7dc      	b.n	8006616 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800665c:	9a02      	ldr	r2, [sp, #8]
 800665e:	0406      	lsls	r6, r0, #16
 8006660:	4316      	orrs	r6, r2
 8006662:	4335      	orrs	r5, r6
                  (((uint32_t)sDate->Month) << 8U) | \
 8006664:	021e      	lsls	r6, r3, #8
 8006666:	e7c2      	b.n	80065ee <HAL_RTC_SetDate+0x5a>
 8006668:	00ffff3f 	.word	0x00ffff3f

0800666c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800666c:	2302      	movs	r3, #2
{
 800666e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006670:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8006672:	1c41      	adds	r1, r0, #1
 8006674:	7fce      	ldrb	r6, [r1, #31]
{
 8006676:	0004      	movs	r4, r0
 8006678:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800667a:	0018      	movs	r0, r3
 800667c:	2e01      	cmp	r6, #1
 800667e:	d100      	bne.n	8006682 <HAL_RTC_SetAlarm_IT+0x16>
 8006680:	e095      	b.n	80067ae <HAL_RTC_SetAlarm_IT+0x142>
 8006682:	3801      	subs	r0, #1
 8006684:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006686:	18e1      	adds	r1, r4, r3
 8006688:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800668a:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800668c:	6826      	ldr	r6, [r4, #0]
 800668e:	9101      	str	r1, [sp, #4]
 8006690:	7828      	ldrb	r0, [r5, #0]
 8006692:	78af      	ldrb	r7, [r5, #2]
 8006694:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8006696:	2a00      	cmp	r2, #0
 8006698:	d165      	bne.n	8006766 <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800669a:	68b2      	ldr	r2, [r6, #8]
 800669c:	0011      	movs	r1, r2
 800669e:	4019      	ands	r1, r3
 80066a0:	421a      	tst	r2, r3
 80066a2:	d100      	bne.n	80066a6 <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066a4:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066a6:	f7ff fee5 	bl	8006474 <RTC_ByteToBcd2>
 80066aa:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066ac:	9801      	ldr	r0, [sp, #4]
 80066ae:	f7ff fee1 	bl	8006474 <RTC_ByteToBcd2>
 80066b2:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80066b4:	0038      	movs	r0, r7
 80066b6:	f7ff fedd 	bl	8006474 <RTC_ByteToBcd2>
 80066ba:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066bc:	1c6b      	adds	r3, r5, #1
 80066be:	7fd8      	ldrb	r0, [r3, #31]
 80066c0:	f7ff fed8 	bl	8006474 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066c4:	696a      	ldr	r2, [r5, #20]
 80066c6:	69eb      	ldr	r3, [r5, #28]
 80066c8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80066ca:	78ea      	ldrb	r2, [r5, #3]
 80066cc:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066ce:	4313      	orrs	r3, r2
 80066d0:	431f      	orrs	r7, r3
 80066d2:	9b02      	ldr	r3, [sp, #8]
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066dc:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066de:	69aa      	ldr	r2, [r5, #24]
 80066e0:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066e2:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066e4:	4313      	orrs	r3, r2
 80066e6:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066e8:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ec:	6273      	str	r3, [r6, #36]	; 0x24
 80066ee:	3b77      	subs	r3, #119	; 0x77
 80066f0:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066f2:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066f4:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d15b      	bne.n	80067b2 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80066fa:	68b3      	ldr	r3, [r6, #8]
 80066fc:	4a41      	ldr	r2, [pc, #260]	; (8006804 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80066fe:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006700:	4013      	ands	r3, r2
 8006702:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006704:	68f2      	ldr	r2, [r6, #12]
 8006706:	4b40      	ldr	r3, [pc, #256]	; (8006808 <HAL_RTC_SetAlarm_IT+0x19c>)
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	4313      	orrs	r3, r2
 800670c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800670e:	f7fc fb0b 	bl	8002d28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006712:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006714:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006716:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	0011      	movs	r1, r2
 800671e:	4029      	ands	r1, r5
 8006720:	9103      	str	r1, [sp, #12]
 8006722:	422a      	tst	r2, r5
 8006724:	d034      	beq.n	8006790 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006726:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006728:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800672a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	6899      	ldr	r1, [r3, #8]
 8006730:	0052      	lsls	r2, r2, #1
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006736:	2280      	movs	r2, #128	; 0x80
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	4b32      	ldr	r3, [pc, #200]	; (800680c <HAL_RTC_SetAlarm_IT+0x1a0>)
 8006744:	0292      	lsls	r2, r2, #10
 8006746:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8006748:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800674a:	4311      	orrs	r1, r2
 800674c:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800674e:	6899      	ldr	r1, [r3, #8]
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006754:	22ff      	movs	r2, #255	; 0xff
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800675a:	3afe      	subs	r2, #254	; 0xfe
 800675c:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 800675e:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8006760:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8006762:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8006764:	e023      	b.n	80067ae <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006766:	68b2      	ldr	r2, [r6, #8]
 8006768:	0011      	movs	r1, r2
 800676a:	4019      	ands	r1, r3
 800676c:	421a      	tst	r2, r3
 800676e:	d100      	bne.n	8006772 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006770:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006772:	69eb      	ldr	r3, [r5, #28]
 8006774:	696a      	ldr	r2, [r5, #20]
 8006776:	0400      	lsls	r0, r0, #16
 8006778:	4313      	orrs	r3, r2
 800677a:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800677c:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800677e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006780:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006782:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006784:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006786:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006788:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800678a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800678c:	7fd8      	ldrb	r0, [r3, #31]
 800678e:	e7a6      	b.n	80066de <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006790:	f7fc faca 	bl	8002d28 <HAL_GetTick>
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	1ac0      	subs	r0, r0, r3
 8006798:	42b0      	cmp	r0, r6
 800679a:	d9bd      	bls.n	8006718 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800679c:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800679e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067a4:	1ca3      	adds	r3, r4, #2
 80067a6:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	3401      	adds	r4, #1
 80067ac:	77e3      	strb	r3, [r4, #31]
}
 80067ae:	b005      	add	sp, #20
 80067b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067b2:	68b3      	ldr	r3, [r6, #8]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067b6:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067b8:	4013      	ands	r3, r2
 80067ba:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80067bc:	68f2      	ldr	r2, [r6, #12]
 80067be:	4b15      	ldr	r3, [pc, #84]	; (8006814 <HAL_RTC_SetAlarm_IT+0x1a8>)
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80067c6:	f7fc faaf 	bl	8002d28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ca:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80067cc:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ce:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	0011      	movs	r1, r2
 80067d6:	4029      	ands	r1, r5
 80067d8:	9103      	str	r1, [sp, #12]
 80067da:	422a      	tst	r2, r5
 80067dc:	d00b      	beq.n	80067f6 <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80067de:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80067e0:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80067e2:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80067e4:	2280      	movs	r2, #128	; 0x80
 80067e6:	6899      	ldr	r1, [r3, #8]
 80067e8:	0092      	lsls	r2, r2, #2
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80067ee:	2280      	movs	r2, #128	; 0x80
 80067f0:	6899      	ldr	r1, [r3, #8]
 80067f2:	0192      	lsls	r2, r2, #6
 80067f4:	e7a2      	b.n	800673c <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067f6:	f7fc fa97 	bl	8002d28 <HAL_GetTick>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	1ac0      	subs	r0, r0, r3
 80067fe:	42b0      	cmp	r0, r6
 8006800:	d9e6      	bls.n	80067d0 <HAL_RTC_SetAlarm_IT+0x164>
 8006802:	e7cb      	b.n	800679c <HAL_RTC_SetAlarm_IT+0x130>
 8006804:	fffffeff 	.word	0xfffffeff
 8006808:	fffffe7f 	.word	0xfffffe7f
 800680c:	40010400 	.word	0x40010400
 8006810:	fffffdff 	.word	0xfffffdff
 8006814:	fffffd7f 	.word	0xfffffd7f

08006818 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006818:	0902      	lsrs	r2, r0, #4
{
 800681a:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800681c:	200a      	movs	r0, #10
 800681e:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006820:	220f      	movs	r2, #15
 8006822:	4013      	ands	r3, r2
 8006824:	18c0      	adds	r0, r0, r3
 8006826:	b2c0      	uxtb	r0, r0
}
 8006828:	4770      	bx	lr
	...

0800682c <HAL_RTC_GetTime>:
{
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006830:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006832:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006834:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006836:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006838:	690b      	ldr	r3, [r1, #16]
 800683a:	045b      	lsls	r3, r3, #17
 800683c:	0c5b      	lsrs	r3, r3, #17
 800683e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006840:	680b      	ldr	r3, [r1, #0]
 8006842:	490e      	ldr	r1, [pc, #56]	; (800687c <HAL_RTC_GetTime+0x50>)
 8006844:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006846:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006848:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800684a:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800684c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800684e:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006850:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006852:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006854:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006856:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006858:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800685a:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 800685c:	2a00      	cmp	r2, #0
 800685e:	d10a      	bne.n	8006876 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006860:	f7ff ffda 	bl	8006818 <RTC_Bcd2ToByte>
 8006864:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006866:	0030      	movs	r0, r6
 8006868:	f7ff ffd6 	bl	8006818 <RTC_Bcd2ToByte>
 800686c:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800686e:	0028      	movs	r0, r5
 8006870:	f7ff ffd2 	bl	8006818 <RTC_Bcd2ToByte>
 8006874:	70a0      	strb	r0, [r4, #2]
}
 8006876:	2000      	movs	r0, #0
 8006878:	bd70      	pop	{r4, r5, r6, pc}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	007f7f7f 	.word	0x007f7f7f

08006880 <HAL_RTC_GetDate>:
{
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006884:	6803      	ldr	r3, [r0, #0]
 8006886:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_RTC_GetDate+0x40>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800688c:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800688e:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006890:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006892:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006894:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006896:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006898:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800689a:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800689c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800689e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	d10a      	bne.n	80068ba <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80068a4:	f7ff ffb8 	bl	8006818 <RTC_Bcd2ToByte>
 80068a8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068aa:	0028      	movs	r0, r5
 80068ac:	f7ff ffb4 	bl	8006818 <RTC_Bcd2ToByte>
 80068b0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80068b2:	0030      	movs	r0, r6
 80068b4:	f7ff ffb0 	bl	8006818 <RTC_Bcd2ToByte>
 80068b8:	70a0      	strb	r0, [r4, #2]
}
 80068ba:	2000      	movs	r0, #0
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	00ffff3f 	.word	0x00ffff3f

080068c4 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068c4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80068c6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068c8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80068ca:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80068cc:	600a      	str	r2, [r1, #0]
}
 80068ce:	4770      	bx	lr

080068d0 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068d0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80068d2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80068d4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80068d6:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80068d8:	6808      	ldr	r0, [r1, #0]
}
 80068da:	4770      	bx	lr

080068dc <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068dc:	2202      	movs	r2, #2
{
 80068de:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 80068e0:	1c41      	adds	r1, r0, #1
 80068e2:	7fcc      	ldrb	r4, [r1, #31]
{
 80068e4:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80068e6:	0010      	movs	r0, r2
 80068e8:	2c01      	cmp	r4, #1
 80068ea:	d010      	beq.n	800690e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068ec:	1898      	adds	r0, r3, r2
 80068ee:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	32c8      	adds	r2, #200	; 0xc8
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
 80068f6:	3a77      	subs	r2, #119	; 0x77
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80068fa:	689c      	ldr	r4, [r3, #8]
 80068fc:	3a33      	subs	r2, #51	; 0x33
 80068fe:	4322      	orrs	r2, r4
 8006900:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006902:	22ff      	movs	r2, #255	; 0xff
 8006904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006906:	2301      	movs	r3, #1
 8006908:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800690a:	2000      	movs	r0, #0
 800690c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800690e:	bd10      	pop	{r4, pc}

08006910 <HAL_RTCEx_AlarmBEventCallback>:
 8006910:	4770      	bx	lr
	...

08006914 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006916:	001d      	movs	r5, r3
 8006918:	0017      	movs	r7, r2
 800691a:	b085      	sub	sp, #20
 800691c:	000e      	movs	r6, r1
 800691e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006920:	f7fc fa02 	bl	8002d28 <HAL_GetTick>
 8006924:	19ed      	adds	r5, r5, r7
 8006926:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006928:	f7fc f9fe 	bl	8002d28 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800692e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	015b      	lsls	r3, r3, #5
 8006934:	0d1b      	lsrs	r3, r3, #20
 8006936:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006938:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800693a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800693c:	6893      	ldr	r3, [r2, #8]
 800693e:	4033      	ands	r3, r6
 8006940:	429e      	cmp	r6, r3
 8006942:	d001      	beq.n	8006948 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8006944:	2000      	movs	r0, #0
 8006946:	e032      	b.n	80069ae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8006948:	1c7b      	adds	r3, r7, #1
 800694a:	d0f7      	beq.n	800693c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800694c:	f7fc f9ec 	bl	8002d28 <HAL_GetTick>
 8006950:	9b01      	ldr	r3, [sp, #4]
 8006952:	1ac0      	subs	r0, r0, r3
 8006954:	42a8      	cmp	r0, r5
 8006956:	d32c      	bcc.n	80069b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006958:	21e0      	movs	r1, #224	; 0xe0
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	438a      	bics	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006962:	2282      	movs	r2, #130	; 0x82
 8006964:	6861      	ldr	r1, [r4, #4]
 8006966:	0052      	lsls	r2, r2, #1
 8006968:	4291      	cmp	r1, r2
 800696a:	d10c      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	68a2      	ldr	r2, [r4, #8]
 8006970:	0209      	lsls	r1, r1, #8
 8006972:	428a      	cmp	r2, r1
 8006974:	d003      	beq.n	800697e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006976:	2180      	movs	r1, #128	; 0x80
 8006978:	00c9      	lsls	r1, r1, #3
 800697a:	428a      	cmp	r2, r1
 800697c:	d103      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800697e:	2140      	movs	r1, #64	; 0x40
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	438a      	bics	r2, r1
 8006984:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800698a:	0189      	lsls	r1, r1, #6
 800698c:	428a      	cmp	r2, r1
 800698e:	d106      	bne.n	800699e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8006990:	6819      	ldr	r1, [r3, #0]
 8006992:	480d      	ldr	r0, [pc, #52]	; (80069c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006994:	4001      	ands	r1, r0
 8006996:	6019      	str	r1, [r3, #0]
 8006998:	6819      	ldr	r1, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800699e:	0023      	movs	r3, r4
 80069a0:	2201      	movs	r2, #1
 80069a2:	3351      	adds	r3, #81	; 0x51
 80069a4:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80069a6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80069a8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80069aa:	3450      	adds	r4, #80	; 0x50
 80069ac:	7023      	strb	r3, [r4, #0]
}
 80069ae:	b005      	add	sp, #20
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80069b2:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80069b4:	1e5a      	subs	r2, r3, #1
 80069b6:	4193      	sbcs	r3, r2
 80069b8:	425b      	negs	r3, r3
 80069ba:	401d      	ands	r5, r3
      count--;
 80069bc:	9b03      	ldr	r3, [sp, #12]
 80069be:	3b01      	subs	r3, #1
 80069c0:	e7ba      	b.n	8006938 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	20000058 	.word	0x20000058
 80069c8:	ffffdfff 	.word	0xffffdfff

080069cc <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069cc:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <SPI_EndRxTxTransaction+0x5c>)
{
 80069ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d0:	0004      	movs	r4, r0
 80069d2:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	4915      	ldr	r1, [pc, #84]	; (8006a2c <SPI_EndRxTxTransaction+0x60>)
{
 80069d8:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069da:	f7f9 fbbb 	bl	8000154 <__udivsi3>
 80069de:	23fa      	movs	r3, #250	; 0xfa
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4343      	muls	r3, r0
 80069e4:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069e6:	2382      	movs	r3, #130	; 0x82
 80069e8:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069ea:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	4299      	cmp	r1, r3
 80069f0:	d10d      	bne.n	8006a0e <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f2:	0033      	movs	r3, r6
 80069f4:	002a      	movs	r2, r5
 80069f6:	2180      	movs	r1, #128	; 0x80
 80069f8:	0020      	movs	r0, r4
 80069fa:	f7ff ff8b 	bl	8006914 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d00f      	beq.n	8006a22 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a02:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006a04:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a06:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8006a0c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <SPI_EndRxTxTransaction+0x56>
      count--;
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	4213      	tst	r3, r2
 8006a20:	d1f5      	bne.n	8006a0e <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8006a22:	2000      	movs	r0, #0
 8006a24:	e7f2      	b.n	8006a0c <SPI_EndRxTxTransaction+0x40>
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	20000058 	.word	0x20000058
 8006a2c:	016e3600 	.word	0x016e3600

08006a30 <HAL_SPI_MspInit>:
}
 8006a30:	4770      	bx	lr
	...

08006a34 <HAL_SPI_Init>:
{
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006a38:	2001      	movs	r0, #1
  if (hspi == NULL)
 8006a3a:	2c00      	cmp	r4, #0
 8006a3c:	d054      	beq.n	8006ae8 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d152      	bne.n	8006aea <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a44:	2282      	movs	r2, #130	; 0x82
 8006a46:	6861      	ldr	r1, [r4, #4]
 8006a48:	0052      	lsls	r2, r2, #1
 8006a4a:	4291      	cmp	r1, r2
 8006a4c:	d000      	beq.n	8006a50 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a4e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a50:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a52:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a54:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a56:	3551      	adds	r5, #81	; 0x51
 8006a58:	782b      	ldrb	r3, [r5, #0]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006a60:	0023      	movs	r3, r4
 8006a62:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8006a64:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006a66:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006a68:	f7ff ffe2 	bl	8006a30 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a6c:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8006a6e:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006a70:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006a72:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a74:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8006a76:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a78:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006a7a:	4393      	bics	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a7e:	2382      	movs	r3, #130	; 0x82
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4033      	ands	r3, r6
 8006a84:	2684      	movs	r6, #132	; 0x84
 8006a86:	0236      	lsls	r6, r6, #8
 8006a88:	403e      	ands	r6, r7
 8006a8a:	4333      	orrs	r3, r6
 8006a8c:	2680      	movs	r6, #128	; 0x80
 8006a8e:	68e7      	ldr	r7, [r4, #12]
 8006a90:	0136      	lsls	r6, r6, #4
 8006a92:	403e      	ands	r6, r7
 8006a94:	4333      	orrs	r3, r6
 8006a96:	6926      	ldr	r6, [r4, #16]
 8006a98:	69a2      	ldr	r2, [r4, #24]
 8006a9a:	4030      	ands	r0, r6
 8006a9c:	2601      	movs	r6, #1
 8006a9e:	4303      	orrs	r3, r0
 8006aa0:	6960      	ldr	r0, [r4, #20]
 8006aa2:	69e7      	ldr	r7, [r4, #28]
 8006aa4:	4030      	ands	r0, r6
 8006aa6:	4303      	orrs	r3, r0
 8006aa8:	2080      	movs	r0, #128	; 0x80
 8006aaa:	0080      	lsls	r0, r0, #2
 8006aac:	4010      	ands	r0, r2
 8006aae:	4303      	orrs	r3, r0
 8006ab0:	2038      	movs	r0, #56	; 0x38
 8006ab2:	4038      	ands	r0, r7
 8006ab4:	4303      	orrs	r3, r0
 8006ab6:	2080      	movs	r0, #128	; 0x80
 8006ab8:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006aba:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006abc:	4038      	ands	r0, r7
 8006abe:	4303      	orrs	r3, r0
 8006ac0:	2080      	movs	r0, #128	; 0x80
 8006ac2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006ac4:	0180      	lsls	r0, r0, #6
 8006ac6:	4038      	ands	r0, r7
 8006ac8:	4303      	orrs	r3, r0
 8006aca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006acc:	2304      	movs	r3, #4
 8006ace:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ad0:	401a      	ands	r2, r3
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ad6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006adc:	69cb      	ldr	r3, [r1, #28]
 8006ade:	4a05      	ldr	r2, [pc, #20]	; (8006af4 <HAL_SPI_Init+0xc0>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae6:	702e      	strb	r6, [r5, #0]
}
 8006ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006aea:	2300      	movs	r3, #0
 8006aec:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aee:	6163      	str	r3, [r4, #20]
 8006af0:	e7ae      	b.n	8006a50 <HAL_SPI_Init+0x1c>
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	fffff7ff 	.word	0xfffff7ff

08006af8 <HAL_SPI_TransmitReceive>:
{
 8006af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afa:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006afc:	0003      	movs	r3, r0
 8006afe:	3350      	adds	r3, #80	; 0x50
{
 8006b00:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8006b02:	781a      	ldrb	r2, [r3, #0]
{
 8006b04:	0004      	movs	r4, r0
 8006b06:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8006b08:	2002      	movs	r0, #2
{
 8006b0a:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006b0c:	2a01      	cmp	r2, #1
 8006b0e:	d100      	bne.n	8006b12 <HAL_SPI_TransmitReceive+0x1a>
 8006b10:	e092      	b.n	8006c38 <HAL_SPI_TransmitReceive+0x140>
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006b16:	f7fc f907 	bl	8002d28 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006b1a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006b1c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8006b1e:	3351      	adds	r3, #81	; 0x51
 8006b20:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006b22:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006b24:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d00a      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x48>
 8006b2a:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8006b2c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	4299      	cmp	r1, r3
 8006b32:	d000      	beq.n	8006b36 <HAL_SPI_TransmitReceive+0x3e>
 8006b34:	e079      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d176      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
 8006b3c:	2a04      	cmp	r2, #4
 8006b3e:	d174      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8006b40:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	d071      	beq.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	d06f      	beq.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d06d      	beq.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b4e:	0023      	movs	r3, r4
 8006b50:	3351      	adds	r3, #81	; 0x51
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	2a04      	cmp	r2, #4
 8006b56:	d001      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b58:	2205      	movs	r2, #5
 8006b5a:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5c:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b5e:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b60:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006b62:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b64:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b66:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006b68:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006b6a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b6c:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b6e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b70:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b72:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b74:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b76:	4210      	tst	r0, r2
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	4302      	orrs	r2, r0
 8006b7e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	68e0      	ldr	r0, [r4, #12]
 8006b84:	0112      	lsls	r2, r2, #4
 8006b86:	4290      	cmp	r0, r2
 8006b88:	d158      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8a:	2900      	cmp	r1, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_SPI_TransmitReceive+0x9a>
 8006b8e:	2e01      	cmp	r6, #1
 8006b90:	d107      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b92:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b94:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b96:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006b98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b9a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006ba2:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ba4:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ba6:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10e      	bne.n	8006bcc <HAL_SPI_TransmitReceive+0xd4>
 8006bae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb4:	0020      	movs	r0, r4
 8006bb6:	9a01      	ldr	r2, [sp, #4]
 8006bb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bba:	f7ff ff07 	bl	80069cc <SPI_EndRxTxTransaction>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d100      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0xcc>
 8006bc2:	e088      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x1de>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc4:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8006bc6:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc8:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8006bca:	e02e      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bcc:	6821      	ldr	r1, [r4, #0]
 8006bce:	688b      	ldr	r3, [r1, #8]
 8006bd0:	423b      	tst	r3, r7
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0xfa>
 8006bd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0xfa>
 8006bda:	2d01      	cmp	r5, #1
 8006bdc:	d109      	bne.n	8006bf2 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8006bde:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006be2:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be4:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be6:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf2:	688b      	ldr	r3, [r1, #8]
 8006bf4:	001a      	movs	r2, r3
 8006bf6:	4032      	ands	r2, r6
 8006bf8:	4233      	tst	r3, r6
 8006bfa:	d00c      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x11e>
 8006bfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8006c02:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c04:	68c9      	ldr	r1, [r1, #12]
 8006c06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c08:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006c0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c16:	f7fc f887 	bl	8002d28 <HAL_GetTick>
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	1ac0      	subs	r0, r0, r3
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	4298      	cmp	r0, r3
 8006c22:	d3c1      	bcc.n	8006ba8 <HAL_SPI_TransmitReceive+0xb0>
 8006c24:	3301      	adds	r3, #1
 8006c26:	d0bf      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8006c28:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	0023      	movs	r3, r4
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	3351      	adds	r3, #81	; 0x51
 8006c30:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006c32:	2300      	movs	r3, #0
 8006c34:	3450      	adds	r4, #80	; 0x50
 8006c36:	7023      	strb	r3, [r4, #0]
}
 8006c38:	b005      	add	sp, #20
 8006c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x14c>
 8006c40:	2e01      	cmp	r6, #1
 8006c42:	d108      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c44:	782a      	ldrb	r2, [r5, #0]
 8006c46:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006c4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006c56:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c58:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c5a:	002e      	movs	r6, r5
 8006c5c:	e030      	b.n	8006cc0 <HAL_SPI_TransmitReceive+0x1c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	423a      	tst	r2, r7
 8006c64:	d00f      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x18e>
 8006c66:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d00c      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x18e>
 8006c6c:	2d01      	cmp	r5, #1
 8006c6e:	d10a      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x18e>
        txallowed = 0U;
 8006c70:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006c7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	6899      	ldr	r1, [r3, #8]
 8006c8a:	000a      	movs	r2, r1
 8006c8c:	4032      	ands	r2, r6
 8006c8e:	4231      	tst	r1, r6
 8006c90:	d00d      	beq.n	8006cae <HAL_SPI_TransmitReceive+0x1b6>
 8006c92:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_SPI_TransmitReceive+0x1b6>
        txallowed = 1U;
 8006c98:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c9e:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006ca6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cae:	f7fc f83b 	bl	8002d28 <HAL_GetTick>
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	1ac0      	subs	r0, r0, r3
 8006cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb8:	4298      	cmp	r0, r3
 8006cba:	d308      	bcc.n	8006cce <HAL_SPI_TransmitReceive+0x1d6>
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	d1b3      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x130>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1cb      	bne.n	8006c5e <HAL_SPI_TransmitReceive+0x166>
 8006cc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1c8      	bne.n	8006c5e <HAL_SPI_TransmitReceive+0x166>
 8006ccc:	e772      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0xbc>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f5      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x1c8>
 8006cd4:	e7a8      	b.n	8006c28 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1a6      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	9003      	str	r0, [sp, #12]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	9203      	str	r2, [sp, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	e79e      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x132>

08006cec <HAL_SPI_GetState>:
  return hspi->State;
 8006cec:	3051      	adds	r0, #81	; 0x51
 8006cee:	7800      	ldrb	r0, [r0, #0]
 8006cf0:	b2c0      	uxtb	r0, r0
}
 8006cf2:	4770      	bx	lr

08006cf4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf4:	6803      	ldr	r3, [r0, #0]
 8006cf6:	490b      	ldr	r1, [pc, #44]	; (8006d24 <UART_EndRxTransfer+0x30>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	3123      	adds	r1, #35	; 0x23
 8006d02:	31ff      	adds	r1, #255	; 0xff
 8006d04:	438a      	bics	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006d0a:	428a      	cmp	r2, r1
 8006d0c:	d103      	bne.n	8006d16 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	310f      	adds	r1, #15
 8006d12:	438a      	bics	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d16:	2320      	movs	r3, #32
 8006d18:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d1e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8006d20:	4770      	bx	lr
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	fffffedf 	.word	0xfffffedf

08006d28 <HAL_UART_Transmit_DMA>:
{
 8006d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d2a:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006d2c:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8006d2e:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006d30:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006d32:	2a20      	cmp	r2, #32
 8006d34:	d13a      	bne.n	8006dac <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 8006d36:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d037      	beq.n	8006dac <HAL_UART_Transmit_DMA+0x84>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d035      	beq.n	8006dac <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d40:	2280      	movs	r2, #128	; 0x80
 8006d42:	68a0      	ldr	r0, [r4, #8]
 8006d44:	0152      	lsls	r2, r2, #5
 8006d46:	4290      	cmp	r0, r2
 8006d48:	d106      	bne.n	8006d58 <HAL_UART_Transmit_DMA+0x30>
 8006d4a:	6922      	ldr	r2, [r4, #16]
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	d103      	bne.n	8006d58 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d50:	3201      	adds	r2, #1
      return HAL_ERROR;
 8006d52:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d54:	4211      	tst	r1, r2
 8006d56:	d129      	bne.n	8006dac <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8006d58:	0025      	movs	r5, r4
 8006d5a:	3574      	adds	r5, #116	; 0x74
 8006d5c:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8006d5e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006d60:	2a01      	cmp	r2, #1
 8006d62:	d023      	beq.n	8006dac <HAL_UART_Transmit_DMA+0x84>
 8006d64:	2201      	movs	r2, #1
 8006d66:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8006d68:	0022      	movs	r2, r4
 8006d6a:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8006d6c:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8006d70:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006d72:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d74:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006d76:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	1d27      	adds	r7, r4, #4
 8006d7a:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8006d7e:	42b0      	cmp	r0, r6
 8006d80:	d015      	beq.n	8006dae <HAL_UART_Transmit_DMA+0x86>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d82:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006d84:	6386      	str	r6, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d86:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d88:	4a0e      	ldr	r2, [pc, #56]	; (8006dc4 <HAL_UART_Transmit_DMA+0x9c>)
 8006d8a:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d8c:	4a0e      	ldr	r2, [pc, #56]	; (8006dc8 <HAL_UART_Transmit_DMA+0xa0>)
 8006d8e:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d90:	4a0e      	ldr	r2, [pc, #56]	; (8006dcc <HAL_UART_Transmit_DMA+0xa4>)
 8006d92:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d94:	9a01      	ldr	r2, [sp, #4]
 8006d96:	3228      	adds	r2, #40	; 0x28
 8006d98:	f7fd fe60 	bl	8004a5c <HAL_DMA_Start_IT>
 8006d9c:	42b0      	cmp	r0, r6
 8006d9e:	d006      	beq.n	8006dae <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006da0:	2310      	movs	r3, #16
        return HAL_ERROR;
 8006da2:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006da4:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006da6:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8006da8:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8006daa:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006dac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006dae:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006db0:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006db2:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8006db4:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006db6:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006db8:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dba:	6899      	ldr	r1, [r3, #8]
 8006dbc:	1892      	adds	r2, r2, r2
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006dc2:	e7f3      	b.n	8006dac <HAL_UART_Transmit_DMA+0x84>
 8006dc4:	08006dd1 	.word	0x08006dd1
 8006dc8:	08006e07 	.word	0x08006e07
 8006dcc:	08006e13 	.word	0x08006e13

08006dd0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd0:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dd2:	681b      	ldr	r3, [r3, #0]
{
 8006dd4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	2320      	movs	r3, #32
 8006dda:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ddc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006dde:	4019      	ands	r1, r3
 8006de0:	421a      	tst	r2, r3
 8006de2:	d10c      	bne.n	8006dfe <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8006de4:	0003      	movs	r3, r0
 8006de6:	3352      	adds	r3, #82	; 0x52
 8006de8:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	6803      	ldr	r3, [r0, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	438a      	bics	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006df4:	2240      	movs	r2, #64	; 0x40
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dfc:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006dfe:	f7fd f84f 	bl	8003ea0 <HAL_UART_TxCpltCallback>
}
 8006e02:	e7fb      	b.n	8006dfc <UART_DMATransmitCplt+0x2c>

08006e04 <HAL_UART_TxHalfCpltCallback>:
 8006e04:	4770      	bx	lr

08006e06 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e06:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e08:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006e0a:	f7ff fffb 	bl	8006e04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0e:	bd10      	pop	{r4, pc}

08006e10 <HAL_UART_ErrorCallback>:
 8006e10:	4770      	bx	lr

08006e12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e12:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e14:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e16:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e18:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e1a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e1c:	6898      	ldr	r0, [r3, #8]
 8006e1e:	0600      	lsls	r0, r0, #24
 8006e20:	d50b      	bpl.n	8006e3a <UART_DMAError+0x28>
 8006e22:	2a21      	cmp	r2, #33	; 0x21
 8006e24:	d109      	bne.n	8006e3a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e26:	0022      	movs	r2, r4
 8006e28:	2000      	movs	r0, #0
 8006e2a:	3252      	adds	r2, #82	; 0x52
 8006e2c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	30c0      	adds	r0, #192	; 0xc0
 8006e32:	4382      	bics	r2, r0
 8006e34:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e36:	2220      	movs	r2, #32
 8006e38:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	065b      	lsls	r3, r3, #25
 8006e3e:	d508      	bpl.n	8006e52 <UART_DMAError+0x40>
 8006e40:	2922      	cmp	r1, #34	; 0x22
 8006e42:	d106      	bne.n	8006e52 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e44:	0023      	movs	r3, r4
 8006e46:	2200      	movs	r2, #0
 8006e48:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8006e4a:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006e4c:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006e4e:	f7ff ff51 	bl	8006cf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e52:	2310      	movs	r3, #16
 8006e54:	1d22      	adds	r2, r4, #4
 8006e56:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e58:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006e5e:	f7ff ffd7 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e62:	bd10      	pop	{r4, pc}

08006e64 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e64:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	0002      	movs	r2, r0
{
 8006e6a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8006e6c:	325a      	adds	r2, #90	; 0x5a
 8006e6e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006e70:	3a08      	subs	r2, #8
 8006e72:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e74:	f7ff ffcc 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e78:	bd10      	pop	{r4, pc}
	...

08006e7c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e7c:	6803      	ldr	r3, [r0, #0]
{
 8006e7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e80:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e82:	4a85      	ldr	r2, [pc, #532]	; (8007098 <HAL_UART_IRQHandler+0x21c>)
{
 8006e84:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e86:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e88:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8006e8a:	4211      	tst	r1, r2
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e8e:	2220      	movs	r2, #32
 8006e90:	4211      	tst	r1, r2
 8006e92:	d100      	bne.n	8006e96 <HAL_UART_IRQHandler+0x1a>
 8006e94:	e076      	b.n	8006f84 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e96:	4210      	tst	r0, r2
 8006e98:	d100      	bne.n	8006e9c <HAL_UART_IRQHandler+0x20>
 8006e9a:	e073      	b.n	8006f84 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8006e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8006e9e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d165      	bne.n	8006f70 <HAL_UART_IRQHandler+0xf4>
 8006ea4:	e065      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006eaa:	4d7c      	ldr	r5, [pc, #496]	; (800709c <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006eac:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006eae:	4005      	ands	r5, r0
 8006eb0:	433d      	orrs	r5, r7
 8006eb2:	d067      	beq.n	8006f84 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eb4:	1d25      	adds	r5, r4, #4
 8006eb6:	4211      	tst	r1, r2
 8006eb8:	d005      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x4a>
 8006eba:	05c6      	lsls	r6, r0, #23
 8006ebc:	d503      	bpl.n	8006ec6 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ebe:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec0:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006ec2:	4332      	orrs	r2, r6
 8006ec4:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	4211      	tst	r1, r2
 8006eca:	d006      	beq.n	8006eda <HAL_UART_IRQHandler+0x5e>
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	d004      	beq.n	8006eda <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ed0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ed2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006ed4:	1892      	adds	r2, r2, r2
 8006ed6:	4332      	orrs	r2, r6
 8006ed8:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eda:	2204      	movs	r2, #4
 8006edc:	4211      	tst	r1, r2
 8006ede:	d006      	beq.n	8006eee <HAL_UART_IRQHandler+0x72>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ee6:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006ee8:	3a02      	subs	r2, #2
 8006eea:	4332      	orrs	r2, r6
 8006eec:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006eee:	2208      	movs	r2, #8
 8006ef0:	4211      	tst	r1, r2
 8006ef2:	d007      	beq.n	8006f04 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef4:	2620      	movs	r6, #32
 8006ef6:	4006      	ands	r6, r0
 8006ef8:	433e      	orrs	r6, r7
 8006efa:	d003      	beq.n	8006f04 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006efc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006efe:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006f00:	4332      	orrs	r2, r6
 8006f02:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	0112      	lsls	r2, r2, #4
 8006f08:	4211      	tst	r1, r2
 8006f0a:	d006      	beq.n	8006f1a <HAL_UART_IRQHandler+0x9e>
 8006f0c:	0146      	lsls	r6, r0, #5
 8006f0e:	d504      	bpl.n	8006f1a <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f10:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f12:	2320      	movs	r3, #32
 8006f14:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8006f16:	4313      	orrs	r3, r2
 8006f18:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f1a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d028      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f20:	2320      	movs	r3, #32
 8006f22:	4219      	tst	r1, r3
 8006f24:	d006      	beq.n	8006f34 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f26:	4218      	tst	r0, r3
 8006f28:	d004      	beq.n	8006f34 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8006f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8006f30:	0020      	movs	r0, r4
 8006f32:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f34:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8006f36:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f38:	2740      	movs	r7, #64	; 0x40
 8006f3a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f3c:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f3e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f40:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006f42:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f44:	431e      	orrs	r6, r3
 8006f46:	d019      	beq.n	8006f7c <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8006f48:	f7ff fed4 	bl	8006cf4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	423a      	tst	r2, r7
 8006f52:	d00f      	beq.n	8006f74 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f54:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006f56:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f58:	43ba      	bics	r2, r7
 8006f5a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d009      	beq.n	8006f74 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f60:	4b4f      	ldr	r3, [pc, #316]	; (80070a0 <HAL_UART_IRQHandler+0x224>)
 8006f62:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f64:	f7fd fdda 	bl	8004b1c <HAL_DMA_Abort_IT>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f6c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006f6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f70:	4798      	blx	r3
}
 8006f72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006f74:	0020      	movs	r0, r4
 8006f76:	f7ff ff4b 	bl	8006e10 <HAL_UART_ErrorCallback>
 8006f7a:	e7fa      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8006f7c:	f7ff ff48 	bl	8006e10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	67ee      	str	r6, [r5, #124]	; 0x7c
 8006f82:	e7f6      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006f86:	2d01      	cmp	r5, #1
 8006f88:	d161      	bne.n	800704e <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006f8a:	2210      	movs	r2, #16
 8006f8c:	4211      	tst	r1, r2
 8006f8e:	d05e      	beq.n	800704e <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006f90:	4210      	tst	r0, r2
 8006f92:	d05c      	beq.n	800704e <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f94:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	2640      	movs	r6, #64	; 0x40
 8006f9a:	000f      	movs	r7, r1
 8006f9c:	4037      	ands	r7, r6
 8006f9e:	4231      	tst	r1, r6
 8006fa0:	d038      	beq.n	8007014 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fa2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006fa4:	680f      	ldr	r7, [r1, #0]
 8006fa6:	9100      	str	r1, [sp, #0]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d0e0      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006fb0:	2058      	movs	r0, #88	; 0x58
 8006fb2:	4684      	mov	ip, r0
 8006fb4:	44a4      	add	ip, r4
 8006fb6:	4660      	mov	r0, ip
 8006fb8:	8800      	ldrh	r0, [r0, #0]
 8006fba:	4288      	cmp	r0, r1
 8006fbc:	d9d9      	bls.n	8006f72 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8006fbe:	205a      	movs	r0, #90	; 0x5a
 8006fc0:	4684      	mov	ip, r0
 8006fc2:	44a4      	add	ip, r4
 8006fc4:	4660      	mov	r0, ip
 8006fc6:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fc8:	683f      	ldr	r7, [r7, #0]
 8006fca:	2120      	movs	r1, #32
 8006fcc:	0038      	movs	r0, r7
 8006fce:	4008      	ands	r0, r1
 8006fd0:	9001      	str	r0, [sp, #4]
 8006fd2:	420f      	tst	r7, r1
 8006fd4:	d112      	bne.n	8006ffc <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd6:	681f      	ldr	r7, [r3, #0]
 8006fd8:	4832      	ldr	r0, [pc, #200]	; (80070a4 <HAL_UART_IRQHandler+0x228>)
 8006fda:	4007      	ands	r7, r0
 8006fdc:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fe0:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	43af      	bics	r7, r5
 8006fe4:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	689d      	ldr	r5, [r3, #8]
 8006fe8:	43b5      	bics	r5, r6
 8006fea:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8006fec:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fee:	9901      	ldr	r1, [sp, #4]
 8006ff0:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	4391      	bics	r1, r2
 8006ff6:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ff8:	f7fd fd70 	bl	8004adc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ffc:	0023      	movs	r3, r4
 8006ffe:	0022      	movs	r2, r4
 8007000:	335a      	adds	r3, #90	; 0x5a
 8007002:	3258      	adds	r2, #88	; 0x58
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	8811      	ldrh	r1, [r2, #0]
 8007008:	1ac9      	subs	r1, r1, r3
 800700a:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800700c:	0020      	movs	r0, r4
 800700e:	f7fc ff6b 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
 8007012:	e7ae      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007014:	0026      	movs	r6, r4
 8007016:	365a      	adds	r6, #90	; 0x5a
 8007018:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 800701a:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800701c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800701e:	2900      	cmp	r1, #0
 8007020:	d0a7      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007022:	0021      	movs	r1, r4
 8007024:	3158      	adds	r1, #88	; 0x58
 8007026:	8809      	ldrh	r1, [r1, #0]
 8007028:	1a09      	subs	r1, r1, r0
 800702a:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 800702c:	2900      	cmp	r1, #0
 800702e:	d0a0      	beq.n	8006f72 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	4e1d      	ldr	r6, [pc, #116]	; (80070a8 <HAL_UART_IRQHandler+0x22c>)
 8007034:	4030      	ands	r0, r6
 8007036:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	6898      	ldr	r0, [r3, #8]
 800703a:	43a8      	bics	r0, r5
 800703c:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800703e:	2020      	movs	r0, #32
 8007040:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8007046:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007048:	4390      	bics	r0, r2
 800704a:	6018      	str	r0, [r3, #0]
 800704c:	e7de      	b.n	800700c <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800704e:	2280      	movs	r2, #128	; 0x80
 8007050:	0352      	lsls	r2, r2, #13
 8007052:	4211      	tst	r1, r2
 8007054:	d006      	beq.n	8007064 <HAL_UART_IRQHandler+0x1e8>
 8007056:	0275      	lsls	r5, r6, #9
 8007058:	d504      	bpl.n	8007064 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 800705a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800705c:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800705e:	f000 fb45 	bl	80076ec <HAL_UARTEx_WakeupCallback>
    return;
 8007062:	e786      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007064:	2280      	movs	r2, #128	; 0x80
 8007066:	4211      	tst	r1, r2
 8007068:	d003      	beq.n	8007072 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800706a:	4210      	tst	r0, r2
 800706c:	d001      	beq.n	8007072 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800706e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007070:	e715      	b.n	8006e9e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007072:	2540      	movs	r5, #64	; 0x40
 8007074:	4229      	tst	r1, r5
 8007076:	d100      	bne.n	800707a <HAL_UART_IRQHandler+0x1fe>
 8007078:	e77b      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
 800707a:	4228      	tst	r0, r5
 800707c:	d100      	bne.n	8007080 <HAL_UART_IRQHandler+0x204>
 800707e:	e778      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007080:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007082:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007084:	43aa      	bics	r2, r5
 8007086:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007088:	2320      	movs	r3, #32
 800708a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8007090:	f7fc ff06 	bl	8003ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007094:	e76d      	b.n	8006f72 <HAL_UART_IRQHandler+0xf6>
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	0000080f 	.word	0x0000080f
 800709c:	04000120 	.word	0x04000120
 80070a0:	08006e65 	.word	0x08006e65
 80070a4:	fffffeff 	.word	0xfffffeff
 80070a8:	fffffedf 	.word	0xfffffedf

080070ac <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ac:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80070ae:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070b0:	6803      	ldr	r3, [r0, #0]
{
 80070b2:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b4:	2a22      	cmp	r2, #34	; 0x22
 80070b6:	d134      	bne.n	8007122 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 80070b8:	0002      	movs	r2, r0
 80070ba:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070be:	8812      	ldrh	r2, [r2, #0]
 80070c0:	4013      	ands	r3, r2
 80070c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80070c4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80070c6:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 80070c8:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80070ca:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80070cc:	3301      	adds	r3, #1
 80070ce:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80070d0:	8813      	ldrh	r3, [r2, #0]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80070d8:	8813      	ldrh	r3, [r2, #0]
 80070da:	b299      	uxth	r1, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d11b      	bne.n	8007118 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	4812      	ldr	r0, [pc, #72]	; (800712c <UART_RxISR_8BIT+0x80>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4002      	ands	r2, r0
 80070e8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	3023      	adds	r0, #35	; 0x23
 80070ee:	30ff      	adds	r0, #255	; 0xff
 80070f0:	4382      	bics	r2, r0
 80070f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070f4:	2220      	movs	r2, #32
 80070f6:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f8:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80070fa:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fc:	4282      	cmp	r2, r0
 80070fe:	d10c      	bne.n	800711a <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007100:	2110      	movs	r1, #16
 8007102:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007104:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007106:	438a      	bics	r2, r1
 8007108:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800710a:	0023      	movs	r3, r4
 800710c:	3358      	adds	r3, #88	; 0x58
 800710e:	8819      	ldrh	r1, [r3, #0]
 8007110:	f7fc feea 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007114:	2300      	movs	r3, #0
 8007116:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007118:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800711a:	0020      	movs	r0, r4
 800711c:	f7fc fec8 	bl	8003eb0 <HAL_UART_RxCpltCallback>
 8007120:	e7f8      	b.n	8007114 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007122:	2208      	movs	r2, #8
 8007124:	6999      	ldr	r1, [r3, #24]
 8007126:	430a      	orrs	r2, r1
 8007128:	619a      	str	r2, [r3, #24]
}
 800712a:	e7f5      	b.n	8007118 <UART_RxISR_8BIT+0x6c>
 800712c:	fffffedf 	.word	0xfffffedf

08007130 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007130:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8007132:	b510      	push	{r4, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007134:	6803      	ldr	r3, [r0, #0]
{
 8007136:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007138:	2a22      	cmp	r2, #34	; 0x22
 800713a:	d131      	bne.n	80071a0 <UART_RxISR_16BIT+0x70>
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800713c:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 800713e:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007140:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8007142:	8800      	ldrh	r0, [r0, #0]
 8007144:	4001      	ands	r1, r0
 8007146:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8007148:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 800714a:	3202      	adds	r2, #2
    huart->RxXferCount--;
 800714c:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 800714e:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8007150:	880a      	ldrh	r2, [r1, #0]
 8007152:	3a01      	subs	r2, #1
 8007154:	b292      	uxth	r2, r2
 8007156:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8007158:	880a      	ldrh	r2, [r1, #0]
 800715a:	b291      	uxth	r1, r2
 800715c:	2a00      	cmp	r2, #0
 800715e:	d11a      	bne.n	8007196 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4812      	ldr	r0, [pc, #72]	; (80071ac <UART_RxISR_16BIT+0x7c>)
 8007164:	4002      	ands	r2, r0
 8007166:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	3023      	adds	r0, #35	; 0x23
 800716c:	30ff      	adds	r0, #255	; 0xff
 800716e:	4382      	bics	r2, r0
 8007170:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007172:	2220      	movs	r2, #32
 8007174:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007176:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8007178:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800717a:	4282      	cmp	r2, r0
 800717c:	d10c      	bne.n	8007198 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	2110      	movs	r1, #16
 8007180:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007182:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007184:	438a      	bics	r2, r1
 8007186:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007188:	0023      	movs	r3, r4
 800718a:	3358      	adds	r3, #88	; 0x58
 800718c:	8819      	ldrh	r1, [r3, #0]
 800718e:	f7fc feab 	bl	8003ee8 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	2300      	movs	r3, #0
 8007194:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007196:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8007198:	0020      	movs	r0, r4
 800719a:	f7fc fe89 	bl	8003eb0 <HAL_UART_RxCpltCallback>
 800719e:	e7f8      	b.n	8007192 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a0:	2208      	movs	r2, #8
 80071a2:	6999      	ldr	r1, [r3, #24]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	619a      	str	r2, [r3, #24]
}
 80071a8:	e7f5      	b.n	8007196 <UART_RxISR_16BIT+0x66>
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	fffffedf 	.word	0xfffffedf

080071b0 <UART_SetConfig>:
{
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071b4:	6925      	ldr	r5, [r4, #16]
 80071b6:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80071b8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ba:	4329      	orrs	r1, r5
 80071bc:	6965      	ldr	r5, [r4, #20]
 80071be:	69c3      	ldr	r3, [r0, #28]
 80071c0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c2:	6810      	ldr	r0, [r2, #0]
 80071c4:	4d72      	ldr	r5, [pc, #456]	; (8007390 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c8:	4028      	ands	r0, r5
 80071ca:	4301      	orrs	r1, r0
 80071cc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ce:	6851      	ldr	r1, [r2, #4]
 80071d0:	4870      	ldr	r0, [pc, #448]	; (8007394 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071d2:	4d71      	ldr	r5, [pc, #452]	; (8007398 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d4:	4001      	ands	r1, r0
 80071d6:	68e0      	ldr	r0, [r4, #12]
 80071d8:	4301      	orrs	r1, r0
 80071da:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071dc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071de:	42aa      	cmp	r2, r5
 80071e0:	d001      	beq.n	80071e6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80071e2:	6a21      	ldr	r1, [r4, #32]
 80071e4:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071e6:	6891      	ldr	r1, [r2, #8]
 80071e8:	4e6c      	ldr	r6, [pc, #432]	; (800739c <UART_SetConfig+0x1ec>)
 80071ea:	4031      	ands	r1, r6
 80071ec:	4301      	orrs	r1, r0
 80071ee:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071f0:	496b      	ldr	r1, [pc, #428]	; (80073a0 <UART_SetConfig+0x1f0>)
 80071f2:	428a      	cmp	r2, r1
 80071f4:	d10f      	bne.n	8007216 <UART_SetConfig+0x66>
 80071f6:	2103      	movs	r1, #3
 80071f8:	4a6a      	ldr	r2, [pc, #424]	; (80073a4 <UART_SetConfig+0x1f4>)
 80071fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071fc:	400a      	ands	r2, r1
 80071fe:	3a01      	subs	r2, #1
 8007200:	4969      	ldr	r1, [pc, #420]	; (80073a8 <UART_SetConfig+0x1f8>)
 8007202:	2a02      	cmp	r2, #2
 8007204:	d90f      	bls.n	8007226 <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007206:	2280      	movs	r2, #128	; 0x80
 8007208:	0212      	lsls	r2, r2, #8
 800720a:	4293      	cmp	r3, r2
 800720c:	d100      	bne.n	8007210 <UART_SetConfig+0x60>
 800720e:	e069      	b.n	80072e4 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007210:	f7fe ff38 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
        break;
 8007214:	e09c      	b.n	8007350 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007216:	4965      	ldr	r1, [pc, #404]	; (80073ac <UART_SetConfig+0x1fc>)
 8007218:	428a      	cmp	r2, r1
 800721a:	d113      	bne.n	8007244 <UART_SetConfig+0x94>
 800721c:	210c      	movs	r1, #12
 800721e:	4a61      	ldr	r2, [pc, #388]	; (80073a4 <UART_SetConfig+0x1f4>)
 8007220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007222:	400a      	ands	r2, r1
 8007224:	4962      	ldr	r1, [pc, #392]	; (80073b0 <UART_SetConfig+0x200>)
 8007226:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007228:	2280      	movs	r2, #128	; 0x80
 800722a:	0212      	lsls	r2, r2, #8
 800722c:	4293      	cmp	r3, r2
 800722e:	d000      	beq.n	8007232 <UART_SetConfig+0x82>
 8007230:	e07f      	b.n	8007332 <UART_SetConfig+0x182>
    switch (clocksource)
 8007232:	2808      	cmp	r0, #8
 8007234:	d818      	bhi.n	8007268 <UART_SetConfig+0xb8>
 8007236:	f7f8 ff6f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800723a:	5550      	.short	0x5550
 800723c:	17791758 	.word	0x17791758
 8007240:	1717      	.short	0x1717
 8007242:	63          	.byte	0x63
 8007243:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007244:	42aa      	cmp	r2, r5
 8007246:	d10f      	bne.n	8007268 <UART_SetConfig+0xb8>
 8007248:	21c0      	movs	r1, #192	; 0xc0
 800724a:	2080      	movs	r0, #128	; 0x80
 800724c:	4a55      	ldr	r2, [pc, #340]	; (80073a4 <UART_SetConfig+0x1f4>)
 800724e:	0109      	lsls	r1, r1, #4
 8007250:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007252:	0100      	lsls	r0, r0, #4
 8007254:	400b      	ands	r3, r1
 8007256:	4283      	cmp	r3, r0
 8007258:	d016      	beq.n	8007288 <UART_SetConfig+0xd8>
 800725a:	d807      	bhi.n	800726c <UART_SetConfig+0xbc>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <UART_SetConfig+0xc6>
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	00d2      	lsls	r2, r2, #3
 8007264:	4293      	cmp	r3, r2
 8007266:	d035      	beq.n	80072d4 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007268:	2001      	movs	r0, #1
 800726a:	e009      	b.n	8007280 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800726c:	428b      	cmp	r3, r1
 800726e:	d1fb      	bne.n	8007268 <UART_SetConfig+0xb8>
 8007270:	2080      	movs	r0, #128	; 0x80
 8007272:	0200      	lsls	r0, r0, #8
 8007274:	e012      	b.n	800729c <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007276:	f7fe fef5 	bl	8006064 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800727a:	2800      	cmp	r0, #0
 800727c:	d10e      	bne.n	800729c <UART_SetConfig+0xec>
 800727e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8007280:	2300      	movs	r3, #0
 8007282:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8007284:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007288:	2310      	movs	r3, #16
 800728a:	6810      	ldr	r0, [r2, #0]
 800728c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800728e:	4243      	negs	r3, r0
 8007290:	4158      	adcs	r0, r3
 8007292:	4b48      	ldr	r3, [pc, #288]	; (80073b4 <UART_SetConfig+0x204>)
 8007294:	4240      	negs	r0, r0
 8007296:	4018      	ands	r0, r3
 8007298:	4b47      	ldr	r3, [pc, #284]	; (80073b8 <UART_SetConfig+0x208>)
 800729a:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800729c:	2203      	movs	r2, #3
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	435a      	muls	r2, r3
 80072a2:	4282      	cmp	r2, r0
 80072a4:	d8e0      	bhi.n	8007268 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072a6:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072a8:	4282      	cmp	r2, r0
 80072aa:	d3dd      	bcc.n	8007268 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072ac:	2700      	movs	r7, #0
 80072ae:	0e02      	lsrs	r2, r0, #24
 80072b0:	0201      	lsls	r1, r0, #8
 80072b2:	085e      	lsrs	r6, r3, #1
 80072b4:	1989      	adds	r1, r1, r6
 80072b6:	417a      	adcs	r2, r7
 80072b8:	0008      	movs	r0, r1
 80072ba:	0011      	movs	r1, r2
 80072bc:	001a      	movs	r2, r3
 80072be:	003b      	movs	r3, r7
 80072c0:	f7f9 f8fc 	bl	80004bc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072c4:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <UART_SetConfig+0x20c>)
 80072c6:	18c2      	adds	r2, r0, r3
 80072c8:	4b3d      	ldr	r3, [pc, #244]	; (80073c0 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d8cc      	bhi.n	8007268 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	60d8      	str	r0, [r3, #12]
 80072d2:	e7d4      	b.n	800727e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80072d4:	f7fe fb6a 	bl	80059ac <HAL_RCC_GetSysClockFreq>
        break;
 80072d8:	e7cf      	b.n	800727a <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80072da:	f7fe fec3 	bl	8006064 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80072de:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80072e0:	d0cd      	beq.n	800727e <UART_SetConfig+0xce>
 80072e2:	e00d      	b.n	8007300 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e4:	f7fe fece 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 80072e8:	e7f9      	b.n	80072de <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ea:	4b2e      	ldr	r3, [pc, #184]	; (80073a4 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80072ec:	4a32      	ldr	r2, [pc, #200]	; (80073b8 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	2310      	movs	r3, #16
 80072f2:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80072f4:	4243      	negs	r3, r0
 80072f6:	4158      	adcs	r0, r3
 80072f8:	4b2e      	ldr	r3, [pc, #184]	; (80073b4 <UART_SetConfig+0x204>)
 80072fa:	4240      	negs	r0, r0
 80072fc:	4003      	ands	r3, r0
 80072fe:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007300:	0058      	lsls	r0, r3, #1
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	6861      	ldr	r1, [r4, #4]
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	18c0      	adds	r0, r0, r3
 800730a:	f7f8 ff23 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730e:	492d      	ldr	r1, [pc, #180]	; (80073c4 <UART_SetConfig+0x214>)
 8007310:	b282      	uxth	r2, r0
 8007312:	3a10      	subs	r2, #16
 8007314:	0403      	lsls	r3, r0, #16
 8007316:	428a      	cmp	r2, r1
 8007318:	d8a6      	bhi.n	8007268 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731a:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800731c:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731e:	4390      	bics	r0, r2
 8007320:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8007322:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007324:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8007326:	4318      	orrs	r0, r3
 8007328:	60d0      	str	r0, [r2, #12]
 800732a:	e7a8      	b.n	800727e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800732c:	f7fe fb3e 	bl	80059ac <HAL_RCC_GetSysClockFreq>
 8007330:	e7d5      	b.n	80072de <UART_SetConfig+0x12e>
    switch (clocksource)
 8007332:	2808      	cmp	r0, #8
 8007334:	d898      	bhi.n	8007268 <UART_SetConfig+0xb8>
 8007336:	f7f8 fef9 	bl	800012c <__gnu_thumb1_case_shi>
 800733a:	0009      	.short	0x0009
 800733c:	000fff6b 	.word	0x000fff6b
 8007340:	0025ff97 	.word	0x0025ff97
 8007344:	ff97ff97 	.word	0xff97ff97
 8007348:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fe fe8a 	bl	8006064 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007350:	2800      	cmp	r0, #0
 8007352:	d100      	bne.n	8007356 <UART_SetConfig+0x1a6>
 8007354:	e793      	b.n	800727e <UART_SetConfig+0xce>
 8007356:	e00a      	b.n	800736e <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <UART_SetConfig+0x1f4>)
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	2310      	movs	r3, #16
 800735e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007360:	4243      	negs	r3, r0
 8007362:	4158      	adcs	r0, r3
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <UART_SetConfig+0x204>)
 8007366:	4240      	negs	r0, r0
 8007368:	4018      	ands	r0, r3
 800736a:	4b13      	ldr	r3, [pc, #76]	; (80073b8 <UART_SetConfig+0x208>)
 800736c:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800736e:	6863      	ldr	r3, [r4, #4]
 8007370:	6861      	ldr	r1, [r4, #4]
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	1818      	adds	r0, r3, r0
 8007376:	f7f8 feed 	bl	8000154 <__udivsi3>
 800737a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737c:	0002      	movs	r2, r0
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <UART_SetConfig+0x214>)
 8007380:	3a10      	subs	r2, #16
 8007382:	e7a2      	b.n	80072ca <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007384:	f7fe fb12 	bl	80059ac <HAL_RCC_GetSysClockFreq>
        break;
 8007388:	e7e2      	b.n	8007350 <UART_SetConfig+0x1a0>
    switch (clocksource)
 800738a:	2080      	movs	r0, #128	; 0x80
 800738c:	0200      	lsls	r0, r0, #8
 800738e:	e7ee      	b.n	800736e <UART_SetConfig+0x1be>
 8007390:	efff69f3 	.word	0xefff69f3
 8007394:	ffffcfff 	.word	0xffffcfff
 8007398:	40004800 	.word	0x40004800
 800739c:	fffff4ff 	.word	0xfffff4ff
 80073a0:	40013800 	.word	0x40013800
 80073a4:	40021000 	.word	0x40021000
 80073a8:	0800f379 	.word	0x0800f379
 80073ac:	40004400 	.word	0x40004400
 80073b0:	0800f37c 	.word	0x0800f37c
 80073b4:	00b71b00 	.word	0x00b71b00
 80073b8:	003d0900 	.word	0x003d0900
 80073bc:	fffffd00 	.word	0xfffffd00
 80073c0:	000ffcff 	.word	0x000ffcff
 80073c4:	0000ffef 	.word	0x0000ffef

080073c8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80073ca:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073cc:	07da      	lsls	r2, r3, #31
 80073ce:	d506      	bpl.n	80073de <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d0:	6801      	ldr	r1, [r0, #0]
 80073d2:	4c28      	ldr	r4, [pc, #160]	; (8007474 <UART_AdvFeatureConfig+0xac>)
 80073d4:	684a      	ldr	r2, [r1, #4]
 80073d6:	4022      	ands	r2, r4
 80073d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80073da:	4322      	orrs	r2, r4
 80073dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073de:	079a      	lsls	r2, r3, #30
 80073e0:	d506      	bpl.n	80073f0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073e2:	6801      	ldr	r1, [r0, #0]
 80073e4:	4c24      	ldr	r4, [pc, #144]	; (8007478 <UART_AdvFeatureConfig+0xb0>)
 80073e6:	684a      	ldr	r2, [r1, #4]
 80073e8:	4022      	ands	r2, r4
 80073ea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80073ec:	4322      	orrs	r2, r4
 80073ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073f0:	075a      	lsls	r2, r3, #29
 80073f2:	d506      	bpl.n	8007402 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f4:	6801      	ldr	r1, [r0, #0]
 80073f6:	4c21      	ldr	r4, [pc, #132]	; (800747c <UART_AdvFeatureConfig+0xb4>)
 80073f8:	684a      	ldr	r2, [r1, #4]
 80073fa:	4022      	ands	r2, r4
 80073fc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80073fe:	4322      	orrs	r2, r4
 8007400:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007402:	071a      	lsls	r2, r3, #28
 8007404:	d506      	bpl.n	8007414 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007406:	6801      	ldr	r1, [r0, #0]
 8007408:	4c1d      	ldr	r4, [pc, #116]	; (8007480 <UART_AdvFeatureConfig+0xb8>)
 800740a:	684a      	ldr	r2, [r1, #4]
 800740c:	4022      	ands	r2, r4
 800740e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007410:	4322      	orrs	r2, r4
 8007412:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007414:	06da      	lsls	r2, r3, #27
 8007416:	d506      	bpl.n	8007426 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007418:	6801      	ldr	r1, [r0, #0]
 800741a:	4c1a      	ldr	r4, [pc, #104]	; (8007484 <UART_AdvFeatureConfig+0xbc>)
 800741c:	688a      	ldr	r2, [r1, #8]
 800741e:	4022      	ands	r2, r4
 8007420:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007422:	4322      	orrs	r2, r4
 8007424:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007426:	069a      	lsls	r2, r3, #26
 8007428:	d506      	bpl.n	8007438 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800742a:	6801      	ldr	r1, [r0, #0]
 800742c:	4c16      	ldr	r4, [pc, #88]	; (8007488 <UART_AdvFeatureConfig+0xc0>)
 800742e:	688a      	ldr	r2, [r1, #8]
 8007430:	4022      	ands	r2, r4
 8007432:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007434:	4322      	orrs	r2, r4
 8007436:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007438:	065a      	lsls	r2, r3, #25
 800743a:	d510      	bpl.n	800745e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800743c:	6801      	ldr	r1, [r0, #0]
 800743e:	4d13      	ldr	r5, [pc, #76]	; (800748c <UART_AdvFeatureConfig+0xc4>)
 8007440:	684a      	ldr	r2, [r1, #4]
 8007442:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007444:	402a      	ands	r2, r5
 8007446:	4322      	orrs	r2, r4
 8007448:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800744a:	2280      	movs	r2, #128	; 0x80
 800744c:	0352      	lsls	r2, r2, #13
 800744e:	4294      	cmp	r4, r2
 8007450:	d105      	bne.n	800745e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007452:	684a      	ldr	r2, [r1, #4]
 8007454:	4c0e      	ldr	r4, [pc, #56]	; (8007490 <UART_AdvFeatureConfig+0xc8>)
 8007456:	4022      	ands	r2, r4
 8007458:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800745a:	4322      	orrs	r2, r4
 800745c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800745e:	061b      	lsls	r3, r3, #24
 8007460:	d506      	bpl.n	8007470 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007462:	6802      	ldr	r2, [r0, #0]
 8007464:	490b      	ldr	r1, [pc, #44]	; (8007494 <UART_AdvFeatureConfig+0xcc>)
 8007466:	6853      	ldr	r3, [r2, #4]
 8007468:	400b      	ands	r3, r1
 800746a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800746c:	430b      	orrs	r3, r1
 800746e:	6053      	str	r3, [r2, #4]
}
 8007470:	bd30      	pop	{r4, r5, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	fffdffff 	.word	0xfffdffff
 8007478:	fffeffff 	.word	0xfffeffff
 800747c:	fffbffff 	.word	0xfffbffff
 8007480:	ffff7fff 	.word	0xffff7fff
 8007484:	ffffefff 	.word	0xffffefff
 8007488:	ffffdfff 	.word	0xffffdfff
 800748c:	ffefffff 	.word	0xffefffff
 8007490:	ff9fffff 	.word	0xff9fffff
 8007494:	fff7ffff 	.word	0xfff7ffff

08007498 <UART_WaitOnFlagUntilTimeout>:
{
 8007498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800749a:	2780      	movs	r7, #128	; 0x80
{
 800749c:	0004      	movs	r4, r0
 800749e:	000d      	movs	r5, r1
 80074a0:	0016      	movs	r6, r2
 80074a2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074a4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	69d3      	ldr	r3, [r2, #28]
 80074aa:	402b      	ands	r3, r5
 80074ac:	1b5b      	subs	r3, r3, r5
 80074ae:	4259      	negs	r1, r3
 80074b0:	414b      	adcs	r3, r1
 80074b2:	42b3      	cmp	r3, r6
 80074b4:	d001      	beq.n	80074ba <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80074b6:	2000      	movs	r0, #0
 80074b8:	e01c      	b.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	3301      	adds	r3, #1
 80074be:	d0f3      	beq.n	80074a8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c0:	f7fb fc32 	bl	8002d28 <HAL_GetTick>
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	9a08      	ldr	r2, [sp, #32]
 80074c8:	1ac0      	subs	r0, r0, r3
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	4290      	cmp	r0, r2
 80074ce:	d801      	bhi.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x3c>
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	d110      	bne.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4913      	ldr	r1, [pc, #76]	; (8007524 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80074d8:	400a      	ands	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	31a3      	adds	r1, #163	; 0xa3
 80074e0:	31ff      	adds	r1, #255	; 0xff
 80074e2:	438a      	bics	r2, r1
 80074e4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80074e6:	2320      	movs	r3, #32
 80074e8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80074ea:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80074ec:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80074ee:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80074f0:	3474      	adds	r4, #116	; 0x74
 80074f2:	7023      	strb	r3, [r4, #0]
}
 80074f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f6:	2104      	movs	r1, #4
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	420a      	tst	r2, r1
 80074fc:	d0d3      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074fe:	69da      	ldr	r2, [r3, #28]
 8007500:	423a      	tst	r2, r7
 8007502:	d0d0      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007504:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4906      	ldr	r1, [pc, #24]	; (8007524 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800750a:	400a      	ands	r2, r1
 800750c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	31a3      	adds	r1, #163	; 0xa3
 8007512:	31ff      	adds	r1, #255	; 0xff
 8007514:	438a      	bics	r2, r1
 8007516:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007518:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800751a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 800751c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800751e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007520:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007522:	e7e3      	b.n	80074ec <UART_WaitOnFlagUntilTimeout+0x54>
 8007524:	fffffe5f 	.word	0xfffffe5f

08007528 <UART_CheckIdleState>:
{
 8007528:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	2600      	movs	r6, #0
{
 800752c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	1d03      	adds	r3, r0, #4
 8007530:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8007532:	f7fb fbf9 	bl	8002d28 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007536:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007538:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	071b      	lsls	r3, r3, #28
 800753e:	d416      	bmi.n	800756e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	075b      	lsls	r3, r3, #29
 8007546:	d50a      	bpl.n	800755e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <UART_CheckIdleState+0x60>)
 800754c:	2200      	movs	r2, #0
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	0020      	movs	r0, r4
 8007552:	002b      	movs	r3, r5
 8007554:	03c9      	lsls	r1, r1, #15
 8007556:	f7ff ff9f 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 800755a:	2800      	cmp	r0, #0
 800755c:	d112      	bne.n	8007584 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800755e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007560:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007562:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007564:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8007568:	3474      	adds	r4, #116	; 0x74
 800756a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800756c:	e00b      	b.n	8007586 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800756e:	2180      	movs	r1, #128	; 0x80
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <UART_CheckIdleState+0x60>)
 8007572:	0032      	movs	r2, r6
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	0389      	lsls	r1, r1, #14
 8007578:	0003      	movs	r3, r0
 800757a:	0020      	movs	r0, r4
 800757c:	f7ff ff8c 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 8007580:	2800      	cmp	r0, #0
 8007582:	d0dd      	beq.n	8007540 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007584:	2003      	movs	r0, #3
}
 8007586:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007588:	01ffffff 	.word	0x01ffffff

0800758c <HAL_UART_Init>:
{
 800758c:	b510      	push	{r4, lr}
 800758e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007590:	d101      	bne.n	8007596 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8007592:	2001      	movs	r0, #1
}
 8007594:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007596:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800759c:	0002      	movs	r2, r0
 800759e:	3274      	adds	r2, #116	; 0x74
 80075a0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80075a2:	f7fc fb63 	bl	8003c6c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80075a6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80075a8:	2101      	movs	r1, #1
 80075aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80075ac:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80075ae:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075b0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80075b2:	438b      	bics	r3, r1
 80075b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075b6:	f7ff fdfb 	bl	80071b0 <UART_SetConfig>
 80075ba:	2801      	cmp	r0, #1
 80075bc:	d0e9      	beq.n	8007592 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80075c4:	0020      	movs	r0, r4
 80075c6:	f7ff feff 	bl	80073c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	4907      	ldr	r1, [pc, #28]	; (80075ec <HAL_UART_Init+0x60>)
 80075ce:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80075d0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	438a      	bics	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80075de:	2201      	movs	r2, #1
 80075e0:	6819      	ldr	r1, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80075e6:	f7ff ff9f 	bl	8007528 <UART_CheckIdleState>
 80075ea:	e7d3      	b.n	8007594 <HAL_UART_Init+0x8>
 80075ec:	ffffb7ff 	.word	0xffffb7ff

080075f0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80075f0:	0003      	movs	r3, r0
 80075f2:	3358      	adds	r3, #88	; 0x58
{
 80075f4:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80075f6:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 80075f8:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 80075fa:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80075fc:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80075fe:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8007600:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8007602:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8007604:	0164      	lsls	r4, r4, #5
 8007606:	3304      	adds	r3, #4
 8007608:	42a1      	cmp	r1, r4
 800760a:	d124      	bne.n	8007656 <UART_Start_Receive_IT+0x66>
 800760c:	6902      	ldr	r2, [r0, #16]
 800760e:	2a00      	cmp	r2, #0
 8007610:	d11f      	bne.n	8007652 <UART_Start_Receive_IT+0x62>
 8007612:	4a19      	ldr	r2, [pc, #100]	; (8007678 <UART_Start_Receive_IT+0x88>)
 8007614:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007616:	2200      	movs	r2, #0
 8007618:	1d03      	adds	r3, r0, #4
 800761a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800761c:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761e:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007620:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	6894      	ldr	r4, [r2, #8]
 8007624:	3b21      	subs	r3, #33	; 0x21
 8007626:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007628:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762c:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007630:	42a1      	cmp	r1, r4
 8007632:	d103      	bne.n	800763c <UART_Start_Receive_IT+0x4c>
 8007634:	6901      	ldr	r1, [r0, #16]
 8007636:	2900      	cmp	r1, #0
 8007638:	d100      	bne.n	800763c <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 800763a:	4b11      	ldr	r3, [pc, #68]	; (8007680 <UART_Start_Receive_IT+0x90>)
 800763c:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800763e:	0003      	movs	r3, r0
 8007640:	2000      	movs	r0, #0
 8007642:	3374      	adds	r3, #116	; 0x74
 8007644:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007646:	2390      	movs	r3, #144	; 0x90
 8007648:	6811      	ldr	r1, [r2, #0]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	430b      	orrs	r3, r1
 800764e:	6013      	str	r3, [r2, #0]
}
 8007650:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	e7de      	b.n	8007614 <UART_Start_Receive_IT+0x24>
 8007656:	2900      	cmp	r1, #0
 8007658:	d104      	bne.n	8007664 <UART_Start_Receive_IT+0x74>
 800765a:	6902      	ldr	r2, [r0, #16]
 800765c:	2a00      	cmp	r2, #0
 800765e:	d0f8      	beq.n	8007652 <UART_Start_Receive_IT+0x62>
 8007660:	227f      	movs	r2, #127	; 0x7f
 8007662:	e7d7      	b.n	8007614 <UART_Start_Receive_IT+0x24>
 8007664:	2480      	movs	r4, #128	; 0x80
 8007666:	0564      	lsls	r4, r4, #21
 8007668:	42a1      	cmp	r1, r4
 800766a:	d1d3      	bne.n	8007614 <UART_Start_Receive_IT+0x24>
 800766c:	6902      	ldr	r2, [r0, #16]
 800766e:	2a00      	cmp	r2, #0
 8007670:	d0f6      	beq.n	8007660 <UART_Start_Receive_IT+0x70>
 8007672:	223f      	movs	r2, #63	; 0x3f
 8007674:	e7ce      	b.n	8007614 <UART_Start_Receive_IT+0x24>
 8007676:	46c0      	nop			; (mov r8, r8)
 8007678:	000001ff 	.word	0x000001ff
 800767c:	080070ad 	.word	0x080070ad
 8007680:	08007131 	.word	0x08007131

08007684 <HAL_UART_Receive_IT>:
{
 8007684:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007686:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800768a:	2c20      	cmp	r4, #32
 800768c:	d129      	bne.n	80076e2 <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 800768e:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8007690:	2900      	cmp	r1, #0
 8007692:	d026      	beq.n	80076e2 <HAL_UART_Receive_IT+0x5e>
 8007694:	2a00      	cmp	r2, #0
 8007696:	d024      	beq.n	80076e2 <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	6884      	ldr	r4, [r0, #8]
 800769c:	015b      	lsls	r3, r3, #5
 800769e:	429c      	cmp	r4, r3
 80076a0:	d106      	bne.n	80076b0 <HAL_UART_Receive_IT+0x2c>
 80076a2:	6903      	ldr	r3, [r0, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80076a8:	2401      	movs	r4, #1
      return HAL_ERROR;
 80076aa:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 80076ac:	4221      	tst	r1, r4
 80076ae:	d118      	bne.n	80076e2 <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 80076b0:	0004      	movs	r4, r0
 80076b2:	3474      	adds	r4, #116	; 0x74
 80076b4:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 80076b8:	2d01      	cmp	r5, #1
 80076ba:	d012      	beq.n	80076e2 <HAL_UART_Receive_IT+0x5e>
 80076bc:	3b01      	subs	r3, #1
 80076be:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c0:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076c2:	4c09      	ldr	r4, [pc, #36]	; (80076e8 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c4:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076c6:	6803      	ldr	r3, [r0, #0]
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d007      	beq.n	80076dc <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076cc:	685c      	ldr	r4, [r3, #4]
 80076ce:	0224      	lsls	r4, r4, #8
 80076d0:	d504      	bpl.n	80076dc <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076d2:	2480      	movs	r4, #128	; 0x80
 80076d4:	681d      	ldr	r5, [r3, #0]
 80076d6:	04e4      	lsls	r4, r4, #19
 80076d8:	432c      	orrs	r4, r5
 80076da:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 80076dc:	f7ff ff88 	bl	80075f0 <UART_Start_Receive_IT>
 80076e0:	0003      	movs	r3, r0
}
 80076e2:	0018      	movs	r0, r3
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	40004800 	.word	0x40004800

080076ec <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076ec:	4770      	bx	lr
	...

080076f0 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80076f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f2:	0005      	movs	r5, r0
{
 80076f4:	b085      	sub	sp, #20
 80076f6:	9203      	str	r2, [sp, #12]
 80076f8:	9102      	str	r1, [sp, #8]
  __HAL_LOCK(huart);
 80076fa:	3574      	adds	r5, #116	; 0x74
 80076fc:	782b      	ldrb	r3, [r5, #0]
{
 80076fe:	0004      	movs	r4, r0
 8007700:	000f      	movs	r7, r1
 8007702:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8007704:	2002      	movs	r0, #2
{
 8007706:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8007708:	2b01      	cmp	r3, #1
 800770a:	d030      	beq.n	800776e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>

  huart->gState = HAL_UART_STATE_BUSY;
 800770c:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800770e:	3801      	subs	r0, #1
 8007710:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007712:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	6819      	ldr	r1, [r3, #0]
 8007718:	4381      	bics	r1, r0
 800771a:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800771c:	6899      	ldr	r1, [r3, #8]
 800771e:	4816      	ldr	r0, [pc, #88]	; (8007778 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
 8007720:	4001      	ands	r1, r0
 8007722:	4339      	orrs	r1, r7
 8007724:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007726:	2f00      	cmp	r7, #0
 8007728:	d10c      	bne.n	8007744 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x54>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	3210      	adds	r2, #16
 800772e:	4391      	bics	r1, r2
 8007730:	88b2      	ldrh	r2, [r6, #4]
 8007732:	79b0      	ldrb	r0, [r6, #6]
 8007734:	4311      	orrs	r1, r2
 8007736:	6059      	str	r1, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	0600      	lsls	r0, r0, #24
 800773c:	0212      	lsls	r2, r2, #8
 800773e:	0a12      	lsrs	r2, r2, #8
 8007740:	4302      	orrs	r2, r0
 8007742:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8007744:	2201      	movs	r2, #1
 8007746:	6819      	ldr	r1, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800774c:	f7fb faec 	bl	8002d28 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007750:	2180      	movs	r1, #128	; 0x80
 8007752:	4a0a      	ldr	r2, [pc, #40]	; (800777c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x8c>)
  tickstart = HAL_GetTick();
 8007754:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007756:	9200      	str	r2, [sp, #0]
 8007758:	0020      	movs	r0, r4
 800775a:	2200      	movs	r2, #0
 800775c:	03c9      	lsls	r1, r1, #15
 800775e:	f7ff fe9b 	bl	8007498 <UART_WaitOnFlagUntilTimeout>
 8007762:	2800      	cmp	r0, #0
 8007764:	d105      	bne.n	8007772 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8007766:	2320      	movs	r3, #32
 8007768:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800776a:	2300      	movs	r3, #0
 800776c:	702b      	strb	r3, [r5, #0]
}
 800776e:	b005      	add	sp, #20
 8007770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 8007772:	2003      	movs	r0, #3
 8007774:	e7f9      	b.n	800776a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	ffcfffff 	.word	0xffcfffff
 800777c:	01ffffff 	.word	0x01ffffff

08007780 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007780:	0001      	movs	r1, r0
 8007782:	2302      	movs	r3, #2
{
 8007784:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8007786:	3174      	adds	r1, #116	; 0x74
 8007788:	780c      	ldrb	r4, [r1, #0]
{
 800778a:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 800778c:	0018      	movs	r0, r3
 800778e:	2c01      	cmp	r4, #1
 8007790:	d005      	beq.n	800779e <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	6810      	ldr	r0, [r2, #0]
 8007796:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8007798:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800779a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 800779c:	7008      	strb	r0, [r1, #0]
}
 800779e:	bd10      	pop	{r4, pc}

080077a0 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80077a0:	b510      	push	{r4, lr}
 80077a2:	0004      	movs	r4, r0
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
  {
    return HAL_ERROR;
 80077a4:	2001      	movs	r0, #1
  if (hwwdg == NULL)
 80077a6:	2c00      	cmp	r4, #0
 80077a8:	d00e      	beq.n	80077c8 <HAL_WWDG_Init+0x28>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80077aa:	0020      	movs	r0, r4
 80077ac:	f7fb f97c 	bl	8002aa8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80077b0:	2380      	movs	r3, #128	; 0x80

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));

  /* Return function status */
  return HAL_OK;
 80077b2:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80077b4:	68e1      	ldr	r1, [r4, #12]
 80077b6:	6822      	ldr	r2, [r4, #0]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6013      	str	r3, [r2, #0]
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80077bc:	6861      	ldr	r1, [r4, #4]
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	430b      	orrs	r3, r1
 80077c2:	68a1      	ldr	r1, [r4, #8]
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6053      	str	r3, [r2, #4]
}
 80077c8:	bd10      	pop	{r4, pc}

080077ca <HAL_WWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80077ca:	6803      	ldr	r3, [r0, #0]
 80077cc:	68c2      	ldr	r2, [r0, #12]

  /* Return function status */
  return HAL_OK;
}
 80077ce:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	4770      	bx	lr

080077d4 <MX_LoRaWAN_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void){
 80077d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80077d6:	f7fb f9e5 	bl	8002ba4 <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
  //LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80077da:	bd10      	pop	{r4, pc}

080077dc <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80077dc:	2001      	movs	r0, #1
{
 80077de:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80077e0:	4240      	negs	r0, r0
 80077e2:	f007 f855 	bl	800e890 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80077e6:	bd10      	pop	{r4, pc}

080077e8 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 80077e8:	2200      	movs	r2, #0
 80077ea:	4b04      	ldr	r3, [pc, #16]	; (80077fc <LoraInfo_Init+0x14>)
 80077ec:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80077ee:	60da      	str	r2, [r3, #12]

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923) ;
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915) ;
 80077f0:	3202      	adds	r2, #2
 80077f2:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80077f4:	3201      	adds	r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80077f8:	4770      	bx	lr
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	20000608 	.word	0x20000608

08007800 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8007800:	4800      	ldr	r0, [pc, #0]	; (8007804 <LoraInfo_GetPtr+0x4>)
 8007802:	4770      	bx	lr
 8007804:	20000608 	.word	0x20000608

08007808 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8007808:	23fa      	movs	r3, #250	; 0xfa
{
 800780a:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800780c:	009b      	lsls	r3, r3, #2
{
 800780e:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	0013      	movs	r3, r2
 8007814:	000a      	movs	r2, r1
 8007816:	0001      	movs	r1, r0
 8007818:	4804      	ldr	r0, [pc, #16]	; (800782c <BSP_SPI1_SendRecv+0x24>)
 800781a:	f7ff f96d 	bl	8006af8 <HAL_SPI_TransmitReceive>
 800781e:	2800      	cmp	r0, #0
 8007820:	d101      	bne.n	8007826 <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 8007822:	0020      	movs	r0, r4
  }
  return ret;
}
 8007824:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007826:	2006      	movs	r0, #6
 8007828:	4240      	negs	r0, r0
  return ret;
 800782a:	e7fb      	b.n	8007824 <BSP_SPI1_SendRecv+0x1c>
 800782c:	20000618 	.word	0x20000618

08007830 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8007830:	4b14      	ldr	r3, [pc, #80]	; (8007884 <MX_SPI1_Init+0x54>)
{
 8007832:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8007834:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007836:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8007838:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800783e:	33fc      	adds	r3, #252	; 0xfc
 8007840:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8007842:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007844:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007846:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8007848:	6145      	str	r5, [r0, #20]
{
 800784a:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800784c:	f7fe fc1a 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8007850:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8007852:	4a0d      	ldr	r2, [pc, #52]	; (8007888 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8007854:	490d      	ldr	r1, [pc, #52]	; (800788c <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8007856:	4290      	cmp	r0, r2
 8007858:	d80d      	bhi.n	8007876 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800785a:	2300      	movs	r3, #0
 800785c:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800785e:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007860:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8007862:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8007864:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8007866:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8007868:	0020      	movs	r0, r4
 800786a:	f7ff f8e3 	bl	8006a34 <HAL_SPI_Init>
 800786e:	1e43      	subs	r3, r0, #1
 8007870:	4198      	sbcs	r0, r3
  return ret;
 8007872:	b2c0      	uxtb	r0, r0
}
 8007874:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8007876:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8007878:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 800787a:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 800787c:	2b08      	cmp	r3, #8
 800787e:	d0ec      	beq.n	800785a <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8007880:	0840      	lsrs	r0, r0, #1
 8007882:	e7e8      	b.n	8007856 <MX_SPI1_Init+0x26>
 8007884:	40013000 	.word	0x40013000
 8007888:	00989680 	.word	0x00989680
 800788c:	0800f38c 	.word	0x0800f38c

08007890 <BSP_SPI1_Init>:
{
 8007890:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8007892:	4d1b      	ldr	r5, [pc, #108]	; (8007900 <BSP_SPI1_Init+0x70>)
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8007896:	0028      	movs	r0, r5
{
 8007898:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 800789a:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800789c:	f7ff fa26 	bl	8006cec <HAL_SPI_GetState>
 80078a0:	1e04      	subs	r4, r0, #0
 80078a2:	d002      	beq.n	80078aa <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80078a4:	2000      	movs	r0, #0
}
 80078a6:	b007      	add	sp, #28
 80078a8:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 80078aa:	2380      	movs	r3, #128	; 0x80
 80078ac:	4a16      	ldr	r2, [pc, #88]	; (8007908 <BSP_SPI1_Init+0x78>)
 80078ae:	015b      	lsls	r3, r3, #5
 80078b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80078b2:	430b      	orrs	r3, r1
 80078b4:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b6:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b8:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80078ba:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80078bc:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078be:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078c0:	3301      	adds	r3, #1
 80078c2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80078c4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80078c6:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80078c8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80078ca:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80078cc:	f7fd fb58 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80078d0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80078d2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80078d4:	a901      	add	r1, sp, #4
 80078d6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80078d8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80078da:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80078dc:	f7fd fb50 	bl	8004f80 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80078e0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80078e2:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80078e4:	05c0      	lsls	r0, r0, #23
 80078e6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80078e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80078ea:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80078ec:	f7fd fb48 	bl	8004f80 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80078f0:	0028      	movs	r0, r5
 80078f2:	f7ff ff9d 	bl	8007830 <MX_SPI1_Init>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0d4      	beq.n	80078a4 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 80078fa:	2008      	movs	r0, #8
 80078fc:	4240      	negs	r0, r0
  return ret;
 80078fe:	e7d2      	b.n	80078a6 <BSP_SPI1_Init+0x16>
 8007900:	20000618 	.word	0x20000618
 8007904:	40013000 	.word	0x40013000
 8007908:	40021000 	.word	0x40021000

0800790c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800790c:	b510      	push	{r4, lr}
 800790e:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8007910:	2210      	movs	r2, #16
 8007912:	2100      	movs	r1, #0
 8007914:	30f1      	adds	r0, #241	; 0xf1
 8007916:	f005 fd62 	bl	800d3de <memset1>
    ctx->M_n = 0;
 800791a:	0023      	movs	r3, r4
 800791c:	2100      	movs	r1, #0
 800791e:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8007920:	22f0      	movs	r2, #240	; 0xf0
 8007922:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8007924:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8007926:	f005 fd5a 	bl	800d3de <memset1>
}
 800792a:	bd10      	pop	{r4, pc}

0800792c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800792c:	b510      	push	{r4, lr}
 800792e:	0002      	movs	r2, r0
 8007930:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8007932:	2110      	movs	r1, #16
 8007934:	f000 f99e 	bl	8007c74 <lorawan_aes_set_key>
}
 8007938:	bd10      	pop	{r4, pc}

0800793a <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800793a:	0003      	movs	r3, r0
{
 800793c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793e:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 8007940:	33fc      	adds	r3, #252	; 0xfc
 8007942:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007944:	1ca3      	adds	r3, r4, #2
{
 8007946:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007948:	33ff      	adds	r3, #255	; 0xff
{
 800794a:	000e      	movs	r6, r1
 800794c:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800794e:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 8007950:	2800      	cmp	r0, #0
 8007952:	d036      	beq.n	80079c2 <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 8007954:	2710      	movs	r7, #16
 8007956:	1a3f      	subs	r7, r7, r0
 8007958:	9700      	str	r7, [sp, #0]
 800795a:	4297      	cmp	r7, r2
 800795c:	d900      	bls.n	8007960 <AES_CMAC_Update+0x26>
 800795e:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007960:	466b      	mov	r3, sp
 8007962:	881a      	ldrh	r2, [r3, #0]
 8007964:	1ca3      	adds	r3, r4, #2
 8007966:	33ff      	adds	r3, #255	; 0xff
 8007968:	0031      	movs	r1, r6
 800796a:	1818      	adds	r0, r3, r0
 800796c:	f005 fd22 	bl	800d3b4 <memcpy1>
        ctx->M_n += mlen;
 8007970:	0022      	movs	r2, r4
 8007972:	32fc      	adds	r2, #252	; 0xfc
 8007974:	6991      	ldr	r1, [r2, #24]
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	185b      	adds	r3, r3, r1
 800797a:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 800797c:	2b0f      	cmp	r3, #15
 800797e:	d929      	bls.n	80079d4 <AES_CMAC_Update+0x9a>
 8007980:	42af      	cmp	r7, r5
 8007982:	d227      	bcs.n	80079d4 <AES_CMAC_Update+0x9a>
 8007984:	0023      	movs	r3, r4
 8007986:	1ca1      	adds	r1, r4, #2
 8007988:	33f1      	adds	r3, #241	; 0xf1
 800798a:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	7c18      	ldrb	r0, [r3, #16]
 8007990:	4042      	eors	r2, r0
 8007992:	701a      	strb	r2, [r3, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	428b      	cmp	r3, r1
 8007998:	d1f8      	bne.n	800798c <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800799a:	0027      	movs	r7, r4
 800799c:	37f1      	adds	r7, #241	; 0xf1
 800799e:	2210      	movs	r2, #16
 80079a0:	0039      	movs	r1, r7
 80079a2:	a802      	add	r0, sp, #8
 80079a4:	f005 fd06 	bl	800d3b4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80079a8:	a902      	add	r1, sp, #8
 80079aa:	0022      	movs	r2, r4
 80079ac:	0008      	movs	r0, r1
 80079ae:	f000 f9e9 	bl	8007d84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80079b2:	2210      	movs	r2, #16
 80079b4:	0038      	movs	r0, r7
 80079b6:	a902      	add	r1, sp, #8
 80079b8:	f005 fcfc 	bl	800d3b4 <memcpy1>

        data += mlen;
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	18f6      	adds	r6, r6, r3
        len -= mlen;
 80079c0:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 80079c2:	2d10      	cmp	r5, #16
 80079c4:	d808      	bhi.n	80079d8 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80079c6:	0031      	movs	r1, r6
 80079c8:	9801      	ldr	r0, [sp, #4]
 80079ca:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 80079cc:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 80079ce:	f005 fcf1 	bl	800d3b4 <memcpy1>
    ctx->M_n = len;
 80079d2:	61a5      	str	r5, [r4, #24]
}
 80079d4:	b007      	add	sp, #28
 80079d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d8:	0023      	movs	r3, r4
 80079da:	0032      	movs	r2, r6
 80079dc:	1ca0      	adds	r0, r4, #2
 80079de:	33f1      	adds	r3, #241	; 0xf1
 80079e0:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 80079e2:	7819      	ldrb	r1, [r3, #0]
 80079e4:	7817      	ldrb	r7, [r2, #0]
 80079e6:	3201      	adds	r2, #1
 80079e8:	4079      	eors	r1, r7
 80079ea:	7019      	strb	r1, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	4283      	cmp	r3, r0
 80079f0:	d1f7      	bne.n	80079e2 <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80079f2:	0027      	movs	r7, r4
 80079f4:	37f1      	adds	r7, #241	; 0xf1
 80079f6:	2210      	movs	r2, #16
 80079f8:	0039      	movs	r1, r7
 80079fa:	a802      	add	r0, sp, #8
 80079fc:	f005 fcda 	bl	800d3b4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007a00:	a902      	add	r1, sp, #8
 8007a02:	0022      	movs	r2, r4
 8007a04:	0008      	movs	r0, r1
 8007a06:	f000 f9bd 	bl	8007d84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	0038      	movs	r0, r7
 8007a0e:	a902      	add	r1, sp, #8
 8007a10:	f005 fcd0 	bl	800d3b4 <memcpy1>
        data += 16;
 8007a14:	3610      	adds	r6, #16
        len -= 16;
 8007a16:	3d10      	subs	r5, #16
 8007a18:	e7d3      	b.n	80079c2 <AES_CMAC_Update+0x88>

08007a1a <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8007a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1c:	000c      	movs	r4, r1
 8007a1e:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8007a20:	2210      	movs	r2, #16
 8007a22:	2100      	movs	r1, #0
{
 8007a24:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 8007a26:	a802      	add	r0, sp, #8
 8007a28:	f005 fcd9 	bl	800d3de <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8007a2c:	a902      	add	r1, sp, #8
 8007a2e:	0022      	movs	r2, r4
 8007a30:	0008      	movs	r0, r1
 8007a32:	f000 f9a7 	bl	8007d84 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8007a36:	ab02      	add	r3, sp, #8
 8007a38:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8007a3a:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 8007a3c:	2a7f      	cmp	r2, #127	; 0x7f
 8007a3e:	d940      	bls.n	8007ac2 <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	7858      	ldrb	r0, [r3, #1]
 8007a44:	0052      	lsls	r2, r2, #1
 8007a46:	09c0      	lsrs	r0, r0, #7
 8007a48:	4302      	orrs	r2, r0
 8007a4a:	3101      	adds	r1, #1
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	290f      	cmp	r1, #15
 8007a52:	d1f5      	bne.n	8007a40 <AES_CMAC_Final+0x26>
 8007a54:	ab02      	add	r3, sp, #8
 8007a56:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8007a58:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 8007a5a:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8007a5c:	425b      	negs	r3, r3
 8007a5e:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 8007a60:	0027      	movs	r7, r4
 8007a62:	37fc      	adds	r7, #252	; 0xfc
 8007a64:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 8007a66:	aa02      	add	r2, sp, #8
 8007a68:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8007a6a:	2810      	cmp	r0, #16
 8007a6c:	d137      	bne.n	8007ade <AES_CMAC_Final+0xc4>
 8007a6e:	0020      	movs	r0, r4
 8007a70:	1ca3      	adds	r3, r4, #2
 8007a72:	3012      	adds	r0, #18
 8007a74:	33ff      	adds	r3, #255	; 0xff
 8007a76:	aa02      	add	r2, sp, #8
 8007a78:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8007a7a:	7819      	ldrb	r1, [r3, #0]
 8007a7c:	7815      	ldrb	r5, [r2, #0]
 8007a7e:	3201      	adds	r2, #1
 8007a80:	4069      	eors	r1, r5
 8007a82:	7019      	strb	r1, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	4298      	cmp	r0, r3
 8007a88:	d1f7      	bne.n	8007a7a <AES_CMAC_Final+0x60>
 8007a8a:	0023      	movs	r3, r4
 8007a8c:	33f1      	adds	r3, #241	; 0xf1
 8007a8e:	0019      	movs	r1, r3
 8007a90:	1ca0      	adds	r0, r4, #2
 8007a92:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	7c1d      	ldrb	r5, [r3, #16]
 8007a98:	406a      	eors	r2, r5
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	4283      	cmp	r3, r0
 8007aa0:	d1f8      	bne.n	8007a94 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007aa2:	a806      	add	r0, sp, #24
 8007aa4:	2210      	movs	r2, #16
 8007aa6:	f005 fc85 	bl	800d3b4 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8007aaa:	0022      	movs	r2, r4
 8007aac:	9901      	ldr	r1, [sp, #4]
 8007aae:	a806      	add	r0, sp, #24
 8007ab0:	f000 f968 	bl	8007d84 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	a802      	add	r0, sp, #8
 8007aba:	f005 fc90 	bl	800d3de <memset1>
}
 8007abe:	b00b      	add	sp, #44	; 0x2c
 8007ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	7858      	ldrb	r0, [r3, #1]
 8007ac6:	0052      	lsls	r2, r2, #1
 8007ac8:	09c0      	lsrs	r0, r0, #7
 8007aca:	4302      	orrs	r2, r0
 8007acc:	3101      	adds	r1, #1
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	290f      	cmp	r1, #15
 8007ad4:	d1f5      	bne.n	8007ac2 <AES_CMAC_Final+0xa8>
 8007ad6:	ab02      	add	r3, sp, #8
 8007ad8:	7bdb      	ldrb	r3, [r3, #15]
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	e7c0      	b.n	8007a60 <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 8007ade:	ab02      	add	r3, sp, #8
 8007ae0:	781a      	ldrb	r2, [r3, #0]
            LSHIFT( K, K );
 8007ae2:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 8007ae4:	2a7f      	cmp	r2, #127	; 0x7f
 8007ae6:	d933      	bls.n	8007b50 <AES_CMAC_Final+0x136>
            LSHIFT( K, K );
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	785d      	ldrb	r5, [r3, #1]
 8007aec:	0052      	lsls	r2, r2, #1
 8007aee:	09ed      	lsrs	r5, r5, #7
 8007af0:	432a      	orrs	r2, r5
 8007af2:	3101      	adds	r1, #1
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	3301      	adds	r3, #1
 8007af8:	290f      	cmp	r1, #15
 8007afa:	d1f5      	bne.n	8007ae8 <AES_CMAC_Final+0xce>
 8007afc:	ab02      	add	r3, sp, #8
 8007afe:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 8007b00:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 8007b02:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 8007b04:	425b      	negs	r3, r3
 8007b06:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8007b08:	aa02      	add	r2, sp, #8
 8007b0a:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8007b0c:	2280      	movs	r2, #128	; 0x80
 8007b0e:	1823      	adds	r3, r4, r0
 8007b10:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 8007b12:	1c46      	adds	r6, r0, #1
 8007b14:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 8007b16:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 8007b18:	2e10      	cmp	r6, #16
 8007b1a:	d801      	bhi.n	8007b20 <AES_CMAC_Final+0x106>
 8007b1c:	350f      	adds	r5, #15
 8007b1e:	1a2d      	subs	r5, r5, r0
 8007b20:	3003      	adds	r0, #3
 8007b22:	30ff      	adds	r0, #255	; 0xff
 8007b24:	002a      	movs	r2, r5
 8007b26:	2100      	movs	r1, #0
 8007b28:	1820      	adds	r0, r4, r0
 8007b2a:	f007 fa56 	bl	800efda <memset>
 8007b2e:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 8007b30:	19ad      	adds	r5, r5, r6
 8007b32:	1ca3      	adds	r3, r4, #2
 8007b34:	3012      	adds	r0, #18
 8007b36:	61bd      	str	r5, [r7, #24]
 8007b38:	33ff      	adds	r3, #255	; 0xff
 8007b3a:	aa02      	add	r2, sp, #8
 8007b3c:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 8007b3e:	7819      	ldrb	r1, [r3, #0]
 8007b40:	7815      	ldrb	r5, [r2, #0]
 8007b42:	3201      	adds	r2, #1
 8007b44:	4069      	eors	r1, r5
 8007b46:	7019      	strb	r1, [r3, #0]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	4298      	cmp	r0, r3
 8007b4c:	d1f7      	bne.n	8007b3e <AES_CMAC_Final+0x124>
 8007b4e:	e79c      	b.n	8007a8a <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	785d      	ldrb	r5, [r3, #1]
 8007b54:	0052      	lsls	r2, r2, #1
 8007b56:	09ed      	lsrs	r5, r5, #7
 8007b58:	432a      	orrs	r2, r5
 8007b5a:	3101      	adds	r1, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	290f      	cmp	r1, #15
 8007b62:	d1f5      	bne.n	8007b50 <AES_CMAC_Final+0x136>
 8007b64:	ab02      	add	r3, sp, #8
 8007b66:	7bdb      	ldrb	r3, [r3, #15]
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	e7cd      	b.n	8007b08 <AES_CMAC_Final+0xee>

08007b6c <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007b6c:	780a      	ldrb	r2, [r1, #0]
 8007b6e:	7803      	ldrb	r3, [r0, #0]
 8007b70:	4053      	eors	r3, r2
 8007b72:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007b74:	784a      	ldrb	r2, [r1, #1]
 8007b76:	7843      	ldrb	r3, [r0, #1]
 8007b78:	4053      	eors	r3, r2
 8007b7a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007b7c:	788a      	ldrb	r2, [r1, #2]
 8007b7e:	7883      	ldrb	r3, [r0, #2]
 8007b80:	4053      	eors	r3, r2
 8007b82:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007b84:	78ca      	ldrb	r2, [r1, #3]
 8007b86:	78c3      	ldrb	r3, [r0, #3]
 8007b88:	4053      	eors	r3, r2
 8007b8a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007b8c:	790a      	ldrb	r2, [r1, #4]
 8007b8e:	7903      	ldrb	r3, [r0, #4]
 8007b90:	4053      	eors	r3, r2
 8007b92:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007b94:	794a      	ldrb	r2, [r1, #5]
 8007b96:	7943      	ldrb	r3, [r0, #5]
 8007b98:	4053      	eors	r3, r2
 8007b9a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007b9c:	798a      	ldrb	r2, [r1, #6]
 8007b9e:	7983      	ldrb	r3, [r0, #6]
 8007ba0:	4053      	eors	r3, r2
 8007ba2:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007ba4:	79ca      	ldrb	r2, [r1, #7]
 8007ba6:	79c3      	ldrb	r3, [r0, #7]
 8007ba8:	4053      	eors	r3, r2
 8007baa:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007bac:	7a0a      	ldrb	r2, [r1, #8]
 8007bae:	7a03      	ldrb	r3, [r0, #8]
 8007bb0:	4053      	eors	r3, r2
 8007bb2:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007bb4:	7a4a      	ldrb	r2, [r1, #9]
 8007bb6:	7a43      	ldrb	r3, [r0, #9]
 8007bb8:	4053      	eors	r3, r2
 8007bba:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007bbc:	7a8a      	ldrb	r2, [r1, #10]
 8007bbe:	7a83      	ldrb	r3, [r0, #10]
 8007bc0:	4053      	eors	r3, r2
 8007bc2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007bc4:	7aca      	ldrb	r2, [r1, #11]
 8007bc6:	7ac3      	ldrb	r3, [r0, #11]
 8007bc8:	4053      	eors	r3, r2
 8007bca:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007bcc:	7b0a      	ldrb	r2, [r1, #12]
 8007bce:	7b03      	ldrb	r3, [r0, #12]
 8007bd0:	4053      	eors	r3, r2
 8007bd2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007bd4:	7b4a      	ldrb	r2, [r1, #13]
 8007bd6:	7b43      	ldrb	r3, [r0, #13]
 8007bd8:	4053      	eors	r3, r2
 8007bda:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007bdc:	7b8a      	ldrb	r2, [r1, #14]
 8007bde:	7b83      	ldrb	r3, [r0, #14]
 8007be0:	4053      	eors	r3, r2
 8007be2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007be4:	7bca      	ldrb	r2, [r1, #15]
 8007be6:	7bc3      	ldrb	r3, [r0, #15]
 8007be8:	4053      	eors	r3, r2
 8007bea:	73c3      	strb	r3, [r0, #15]
#endif
}
 8007bec:	4770      	bx	lr

08007bee <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007bee:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007bf0:	780b      	ldrb	r3, [r1, #0]
 8007bf2:	7814      	ldrb	r4, [r2, #0]
 8007bf4:	4063      	eors	r3, r4
 8007bf6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007bf8:	7854      	ldrb	r4, [r2, #1]
 8007bfa:	784b      	ldrb	r3, [r1, #1]
 8007bfc:	4063      	eors	r3, r4
 8007bfe:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007c00:	7894      	ldrb	r4, [r2, #2]
 8007c02:	788b      	ldrb	r3, [r1, #2]
 8007c04:	4063      	eors	r3, r4
 8007c06:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007c08:	78d4      	ldrb	r4, [r2, #3]
 8007c0a:	78cb      	ldrb	r3, [r1, #3]
 8007c0c:	4063      	eors	r3, r4
 8007c0e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8007c10:	7914      	ldrb	r4, [r2, #4]
 8007c12:	790b      	ldrb	r3, [r1, #4]
 8007c14:	4063      	eors	r3, r4
 8007c16:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007c18:	7954      	ldrb	r4, [r2, #5]
 8007c1a:	794b      	ldrb	r3, [r1, #5]
 8007c1c:	4063      	eors	r3, r4
 8007c1e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007c20:	7994      	ldrb	r4, [r2, #6]
 8007c22:	798b      	ldrb	r3, [r1, #6]
 8007c24:	4063      	eors	r3, r4
 8007c26:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007c28:	79d4      	ldrb	r4, [r2, #7]
 8007c2a:	79cb      	ldrb	r3, [r1, #7]
 8007c2c:	4063      	eors	r3, r4
 8007c2e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007c30:	7a14      	ldrb	r4, [r2, #8]
 8007c32:	7a0b      	ldrb	r3, [r1, #8]
 8007c34:	4063      	eors	r3, r4
 8007c36:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007c38:	7a4b      	ldrb	r3, [r1, #9]
 8007c3a:	7a54      	ldrb	r4, [r2, #9]
 8007c3c:	4063      	eors	r3, r4
 8007c3e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007c40:	7a8b      	ldrb	r3, [r1, #10]
 8007c42:	7a94      	ldrb	r4, [r2, #10]
 8007c44:	4063      	eors	r3, r4
 8007c46:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007c48:	7ad4      	ldrb	r4, [r2, #11]
 8007c4a:	7acb      	ldrb	r3, [r1, #11]
 8007c4c:	4063      	eors	r3, r4
 8007c4e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007c50:	7b14      	ldrb	r4, [r2, #12]
 8007c52:	7b0b      	ldrb	r3, [r1, #12]
 8007c54:	4063      	eors	r3, r4
 8007c56:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007c58:	7b54      	ldrb	r4, [r2, #13]
 8007c5a:	7b4b      	ldrb	r3, [r1, #13]
 8007c5c:	4063      	eors	r3, r4
 8007c5e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007c60:	7b94      	ldrb	r4, [r2, #14]
 8007c62:	7b8b      	ldrb	r3, [r1, #14]
 8007c64:	4063      	eors	r3, r4
 8007c66:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007c68:	7bcb      	ldrb	r3, [r1, #15]
 8007c6a:	7bd2      	ldrb	r2, [r2, #15]
 8007c6c:	4053      	eors	r3, r2
 8007c6e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007c70:	bd10      	pop	{r4, pc}
	...

08007c74 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007c74:	000b      	movs	r3, r1
{
 8007c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c78:	3b10      	subs	r3, #16
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	000f      	movs	r7, r1
 8007c7e:	0014      	movs	r4, r2
 8007c80:	b087      	sub	sp, #28
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d805      	bhi.n	8007c92 <lorawan_aes_set_key+0x1e>
 8007c86:	2201      	movs	r2, #1
 8007c88:	409a      	lsls	r2, r3
 8007c8a:	0013      	movs	r3, r2
 8007c8c:	4a3b      	ldr	r2, [pc, #236]	; (8007d7c <lorawan_aes_set_key+0x108>)
 8007c8e:	4213      	tst	r3, r2
 8007c90:	d105      	bne.n	8007c9e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007c92:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007c94:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8007c96:	34f0      	adds	r4, #240	; 0xf0
 8007c98:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007c9a:	b007      	add	sp, #28
 8007c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	429f      	cmp	r7, r3
 8007ca2:	d155      	bne.n	8007d50 <lorawan_aes_set_key+0xdc>
    hi = (keylen + 28) << 2;
 8007ca4:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 8007ca6:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8007ca8:	331c      	adds	r3, #28
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8007cb0:	091b      	lsrs	r3, r3, #4
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	32f0      	adds	r2, #240	; 0xf0
 8007cb6:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007cb8:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8007cba:	003d      	movs	r5, r7
            t0 = s_box(t0);
 8007cbc:	4e30      	ldr	r6, [pc, #192]	; (8007d80 <lorawan_aes_set_key+0x10c>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007cbe:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8007cc0:	1963      	adds	r3, r4, r5
 8007cc2:	1f1a      	subs	r2, r3, #4
 8007cc4:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007cc6:	0039      	movs	r1, r7
        t0 = ctx->ksch[cc - 4];
 8007cc8:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 8007cca:	1eda      	subs	r2, r3, #3
 8007ccc:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007cce:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 8007cd0:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8007cd2:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8007cd4:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8007cd6:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8007cd8:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 8007cda:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8007cdc:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8007cde:	f7f8 fabf 	bl	8000260 <__aeabi_uidivmod>
 8007ce2:	b2c9      	uxtb	r1, r1
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d137      	bne.n	8007d58 <lorawan_aes_set_key+0xe4>
            t0 = s_box(t1) ^ rc;
 8007ce8:	9b01      	ldr	r3, [sp, #4]
            rc = f2(rc);
 8007cea:	311b      	adds	r1, #27
            t0 = s_box(t1) ^ rc;
 8007cec:	5cf2      	ldrb	r2, [r6, r3]
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	5cf3      	ldrb	r3, [r6, r3]
 8007cf6:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	5cf3      	ldrb	r3, [r6, r3]
 8007cfc:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8007cfe:	9b00      	ldr	r3, [sp, #0]
            t0 = s_box(t1) ^ rc;
 8007d00:	9200      	str	r2, [sp, #0]
            t3 = s_box(tt);
 8007d02:	5cf3      	ldrb	r3, [r6, r3]
 8007d04:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	09db      	lsrs	r3, r3, #7
 8007d0a:	434b      	muls	r3, r1
 8007d0c:	9904      	ldr	r1, [sp, #16]
 8007d0e:	0049      	lsls	r1, r1, #1
 8007d10:	404b      	eors	r3, r1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007d16:	1beb      	subs	r3, r5, r7
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	5ce2      	ldrb	r2, [r4, r3]
 8007d1c:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007d1e:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007d20:	4051      	eors	r1, r2
 8007d22:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007d24:	785a      	ldrb	r2, [r3, #1]
 8007d26:	9801      	ldr	r0, [sp, #4]
 8007d28:	1c69      	adds	r1, r5, #1
 8007d2a:	4050      	eors	r0, r2
 8007d2c:	b2c9      	uxtb	r1, r1
 8007d2e:	5460      	strb	r0, [r4, r1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8007d30:	789a      	ldrb	r2, [r3, #2]
 8007d32:	9802      	ldr	r0, [sp, #8]
 8007d34:	1961      	adds	r1, r4, r5
 8007d36:	4050      	eors	r0, r2
 8007d38:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007d3a:	78db      	ldrb	r3, [r3, #3]
 8007d3c:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007d3e:	3504      	adds	r5, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007d40:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007d46:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007d48:	42ab      	cmp	r3, r5
 8007d4a:	d8b9      	bhi.n	8007cc0 <lorawan_aes_set_key+0x4c>
    return 0;
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	e7a4      	b.n	8007c9a <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 8007d50:	5cc2      	ldrb	r2, [r0, r3]
 8007d52:	54e2      	strb	r2, [r4, r3]
 8007d54:	3301      	adds	r3, #1
 8007d56:	e7a3      	b.n	8007ca0 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8007d58:	2f18      	cmp	r7, #24
 8007d5a:	d9dc      	bls.n	8007d16 <lorawan_aes_set_key+0xa2>
 8007d5c:	2910      	cmp	r1, #16
 8007d5e:	d1da      	bne.n	8007d16 <lorawan_aes_set_key+0xa2>
            t0 = s_box(t0);
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	5cf3      	ldrb	r3, [r6, r3]
 8007d64:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	5cf3      	ldrb	r3, [r6, r3]
 8007d6a:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	5cf3      	ldrb	r3, [r6, r3]
 8007d70:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	5cf3      	ldrb	r3, [r6, r3]
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	e7cd      	b.n	8007d16 <lorawan_aes_set_key+0xa2>
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	00010101 	.word	0x00010101
 8007d80:	0800f5ac 	.word	0x0800f5ac

08007d84 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d86:	b099      	sub	sp, #100	; 0x64
 8007d88:	9210      	str	r2, [sp, #64]	; 0x40
 8007d8a:	9113      	str	r1, [sp, #76]	; 0x4c
    if( ctx->rnd )
 8007d8c:	32f0      	adds	r2, #240	; 0xf0
 8007d8e:	7812      	ldrb	r2, [r2, #0]
{
 8007d90:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8007d92:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	d072      	beq.n	8007e7e <lorawan_aes_encrypt+0xfa>
        copy_and_key( s1, in, ctx->ksch );
 8007d98:	0019      	movs	r1, r3
 8007d9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d9c:	a814      	add	r0, sp, #80	; 0x50
 8007d9e:	f7ff ff26 	bl	8007bee <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007da2:	2301      	movs	r3, #1
 8007da4:	9301      	str	r3, [sp, #4]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	011a      	lsls	r2, r3, #4
 8007daa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	9312      	str	r3, [sp, #72]	; 0x48
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8007db0:	ab14      	add	r3, sp, #80	; 0x50
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	9302      	str	r3, [sp, #8]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8007db6:	ab14      	add	r3, sp, #80	; 0x50
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	9303      	str	r3, [sp, #12]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8007dbc:	ab14      	add	r3, sp, #80	; 0x50
 8007dbe:	789b      	ldrb	r3, [r3, #2]
 8007dc0:	9304      	str	r3, [sp, #16]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8007dc2:	ab14      	add	r3, sp, #80	; 0x50
 8007dc4:	78db      	ldrb	r3, [r3, #3]
 8007dc6:	9305      	str	r3, [sp, #20]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8007dc8:	ab14      	add	r3, sp, #80	; 0x50
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	9306      	str	r3, [sp, #24]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8007dce:	ab14      	add	r3, sp, #80	; 0x50
 8007dd0:	795c      	ldrb	r4, [r3, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8007dd2:	799b      	ldrb	r3, [r3, #6]
 8007dd4:	9307      	str	r3, [sp, #28]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8007dd6:	ab14      	add	r3, sp, #80	; 0x50
 8007dd8:	79db      	ldrb	r3, [r3, #7]
 8007dda:	9308      	str	r3, [sp, #32]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8007ddc:	ab14      	add	r3, sp, #80	; 0x50
 8007dde:	7a1b      	ldrb	r3, [r3, #8]
 8007de0:	9309      	str	r3, [sp, #36]	; 0x24
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8007de2:	ab14      	add	r3, sp, #80	; 0x50
 8007de4:	7a5b      	ldrb	r3, [r3, #9]
 8007de6:	930a      	str	r3, [sp, #40]	; 0x28
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8007de8:	ab14      	add	r3, sp, #80	; 0x50
 8007dea:	7a9f      	ldrb	r7, [r3, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8007dec:	7adb      	ldrb	r3, [r3, #11]
 8007dee:	930b      	str	r3, [sp, #44]	; 0x2c
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8007df0:	ab14      	add	r3, sp, #80	; 0x50
 8007df2:	7b1b      	ldrb	r3, [r3, #12]
 8007df4:	930c      	str	r3, [sp, #48]	; 0x30
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8007df6:	ab14      	add	r3, sp, #80	; 0x50
 8007df8:	7b5b      	ldrb	r3, [r3, #13]
 8007dfa:	930d      	str	r3, [sp, #52]	; 0x34
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8007dfc:	ab14      	add	r3, sp, #80	; 0x50
 8007dfe:	7b9b      	ldrb	r3, [r3, #14]
 8007e00:	930e      	str	r3, [sp, #56]	; 0x38
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007e02:	ab14      	add	r3, sp, #80	; 0x50
 8007e04:	7bdb      	ldrb	r3, [r3, #15]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007e06:	9901      	ldr	r1, [sp, #4]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8007e08:	930f      	str	r3, [sp, #60]	; 0x3c
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007e0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e0c:	33f0      	adds	r3, #240	; 0xf0
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	4b74      	ldr	r3, [pc, #464]	; (8007fe4 <lorawan_aes_encrypt+0x260>)
 8007e12:	428a      	cmp	r2, r1
 8007e14:	d835      	bhi.n	8007e82 <lorawan_aes_encrypt+0xfe>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007e16:	9a02      	ldr	r2, [sp, #8]
 8007e18:	a914      	add	r1, sp, #80	; 0x50
 8007e1a:	5c9a      	ldrb	r2, [r3, r2]
 8007e1c:	700a      	strb	r2, [r1, #0]
 8007e1e:	9a06      	ldr	r2, [sp, #24]
 8007e20:	5c9a      	ldrb	r2, [r3, r2]
 8007e22:	710a      	strb	r2, [r1, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e26:	5c9a      	ldrb	r2, [r3, r2]
 8007e28:	720a      	strb	r2, [r1, #8]
 8007e2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e2c:	5c9a      	ldrb	r2, [r3, r2]
 8007e2e:	730a      	strb	r2, [r1, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007e30:	5d1a      	ldrb	r2, [r3, r4]
 8007e32:	704a      	strb	r2, [r1, #1]
 8007e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e36:	5c9a      	ldrb	r2, [r3, r2]
 8007e38:	714a      	strb	r2, [r1, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e3c:	5c9a      	ldrb	r2, [r3, r2]
 8007e3e:	724a      	strb	r2, [r1, #9]
 8007e40:	9a03      	ldr	r2, [sp, #12]
 8007e42:	5c9a      	ldrb	r2, [r3, r2]
 8007e44:	734a      	strb	r2, [r1, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007e46:	5dda      	ldrb	r2, [r3, r7]
 8007e48:	708a      	strb	r2, [r1, #2]
 8007e4a:	9a04      	ldr	r2, [sp, #16]
 8007e4c:	5c9a      	ldrb	r2, [r3, r2]
 8007e4e:	728a      	strb	r2, [r1, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e52:	5c9a      	ldrb	r2, [r3, r2]
 8007e54:	718a      	strb	r2, [r1, #6]
 8007e56:	9a07      	ldr	r2, [sp, #28]
 8007e58:	5c9a      	ldrb	r2, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007e5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007e5c:	738a      	strb	r2, [r1, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e60:	5c9a      	ldrb	r2, [r3, r2]
 8007e62:	73ca      	strb	r2, [r1, #15]
 8007e64:	9a08      	ldr	r2, [sp, #32]
 8007e66:	5c9a      	ldrb	r2, [r3, r2]
 8007e68:	72ca      	strb	r2, [r1, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007e6a:	9a05      	ldr	r2, [sp, #20]
 8007e6c:	5c9a      	ldrb	r2, [r3, r2]
 8007e6e:	71ca      	strb	r2, [r1, #7]
 8007e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e72:	5c9b      	ldrb	r3, [r3, r2]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007e76:	70cb      	strb	r3, [r1, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007e78:	f7ff feb9 	bl	8007bee <copy_and_key>
    return 0;
 8007e7c:	2000      	movs	r0, #0
}
 8007e7e:	b019      	add	sp, #100	; 0x64
 8007e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007e82:	5dda      	ldrb	r2, [r3, r7]
 8007e84:	4958      	ldr	r1, [pc, #352]	; (8007fe8 <lorawan_aes_encrypt+0x264>)
 8007e86:	9211      	str	r2, [sp, #68]	; 0x44
 8007e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e8a:	9d02      	ldr	r5, [sp, #8]
 8007e8c:	5c98      	ldrb	r0, [r3, r2]
 8007e8e:	4a57      	ldr	r2, [pc, #348]	; (8007fec <lorawan_aes_encrypt+0x268>)
 8007e90:	5d56      	ldrb	r6, [r2, r5]
 8007e92:	5d0d      	ldrb	r5, [r1, r4]
 8007e94:	406e      	eors	r6, r5
 8007e96:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007e98:	406e      	eors	r6, r5
 8007e9a:	4046      	eors	r6, r0
 8007e9c:	ad14      	add	r5, sp, #80	; 0x50
 8007e9e:	702e      	strb	r6, [r5, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007ea0:	9d02      	ldr	r5, [sp, #8]
 8007ea2:	5d5e      	ldrb	r6, [r3, r5]
 8007ea4:	5d15      	ldrb	r5, [r2, r4]
 8007ea6:	4070      	eors	r0, r6
 8007ea8:	4068      	eors	r0, r5
 8007eaa:	5dcd      	ldrb	r5, [r1, r7]
 8007eac:	4068      	eors	r0, r5
 8007eae:	ad14      	add	r5, sp, #80	; 0x50
 8007eb0:	7068      	strb	r0, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007eb2:	5d18      	ldrb	r0, [r3, r4]
 8007eb4:	5dd4      	ldrb	r4, [r2, r7]
 8007eb6:	4046      	eors	r6, r0
 8007eb8:	4066      	eors	r6, r4
 8007eba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007ebc:	5d0c      	ldrb	r4, [r1, r4]
 8007ebe:	4066      	eors	r6, r4
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007ec0:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007ec2:	70ae      	strb	r6, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007ec4:	4060      	eors	r0, r4
 8007ec6:	9c02      	ldr	r4, [sp, #8]
 8007ec8:	5d0f      	ldrb	r7, [r1, r4]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007eca:	9c06      	ldr	r4, [sp, #24]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007ecc:	4047      	eors	r7, r0
 8007ece:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007ed0:	5c10      	ldrb	r0, [r2, r0]
 8007ed2:	4078      	eors	r0, r7
 8007ed4:	70e8      	strb	r0, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007ed6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007ed8:	5c1d      	ldrb	r5, [r3, r0]
 8007eda:	9805      	ldr	r0, [sp, #20]
 8007edc:	5c18      	ldrb	r0, [r3, r0]
 8007ede:	5d14      	ldrb	r4, [r2, r4]
 8007ee0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007ee2:	5d8e      	ldrb	r6, [r1, r6]
 8007ee4:	4074      	eors	r4, r6
 8007ee6:	406c      	eors	r4, r5
 8007ee8:	4044      	eors	r4, r0
 8007eea:	ae14      	add	r6, sp, #80	; 0x50
 8007eec:	7134      	strb	r4, [r6, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007eee:	9c06      	ldr	r4, [sp, #24]
 8007ef0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007ef2:	5d1c      	ldrb	r4, [r3, r4]
 8007ef4:	5d96      	ldrb	r6, [r2, r6]
 8007ef6:	4060      	eors	r0, r4
 8007ef8:	4070      	eors	r0, r6
 8007efa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007efc:	5d8e      	ldrb	r6, [r1, r6]
 8007efe:	4070      	eors	r0, r6
 8007f00:	ae14      	add	r6, sp, #80	; 0x50
 8007f02:	7170      	strb	r0, [r6, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007f04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007f08:	5c18      	ldrb	r0, [r3, r0]
 8007f0a:	5d96      	ldrb	r6, [r2, r6]
 8007f0c:	4044      	eors	r4, r0
 8007f0e:	4074      	eors	r4, r6
 8007f10:	9e05      	ldr	r6, [sp, #20]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007f12:	4068      	eors	r0, r5
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007f14:	5d8e      	ldrb	r6, [r1, r6]
 8007f16:	4074      	eors	r4, r6
 8007f18:	ae14      	add	r6, sp, #80	; 0x50
 8007f1a:	71b4      	strb	r4, [r6, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007f1c:	9c06      	ldr	r4, [sp, #24]
 8007f1e:	5d0d      	ldrb	r5, [r1, r4]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007f20:	9c09      	ldr	r4, [sp, #36]	; 0x24
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007f22:	4045      	eors	r5, r0
 8007f24:	9805      	ldr	r0, [sp, #20]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007f26:	5d14      	ldrb	r4, [r2, r4]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007f28:	5c10      	ldrb	r0, [r2, r0]
 8007f2a:	4068      	eors	r0, r5
 8007f2c:	71f0      	strb	r0, [r6, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007f2e:	9804      	ldr	r0, [sp, #16]
 8007f30:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007f32:	5c1d      	ldrb	r5, [r3, r0]
 8007f34:	5d8e      	ldrb	r6, [r1, r6]
 8007f36:	9808      	ldr	r0, [sp, #32]
 8007f38:	4074      	eors	r4, r6
 8007f3a:	5c18      	ldrb	r0, [r3, r0]
 8007f3c:	406c      	eors	r4, r5
 8007f3e:	4044      	eors	r4, r0
 8007f40:	ae14      	add	r6, sp, #80	; 0x50
 8007f42:	7234      	strb	r4, [r6, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007f44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007f46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007f48:	5d1c      	ldrb	r4, [r3, r4]
 8007f4a:	5d96      	ldrb	r6, [r2, r6]
 8007f4c:	4060      	eors	r0, r4
 8007f4e:	4070      	eors	r0, r6
 8007f50:	9e04      	ldr	r6, [sp, #16]
 8007f52:	5d8e      	ldrb	r6, [r1, r6]
 8007f54:	4070      	eors	r0, r6
 8007f56:	ae14      	add	r6, sp, #80	; 0x50
 8007f58:	7270      	strb	r0, [r6, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007f5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f5c:	9e04      	ldr	r6, [sp, #16]
 8007f5e:	5c18      	ldrb	r0, [r3, r0]
 8007f60:	5d96      	ldrb	r6, [r2, r6]
 8007f62:	4044      	eors	r4, r0
 8007f64:	4074      	eors	r4, r6
 8007f66:	9e08      	ldr	r6, [sp, #32]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007f68:	4068      	eors	r0, r5
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007f6a:	5d8e      	ldrb	r6, [r1, r6]
 8007f6c:	4074      	eors	r4, r6
 8007f6e:	ae14      	add	r6, sp, #80	; 0x50
 8007f70:	72b4      	strb	r4, [r6, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007f72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007f74:	5d0d      	ldrb	r5, [r1, r4]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007f76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007f78:	4045      	eors	r5, r0
 8007f7a:	9808      	ldr	r0, [sp, #32]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007f7c:	5d14      	ldrb	r4, [r2, r4]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007f7e:	5c10      	ldrb	r0, [r2, r0]
 8007f80:	4068      	eors	r0, r5
 8007f82:	72f0      	strb	r0, [r6, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007f84:	9807      	ldr	r0, [sp, #28]
 8007f86:	9e03      	ldr	r6, [sp, #12]
 8007f88:	5c1d      	ldrb	r5, [r3, r0]
 8007f8a:	5d8e      	ldrb	r6, [r1, r6]
 8007f8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f8e:	4074      	eors	r4, r6
 8007f90:	5c18      	ldrb	r0, [r3, r0]
 8007f92:	406c      	eors	r4, r5
 8007f94:	4044      	eors	r4, r0
 8007f96:	ae14      	add	r6, sp, #80	; 0x50
 8007f98:	7334      	strb	r4, [r6, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8007f9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007f9c:	9e03      	ldr	r6, [sp, #12]
 8007f9e:	5d1c      	ldrb	r4, [r3, r4]
 8007fa0:	5d96      	ldrb	r6, [r2, r6]
 8007fa2:	4060      	eors	r0, r4
 8007fa4:	4070      	eors	r0, r6
 8007fa6:	9e07      	ldr	r6, [sp, #28]
 8007fa8:	5d8e      	ldrb	r6, [r1, r6]
 8007faa:	4070      	eors	r0, r6
 8007fac:	ae14      	add	r6, sp, #80	; 0x50
 8007fae:	7370      	strb	r0, [r6, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007fb0:	9803      	ldr	r0, [sp, #12]
 8007fb2:	5c1b      	ldrb	r3, [r3, r0]
 8007fb4:	9807      	ldr	r0, [sp, #28]
 8007fb6:	405c      	eors	r4, r3
 8007fb8:	5c10      	ldrb	r0, [r2, r0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007fba:	406b      	eors	r3, r5
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007fbc:	4044      	eors	r4, r0
 8007fbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fc0:	5c08      	ldrb	r0, [r1, r0]
 8007fc2:	4044      	eors	r4, r0
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007fc6:	73b4      	strb	r4, [r6, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007fc8:	5c0d      	ldrb	r5, [r1, r0]
 8007fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fcc:	406b      	eors	r3, r5
 8007fce:	5c55      	ldrb	r5, [r2, r1]
    xor_block(d, k);
 8007fd0:	0030      	movs	r0, r6
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8007fd2:	406b      	eors	r3, r5
 8007fd4:	73f3      	strb	r3, [r6, #15]
    xor_block(d, k);
 8007fd6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007fd8:	f7ff fdc8 	bl	8007b6c <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	e6df      	b.n	8007da4 <lorawan_aes_encrypt+0x20>
 8007fe4:	0800f5ac 	.word	0x0800f5ac
 8007fe8:	0800f4ac 	.word	0x0800f4ac
 8007fec:	0800f3ac 	.word	0x0800f3ac

08007ff0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 8007ff0:	b530      	push	{r4, r5, lr}
 8007ff2:	4c09      	ldr	r4, [pc, #36]	; (8008018 <GetKeyByID+0x28>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	0025      	movs	r5, r4
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 8007ff8:	7c23      	ldrb	r3, [r4, #16]
 8007ffa:	4283      	cmp	r3, r0
 8007ffc:	d106      	bne.n	800800c <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8007ffe:	2311      	movs	r3, #17
      return SECURE_ELEMENT_SUCCESS;
 8008000:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8008002:	4353      	muls	r3, r2
 8008004:	3310      	adds	r3, #16
 8008006:	18eb      	adds	r3, r5, r3
 8008008:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 800800a:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800800c:	3201      	adds	r2, #1
 800800e:	3411      	adds	r4, #17
 8008010:	2a0a      	cmp	r2, #10
 8008012:	d1f1      	bne.n	8007ff8 <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008014:	2003      	movs	r0, #3
 8008016:	e7f8      	b.n	800800a <GetKeyByID+0x1a>
 8008018:	20000064 	.word	0x20000064

0800801c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 800801c:	4770      	bx	lr

0800801e <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800801e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008020:	b0cf      	sub	sp, #316	; 0x13c
 8008022:	0006      	movs	r6, r0
 8008024:	000d      	movs	r5, r1
 8008026:	0017      	movs	r7, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008028:	2402      	movs	r4, #2
{
 800802a:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 800802c:	2900      	cmp	r1, #0
 800802e:	d023      	beq.n	8008078 <ComputeCmac+0x5a>
 8008030:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8008032:	2b00      	cmp	r3, #0
 8008034:	d020      	beq.n	8008078 <ComputeCmac+0x5a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 8008036:	a808      	add	r0, sp, #32
 8008038:	f7ff fc68 	bl	800790c <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	a903      	add	r1, sp, #12
 8008040:	f7ff ffd6 	bl	8007ff0 <GetKeyByID>
 8008044:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 8008046:	d117      	bne.n	8008078 <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	a808      	add	r0, sp, #32
 800804c:	1c59      	adds	r1, r3, #1
 800804e:	f7ff fc6d 	bl	800792c <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 8008052:	2e00      	cmp	r6, #0
 8008054:	d004      	beq.n	8008060 <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 8008056:	2210      	movs	r2, #16
 8008058:	0031      	movs	r1, r6
 800805a:	a808      	add	r0, sp, #32
 800805c:	f7ff fc6d 	bl	800793a <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 8008060:	003a      	movs	r2, r7
 8008062:	0029      	movs	r1, r5
 8008064:	a808      	add	r0, sp, #32
 8008066:	f7ff fc68 	bl	800793a <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800806a:	a908      	add	r1, sp, #32
 800806c:	a804      	add	r0, sp, #16
 800806e:	f7ff fcd4 	bl	8007a1a <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 8008072:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8008074:	9a04      	ldr	r2, [sp, #16]
 8008076:	601a      	str	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 8008078:	0020      	movs	r0, r4
 800807a:	b04f      	add	sp, #316	; 0x13c
 800807c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008080 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 8008080:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8008082:	22aa      	movs	r2, #170	; 0xaa
{
 8008084:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8008086:	4968      	ldr	r1, [pc, #416]	; (8008228 <SecureElementInit+0x1a8>)
{
 8008088:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800808a:	4868      	ldr	r0, [pc, #416]	; (800822c <SecureElementInit+0x1ac>)
 800808c:	f005 f992 	bl	800d3b4 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 8008090:	a911      	add	r1, sp, #68	; 0x44
 8008092:	2000      	movs	r0, #0
 8008094:	f7ff ffac 	bl	8007ff0 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8008098:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 800809a:	0005      	movs	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800809c:	0011      	movs	r1, r2
 800809e:	2002      	movs	r0, #2
 80080a0:	4b63      	ldr	r3, [pc, #396]	; (8008230 <SecureElementInit+0x1b0>)
 80080a2:	f006 febd 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 80080a6:	2d00      	cmp	r5, #0
 80080a8:	d126      	bne.n	80080f8 <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 80080aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080ac:	0029      	movs	r1, r5
 80080ae:	7c1a      	ldrb	r2, [r3, #16]
 80080b0:	2002      	movs	r0, #2
 80080b2:	920f      	str	r2, [sp, #60]	; 0x3c
 80080b4:	7bda      	ldrb	r2, [r3, #15]
 80080b6:	920e      	str	r2, [sp, #56]	; 0x38
 80080b8:	7b9a      	ldrb	r2, [r3, #14]
 80080ba:	920d      	str	r2, [sp, #52]	; 0x34
 80080bc:	7b5a      	ldrb	r2, [r3, #13]
 80080be:	920c      	str	r2, [sp, #48]	; 0x30
 80080c0:	7b1a      	ldrb	r2, [r3, #12]
 80080c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80080c4:	7ada      	ldrb	r2, [r3, #11]
 80080c6:	920a      	str	r2, [sp, #40]	; 0x28
 80080c8:	7a9a      	ldrb	r2, [r3, #10]
 80080ca:	9209      	str	r2, [sp, #36]	; 0x24
 80080cc:	7a5a      	ldrb	r2, [r3, #9]
 80080ce:	9208      	str	r2, [sp, #32]
 80080d0:	7a1a      	ldrb	r2, [r3, #8]
 80080d2:	9207      	str	r2, [sp, #28]
 80080d4:	79da      	ldrb	r2, [r3, #7]
 80080d6:	9206      	str	r2, [sp, #24]
 80080d8:	799a      	ldrb	r2, [r3, #6]
 80080da:	9205      	str	r2, [sp, #20]
 80080dc:	795a      	ldrb	r2, [r3, #5]
 80080de:	9204      	str	r2, [sp, #16]
 80080e0:	791a      	ldrb	r2, [r3, #4]
 80080e2:	9203      	str	r2, [sp, #12]
 80080e4:	78da      	ldrb	r2, [r3, #3]
 80080e6:	9202      	str	r2, [sp, #8]
 80080e8:	789a      	ldrb	r2, [r3, #2]
 80080ea:	9201      	str	r2, [sp, #4]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	002a      	movs	r2, r5
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4b50      	ldr	r3, [pc, #320]	; (8008234 <SecureElementInit+0x1b4>)
 80080f4:	f006 fe94 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 80080f8:	a911      	add	r1, sp, #68	; 0x44
 80080fa:	2001      	movs	r0, #1
 80080fc:	f7ff ff78 	bl	8007ff0 <GetKeyByID>
 8008100:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8008102:	d125      	bne.n	8008150 <SecureElementInit+0xd0>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 8008104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008106:	7c1a      	ldrb	r2, [r3, #16]
 8008108:	920f      	str	r2, [sp, #60]	; 0x3c
 800810a:	7bda      	ldrb	r2, [r3, #15]
 800810c:	920e      	str	r2, [sp, #56]	; 0x38
 800810e:	7b9a      	ldrb	r2, [r3, #14]
 8008110:	920d      	str	r2, [sp, #52]	; 0x34
 8008112:	7b5a      	ldrb	r2, [r3, #13]
 8008114:	920c      	str	r2, [sp, #48]	; 0x30
 8008116:	7b1a      	ldrb	r2, [r3, #12]
 8008118:	920b      	str	r2, [sp, #44]	; 0x2c
 800811a:	7ada      	ldrb	r2, [r3, #11]
 800811c:	920a      	str	r2, [sp, #40]	; 0x28
 800811e:	7a9a      	ldrb	r2, [r3, #10]
 8008120:	9209      	str	r2, [sp, #36]	; 0x24
 8008122:	7a5a      	ldrb	r2, [r3, #9]
 8008124:	9208      	str	r2, [sp, #32]
 8008126:	7a1a      	ldrb	r2, [r3, #8]
 8008128:	9207      	str	r2, [sp, #28]
 800812a:	79da      	ldrb	r2, [r3, #7]
 800812c:	9206      	str	r2, [sp, #24]
 800812e:	799a      	ldrb	r2, [r3, #6]
 8008130:	9205      	str	r2, [sp, #20]
 8008132:	795a      	ldrb	r2, [r3, #5]
 8008134:	9204      	str	r2, [sp, #16]
 8008136:	791a      	ldrb	r2, [r3, #4]
 8008138:	9203      	str	r2, [sp, #12]
 800813a:	78da      	ldrb	r2, [r3, #3]
 800813c:	9202      	str	r2, [sp, #8]
 800813e:	789a      	ldrb	r2, [r3, #2]
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	0002      	movs	r2, r0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2002      	movs	r0, #2
 800814a:	4b3b      	ldr	r3, [pc, #236]	; (8008238 <SecureElementInit+0x1b8>)
 800814c:	f006 fe68 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8008150:	2200      	movs	r2, #0
 8008152:	4b3a      	ldr	r3, [pc, #232]	; (800823c <SecureElementInit+0x1bc>)
 8008154:	0011      	movs	r1, r2
 8008156:	2002      	movs	r0, #2
 8008158:	f006 fe62 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800815c:	a911      	add	r1, sp, #68	; 0x44
 800815e:	2003      	movs	r0, #3
 8008160:	f7ff ff46 	bl	8007ff0 <GetKeyByID>
 8008164:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8008166:	d125      	bne.n	80081b4 <SecureElementInit+0x134>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 8008168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800816a:	7c1a      	ldrb	r2, [r3, #16]
 800816c:	920f      	str	r2, [sp, #60]	; 0x3c
 800816e:	7bda      	ldrb	r2, [r3, #15]
 8008170:	920e      	str	r2, [sp, #56]	; 0x38
 8008172:	7b9a      	ldrb	r2, [r3, #14]
 8008174:	920d      	str	r2, [sp, #52]	; 0x34
 8008176:	7b5a      	ldrb	r2, [r3, #13]
 8008178:	920c      	str	r2, [sp, #48]	; 0x30
 800817a:	7b1a      	ldrb	r2, [r3, #12]
 800817c:	920b      	str	r2, [sp, #44]	; 0x2c
 800817e:	7ada      	ldrb	r2, [r3, #11]
 8008180:	920a      	str	r2, [sp, #40]	; 0x28
 8008182:	7a9a      	ldrb	r2, [r3, #10]
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	7a5a      	ldrb	r2, [r3, #9]
 8008188:	9208      	str	r2, [sp, #32]
 800818a:	7a1a      	ldrb	r2, [r3, #8]
 800818c:	9207      	str	r2, [sp, #28]
 800818e:	79da      	ldrb	r2, [r3, #7]
 8008190:	9206      	str	r2, [sp, #24]
 8008192:	799a      	ldrb	r2, [r3, #6]
 8008194:	9205      	str	r2, [sp, #20]
 8008196:	795a      	ldrb	r2, [r3, #5]
 8008198:	9204      	str	r2, [sp, #16]
 800819a:	791a      	ldrb	r2, [r3, #4]
 800819c:	9203      	str	r2, [sp, #12]
 800819e:	78da      	ldrb	r2, [r3, #3]
 80081a0:	9202      	str	r2, [sp, #8]
 80081a2:	789a      	ldrb	r2, [r3, #2]
 80081a4:	9201      	str	r2, [sp, #4]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	0002      	movs	r2, r0
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2002      	movs	r0, #2
 80081ae:	4b24      	ldr	r3, [pc, #144]	; (8008240 <SecureElementInit+0x1c0>)
 80081b0:	f006 fe36 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 80081b4:	a911      	add	r1, sp, #68	; 0x44
 80081b6:	2002      	movs	r0, #2
 80081b8:	f7ff ff1a 	bl	8007ff0 <GetKeyByID>
 80081bc:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 80081be:	d125      	bne.n	800820c <SecureElementInit+0x18c>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 80081c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c2:	7c1a      	ldrb	r2, [r3, #16]
 80081c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80081c6:	7bda      	ldrb	r2, [r3, #15]
 80081c8:	920e      	str	r2, [sp, #56]	; 0x38
 80081ca:	7b9a      	ldrb	r2, [r3, #14]
 80081cc:	920d      	str	r2, [sp, #52]	; 0x34
 80081ce:	7b5a      	ldrb	r2, [r3, #13]
 80081d0:	920c      	str	r2, [sp, #48]	; 0x30
 80081d2:	7b1a      	ldrb	r2, [r3, #12]
 80081d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80081d6:	7ada      	ldrb	r2, [r3, #11]
 80081d8:	920a      	str	r2, [sp, #40]	; 0x28
 80081da:	7a9a      	ldrb	r2, [r3, #10]
 80081dc:	9209      	str	r2, [sp, #36]	; 0x24
 80081de:	7a5a      	ldrb	r2, [r3, #9]
 80081e0:	9208      	str	r2, [sp, #32]
 80081e2:	7a1a      	ldrb	r2, [r3, #8]
 80081e4:	9207      	str	r2, [sp, #28]
 80081e6:	79da      	ldrb	r2, [r3, #7]
 80081e8:	9206      	str	r2, [sp, #24]
 80081ea:	799a      	ldrb	r2, [r3, #6]
 80081ec:	9205      	str	r2, [sp, #20]
 80081ee:	795a      	ldrb	r2, [r3, #5]
 80081f0:	9204      	str	r2, [sp, #16]
 80081f2:	791a      	ldrb	r2, [r3, #4]
 80081f4:	9203      	str	r2, [sp, #12]
 80081f6:	78da      	ldrb	r2, [r3, #3]
 80081f8:	9202      	str	r2, [sp, #8]
 80081fa:	789a      	ldrb	r2, [r3, #2]
 80081fc:	9201      	str	r2, [sp, #4]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	0002      	movs	r2, r0
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2002      	movs	r0, #2
 8008206:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <SecureElementInit+0x1c4>)
 8008208:	f006 fe0a 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800820c:	2c00      	cmp	r4, #0
 800820e:	d100      	bne.n	8008212 <SecureElementInit+0x192>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 8008210:	4c0d      	ldr	r4, [pc, #52]	; (8008248 <SecureElementInit+0x1c8>)
 8008212:	4d0e      	ldr	r5, [pc, #56]	; (800824c <SecureElementInit+0x1cc>)
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 8008214:	480e      	ldr	r0, [pc, #56]	; (8008250 <SecureElementInit+0x1d0>)
 8008216:	602c      	str	r4, [r5, #0]
 8008218:	f7fa fd4e 	bl	8002cb8 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
}
 8008220:	2000      	movs	r0, #0
 8008222:	b013      	add	sp, #76	; 0x4c
 8008224:	bd30      	pop	{r4, r5, pc}
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	0800f822 	.word	0x0800f822
 800822c:	20000074 	.word	0x20000074
 8008230:	0800f6ac 	.word	0x0800f6ac
 8008234:	0800f6c1 	.word	0x0800f6c1
 8008238:	0800f714 	.word	0x0800f714
 800823c:	0800f767 	.word	0x0800f767
 8008240:	0800f77c 	.word	0x0800f77c
 8008244:	0800f7cf 	.word	0x0800f7cf
 8008248:	0800801d 	.word	0x0800801d
 800824c:	20000670 	.word	0x20000670
 8008250:	20000064 	.word	0x20000064

08008254 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 8008254:	0001      	movs	r1, r0
 8008256:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008258:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 800825a:	2900      	cmp	r1, #0
 800825c:	d004      	beq.n	8008268 <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800825e:	4803      	ldr	r0, [pc, #12]	; (800826c <SecureElementRestoreNvmCtx+0x18>)
 8008260:	22ba      	movs	r2, #186	; 0xba
 8008262:	f005 f8a7 	bl	800d3b4 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8008266:	2000      	movs	r0, #0
  }
}
 8008268:	bd10      	pop	{r4, pc}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	20000064 	.word	0x20000064

08008270 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 8008270:	23ba      	movs	r3, #186	; 0xba
 8008272:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 8008274:	4800      	ldr	r0, [pc, #0]	; (8008278 <SecureElementGetNvmCtx+0x8>)
 8008276:	4770      	bx	lr
 8008278:	20000064 	.word	0x20000064

0800827c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800827c:	b513      	push	{r0, r1, r4, lr}
 800827e:	0004      	movs	r4, r0
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008280:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 8008282:	2b7e      	cmp	r3, #126	; 0x7e
 8008284:	d804      	bhi.n	8008290 <SecureElementComputeAesCmac+0x14>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 8008286:	9804      	ldr	r0, [sp, #16]
 8008288:	9000      	str	r0, [sp, #0]
 800828a:	0020      	movs	r0, r4
 800828c:	f7ff fec7 	bl	800801e <ComputeCmac>
}
 8008290:	bd16      	pop	{r1, r2, r4, pc}

08008292 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 8008292:	b530      	push	{r4, r5, lr}
 8008294:	0004      	movs	r4, r0
 8008296:	0015      	movs	r5, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008298:	2002      	movs	r0, #2
{
 800829a:	b085      	sub	sp, #20
  if (buffer == NULL)
 800829c:	2c00      	cmp	r4, #0
 800829e:	d00e      	beq.n	80082be <SecureElementVerifyAesCmac+0x2c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 80082a0:	2000      	movs	r0, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 80082a2:	aa03      	add	r2, sp, #12
 80082a4:	9200      	str	r2, [sp, #0]
 80082a6:	000a      	movs	r2, r1
 80082a8:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 80082aa:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 80082ac:	f7ff feb7 	bl	800801e <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d104      	bne.n	80082be <SecureElementVerifyAesCmac+0x2c>
  {
    return retval;
  }

  if (expectedCmac != compCmac)
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	1b58      	subs	r0, r3, r5
 80082b8:	1e43      	subs	r3, r0, #1
 80082ba:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 80082bc:	b2c0      	uxtb	r0, r0
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 80082be:	b005      	add	sp, #20
 80082c0:	bd30      	pop	{r4, r5, pc}

080082c2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 80082c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c4:	b0c1      	sub	sp, #260	; 0x104
 80082c6:	000e      	movs	r6, r1
 80082c8:	0015      	movs	r5, r2
 80082ca:	001f      	movs	r7, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80082cc:	2402      	movs	r4, #2
{
 80082ce:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d01b      	beq.n	800830c <SecureElementAesEncrypt+0x4a>
 80082d4:	2f00      	cmp	r7, #0
 80082d6:	d019      	beq.n	800830c <SecureElementAesEncrypt+0x4a>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 80082d8:	230f      	movs	r3, #15
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80082da:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 80082dc:	4019      	ands	r1, r3
 80082de:	421e      	tst	r6, r3
 80082e0:	d114      	bne.n	800830c <SecureElementAesEncrypt+0x4a>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 80082e2:	22f0      	movs	r2, #240	; 0xf0
 80082e4:	a803      	add	r0, sp, #12
 80082e6:	f005 f87a 	bl	800d3de <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 80082ea:	0028      	movs	r0, r5
 80082ec:	a902      	add	r1, sp, #8
 80082ee:	f7ff fe7f 	bl	8007ff0 <GetKeyByID>
 80082f2:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 80082f4:	d10a      	bne.n	800830c <SecureElementAesEncrypt+0x4a>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80082f6:	9b02      	ldr	r3, [sp, #8]
 80082f8:	2110      	movs	r1, #16
 80082fa:	1c58      	adds	r0, r3, #1
 80082fc:	aa03      	add	r2, sp, #12
 80082fe:	f7ff fcb9 	bl	8007c74 <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 8008302:	0035      	movs	r5, r6
 8008304:	1b70      	subs	r0, r6, r5
 8008306:	b2c0      	uxtb	r0, r0
 8008308:	2d00      	cmp	r5, #0
 800830a:	d102      	bne.n	8008312 <SecureElementAesEncrypt+0x50>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 800830c:	0020      	movs	r0, r4
 800830e:	b041      	add	sp, #260	; 0x104
 8008310:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	1839      	adds	r1, r7, r0
 8008316:	aa03      	add	r2, sp, #12
 8008318:	1818      	adds	r0, r3, r0
      size = size - 16;
 800831a:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800831c:	f7ff fd32 	bl	8007d84 <lorawan_aes_encrypt>
      size = size - 16;
 8008320:	b2ad      	uxth	r5, r5
 8008322:	e7ef      	b.n	8008304 <SecureElementAesEncrypt+0x42>

08008324 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 8008324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008326:	4a19      	ldr	r2, [pc, #100]	; (800838c <SecureElementSetKey.part.0+0x68>)
 8008328:	000c      	movs	r4, r1
 800832a:	2300      	movs	r3, #0
 800832c:	0015      	movs	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800832e:	7c11      	ldrb	r1, [r2, #16]
 8008330:	3301      	adds	r3, #1
 8008332:	4281      	cmp	r1, r0
 8008334:	d125      	bne.n	8008382 <SecureElementSetKey.part.0+0x5e>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8008336:	2211      	movs	r2, #17
 8008338:	4353      	muls	r3, r2
 800833a:	4e15      	ldr	r6, [pc, #84]	; (8008390 <SecureElementSetKey.part.0+0x6c>)
 800833c:	18ed      	adds	r5, r5, r3
      if (keyID == MC_KEY_0)
 800833e:	2880      	cmp	r0, #128	; 0x80
 8008340:	d116      	bne.n	8008370 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 8008342:	2100      	movs	r1, #0
 8008344:	3a05      	subs	r2, #5
 8008346:	a801      	add	r0, sp, #4
 8008348:	9100      	str	r1, [sp, #0]
 800834a:	f006 fe46 	bl	800efda <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800834e:	466b      	mov	r3, sp
 8008350:	227f      	movs	r2, #127	; 0x7f
 8008352:	2110      	movs	r1, #16
 8008354:	0020      	movs	r0, r4
 8008356:	f7ff ffb4 	bl	80082c2 <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800835a:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800835c:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800835e:	4669      	mov	r1, sp
 8008360:	0028      	movs	r0, r5
 8008362:	f005 f827 	bl	800d3b4 <memcpy1>
        SeNvmCtxChanged();
 8008366:	6833      	ldr	r3, [r6, #0]
 8008368:	4798      	blx	r3
}
 800836a:	0020      	movs	r0, r4
 800836c:	b004      	add	sp, #16
 800836e:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8008370:	0021      	movs	r1, r4
 8008372:	2210      	movs	r2, #16
 8008374:	0028      	movs	r0, r5
 8008376:	f005 f81d 	bl	800d3b4 <memcpy1>
        SeNvmCtxChanged();
 800837a:	6833      	ldr	r3, [r6, #0]
 800837c:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800837e:	2400      	movs	r4, #0
 8008380:	e7f3      	b.n	800836a <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8008382:	3211      	adds	r2, #17
 8008384:	2b0a      	cmp	r3, #10
 8008386:	d1d2      	bne.n	800832e <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008388:	2403      	movs	r4, #3
 800838a:	e7ee      	b.n	800836a <SecureElementSetKey.part.0+0x46>
 800838c:	20000064 	.word	0x20000064
 8008390:	20000670 	.word	0x20000670

08008394 <SecureElementSetKey>:
{
 8008394:	0003      	movs	r3, r0
 8008396:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 8008398:	2002      	movs	r0, #2
  if (key == NULL)
 800839a:	2900      	cmp	r1, #0
 800839c:	d002      	beq.n	80083a4 <SecureElementSetKey+0x10>
 800839e:	0018      	movs	r0, r3
 80083a0:	f7ff ffc0 	bl	8008324 <SecureElementSetKey.part.0>
}
 80083a4:	bd10      	pop	{r4, pc}

080083a6 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 80083a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083a8:	000d      	movs	r5, r1
 80083aa:	0016      	movs	r6, r2
 80083ac:	001c      	movs	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80083ae:	2002      	movs	r0, #2
  if (input == NULL)
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d016      	beq.n	80083e2 <SecureElementDeriveAndStoreKey+0x3c>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 80083b4:	2b7f      	cmp	r3, #127	; 0x7f
 80083b6:	d102      	bne.n	80083be <SecureElementDeriveAndStoreKey+0x18>
  {
    if (rootKeyID != MC_ROOT_KEY)
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80083b8:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 80083ba:	2a04      	cmp	r2, #4
 80083bc:	d111      	bne.n	80083e2 <SecureElementDeriveAndStoreKey+0x3c>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 80083be:	2100      	movs	r1, #0
 80083c0:	220c      	movs	r2, #12
 80083c2:	a801      	add	r0, sp, #4
 80083c4:	9100      	str	r1, [sp, #0]
 80083c6:	f006 fe08 	bl	800efda <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 80083ca:	466b      	mov	r3, sp
 80083cc:	0032      	movs	r2, r6
 80083ce:	2110      	movs	r1, #16
 80083d0:	0028      	movs	r0, r5
 80083d2:	f7ff ff76 	bl	80082c2 <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d103      	bne.n	80083e2 <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 80083da:	4669      	mov	r1, sp
 80083dc:	0020      	movs	r0, r4
 80083de:	f7ff ffa1 	bl	8008324 <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80083e2:	b004      	add	sp, #16
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080083e8 <SecureElementRandomNumber>:

  return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 80083e8:	b513      	push	{r0, r1, r4, lr}
 80083ea:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80083ec:	2002      	movs	r0, #2
  if (randomNum == NULL)
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	d005      	beq.n	80083fe <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 80083f2:	4b03      	ldr	r3, [pc, #12]	; (8008400 <SecureElementRandomNumber+0x18>)
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	4798      	blx	r3
 80083fa:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 80083fc:	2000      	movs	r0, #0
}
 80083fe:	bd16      	pop	{r1, r2, r4, pc}
 8008400:	0800fc84 	.word	0x0800fc84

08008404 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 8008404:	0001      	movs	r1, r0
 8008406:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008408:	2002      	movs	r0, #2
  if (devEui == NULL)
 800840a:	2900      	cmp	r1, #0
 800840c:	d007      	beq.n	800841e <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800840e:	4804      	ldr	r0, [pc, #16]	; (8008420 <SecureElementSetDevEui+0x1c>)
 8008410:	2208      	movs	r2, #8
 8008412:	f004 ffcf 	bl	800d3b4 <memcpy1>
  SeNvmCtxChanged();
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <SecureElementSetDevEui+0x20>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800841c:	2000      	movs	r0, #0
}
 800841e:	bd10      	pop	{r4, pc}
 8008420:	20000064 	.word	0x20000064
 8008424:	20000670 	.word	0x20000670

08008428 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 8008428:	4800      	ldr	r0, [pc, #0]	; (800842c <SecureElementGetDevEui+0x4>)
 800842a:	4770      	bx	lr
 800842c:	20000064 	.word	0x20000064

08008430 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 8008430:	0001      	movs	r1, r0
 8008432:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008434:	2002      	movs	r0, #2
  if (joinEui == NULL)
 8008436:	2900      	cmp	r1, #0
 8008438:	d007      	beq.n	800844a <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800843a:	4804      	ldr	r0, [pc, #16]	; (800844c <SecureElementSetJoinEui+0x1c>)
 800843c:	2208      	movs	r2, #8
 800843e:	f004 ffb9 	bl	800d3b4 <memcpy1>
  SeNvmCtxChanged();
 8008442:	4b03      	ldr	r3, [pc, #12]	; (8008450 <SecureElementSetJoinEui+0x20>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8008448:	2000      	movs	r0, #0
}
 800844a:	bd10      	pop	{r4, pc}
 800844c:	2000006c 	.word	0x2000006c
 8008450:	20000670 	.word	0x20000670

08008454 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 8008454:	4800      	ldr	r0, [pc, #0]	; (8008458 <SecureElementGetJoinEui+0x4>)
 8008456:	4770      	bx	lr
 8008458:	2000006c 	.word	0x2000006c

0800845c <MlmeIndication>:
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
  RxParams.IsMcpsIndication = 0;
 800845c:	2200      	movs	r2, #0
 800845e:	4b02      	ldr	r3, [pc, #8]	; (8008468 <MlmeIndication+0xc>)
 8008460:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 8008462:	7842      	ldrb	r2, [r0, #1]
 8008464:	705a      	strb	r2, [r3, #1]
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 8008466:	4770      	bx	lr
 8008468:	20000148 	.word	0x20000148

0800846c <LmHandlerDeviceTimeReq>:
{
 800846c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 800846e:	230a      	movs	r3, #10
 8008470:	a801      	add	r0, sp, #4
 8008472:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8008474:	f002 fe5e 	bl	800b134 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 8008478:	1e43      	subs	r3, r0, #1
 800847a:	4198      	sbcs	r0, r3
}
 800847c:	4240      	negs	r0, r0
 800847e:	b007      	add	sp, #28
 8008480:	bd00      	pop	{pc}
	...

08008484 <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 8008484:	2301      	movs	r3, #1
{
 8008486:	b570      	push	{r4, r5, r6, lr}
 8008488:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 800848a:	4810      	ldr	r0, [pc, #64]	; (80084cc <McpsConfirm+0x48>)
 800848c:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mcpsConfirm->Status;
 800848e:	7863      	ldrb	r3, [r4, #1]
 8008490:	7043      	strb	r3, [r0, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 8008492:	78a3      	ldrb	r3, [r4, #2]
 8008494:	7103      	strb	r3, [r0, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	6083      	str	r3, [r0, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800849a:	78e3      	ldrb	r3, [r4, #3]
 800849c:	7503      	strb	r3, [r0, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800849e:	6923      	ldr	r3, [r4, #16]
 80084a0:	7543      	strb	r3, [r0, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 80084a2:	7923      	ldrb	r3, [r4, #4]
 80084a4:	70c3      	strb	r3, [r0, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 80084a6:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <McpsConfirm+0x4c>)
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80084ac:	4d09      	ldr	r5, [pc, #36]	; (80084d4 <McpsConfirm+0x50>)
 80084ae:	002e      	movs	r6, r5
 80084b0:	3614      	adds	r6, #20
  {
    if (LmHandlerPackages[i] != NULL)
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <McpsConfirm+0x3e>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <McpsConfirm+0x3e>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 80084be:	0020      	movs	r0, r4
 80084c0:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80084c2:	3504      	adds	r5, #4
 80084c4:	42b5      	cmp	r5, r6
 80084c6:	d1f4      	bne.n	80084b2 <McpsConfirm+0x2e>
}
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	200007c4 	.word	0x200007c4
 80084d0:	20000768 	.word	0x20000768
 80084d4:	20000788 	.word	0x20000788

080084d8 <LmHandlerConfigure>:
{
 80084d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80084da:	2701      	movs	r7, #1
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80084dc:	4e4b      	ldr	r6, [pc, #300]	; (800860c <LmHandlerConfigure+0x134>)
{
 80084de:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80084e0:	2206      	movs	r2, #6
 80084e2:	0030      	movs	r0, r6
{
 80084e4:	b097      	sub	sp, #92	; 0x5c
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80084e6:	f005 ffd5 	bl	800e494 <UTIL_MEM_cpy_8>
  loraInfo = LoraInfo_GetPtr();
 80084ea:	f7ff f989 	bl	8007800 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80084ee:	003b      	movs	r3, r7
 80084f0:	7832      	ldrb	r2, [r6, #0]
 80084f2:	6841      	ldr	r1, [r0, #4]
 80084f4:	4093      	lsls	r3, r2
 80084f6:	0008      	movs	r0, r1
 80084f8:	4018      	ands	r0, r3
 80084fa:	4219      	tst	r1, r3
 80084fc:	d009      	beq.n	8008512 <LmHandlerConfigure+0x3a>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80084fe:	4944      	ldr	r1, [pc, #272]	; (8008610 <LmHandlerConfigure+0x138>)
 8008500:	4844      	ldr	r0, [pc, #272]	; (8008614 <LmHandlerConfigure+0x13c>)
 8008502:	f002 f8bd 	bl	800a680 <LoRaMacInitialization>
 8008506:	9009      	str	r0, [sp, #36]	; 0x24
 8008508:	2800      	cmp	r0, #0
 800850a:	d008      	beq.n	800851e <LmHandlerConfigure+0x46>
      return LORAMAC_HANDLER_ERROR;
 800850c:	2001      	movs	r0, #1
 800850e:	4240      	negs	r0, r0
 8008510:	e061      	b.n	80085d6 <LmHandlerConfigure+0xfe>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008512:	003a      	movs	r2, r7
 8008514:	0001      	movs	r1, r0
 8008516:	4b40      	ldr	r3, [pc, #256]	; (8008618 <LmHandlerConfigure+0x140>)
 8008518:	f006 fc82 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800851c:	e7fe      	b.n	800851c <LmHandlerConfigure+0x44>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800851e:	f000 faec 	bl	8008afa <NvmCtxMgmtRestore>
 8008522:	ac0d      	add	r4, sp, #52	; 0x34
 8008524:	4b3d      	ldr	r3, [pc, #244]	; (800861c <LmHandlerConfigure+0x144>)
 8008526:	4d3e      	ldr	r5, [pc, #248]	; (8008620 <LmHandlerConfigure+0x148>)
 8008528:	2800      	cmp	r0, #0
 800852a:	d156      	bne.n	80085da <LmHandlerConfigure+0x102>
    CtxRestoreDone = true;
 800852c:	701f      	strb	r7, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "DevEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 800852e:	2200      	movs	r2, #0
 8008530:	79eb      	ldrb	r3, [r5, #7]
 8008532:	0011      	movs	r1, r2
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	79ab      	ldrb	r3, [r5, #6]
 8008538:	2002      	movs	r0, #2
 800853a:	9306      	str	r3, [sp, #24]
 800853c:	796b      	ldrb	r3, [r5, #5]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 800853e:	270f      	movs	r7, #15
  MW_LOG(TS_OFF, VLEVEL_M, "DevEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	792b      	ldrb	r3, [r5, #4]
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	78eb      	ldrb	r3, [r5, #3]
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	78ab      	ldrb	r3, [r5, #2]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	786b      	ldrb	r3, [r5, #1]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	782b      	ldrb	r3, [r5, #0]
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	4b33      	ldr	r3, [pc, #204]	; (8008624 <LmHandlerConfigure+0x14c>)
 8008558:	f006 fc62 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "AppEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 800855c:	2200      	movs	r2, #0
 800855e:	7beb      	ldrb	r3, [r5, #15]
 8008560:	0011      	movs	r1, r2
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	7bab      	ldrb	r3, [r5, #14]
 8008566:	2002      	movs	r0, #2
 8008568:	9306      	str	r3, [sp, #24]
 800856a:	7b6b      	ldrb	r3, [r5, #13]
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	7b2b      	ldrb	r3, [r5, #12]
 8008570:	9304      	str	r3, [sp, #16]
 8008572:	7aeb      	ldrb	r3, [r5, #11]
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	7aab      	ldrb	r3, [r5, #10]
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	7a6b      	ldrb	r3, [r5, #9]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	7a2b      	ldrb	r3, [r5, #8]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008580:	2500      	movs	r5, #0
  MW_LOG(TS_OFF, VLEVEL_M, "AppEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	4b28      	ldr	r3, [pc, #160]	; (8008628 <LmHandlerConfigure+0x150>)
 8008586:	f006 fc4b 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800858a:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 800858c:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800858e:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8008590:	7027      	strb	r7, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008592:	f002 fbb1 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8008596:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008598:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 800859a:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800859c:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800859e:	f002 fbab 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 80085a2:	2304      	movs	r3, #4
 80085a4:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80085a6:	78b3      	ldrb	r3, [r6, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 80085a8:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80085aa:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 80085ac:	f002 fba4 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80085b0:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 80085b2:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80085b4:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 80085b6:	3b0e      	subs	r3, #14
 80085b8:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 80085ba:	f002 fb9d 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 80085be:	a90b      	add	r1, sp, #44	; 0x2c
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 80085c0:	7830      	ldrb	r0, [r6, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 80085c2:	700f      	strb	r7, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 80085c4:	f003 fe99 	bl	800c2fa <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 80085c8:	1e43      	subs	r3, r0, #1
 80085ca:	4198      	sbcs	r0, r3
 80085cc:	b2c0      	uxtb	r0, r0
 80085ce:	7130      	strb	r0, [r6, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 80085d0:	f003 f85e 	bl	800b690 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 80085d4:	0028      	movs	r0, r5
}
 80085d6:	b017      	add	sp, #92	; 0x5c
 80085d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 80085da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    LoRaMacMibGetRequestConfirm(&mibReq);
 80085dc:	0020      	movs	r0, r4
    CtxRestoreDone = false;
 80085de:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 80085e0:	2302      	movs	r3, #2
 80085e2:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80085e4:	f002 fa8a 	bl	800aafc <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 80085e8:	6861      	ldr	r1, [r4, #4]
 80085ea:	2208      	movs	r2, #8
 80085ec:	0028      	movs	r0, r5
 80085ee:	f004 fee1 	bl	800d3b4 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 80085f2:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 80085f4:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 80085f6:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80085f8:	f002 fa80 	bl	800aafc <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 80085fc:	0028      	movs	r0, r5
 80085fe:	2208      	movs	r2, #8
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	3008      	adds	r0, #8
 8008604:	f004 fed6 	bl	800d3b4 <memcpy1>
 8008608:	e791      	b.n	800852e <LmHandlerConfigure+0x56>
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	2000079c 	.word	0x2000079c
 8008610:	200007a4 	.word	0x200007a4
 8008614:	200007b4 	.word	0x200007b4
 8008618:	0800f8cc 	.word	0x0800f8cc
 800861c:	20000766 	.word	0x20000766
 8008620:	20000120 	.word	0x20000120
 8008624:	0800f915 	.word	0x0800f915
 8008628:	0800f941 	.word	0x0800f941

0800862c <LmHandlerProcess>:
{
 800862c:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 800862e:	f001 fb79 	bl	8009d24 <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008632:	4c0c      	ldr	r4, [pc, #48]	; (8008664 <LmHandlerProcess+0x38>)
 8008634:	0025      	movs	r5, r4
 8008636:	3514      	adds	r5, #20
    if ((LmHandlerPackages[i] != NULL) &&
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <LmHandlerProcess+0x2a>
 800863e:	691a      	ldr	r2, [r3, #16]
 8008640:	2a00      	cmp	r2, #0
 8008642:	d008      	beq.n	8008656 <LmHandlerProcess+0x2a>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <LmHandlerProcess+0x2a>
    return LmHandlerPackages[id]->IsInitialized();
 800864a:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 800864c:	2800      	cmp	r0, #0
 800864e:	d002      	beq.n	8008656 <LmHandlerProcess+0x2a>
      LmHandlerPackages[i]->Process();
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008656:	3404      	adds	r4, #4
 8008658:	42a5      	cmp	r5, r4
 800865a:	d1ed      	bne.n	8008638 <LmHandlerProcess+0xc>
  NvmCtxMgmtStore();
 800865c:	f000 fa4b 	bl	8008af6 <NvmCtxMgmtStore>
}
 8008660:	bd70      	pop	{r4, r5, r6, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	20000788 	.word	0x20000788

08008668 <LmHandlerJoinStatus>:
{
 8008668:	b500      	push	{lr}
 800866a:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800866c:	2301      	movs	r3, #1
 800866e:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008670:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008672:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008674:	f002 fa42 	bl	800aafc <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 8008678:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 800867a:	4298      	cmp	r0, r3
 800867c:	d104      	bne.n	8008688 <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800867e:	466b      	mov	r3, sp
 8008680:	7a1b      	ldrb	r3, [r3, #8]
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	4193      	sbcs	r3, r2
      return LORAMAC_HANDLER_RESET;
 8008686:	b2db      	uxtb	r3, r3
}
 8008688:	0018      	movs	r0, r3
 800868a:	b00b      	add	sp, #44	; 0x2c
 800868c:	bd00      	pop	{pc}
	...

08008690 <LmHandlerRequestClass>:
{
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	b08a      	sub	sp, #40	; 0x28
 8008694:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008696:	f7ff ffe7 	bl	8008668 <LmHandlerJoinStatus>
 800869a:	2801      	cmp	r0, #1
 800869c:	d133      	bne.n	8008706 <LmHandlerRequestClass+0x76>
  mibReq.Type = MIB_DEVICE_CLASS;
 800869e:	2300      	movs	r3, #0
 80086a0:	ae01      	add	r6, sp, #4
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086a2:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 80086a4:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086a6:	f002 fa29 	bl	800aafc <LoRaMacMibGetRequestConfirm>
 80086aa:	1e04      	subs	r4, r0, #0
 80086ac:	d001      	beq.n	80086b2 <LmHandlerRequestClass+0x22>
    switch (newClass)
 80086ae:	2401      	movs	r4, #1
 80086b0:	e02a      	b.n	8008708 <LmHandlerRequestClass+0x78>
  currentClass = mibReq.Param.Class;
 80086b2:	7933      	ldrb	r3, [r6, #4]
  if (currentClass != newClass)
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	d103      	bne.n	80086c0 <LmHandlerRequestClass+0x30>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80086b8:	2400      	movs	r4, #0
}
 80086ba:	0020      	movs	r0, r4
 80086bc:	b00a      	add	sp, #40	; 0x28
 80086be:	bd70      	pop	{r4, r5, r6, pc}
    switch (newClass)
 80086c0:	2d01      	cmp	r5, #1
 80086c2:	d0f4      	beq.n	80086ae <LmHandlerRequestClass+0x1e>
 80086c4:	2d02      	cmp	r5, #2
 80086c6:	d010      	beq.n	80086ea <LmHandlerRequestClass+0x5a>
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	d1f6      	bne.n	80086ba <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0f3      	beq.n	80086b8 <LmHandlerRequestClass+0x28>
          mibReq.Param.Class = CLASS_A;
 80086d0:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80086d2:	0030      	movs	r0, r6
 80086d4:	f002 fb10 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d1e8      	bne.n	80086ae <LmHandlerRequestClass+0x1e>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <LmHandlerRequestClass+0x7c>)
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 80086de:	0020      	movs	r0, r4
            if (LmHandlerCallbacks.OnClassChange != NULL)
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0e8      	beq.n	80086b8 <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 80086e6:	4798      	blx	r3
 80086e8:	e7e7      	b.n	80086ba <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1df      	bne.n	80086ae <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80086ee:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 80086f0:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80086f2:	f002 fb01 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
 80086f6:	1e04      	subs	r4, r0, #0
 80086f8:	d1d9      	bne.n	80086ae <LmHandlerRequestClass+0x1e>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 80086fa:	4b04      	ldr	r3, [pc, #16]	; (800870c <LmHandlerRequestClass+0x7c>)
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0da      	beq.n	80086b8 <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 8008702:	0028      	movs	r0, r5
 8008704:	e7ef      	b.n	80086e6 <LmHandlerRequestClass+0x56>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008706:	2403      	movs	r4, #3
    switch (newClass)
 8008708:	4264      	negs	r4, r4
 800870a:	e7d6      	b.n	80086ba <LmHandlerRequestClass+0x2a>
 800870c:	20000768 	.word	0x20000768

08008710 <LmHandlerJoin>:
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008710:	2301      	movs	r3, #1
{
 8008712:	b5f0      	push	{r4, r5, r6, r7, lr}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008714:	4d1d      	ldr	r5, [pc, #116]	; (800878c <LmHandlerJoin+0x7c>)
{
 8008716:	b08d      	sub	sp, #52	; 0x34
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008718:	70ab      	strb	r3, [r5, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800871a:	2300      	movs	r3, #0
 800871c:	706b      	strb	r3, [r5, #1]
    if (CtxRestoreDone == false)
 800871e:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <LmHandlerJoin+0x80>)
 8008720:	ac03      	add	r4, sp, #12
 8008722:	781e      	ldrb	r6, [r3, #0]
 8008724:	2e00      	cmp	r6, #0
 8008726:	d11f      	bne.n	8008768 <LmHandlerJoin+0x58>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008728:	2327      	movs	r3, #39	; 0x27
 800872a:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800872c:	4b19      	ldr	r3, [pc, #100]	; (8008794 <LmHandlerJoin+0x84>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 800872e:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008730:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008732:	f002 fae1 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 8008736:	2305      	movs	r3, #5
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8008738:	4f17      	ldr	r7, [pc, #92]	; (8008798 <LmHandlerJoin+0x88>)
      mibReq.Type = MIB_NET_ID;
 800873a:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800873c:	693b      	ldr	r3, [r7, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800873e:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8008740:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008742:	f002 fad9 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 8008746:	f7fa fadb 	bl	8002d00 <GetDevAddr>
      mibReq.Type = MIB_DEV_ADDR;
 800874a:	2306      	movs	r3, #6
      CommissioningParams.DevAddr = GetDevAddr();
 800874c:	6178      	str	r0, [r7, #20]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800874e:	6060      	str	r0, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008750:	0020      	movs	r0, r4
      mibReq.Type = MIB_DEV_ADDR;
 8008752:	7023      	strb	r3, [r4, #0]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008754:	f002 fad0 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	0032      	movs	r2, r6
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	0031      	movs	r1, r6
 8008760:	2002      	movs	r0, #2
 8008762:	4b0e      	ldr	r3, [pc, #56]	; (800879c <LmHandlerJoin+0x8c>)
 8008764:	f006 fb5c 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 8008768:	f002 f964 	bl	800aa34 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800876c:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 800876e:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008770:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008772:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008774:	f002 fac0 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008778:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <LmHandlerJoin+0x90>)
 800877a:	0028      	movs	r0, r5
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008780:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <LmHandlerJoin+0x94>)
 8008782:	7858      	ldrb	r0, [r3, #1]
 8008784:	f7ff ff84 	bl	8008690 <LmHandlerRequestClass>
}
 8008788:	b00d      	add	sp, #52	; 0x34
 800878a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800878c:	20000138 	.word	0x20000138
 8008790:	20000766 	.word	0x20000766
 8008794:	01000300 	.word	0x01000300
 8008798:	20000120 	.word	0x20000120
 800879c:	0800f96d 	.word	0x0800f96d
 80087a0:	20000768 	.word	0x20000768
 80087a4:	2000079c 	.word	0x2000079c

080087a8 <LmHandlerSend>:
{
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	0005      	movs	r5, r0
 80087ae:	000e      	movs	r6, r1
 80087b0:	0017      	movs	r7, r2
 80087b2:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 80087b4:	f001 faa4 	bl	8009d00 <LoRaMacIsBusy>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d14c      	bne.n	8008856 <LmHandlerSend+0xae>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80087bc:	f7ff ff54 	bl	8008668 <LmHandlerJoinStatus>
 80087c0:	2801      	cmp	r0, #1
 80087c2:	d006      	beq.n	80087d2 <LmHandlerSend+0x2a>
    LmHandlerJoin(JoinParams.Mode);
 80087c4:	4b27      	ldr	r3, [pc, #156]	; (8008864 <LmHandlerSend+0xbc>)
 80087c6:	7898      	ldrb	r0, [r3, #2]
 80087c8:	f7ff ffa2 	bl	8008710 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80087cc:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80087ce:	4240      	negs	r0, r0
 80087d0:	e02f      	b.n	8008832 <LmHandlerSend+0x8a>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 80087d2:	4c25      	ldr	r4, [pc, #148]	; (8008868 <LmHandlerSend+0xc0>)
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4798      	blx	r3
 80087da:	2800      	cmp	r0, #0
 80087dc:	d006      	beq.n	80087ec <LmHandlerSend+0x44>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	782b      	ldrb	r3, [r5, #0]
 80087e2:	7812      	ldrb	r2, [r2, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d001      	beq.n	80087ec <LmHandlerSend+0x44>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d136      	bne.n	800885a <LmHandlerSend+0xb2>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80087ec:	4b1f      	ldr	r3, [pc, #124]	; (800886c <LmHandlerSend+0xc4>)
 80087ee:	ac03      	add	r4, sp, #12
 80087f0:	78db      	ldrb	r3, [r3, #3]
  if ((status = LoRaMacQueryTxPossible(appData->BufferSize, &txInfo)) != LORAMAC_STATUS_OK)
 80087f2:	a902      	add	r1, sp, #8
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80087f4:	73a3      	strb	r3, [r4, #14]
  if ((status = LoRaMacQueryTxPossible(appData->BufferSize, &txInfo)) != LORAMAC_STATUS_OK)
 80087f6:	7868      	ldrb	r0, [r5, #1]
 80087f8:	f002 f924 	bl	800aa44 <LoRaMacQueryTxPossible>
 80087fc:	4b1c      	ldr	r3, [pc, #112]	; (8008870 <LmHandlerSend+0xc8>)
 80087fe:	2800      	cmp	r0, #0
 8008800:	d019      	beq.n	8008836 <LmHandlerSend+0x8e>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008802:	2200      	movs	r2, #0
 8008804:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 8008806:	7022      	strb	r2, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008808:	60a2      	str	r2, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800880a:	81a2      	strh	r2, [r4, #12]
  TxParams.AppData = *appData;
 800880c:	001a      	movs	r2, r3
 800880e:	320c      	adds	r2, #12
 8008810:	cd03      	ldmia	r5!, {r0, r1}
 8008812:	c203      	stmia	r2!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <LmHandlerSend+0xc4>)
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008816:	0020      	movs	r0, r4
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008818:	78d2      	ldrb	r2, [r2, #3]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800881a:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800881c:	711a      	strb	r2, [r3, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800881e:	f002 fd81 	bl	800b324 <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 8008822:	2f00      	cmp	r7, #0
 8008824:	d001      	beq.n	800882a <LmHandlerSend+0x82>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	603b      	str	r3, [r7, #0]
  switch(status)
 800882a:	2811      	cmp	r0, #17
 800882c:	d817      	bhi.n	800885e <LmHandlerSend+0xb6>
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <LmHandlerSend+0xcc>)
 8008830:	5618      	ldrsb	r0, [r3, r0]
}
 8008832:	b009      	add	sp, #36	; 0x24
 8008834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 8008836:	709e      	strb	r6, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008838:	782a      	ldrb	r2, [r5, #0]
 800883a:	7122      	strb	r2, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800883c:	786a      	ldrb	r2, [r5, #1]
 800883e:	81a2      	strh	r2, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008840:	686a      	ldr	r2, [r5, #4]
 8008842:	60a2      	str	r2, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 8008844:	2e00      	cmp	r6, #0
 8008846:	d101      	bne.n	800884c <LmHandlerSend+0xa4>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8008848:	7026      	strb	r6, [r4, #0]
 800884a:	e7df      	b.n	800880c <LmHandlerSend+0x64>
      mcpsReq.Type = MCPS_CONFIRMED;
 800884c:	2201      	movs	r2, #1
 800884e:	7022      	strb	r2, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 8008850:	3207      	adds	r2, #7
 8008852:	73e2      	strb	r2, [r4, #15]
 8008854:	e7da      	b.n	800880c <LmHandlerSend+0x64>
    return LORAMAC_HANDLER_BUSY_ERROR;
 8008856:	2002      	movs	r0, #2
 8008858:	e7b9      	b.n	80087ce <LmHandlerSend+0x26>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800885a:	2004      	movs	r0, #4
 800885c:	e7b7      	b.n	80087ce <LmHandlerSend+0x26>
 800885e:	2001      	movs	r0, #1
 8008860:	e7b5      	b.n	80087ce <LmHandlerSend+0x26>
 8008862:	46c0      	nop			; (mov r8, r8)
 8008864:	20000138 	.word	0x20000138
 8008868:	20000788 	.word	0x20000788
 800886c:	2000079c 	.word	0x2000079c
 8008870:	200007c4 	.word	0x200007c4
 8008874:	0800f97f 	.word	0x0800f97f

08008878 <LmHandlerPackageRegister>:
{
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	0004      	movs	r4, r0
 800887c:	000d      	movs	r5, r1
  switch (id)
 800887e:	2800      	cmp	r0, #0
 8008880:	d002      	beq.n	8008888 <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 8008882:	2001      	movs	r0, #1
 8008884:	4240      	negs	r0, r0
}
 8008886:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 8008888:	f000 faa4 	bl	8008dd4 <LmphCompliancePackageFactory>
  if (package != NULL)
 800888c:	2800      	cmp	r0, #0
 800888e:	d0f8      	beq.n	8008882 <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008892:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 8008894:	6018      	str	r0, [r3, #0]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008896:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008898:	4907      	ldr	r1, [pc, #28]	; (80088b8 <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800889a:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <LmHandlerPackageRegister+0x44>)
 800889e:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <LmHandlerPackageRegister+0x48>)
 80088a2:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 80088a4:	6843      	ldr	r3, [r0, #4]
 80088a6:	0028      	movs	r0, r5
 80088a8:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 80088aa:	0020      	movs	r0, r4
 80088ac:	e7eb      	b.n	8008886 <LmHandlerPackageRegister+0xe>
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	20000788 	.word	0x20000788
 80088b4:	08008711 	.word	0x08008711
 80088b8:	20000674 	.word	0x20000674
 80088bc:	080087a9 	.word	0x080087a9
 80088c0:	0800846d 	.word	0x0800846d

080088c4 <LmHandlerInit>:
{
 80088c4:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 80088c6:	4c10      	ldr	r4, [pc, #64]	; (8008908 <LmHandlerInit+0x44>)
{
 80088c8:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 80088ca:	0020      	movs	r0, r4
 80088cc:	2220      	movs	r2, #32
 80088ce:	f005 fde1 	bl	800e494 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80088d2:	4b0e      	ldr	r3, [pc, #56]	; (800890c <LmHandlerInit+0x48>)
 80088d4:	4a0e      	ldr	r2, [pc, #56]	; (8008910 <LmHandlerInit+0x4c>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80088d6:	490f      	ldr	r1, [pc, #60]	; (8008914 <LmHandlerInit+0x50>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80088d8:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80088da:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80088dc:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80088de:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80088e0:	4a0e      	ldr	r2, [pc, #56]	; (800891c <LmHandlerInit+0x58>)
 80088e2:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80088e4:	4a0e      	ldr	r2, [pc, #56]	; (8008920 <LmHandlerInit+0x5c>)
 80088e6:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 80088e8:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <LmHandlerInit+0x60>)
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 80088ee:	6862      	ldr	r2, [r4, #4]
 80088f0:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 80088f2:	4a0d      	ldr	r2, [pc, #52]	; (8008928 <LmHandlerInit+0x64>)
 80088f4:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 80088f6:	68a2      	ldr	r2, [r4, #8]
 80088f8:	60da      	str	r2, [r3, #12]
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80088fa:	f7ff ffbd 	bl	8008878 <LmHandlerPackageRegister>
 80088fe:	1e43      	subs	r3, r0, #1
 8008900:	4198      	sbcs	r0, r3
}
 8008902:	4240      	negs	r0, r0
 8008904:	bd10      	pop	{r4, pc}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	20000768 	.word	0x20000768
 800890c:	200007b4 	.word	0x200007b4
 8008910:	08008485 	.word	0x08008485
 8008914:	2000013c 	.word	0x2000013c
 8008918:	08008959 	.word	0x08008959
 800891c:	08008a51 	.word	0x08008a51
 8008920:	0800845d 	.word	0x0800845d
 8008924:	200007a4 	.word	0x200007a4
 8008928:	08008af5 	.word	0x08008af5

0800892c <LmHandlerGetCurrentClass>:
{
 800892c:	b510      	push	{r4, lr}
 800892e:	0004      	movs	r4, r0
 8008930:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 8008932:	2800      	cmp	r0, #0
 8008934:	d103      	bne.n	800893e <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008936:	2001      	movs	r0, #1
 8008938:	4240      	negs	r0, r0
}
 800893a:	b00a      	add	sp, #40	; 0x28
 800893c:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 800893e:	2300      	movs	r3, #0
 8008940:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008942:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 8008944:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008946:	f002 f8d9 	bl	800aafc <LoRaMacMibGetRequestConfirm>
 800894a:	2800      	cmp	r0, #0
 800894c:	d1f3      	bne.n	8008936 <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 800894e:	466b      	mov	r3, sp
 8008950:	7a1b      	ldrb	r3, [r3, #8]
 8008952:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 8008954:	e7f1      	b.n	800893a <LmHandlerGetCurrentClass+0xe>
	...

08008958 <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 8008958:	2301      	movs	r3, #1
{
 800895a:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 800895c:	492c      	ldr	r1, [pc, #176]	; (8008a10 <McpsIndication+0xb8>)
{
 800895e:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 8008960:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 8008962:	7843      	ldrb	r3, [r0, #1]
{
 8008964:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 8008966:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 8008968:	2b00      	cmp	r3, #0
 800896a:	d146      	bne.n	80089fa <McpsIndication+0xa2>
  if (mcpsIndication->BufferSize > 0)
 800896c:	7b03      	ldrb	r3, [r0, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d013      	beq.n	800899a <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008972:	7902      	ldrb	r2, [r0, #4]
 8008974:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 8008976:	89c2      	ldrh	r2, [r0, #14]
 8008978:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800897a:	7c02      	ldrb	r2, [r0, #16]
 800897c:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800897e:	6942      	ldr	r2, [r0, #20]
 8008980:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 8008982:	7c42      	ldrb	r2, [r0, #17]
 8008984:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008986:	78c2      	ldrb	r2, [r0, #3]
 8008988:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 800898a:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800898c:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 800898e:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 8008990:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 8008992:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <McpsIndication+0xbc>)
 8008994:	a802      	add	r0, sp, #8
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800899a:	7f23      	ldrb	r3, [r4, #28]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <McpsIndication+0x52>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 80089a0:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <McpsIndication+0xbc>)
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d000      	beq.n	80089aa <McpsIndication+0x52>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 80089a8:	4798      	blx	r3
 80089aa:	4e1b      	ldr	r6, [pc, #108]	; (8008a18 <McpsIndication+0xc0>)
{
 80089ac:	2500      	movs	r5, #0
 80089ae:	0037      	movs	r7, r6
    if (LmHandlerPackages[i] != NULL)
 80089b0:	6833      	ldr	r3, [r6, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <McpsIndication+0x74>
          }
          break;
        }
        case PACKAGE_MCPS_INDICATION:
        {
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 80089b6:	699a      	ldr	r2, [r3, #24]
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d007      	beq.n	80089cc <McpsIndication+0x74>
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	78e3      	ldrb	r3, [r4, #3]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d11c      	bne.n	80089fe <McpsIndication+0xa6>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
          {
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 80089c4:	6833      	ldr	r3, [r6, #0]
 80089c6:	0020      	movs	r0, r4
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80089cc:	3501      	adds	r5, #1
 80089ce:	b2eb      	uxtb	r3, r5
 80089d0:	3604      	adds	r6, #4
 80089d2:	b26d      	sxtb	r5, r5
 80089d4:	2b05      	cmp	r3, #5
 80089d6:	d1eb      	bne.n	80089b0 <McpsIndication+0x58>
  LmHandlerGetCurrentClass(&deviceClass);
 80089d8:	466b      	mov	r3, sp
 80089da:	1ddd      	adds	r5, r3, #7
 80089dc:	0028      	movs	r0, r5
 80089de:	f7ff ffa5 	bl	800892c <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80089e2:	7963      	ldrb	r3, [r4, #5]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d108      	bne.n	80089fa <McpsIndication+0xa2>
 80089e8:	7829      	ldrb	r1, [r5, #0]
 80089ea:	2900      	cmp	r1, #0
 80089ec:	d105      	bne.n	80089fa <McpsIndication+0xa2>
    LmHandlerAppData_t appData =
 80089ee:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80089f0:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 80089f2:	8001      	strh	r1, [r0, #0]
 80089f4:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80089f6:	f7ff fed7 	bl	80087a8 <LmHandlerSend>
}
 80089fa:	b007      	add	sp, #28
 80089fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	d1e4      	bne.n	80089cc <McpsIndication+0x74>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	4798      	blx	r3
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1db      	bne.n	80089c4 <McpsIndication+0x6c>
 8008a0c:	e7de      	b.n	80089cc <McpsIndication+0x74>
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	20000148 	.word	0x20000148
 8008a14:	20000768 	.word	0x20000768
 8008a18:	20000788 	.word	0x20000788

08008a1c <LmHandlerGetTxDatarate>:
{
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	0004      	movs	r4, r0
 8008a20:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d103      	bne.n	8008a2e <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008a26:	2001      	movs	r0, #1
 8008a28:	4240      	negs	r0, r0
}
 8008a2a:	b00a      	add	sp, #40	; 0x28
 8008a2c:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008a2e:	231f      	movs	r3, #31
 8008a30:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008a32:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008a34:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008a36:	f002 f861 	bl	800aafc <LoRaMacMibGetRequestConfirm>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1f3      	bne.n	8008a26 <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008a3e:	466b      	mov	r3, sp
 8008a40:	7a1b      	ldrb	r3, [r3, #8]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008a42:	4a02      	ldr	r2, [pc, #8]	; (8008a4c <LmHandlerGetTxDatarate+0x30>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	7023      	strb	r3, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008a48:	70d3      	strb	r3, [r2, #3]
  return LORAMAC_HANDLER_SUCCESS;
 8008a4a:	e7ee      	b.n	8008a2a <LmHandlerGetTxDatarate+0xe>
 8008a4c:	2000079c 	.word	0x2000079c

08008a50 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 8008a50:	2200      	movs	r2, #0
{
 8008a52:	b570      	push	{r4, r5, r6, lr}
 8008a54:	4d1a      	ldr	r5, [pc, #104]	; (8008ac0 <MlmeConfirm+0x70>)
 8008a56:	0004      	movs	r4, r0
 8008a58:	002e      	movs	r6, r5
  TxParams.IsMcpsConfirm = 0;
 8008a5a:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <MlmeConfirm+0x74>)
{
 8008a5c:	b08a      	sub	sp, #40	; 0x28
  TxParams.IsMcpsConfirm = 0;
 8008a5e:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 8008a60:	7842      	ldrb	r2, [r0, #1]
 8008a62:	3614      	adds	r6, #20
 8008a64:	705a      	strb	r2, [r3, #1]
    if (LmHandlerPackages[i] != NULL)
 8008a66:	682b      	ldr	r3, [r5, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <MlmeConfirm+0x26>
          }
          break;
        }
        case PACKAGE_MLME_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <MlmeConfirm+0x26>
          {
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 8008a72:	0020      	movs	r0, r4
 8008a74:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008a76:	3504      	adds	r5, #4
 8008a78:	42b5      	cmp	r5, r6
 8008a7a:	d1f4      	bne.n	8008a66 <MlmeConfirm+0x16>
  switch (mlmeConfirm->MlmeRequest)
 8008a7c:	7823      	ldrb	r3, [r4, #0]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d118      	bne.n	8008ab4 <MlmeConfirm+0x64>
      mibReq.Type = MIB_DEV_ADDR;
 8008a82:	ad01      	add	r5, sp, #4
 8008a84:	3305      	adds	r3, #5
      LoRaMacMibGetRequestConfirm(&mibReq);
 8008a86:	0028      	movs	r0, r5
      mibReq.Type = MIB_DEV_ADDR;
 8008a88:	702b      	strb	r3, [r5, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 8008a8a:	f002 f837 	bl	800aafc <LoRaMacMibGetRequestConfirm>
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008a8e:	4d0e      	ldr	r5, [pc, #56]	; (8008ac8 <MlmeConfirm+0x78>)
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008a90:	4b0e      	ldr	r3, [pc, #56]	; (8008acc <MlmeConfirm+0x7c>)
 8008a92:	9a02      	ldr	r2, [sp, #8]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008a94:	0028      	movs	r0, r5
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008a96:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008a98:	f7ff ffc0 	bl	8008a1c <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 8008a9c:	7863      	ldrb	r3, [r4, #1]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <MlmeConfirm+0x68>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008aa2:	706b      	strb	r3, [r5, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <MlmeConfirm+0x80>)
 8008aa6:	7858      	ldrb	r0, [r3, #1]
 8008aa8:	f7ff fdf2 	bl	8008690 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <MlmeConfirm+0x84>)
 8008aae:	0028      	movs	r0, r5
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	4798      	blx	r3
}
 8008ab4:	b00a      	add	sp, #40	; 0x28
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008ab8:	23ff      	movs	r3, #255	; 0xff
 8008aba:	706b      	strb	r3, [r5, #1]
 8008abc:	e7f6      	b.n	8008aac <MlmeConfirm+0x5c>
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	20000788 	.word	0x20000788
 8008ac4:	200007c4 	.word	0x200007c4
 8008ac8:	20000138 	.word	0x20000138
 8008acc:	20000120 	.word	0x20000120
 8008ad0:	2000079c 	.word	0x2000079c
 8008ad4:	20000768 	.word	0x20000768

08008ad8 <LmHandlerGetDevEUI>:
{
 8008ad8:	b510      	push	{r4, lr}
  if (devEUI == NULL)
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d005      	beq.n	8008aea <LmHandlerGetDevEUI+0x12>
  UTIL_MEM_cpy_8(devEUI, CommissioningParams.DevEui, SE_EUI_SIZE);
 8008ade:	2208      	movs	r2, #8
 8008ae0:	4903      	ldr	r1, [pc, #12]	; (8008af0 <LmHandlerGetDevEUI+0x18>)
 8008ae2:	f005 fcd7 	bl	800e494 <UTIL_MEM_cpy_8>
  return LORAMAC_HANDLER_SUCCESS;
 8008ae6:	2000      	movs	r0, #0
}
 8008ae8:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 8008aea:	2001      	movs	r0, #1
 8008aec:	4240      	negs	r0, r0
 8008aee:	e7fb      	b.n	8008ae8 <LmHandlerGetDevEUI+0x10>
 8008af0:	20000120 	.word	0x20000120

08008af4 <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008af4:	4770      	bx	lr

08008af6 <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8008af6:	2001      	movs	r0, #1
 8008af8:	4770      	bx	lr

08008afa <NvmCtxMgmtRestore>:
 8008afa:	2001      	movs	r0, #1
 8008afc:	4770      	bx	lr
	...

08008b00 <LmhpComplianceInit>:
  return &LmhpCompliancePackage;
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <LmhpComplianceInit+0x20>)
 8008b04:	4c07      	ldr	r4, [pc, #28]	; (8008b24 <LmhpComplianceInit+0x24>)
  if ((params != NULL) && (dataBuffer != NULL))
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d007      	beq.n	8008b1a <LmhpComplianceInit+0x1a>
 8008b0a:	2900      	cmp	r1, #0
 8008b0c:	d005      	beq.n	8008b1a <LmhpComplianceInit+0x1a>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008b0e:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 8008b10:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 8008b12:	6020      	str	r0, [r4, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 8008b14:	6099      	str	r1, [r3, #8]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 8008b16:	701a      	strb	r2, [r3, #0]
  }
}
 8008b18:	bd10      	pop	{r4, pc}
    LmhpComplianceParams = NULL;
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	6022      	str	r2, [r4, #0]
 8008b1e:	e7fa      	b.n	8008b16 <LmhpComplianceInit+0x16>
 8008b20:	200007dc 	.word	0x200007dc
 8008b24:	20000808 	.word	0x20000808

08008b28 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 8008b28:	4b01      	ldr	r3, [pc, #4]	; (8008b30 <LmhpComplianceIsInitialized+0x8>)
 8008b2a:	7818      	ldrb	r0, [r3, #0]
}
 8008b2c:	4770      	bx	lr
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	200007dc 	.word	0x200007dc

08008b34 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <LmhpComplianceIsRunning+0xc>)
 8008b36:	7818      	ldrb	r0, [r3, #0]
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d000      	beq.n	8008b3e <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 8008b3c:	7858      	ldrb	r0, [r3, #1]
}
 8008b3e:	4770      	bx	lr
 8008b40:	200007dc 	.word	0x200007dc

08008b44 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 8008b44:	4770      	bx	lr
	...

08008b48 <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008b48:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <LmhpComplianceOnMcpsConfirm+0x24>)
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	d00b      	beq.n	8008b68 <LmhpComplianceOnMcpsConfirm+0x20>
  if ((ComplianceTestState.IsRunning == true) &&
 8008b50:	785a      	ldrb	r2, [r3, #1]
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d008      	beq.n	8008b68 <LmhpComplianceOnMcpsConfirm+0x20>
 8008b56:	7802      	ldrb	r2, [r0, #0]
 8008b58:	2a01      	cmp	r2, #1
 8008b5a:	d105      	bne.n	8008b68 <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008b5c:	7902      	ldrb	r2, [r0, #4]
 8008b5e:	2a00      	cmp	r2, #0
 8008b60:	d002      	beq.n	8008b68 <LmhpComplianceOnMcpsConfirm+0x20>
    ComplianceTestState.DownLinkCounter++;
 8008b62:	899a      	ldrh	r2, [r3, #12]
 8008b64:	3201      	adds	r2, #1
 8008b66:	819a      	strh	r2, [r3, #12]
}
 8008b68:	4770      	bx	lr
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	200007dc 	.word	0x200007dc

08008b70 <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <LmhpComplianceOnMlmeConfirm+0x1c>)
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	d008      	beq.n	8008b8a <LmhpComplianceOnMlmeConfirm+0x1a>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 8008b78:	7802      	ldrb	r2, [r0, #0]
 8008b7a:	2a04      	cmp	r2, #4
 8008b7c:	d105      	bne.n	8008b8a <LmhpComplianceOnMlmeConfirm+0x1a>
 8008b7e:	7a01      	ldrb	r1, [r0, #8]
 8008b80:	7a42      	ldrb	r2, [r0, #9]
    ComplianceTestState.LinkCheck = true;
 8008b82:	2001      	movs	r0, #1
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008b84:	73d9      	strb	r1, [r3, #15]
    ComplianceTestState.LinkCheck = true;
 8008b86:	7398      	strb	r0, [r3, #14]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008b88:	741a      	strb	r2, [r3, #16]
}
 8008b8a:	4770      	bx	lr
 8008b8c:	200007dc 	.word	0x200007dc

08008b90 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
 8008b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ComplianceTestState.Initialized == false)
 8008b92:	4c1a      	ldr	r4, [pc, #104]	; (8008bfc <LmhpComplianceTxProcess.isra.0+0x6c>)
 8008b94:	7823      	ldrb	r3, [r4, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d021      	beq.n	8008bde <LmhpComplianceTxProcess.isra.0+0x4e>
  if (ComplianceTestState.LinkCheck == true)
 8008b9a:	7ba2      	ldrb	r2, [r4, #14]
    ComplianceTestState.DataBuffer[0] = 5;
 8008b9c:	68a3      	ldr	r3, [r4, #8]
  if (ComplianceTestState.LinkCheck == true)
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d01e      	beq.n	8008be0 <LmhpComplianceTxProcess.isra.0+0x50>
    ComplianceTestState.LinkCheck = false;
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	73a2      	strb	r2, [r4, #14]
    ComplianceTestState.DataBufferSize = 3;
 8008ba6:	3203      	adds	r2, #3
 8008ba8:	71e2      	strb	r2, [r4, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 8008baa:	3202      	adds	r2, #2
 8008bac:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008bae:	7be2      	ldrb	r2, [r4, #15]
 8008bb0:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008bb2:	7c22      	ldrb	r2, [r4, #16]
 8008bb4:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	70a2      	strb	r2, [r4, #2]
  LmHandlerAppData_t appData =
 8008bba:	4669      	mov	r1, sp
 8008bbc:	22e0      	movs	r2, #224	; 0xe0
 8008bbe:	720a      	strb	r2, [r1, #8]
 8008bc0:	79e2      	ldrb	r2, [r4, #7]
 8008bc2:	9303      	str	r3, [sp, #12]
  TimerTime_t nextTxIn = 0;
 8008bc4:	2300      	movs	r3, #0
  TimerStart(&ComplianceTxNextPacketTimer);
 8008bc6:	480e      	ldr	r0, [pc, #56]	; (8008c00 <LmhpComplianceTxProcess.isra.0+0x70>)
  LmHandlerAppData_t appData =
 8008bc8:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 8008bca:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 8008bcc:	f005 ffae 	bl	800eb2c <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 8008bd0:	4b0c      	ldr	r3, [pc, #48]	; (8008c04 <LmhpComplianceTxProcess.isra.0+0x74>)
 8008bd2:	7921      	ldrb	r1, [r4, #4]
 8008bd4:	aa01      	add	r2, sp, #4
 8008bd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008bd8:	a802      	add	r0, sp, #8
 8008bda:	2301      	movs	r3, #1
 8008bdc:	47a0      	blx	r4
}
 8008bde:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    switch (ComplianceTestState.State)
 8008be0:	78a2      	ldrb	r2, [r4, #2]
 8008be2:	2a01      	cmp	r2, #1
 8008be4:	d002      	beq.n	8008bec <LmhpComplianceTxProcess.isra.0+0x5c>
 8008be6:	2a04      	cmp	r2, #4
 8008be8:	d1e7      	bne.n	8008bba <LmhpComplianceTxProcess.isra.0+0x2a>
 8008bea:	e7e4      	b.n	8008bb6 <LmhpComplianceTxProcess.isra.0+0x26>
        ComplianceTestState.DataBufferSize = 2;
 8008bec:	2202      	movs	r2, #2
 8008bee:	71e2      	strb	r2, [r4, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008bf0:	89a2      	ldrh	r2, [r4, #12]
 8008bf2:	0a11      	lsrs	r1, r2, #8
 8008bf4:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008bf6:	705a      	strb	r2, [r3, #1]
        break;
 8008bf8:	e7df      	b.n	8008bba <LmhpComplianceTxProcess.isra.0+0x2a>
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	200007dc 	.word	0x200007dc
 8008c00:	200007f0 	.word	0x200007f0
 8008c04:	20000158 	.word	0x20000158

08008c08 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 8008c08:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 8008c0a:	f7ff ffc1 	bl	8008b90 <LmhpComplianceTxProcess.isra.0>
}
 8008c0e:	bd10      	pop	{r4, pc}

08008c10 <LmhpComplianceOnMcpsIndication>:
{
 8008c10:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 8008c12:	4c6a      	ldr	r4, [pc, #424]	; (8008dbc <LmhpComplianceOnMcpsIndication+0x1ac>)
{
 8008c14:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 8008c16:	7823      	ldrb	r3, [r4, #0]
{
 8008c18:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d046      	beq.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
  if (mcpsIndication->RxData == false)
 8008c1e:	7b43      	ldrb	r3, [r0, #13]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d043      	beq.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
  if ((ComplianceTestState.IsRunning == true) &&
 8008c24:	7865      	ldrb	r5, [r4, #1]
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	d005      	beq.n	8008c36 <LmhpComplianceOnMcpsIndication+0x26>
 8008c2a:	7c83      	ldrb	r3, [r0, #18]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d102      	bne.n	8008c36 <LmhpComplianceOnMcpsIndication+0x26>
    ComplianceTestState.DownLinkCounter++;
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	3301      	adds	r3, #1
 8008c34:	81a3      	strh	r3, [r4, #12]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 8008c36:	78d3      	ldrb	r3, [r2, #3]
 8008c38:	2be0      	cmp	r3, #224	; 0xe0
 8008c3a:	d137      	bne.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
  if (ComplianceTestState.IsRunning == false)
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	d137      	bne.n	8008cb0 <LmhpComplianceOnMcpsIndication+0xa0>
    if ((mcpsIndication->BufferSize == 4) &&
 8008c40:	7b11      	ldrb	r1, [r2, #12]
 8008c42:	2904      	cmp	r1, #4
 8008c44:	d132      	bne.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008c46:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	2a01      	cmp	r2, #1
 8008c4c:	d12e      	bne.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008c4e:	785a      	ldrb	r2, [r3, #1]
 8008c50:	2a01      	cmp	r2, #1
 8008c52:	d12b      	bne.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[1] == 0x01) &&
 8008c54:	789a      	ldrb	r2, [r3, #2]
 8008c56:	2a01      	cmp	r2, #1
 8008c58:	d128      	bne.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[2] == 0x01) &&
 8008c5a:	78db      	ldrb	r3, [r3, #3]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d125      	bne.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
      ComplianceTestState.IsTxConfirmed = false;
 8008c60:	4a57      	ldr	r2, [pc, #348]	; (8008dc0 <LmhpComplianceOnMcpsIndication+0x1b0>)
      ComplianceTestState.DownLinkCounter = 0;
 8008c62:	60e5      	str	r5, [r4, #12]
      ComplianceTestState.IsTxConfirmed = false;
 8008c64:	80a2      	strh	r2, [r4, #4]
      ComplianceTestState.DataBufferSize = 2;
 8008c66:	2202      	movs	r2, #2
 8008c68:	71e2      	strb	r2, [r4, #7]
      mibReq.Type = MIB_ADR;
 8008c6a:	466a      	mov	r2, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008c6c:	a803      	add	r0, sp, #12
      mibReq.Param.AdrEnable = true;
 8008c6e:	7413      	strb	r3, [r2, #16]
      mibReq.Type = MIB_ADR;
 8008c70:	7311      	strb	r1, [r2, #12]
      ComplianceTestState.IsRunning = true;
 8008c72:	7063      	strb	r3, [r4, #1]
      ComplianceTestState.State = 1;
 8008c74:	70a3      	strb	r3, [r4, #2]
      ComplianceTestState.NbGateways = 0;
 8008c76:	7425      	strb	r5, [r4, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008c78:	f002 f83e 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 8008c7c:	0028      	movs	r0, r5
 8008c7e:	f002 fd07 	bl	800b690 <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 8008c82:	4b50      	ldr	r3, [pc, #320]	; (8008dc4 <LmhpComplianceOnMcpsIndication+0x1b4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d000      	beq.n	8008c8e <LmhpComplianceOnMcpsIndication+0x7e>
        LmhpComplianceParams->StopPeripherals();
 8008c8c:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2101      	movs	r1, #1
 8008c92:	4c4d      	ldr	r4, [pc, #308]	; (8008dc8 <LmhpComplianceOnMcpsIndication+0x1b8>)
 8008c94:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <LmhpComplianceOnMcpsIndication+0x1bc>)
 8008c96:	9200      	str	r2, [sp, #0]
 8008c98:	4249      	negs	r1, r1
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	f005 fe92 	bl	800e9c4 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 8008ca0:	494b      	ldr	r1, [pc, #300]	; (8008dd0 <LmhpComplianceOnMcpsIndication+0x1c0>)
 8008ca2:	0020      	movs	r0, r4
 8008ca4:	f005 ff9e 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 8008ca8:	f7ff ff72 	bl	8008b90 <LmhpComplianceTxProcess.isra.0>
}
 8008cac:	b00d      	add	sp, #52	; 0x34
 8008cae:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008cb0:	6893      	ldr	r3, [r2, #8]
 8008cb2:	7818      	ldrb	r0, [r3, #0]
 8008cb4:	70a0      	strb	r0, [r4, #2]
    switch (ComplianceTestState.State)
 8008cb6:	280a      	cmp	r0, #10
 8008cb8:	d8f8      	bhi.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
 8008cba:	f7f7 fa2d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008cbe:	062c      	.short	0x062c
 8008cc0:	26110d09 	.word	0x26110d09
 8008cc4:	6f6c462c 	.word	0x6f6c462c
 8008cc8:	78          	.byte	0x78
 8008cc9:	00          	.byte	0x00
        ComplianceTestState.DataBufferSize = 2;
 8008cca:	2302      	movs	r3, #2
 8008ccc:	71e3      	strb	r3, [r4, #7]
        break;
 8008cce:	e7ed      	b.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        ComplianceTestState.IsTxConfirmed = true;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 8008cd4:	70a3      	strb	r3, [r4, #2]
      break;
 8008cd6:	e7e9      	b.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        ComplianceTestState.IsTxConfirmed = false;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e7f9      	b.n	8008cd4 <LmhpComplianceOnMcpsIndication+0xc4>
        ComplianceTestState.DataBuffer[0] = 4;
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	68a5      	ldr	r5, [r4, #8]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008ce4:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 8008ce6:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008ce8:	79a0      	ldrb	r0, [r4, #6]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008cea:	71e1      	strb	r1, [r4, #7]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008cec:	1c03      	adds	r3, r0, #0
 8008cee:	4288      	cmp	r0, r1
 8008cf0:	d900      	bls.n	8008cf4 <LmhpComplianceOnMcpsIndication+0xe4>
 8008cf2:	1c0b      	adds	r3, r1, #0
 8008cf4:	b2d9      	uxtb	r1, r3
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	b2d8      	uxtb	r0, r3
 8008cfc:	4281      	cmp	r1, r0
 8008cfe:	d9d5      	bls.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008d00:	6890      	ldr	r0, [r2, #8]
 8008d02:	5cc0      	ldrb	r0, [r0, r3]
 8008d04:	3001      	adds	r0, #1
 8008d06:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008d08:	e7f6      	b.n	8008cf8 <LmhpComplianceOnMcpsIndication+0xe8>
        mlmeReq.Type = MLME_LINK_CHECK;
 8008d0a:	2304      	movs	r3, #4
 8008d0c:	a803      	add	r0, sp, #12
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008d0e:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 8008d10:	f002 fa10 	bl	800b134 <LoRaMacMlmeRequest>
      break;
 8008d14:	e7ca      	b.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        TimerStop(&ComplianceTxNextPacketTimer);
 8008d16:	482c      	ldr	r0, [pc, #176]	; (8008dc8 <LmhpComplianceOnMcpsIndication+0x1b8>)
 8008d18:	f005 feb4 	bl	800ea84 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 8008d1c:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 8008d1e:	466a      	mov	r2, sp
        ComplianceTestState.IsRunning = false;
 8008d20:	7063      	strb	r3, [r4, #1]
        ComplianceTestState.DownLinkCounter = 0;
 8008d22:	81a3      	strh	r3, [r4, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008d24:	4c27      	ldr	r4, [pc, #156]	; (8008dc4 <LmhpComplianceOnMcpsIndication+0x1b4>)
        mibReq.Type = MIB_ADR;
 8008d26:	3304      	adds	r3, #4
 8008d28:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008d2a:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008d2c:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008d32:	f001 ffe1 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	7858      	ldrb	r0, [r3, #1]
 8008d3a:	f002 fca9 	bl	800b690 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0b2      	beq.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
          LmhpComplianceParams->StartPeripherals();
 8008d46:	4798      	blx	r3
      break;
 8008d48:	e7b0      	b.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        if (mcpsIndication->BufferSize == 3)
 8008d4a:	7b12      	ldrb	r2, [r2, #12]
 8008d4c:	a803      	add	r0, sp, #12
 8008d4e:	2a03      	cmp	r2, #3
 8008d50:	d10a      	bne.n	8008d68 <LmhpComplianceOnMcpsIndication+0x158>
          mlmeReq.Type = MLME_TXCW;
 8008d52:	3202      	adds	r2, #2
 8008d54:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008d56:	7859      	ldrb	r1, [r3, #1]
 8008d58:	789b      	ldrb	r3, [r3, #2]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	ba5b      	rev16	r3, r3
 8008d60:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 8008d62:	f002 f9e7 	bl	800b134 <LoRaMacMlmeRequest>
 8008d66:	e7b9      	b.n	8008cdc <LmhpComplianceOnMcpsIndication+0xcc>
        else if (mcpsIndication->BufferSize == 7)
 8008d68:	2a07      	cmp	r2, #7
 8008d6a:	d1fa      	bne.n	8008d62 <LmhpComplianceOnMcpsIndication+0x152>
          mlmeReq.Type = MLME_TXCW_1;
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008d70:	789a      	ldrb	r2, [r3, #2]
 8008d72:	785d      	ldrb	r5, [r3, #1]
 8008d74:	0212      	lsls	r2, r2, #8
 8008d76:	432a      	orrs	r2, r5
 8008d78:	ba52      	rev16	r2, r2
 8008d7a:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 8008d7c:	78da      	ldrb	r2, [r3, #3]
 8008d7e:	7919      	ldrb	r1, [r3, #4]
 8008d80:	0412      	lsls	r2, r2, #16
 8008d82:	0209      	lsls	r1, r1, #8
 8008d84:	430a      	orrs	r2, r1
 8008d86:	7959      	ldrb	r1, [r3, #5]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	2164      	movs	r1, #100	; 0x64
 8008d8c:	434a      	muls	r2, r1
 8008d8e:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008d90:	799b      	ldrb	r3, [r3, #6]
 8008d92:	7303      	strb	r3, [r0, #12]
 8008d94:	e7e5      	b.n	8008d62 <LmhpComplianceOnMcpsIndication+0x152>
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008d96:	230a      	movs	r3, #10
 8008d98:	a803      	add	r0, sp, #12
 8008d9a:	e7b8      	b.n	8008d0e <LmhpComplianceOnMcpsIndication+0xfe>
        mibReq.Type = MIB_DEVICE_CLASS;
 8008d9c:	4669      	mov	r1, sp
 8008d9e:	2200      	movs	r2, #0
 8008da0:	730a      	strb	r2, [r1, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008da2:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008da4:	a803      	add	r0, sp, #12
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008da6:	740b      	strb	r3, [r1, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008da8:	f001 ffa6 	bl	800acf8 <LoRaMacMibSetRequestConfirm>
      break;
 8008dac:	e77e      	b.n	8008cac <LmhpComplianceOnMcpsIndication+0x9c>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008dae:	4669      	mov	r1, sp
 8008db0:	220d      	movs	r2, #13
 8008db2:	730a      	strb	r2, [r1, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008db4:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 8008db6:	a803      	add	r0, sp, #12
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008db8:	740b      	strb	r3, [r1, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 8008dba:	e7a9      	b.n	8008d10 <LmhpComplianceOnMcpsIndication+0x100>
 8008dbc:	200007dc 	.word	0x200007dc
 8008dc0:	ffffe000 	.word	0xffffe000
 8008dc4:	20000808 	.word	0x20000808
 8008dc8:	200007f0 	.word	0x200007f0
 8008dcc:	08008c09 	.word	0x08008c09
 8008dd0:	00001388 	.word	0x00001388

08008dd4 <LmphCompliancePackageFactory>:
}
 8008dd4:	4800      	ldr	r0, [pc, #0]	; (8008dd8 <LmphCompliancePackageFactory+0x4>)
 8008dd6:	4770      	bx	lr
 8008dd8:	20000158 	.word	0x20000158

08008ddc <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <OnRadioRxError+0x24>)
{
 8008de0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008de2:	7811      	ldrb	r1, [r2, #0]
 8008de4:	430b      	orrs	r3, r1
 8008de6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008de8:	23d2      	movs	r3, #210	; 0xd2
 8008dea:	4a06      	ldr	r2, [pc, #24]	; (8008e04 <OnRadioRxError+0x28>)
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	58d3      	ldr	r3, [r2, r3]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <OnRadioRxError+0x20>
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d000      	beq.n	8008dfc <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008dfa:	4798      	blx	r3
    }
}
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	20000844 	.word	0x20000844
 8008e04:	20000848 	.word	0x20000848

08008e08 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008e08:	4a05      	ldr	r2, [pc, #20]	; (8008e20 <UpdateRxSlotIdleState+0x18>)
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <UpdateRxSlotIdleState+0x1c>)
 8008e0c:	58d3      	ldr	r3, [r2, r3]
 8008e0e:	337c      	adds	r3, #124	; 0x7c
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d000      	beq.n	8008e18 <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008e16:	2306      	movs	r3, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8008e18:	2190      	movs	r1, #144	; 0x90
 8008e1a:	00c9      	lsls	r1, r1, #3
 8008e1c:	5453      	strb	r3, [r2, r1]
 8008e1e:	4770      	bx	lr
 8008e20:	20000848 	.word	0x20000848
 8008e24:	00000484 	.word	0x00000484

08008e28 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8008e28:	23d2      	movs	r3, #210	; 0xd2
 8008e2a:	4a05      	ldr	r2, [pc, #20]	; (8008e40 <CallNvmCtxCallback+0x18>)
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	58d3      	ldr	r3, [r2, r3]
{
 8008e30:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <CallNvmCtxCallback+0x16>
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d000      	beq.n	8008e3e <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8008e3c:	4798      	blx	r3
    }
}
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	20000848 	.word	0x20000848

08008e44 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8008e44:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8008e46:	2000      	movs	r0, #0
 8008e48:	f7ff ffee 	bl	8008e28 <CallNvmCtxCallback>
}
 8008e4c:	bd10      	pop	{r4, pc}

08008e4e <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8008e4e:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8008e50:	2001      	movs	r0, #1
 8008e52:	f7ff ffe9 	bl	8008e28 <CallNvmCtxCallback>
}
 8008e56:	bd10      	pop	{r4, pc}

08008e58 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8008e58:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8008e5a:	2002      	movs	r0, #2
 8008e5c:	f7ff ffe4 	bl	8008e28 <CallNvmCtxCallback>
}
 8008e60:	bd10      	pop	{r4, pc}

08008e62 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8008e62:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8008e64:	2003      	movs	r0, #3
 8008e66:	f7ff ffdf 	bl	8008e28 <CallNvmCtxCallback>
}
 8008e6a:	bd10      	pop	{r4, pc}

08008e6c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8008e6c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8008e6e:	2004      	movs	r0, #4
 8008e70:	f7ff ffda 	bl	8008e28 <CallNvmCtxCallback>
}
 8008e74:	bd10      	pop	{r4, pc}

08008e76 <EventConfirmQueueNvmCtxChanged>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
}
*/
static void EventConfirmQueueNvmCtxChanged( void )
{
 8008e76:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8008e78:	2006      	movs	r0, #6
 8008e7a:	f7ff ffd5 	bl	8008e28 <CallNvmCtxCallback>
}
 8008e7e:	bd10      	pop	{r4, pc}

08008e80 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008e82:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8008e86:	a902      	add	r1, sp, #8
 8008e88:	58d3      	ldr	r3, [r2, r3]
 8008e8a:	001a      	movs	r2, r3
 8008e8c:	32b8      	adds	r2, #184	; 0xb8
 8008e8e:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 8008e90:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008e92:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008e94:	220d      	movs	r2, #13
 8008e96:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8008e98:	001a      	movs	r2, r3
 8008e9a:	32ca      	adds	r2, #202	; 0xca
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d001      	beq.n	8008ea6 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008ea2:	220e      	movs	r2, #14
 8008ea4:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008ea6:	7818      	ldrb	r0, [r3, #0]
 8008ea8:	f003 fa27 	bl	800c2fa <RegionGetPhyParam>
    return phyParam.Value;
 8008eac:	b2c0      	uxtb	r0, r0
}
 8008eae:	b005      	add	sp, #20
 8008eb0:	bd00      	pop	{pc}
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	20000848 	.word	0x20000848
 8008eb8:	00000484 	.word	0x00000484

08008ebc <OnAckTimeoutTimerEvent>:
{
 8008ebc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8008ebe:	4810      	ldr	r0, [pc, #64]	; (8008f00 <OnAckTimeoutTimerEvent+0x44>)
 8008ec0:	f005 fde0 	bl	800ea84 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <OnAckTimeoutTimerEvent+0x48>)
 8008ec6:	4a10      	ldr	r2, [pc, #64]	; (8008f08 <OnAckTimeoutTimerEvent+0x4c>)
 8008ec8:	5c9a      	ldrb	r2, [r3, r2]
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d002      	beq.n	8008ed4 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <OnAckTimeoutTimerEvent+0x50>)
 8008ed2:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008ed4:	4a0e      	ldr	r2, [pc, #56]	; (8008f10 <OnAckTimeoutTimerEvent+0x54>)
 8008ed6:	589a      	ldr	r2, [r3, r2]
 8008ed8:	327c      	adds	r2, #124	; 0x7c
 8008eda:	7812      	ldrb	r2, [r2, #0]
 8008edc:	2a02      	cmp	r2, #2
 8008ede:	d104      	bne.n	8008eea <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8008ee0:	490c      	ldr	r1, [pc, #48]	; (8008f14 <OnAckTimeoutTimerEvent+0x58>)
 8008ee2:	321e      	adds	r2, #30
 8008ee4:	5c58      	ldrb	r0, [r3, r1]
 8008ee6:	4302      	orrs	r2, r0
 8008ee8:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008eea:	22d2      	movs	r2, #210	; 0xd2
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	589b      	ldr	r3, [r3, r2]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <OnAckTimeoutTimerEvent+0x40>
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d000      	beq.n	8008efc <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008efa:	4798      	blx	r3
}
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	20000c40 	.word	0x20000c40
 8008f04:	20000848 	.word	0x20000848
 8008f08:	00000414 	.word	0x00000414
 8008f0c:	00000413 	.word	0x00000413
 8008f10:	00000484 	.word	0x00000484
 8008f14:	00000481 	.word	0x00000481

08008f18 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008f18:	22d0      	movs	r2, #208	; 0xd0
 8008f1a:	2380      	movs	r3, #128	; 0x80
{
 8008f1c:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008f1e:	4c0a      	ldr	r4, [pc, #40]	; (8008f48 <PrepareRxDoneAbort+0x30>)
 8008f20:	0092      	lsls	r2, r2, #2
 8008f22:	58a1      	ldr	r1, [r4, r2]
 8008f24:	430b      	orrs	r3, r1
 8008f26:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8008f28:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <PrepareRxDoneAbort+0x34>)
 8008f2a:	5ce3      	ldrb	r3, [r4, r3]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8008f30:	2000      	movs	r0, #0
 8008f32:	f7ff ffc3 	bl	8008ebc <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008f36:	2322      	movs	r3, #34	; 0x22
 8008f38:	4905      	ldr	r1, [pc, #20]	; (8008f50 <PrepareRxDoneAbort+0x38>)
 8008f3a:	5c62      	ldrb	r2, [r4, r1]
 8008f3c:	439a      	bics	r2, r3
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008f42:	f7ff ff61 	bl	8008e08 <UpdateRxSlotIdleState>
}
 8008f46:	bd10      	pop	{r4, pc}
 8008f48:	20000848 	.word	0x20000848
 8008f4c:	00000414 	.word	0x00000414
 8008f50:	00000481 	.word	0x00000481

08008f54 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008f54:	2301      	movs	r3, #1
 8008f56:	4a0b      	ldr	r2, [pc, #44]	; (8008f84 <OnRadioRxTimeout+0x30>)
{
 8008f58:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008f5a:	7811      	ldrb	r1, [r2, #0]
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008f60:	23d2      	movs	r3, #210	; 0xd2
 8008f62:	4a09      	ldr	r2, [pc, #36]	; (8008f88 <OnRadioRxTimeout+0x34>)
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	58d3      	ldr	r3, [r2, r3]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <OnRadioRxTimeout+0x20>
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d000      	beq.n	8008f74 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008f72:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8008f74:	2201      	movs	r2, #1
 8008f76:	2100      	movs	r1, #0
 8008f78:	2002      	movs	r0, #2
 8008f7a:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <OnRadioRxTimeout+0x38>)
 8008f7c:	f005 ff50 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	20000844 	.word	0x20000844
 8008f88:	20000848 	.word	0x20000848
 8008f8c:	0800f991 	.word	0x0800f991

08008f90 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008f90:	2304      	movs	r3, #4
 8008f92:	4a0b      	ldr	r2, [pc, #44]	; (8008fc0 <OnRadioTxTimeout+0x30>)
{
 8008f94:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008f96:	7811      	ldrb	r1, [r2, #0]
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008f9c:	23d2      	movs	r3, #210	; 0xd2
 8008f9e:	4a09      	ldr	r2, [pc, #36]	; (8008fc4 <OnRadioTxTimeout+0x34>)
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	58d3      	ldr	r3, [r2, r3]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <OnRadioTxTimeout+0x20>
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d000      	beq.n	8008fb0 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008fae:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2002      	movs	r0, #2
 8008fb6:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <OnRadioTxTimeout+0x38>)
 8008fb8:	f005 ff32 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	20000844 	.word	0x20000844
 8008fc4:	20000848 	.word	0x20000848
 8008fc8:	0800f9a1 	.word	0x0800f9a1

08008fcc <HandleRadioRxErrorTimeout>:
{
 8008fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008fce:	4c1e      	ldr	r4, [pc, #120]	; (8009048 <HandleRadioRxErrorTimeout+0x7c>)
 8008fd0:	4f1e      	ldr	r7, [pc, #120]	; (800904c <HandleRadioRxErrorTimeout+0x80>)
{
 8008fd2:	0006      	movs	r6, r0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008fd4:	59e3      	ldr	r3, [r4, r7]
{
 8008fd6:	000d      	movs	r5, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008fd8:	337c      	adds	r3, #124	; 0x7c
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d003      	beq.n	8008fe8 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8008fe0:	4b1b      	ldr	r3, [pc, #108]	; (8009050 <HandleRadioRxErrorTimeout+0x84>)
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	4798      	blx	r3
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008fe8:	2290      	movs	r2, #144	; 0x90
 8008fea:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 8008fec:	4b19      	ldr	r3, [pc, #100]	; (8009054 <HandleRadioRxErrorTimeout+0x88>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008fee:	5ca2      	ldrb	r2, [r4, r2]
            if( MacCtx.NodeAckRequested == true )
 8008ff0:	5ce3      	ldrb	r3, [r4, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008ff2:	2a00      	cmp	r2, #0
 8008ff4:	d119      	bne.n	800902a <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HandleRadioRxErrorTimeout+0x32>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008ffa:	4b17      	ldr	r3, [pc, #92]	; (8009058 <HandleRadioRxErrorTimeout+0x8c>)
 8008ffc:	54e6      	strb	r6, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008ffe:	0030      	movs	r0, r6
 8009000:	f002 fd9c 	bl	800bb3c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009004:	59e3      	ldr	r3, [r4, r7]
 8009006:	33fc      	adds	r3, #252	; 0xfc
 8009008:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800900a:	f005 fd01 	bl	800ea10 <UTIL_TIMER_GetElapsedTime>
 800900e:	23ed      	movs	r3, #237	; 0xed
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	58e3      	ldr	r3, [r4, r3]
 8009014:	4298      	cmp	r0, r3
 8009016:	d314      	bcc.n	8009042 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009018:	4810      	ldr	r0, [pc, #64]	; (800905c <HandleRadioRxErrorTimeout+0x90>)
 800901a:	f005 fd33 	bl	800ea84 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800901e:	2320      	movs	r3, #32
 8009020:	4a0f      	ldr	r2, [pc, #60]	; (8009060 <HandleRadioRxErrorTimeout+0x94>)
 8009022:	5ca1      	ldrb	r1, [r4, r2]
 8009024:	430b      	orrs	r3, r1
 8009026:	54a3      	strb	r3, [r4, r2]
 8009028:	e00b      	b.n	8009042 <HandleRadioRxErrorTimeout+0x76>
            if( MacCtx.NodeAckRequested == true )
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <HandleRadioRxErrorTimeout+0x66>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800902e:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <HandleRadioRxErrorTimeout+0x8c>)
 8009030:	54e5      	strb	r5, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009032:	0028      	movs	r0, r5
 8009034:	f002 fd82 	bl	800bb3c <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009038:	59e3      	ldr	r3, [r4, r7]
 800903a:	337c      	adds	r3, #124	; 0x7c
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d1ed      	bne.n	800901e <HandleRadioRxErrorTimeout+0x52>
    UpdateRxSlotIdleState( );
 8009042:	f7ff fee1 	bl	8008e08 <UpdateRxSlotIdleState>
}
 8009046:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009048:	20000848 	.word	0x20000848
 800904c:	00000484 	.word	0x00000484
 8009050:	0800fc84 	.word	0x0800fc84
 8009054:	00000414 	.word	0x00000414
 8009058:	0000043d 	.word	0x0000043d
 800905c:	20000be0 	.word	0x20000be0
 8009060:	00000481 	.word	0x00000481

08009064 <ResetMacParameters>:
{
 8009064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8009066:	22b2      	movs	r2, #178	; 0xb2
 8009068:	2500      	movs	r5, #0
 800906a:	4c2e      	ldr	r4, [pc, #184]	; (8009124 <ResetMacParameters+0xc0>)
 800906c:	4e2e      	ldr	r6, [pc, #184]	; (8009128 <ResetMacParameters+0xc4>)
 800906e:	0052      	lsls	r2, r2, #1
 8009070:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 8009072:	492e      	ldr	r1, [pc, #184]	; (800912c <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8009074:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8009076:	1d1a      	adds	r2, r3, #4
 8009078:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 800907a:	2282      	movs	r2, #130	; 0x82
 800907c:	00d2      	lsls	r2, r2, #3
 800907e:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8009080:	001a      	movs	r2, r3
 8009082:	32c8      	adds	r2, #200	; 0xc8
 8009084:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8009086:	2201      	movs	r2, #1
 8009088:	4694      	mov	ip, r2
 800908a:	4661      	mov	r1, ip
 800908c:	324c      	adds	r2, #76	; 0x4c
 800908e:	32ff      	adds	r2, #255	; 0xff
 8009090:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8009092:	001a      	movs	r2, r3
 8009094:	8899      	ldrh	r1, [r3, #4]
 8009096:	3284      	adds	r2, #132	; 0x84
 8009098:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800909a:	1d99      	adds	r1, r3, #6
 800909c:	7fc9      	ldrb	r1, [r1, #31]
 800909e:	3221      	adds	r2, #33	; 0x21
 80090a0:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80090a2:	0019      	movs	r1, r3
 80090a4:	3a7d      	subs	r2, #125	; 0x7d
 80090a6:	31a8      	adds	r1, #168	; 0xa8
 80090a8:	ca81      	ldmia	r2!, {r0, r7}
 80090aa:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80090ac:	ca81      	ldmia	r2!, {r0, r7}
 80090ae:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80090b0:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80090b2:	3280      	adds	r2, #128	; 0x80
 80090b4:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80090b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 80090b8:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80090ba:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80090bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80090be:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 80090c0:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80090c2:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 80090c4:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80090c6:	224c      	movs	r2, #76	; 0x4c
 80090c8:	32ff      	adds	r2, #255	; 0xff
 80090ca:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80090cc:	466a      	mov	r2, sp
 80090ce:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80090d0:	7818      	ldrb	r0, [r3, #0]
 80090d2:	4669      	mov	r1, sp
 80090d4:	f003 f924 	bl	800c320 <RegionInitDefaults>
    MacCtx.Channel = 0;
 80090d8:	4b16      	ldr	r3, [pc, #88]	; (8009134 <ResetMacParameters+0xd0>)
 80090da:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80090dc:	3b49      	subs	r3, #73	; 0x49
 80090de:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80090e0:	59a3      	ldr	r3, [r4, r6]
 80090e2:	001a      	movs	r2, r3
 80090e4:	32a8      	adds	r2, #168	; 0xa8
 80090e6:	6811      	ldr	r1, [r2, #0]
 80090e8:	22f4      	movs	r2, #244	; 0xf4
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80090ee:	001a      	movs	r2, r3
 80090f0:	32b9      	adds	r2, #185	; 0xb9
 80090f2:	7811      	ldrb	r1, [r2, #0]
 80090f4:	22f7      	movs	r2, #247	; 0xf7
 80090f6:	0092      	lsls	r2, r2, #2
 80090f8:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80090fa:	33ca      	adds	r3, #202	; 0xca
 80090fc:	781a      	ldrb	r2, [r3, #0]
 80090fe:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <ResetMacParameters+0xd4>)
 8009100:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009102:	2280      	movs	r2, #128	; 0x80
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <ResetMacParameters+0xd8>)
 8009106:	0052      	lsls	r2, r2, #1
 8009108:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800910a:	22f3      	movs	r2, #243	; 0xf3
 800910c:	3302      	adds	r3, #2
 800910e:	0092      	lsls	r2, r2, #2
 8009110:	18e3      	adds	r3, r4, r3
 8009112:	18a2      	adds	r2, r4, r2
 8009114:	ca23      	ldmia	r2!, {r0, r1, r5}
 8009116:	c323      	stmia	r3!, {r0, r1, r5}
 8009118:	ca03      	ldmia	r2!, {r0, r1}
 800911a:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800911c:	4b08      	ldr	r3, [pc, #32]	; (8009140 <ResetMacParameters+0xdc>)
 800911e:	4a09      	ldr	r2, [pc, #36]	; (8009144 <ResetMacParameters+0xe0>)
 8009120:	52e2      	strh	r2, [r4, r3]
}
 8009122:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009124:	20000848 	.word	0x20000848
 8009128:	00000484 	.word	0x00000484
 800912c:	00010100 	.word	0x00010100
 8009130:	00000414 	.word	0x00000414
 8009134:	00000415 	.word	0x00000415
 8009138:	000003dd 	.word	0x000003dd
 800913c:	000003de 	.word	0x000003de
 8009140:	000003f2 	.word	0x000003f2
 8009144:	00000201 	.word	0x00000201

08009148 <OpenContinuousRxCWindow>:
{
 8009148:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800914a:	4c14      	ldr	r4, [pc, #80]	; (800919c <OpenContinuousRxCWindow+0x54>)
 800914c:	4e14      	ldr	r6, [pc, #80]	; (80091a0 <OpenContinuousRxCWindow+0x58>)
 800914e:	4d15      	ldr	r5, [pc, #84]	; (80091a4 <OpenContinuousRxCWindow+0x5c>)
 8009150:	59a3      	ldr	r3, [r4, r6]
{
 8009152:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009154:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009156:	001a      	movs	r2, r3
 8009158:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800915a:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800915c:	7809      	ldrb	r1, [r1, #0]
 800915e:	328c      	adds	r2, #140	; 0x8c
 8009160:	7818      	ldrb	r0, [r3, #0]
 8009162:	7812      	ldrb	r2, [r2, #0]
 8009164:	3788      	adds	r7, #136	; 0x88
 8009166:	9500      	str	r5, [sp, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	b249      	sxtb	r1, r1
 800916c:	f003 f8ff 	bl	800c36e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009170:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <OpenContinuousRxCWindow+0x60>)
 8009172:	4a0e      	ldr	r2, [pc, #56]	; (80091ac <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009174:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009176:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009178:	59a3      	ldr	r3, [r4, r6]
 800917a:	4a0d      	ldr	r2, [pc, #52]	; (80091b0 <OpenContinuousRxCWindow+0x68>)
 800917c:	7818      	ldrb	r0, [r3, #0]
 800917e:	f003 f901 	bl	800c384 <RegionRxConfig>
 8009182:	2800      	cmp	r0, #0
 8009184:	d008      	beq.n	8009198 <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <OpenContinuousRxCWindow+0x6c>)
 8009188:	2000      	movs	r0, #0
 800918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <OpenContinuousRxCWindow+0x70>)
 8009192:	5ce2      	ldrb	r2, [r4, r3]
 8009194:	338d      	adds	r3, #141	; 0x8d
 8009196:	54e2      	strb	r2, [r4, r3]
}
 8009198:	b005      	add	sp, #20
 800919a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800919c:	20000848 	.word	0x20000848
 80091a0:	00000484 	.word	0x00000484
 80091a4:	20000c28 	.word	0x20000c28
 80091a8:	000003f2 	.word	0x000003f2
 80091ac:	00000201 	.word	0x00000201
 80091b0:	20000c68 	.word	0x20000c68
 80091b4:	0800fc84 	.word	0x0800fc84
 80091b8:	000003f3 	.word	0x000003f3

080091bc <SwitchClass>:
{
 80091bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 80091be:	4b2e      	ldr	r3, [pc, #184]	; (8009278 <SwitchClass+0xbc>)
{
 80091c0:	9000      	str	r0, [sp, #0]
    switch( MacCtx.NvmCtx->DeviceClass )
 80091c2:	482e      	ldr	r0, [pc, #184]	; (800927c <SwitchClass+0xc0>)
 80091c4:	58c3      	ldr	r3, [r0, r3]
 80091c6:	001a      	movs	r2, r3
 80091c8:	327c      	adds	r2, #124	; 0x7c
 80091ca:	7815      	ldrb	r5, [r2, #0]
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	d003      	beq.n	80091d8 <SwitchClass+0x1c>
 80091d0:	2d02      	cmp	r5, #2
 80091d2:	d046      	beq.n	8009262 <SwitchClass+0xa6>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80091d4:	2503      	movs	r5, #3
 80091d6:	e042      	b.n	800925e <SwitchClass+0xa2>
            if( deviceClass == CLASS_A )
 80091d8:	9900      	ldr	r1, [sp, #0]
 80091da:	2900      	cmp	r1, #0
 80091dc:	d105      	bne.n	80091ea <SwitchClass+0x2e>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80091de:	001a      	movs	r2, r3
 80091e0:	33a8      	adds	r3, #168	; 0xa8
 80091e2:	32b0      	adds	r2, #176	; 0xb0
 80091e4:	cb03      	ldmia	r3!, {r0, r1}
 80091e6:	c203      	stmia	r2!, {r0, r1}
            if( deviceClass == CLASS_C )
 80091e8:	e7f4      	b.n	80091d4 <SwitchClass+0x18>
 80091ea:	9900      	ldr	r1, [sp, #0]
 80091ec:	2902      	cmp	r1, #2
 80091ee:	d1f1      	bne.n	80091d4 <SwitchClass+0x18>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80091f0:	7011      	strb	r1, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80091f2:	22f8      	movs	r2, #248	; 0xf8
 80091f4:	21f3      	movs	r1, #243	; 0xf3
 80091f6:	0092      	lsls	r2, r2, #2
 80091f8:	0089      	lsls	r1, r1, #2
 80091fa:	1882      	adds	r2, r0, r2
 80091fc:	1841      	adds	r1, r0, r1
 80091fe:	c9d0      	ldmia	r1!, {r4, r6, r7}
 8009200:	c2d0      	stmia	r2!, {r4, r6, r7}
 8009202:	c950      	ldmia	r1!, {r4, r6}
 8009204:	c250      	stmia	r2!, {r4, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009206:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <SwitchClass+0xc4>)
 8009208:	9900      	ldr	r1, [sp, #0]
 800920a:	5481      	strb	r1, [r0, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800920c:	001a      	movs	r2, r3
 800920e:	3252      	adds	r2, #82	; 0x52
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	2a00      	cmp	r2, #0
 8009214:	d01a      	beq.n	800924c <SwitchClass+0x90>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009216:	0019      	movs	r1, r3
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009218:	001c      	movs	r4, r3
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800921a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800921c:	31b0      	adds	r1, #176	; 0xb0
 800921e:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009220:	346c      	adds	r4, #108	; 0x6c
 8009222:	7824      	ldrb	r4, [r4, #0]
 8009224:	710c      	strb	r4, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009226:	4917      	ldr	r1, [pc, #92]	; (8009284 <SwitchClass+0xc8>)
 8009228:	5c44      	ldrb	r4, [r0, r1]
 800922a:	3935      	subs	r1, #53	; 0x35
 800922c:	5444      	strb	r4, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800922e:	3104      	adds	r1, #4
 8009230:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009232:	001a      	movs	r2, r3
 8009234:	32b9      	adds	r2, #185	; 0xb9
 8009236:	7811      	ldrb	r1, [r2, #0]
 8009238:	22fc      	movs	r2, #252	; 0xfc
 800923a:	0092      	lsls	r2, r2, #2
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800923c:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800923e:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	4b11      	ldr	r3, [pc, #68]	; (8009288 <SwitchClass+0xcc>)
 8009244:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <SwitchClass+0xd0>)
 8009248:	4a11      	ldr	r2, [pc, #68]	; (8009290 <SwitchClass+0xd4>)
 800924a:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 800924c:	2200      	movs	r2, #0
 800924e:	4b11      	ldr	r3, [pc, #68]	; (8009294 <SwitchClass+0xd8>)
 8009250:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <SwitchClass+0xdc>)
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800925a:	f7ff ff75 	bl	8009148 <OpenContinuousRxCWindow>
}
 800925e:	0028      	movs	r0, r5
 8009260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 8009262:	9b00      	ldr	r3, [sp, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009264:	2503      	movs	r5, #3
            if( deviceClass == CLASS_A )
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f9      	bne.n	800925e <SwitchClass+0xa2>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800926a:	7013      	strb	r3, [r2, #0]
                Radio.Sleep( );
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <SwitchClass+0xdc>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009274:	9d00      	ldr	r5, [sp, #0]
 8009276:	e7f2      	b.n	800925e <SwitchClass+0xa2>
 8009278:	00000484 	.word	0x00000484
 800927c:	20000848 	.word	0x20000848
 8009280:	000003f3 	.word	0x000003f3
 8009284:	00000415 	.word	0x00000415
 8009288:	000003f1 	.word	0x000003f1
 800928c:	000003f2 	.word	0x000003f2
 8009290:	00000301 	.word	0x00000301
 8009294:	00000414 	.word	0x00000414
 8009298:	0800fc84 	.word	0x0800fc84

0800929c <OnRadioRxDone>:
{
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	000e      	movs	r6, r1
 80092a0:	0015      	movs	r5, r2
 80092a2:	001c      	movs	r4, r3
 80092a4:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80092a6:	f005 fba9 	bl	800e9fc <UTIL_TIMER_GetCurrentTime>
 80092aa:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 80092ac:	4a0e      	ldr	r2, [pc, #56]	; (80092e8 <OnRadioRxDone+0x4c>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80092ae:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 80092b0:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 80092b2:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 80092b4:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 80092b6:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80092b8:	2308      	movs	r3, #8
 80092ba:	7811      	ldrb	r1, [r2, #0]
 80092bc:	430b      	orrs	r3, r1
 80092be:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80092c0:	23d2      	movs	r3, #210	; 0xd2
 80092c2:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <OnRadioRxDone+0x50>)
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	58d3      	ldr	r3, [r2, r3]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <OnRadioRxDone+0x38>
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d000      	beq.n	80092d4 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80092d2:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80092d4:	2201      	movs	r2, #1
 80092d6:	2100      	movs	r1, #0
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <OnRadioRxDone+0x54>)
 80092da:	2002      	movs	r0, #2
 80092dc:	f005 fda0 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 80092e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	20000e40 	.word	0x20000e40
 80092e8:	20000844 	.word	0x20000844
 80092ec:	20000848 	.word	0x20000848
 80092f0:	0800f9b1 	.word	0x0800f9b1

080092f4 <OnRadioTxDone>:
{
 80092f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80092f6:	f005 fb81 	bl	800e9fc <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80092fa:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80092fc:	4b0f      	ldr	r3, [pc, #60]	; (800933c <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80092fe:	4d10      	ldr	r5, [pc, #64]	; (8009340 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009300:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009302:	0020      	movs	r0, r4
 8009304:	f005 f92c 	bl	800e560 <SysTimeGet>
 8009308:	23ce      	movs	r3, #206	; 0xce
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	18eb      	adds	r3, r5, r3
 800930e:	cc06      	ldmia	r4!, {r1, r2}
 8009310:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009312:	2310      	movs	r3, #16
 8009314:	4a0b      	ldr	r2, [pc, #44]	; (8009344 <OnRadioTxDone+0x50>)
 8009316:	7811      	ldrb	r1, [r2, #0]
 8009318:	430b      	orrs	r3, r1
 800931a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800931c:	23d2      	movs	r3, #210	; 0xd2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	58eb      	ldr	r3, [r5, r3]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <OnRadioTxDone+0x3a>
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d000      	beq.n	800932e <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800932c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800932e:	2201      	movs	r2, #1
 8009330:	2100      	movs	r1, #0
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <OnRadioTxDone+0x54>)
 8009334:	2002      	movs	r0, #2
 8009336:	f005 fd73 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 800933a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800933c:	20000e50 	.word	0x20000e50
 8009340:	20000848 	.word	0x20000848
 8009344:	20000844 	.word	0x20000844
 8009348:	0800f9be 	.word	0x0800f9be

0800934c <ScheduleTx>:
{
 800934c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 800934e:	4cb9      	ldr	r4, [pc, #740]	; (8009634 <ScheduleTx+0x2e8>)
 8009350:	4db9      	ldr	r5, [pc, #740]	; (8009638 <ScheduleTx+0x2ec>)
{
 8009352:	b095      	sub	sp, #84	; 0x54
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8009354:	5963      	ldr	r3, [r4, r5]
{
 8009356:	9003      	str	r0, [sp, #12]
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8009358:	0019      	movs	r1, r3
 800935a:	31fc      	adds	r1, #252	; 0xfc
 800935c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800935e:	2a00      	cmp	r2, #0
 8009360:	d108      	bne.n	8009374 <ScheduleTx+0x28>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009362:	324d      	adds	r2, #77	; 0x4d
 8009364:	32ff      	adds	r2, #255	; 0xff
 8009366:	5a9a      	ldrh	r2, [r3, r2]
 8009368:	2383      	movs	r3, #131	; 0x83
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	58e3      	ldr	r3, [r4, r3]
 800936e:	3a01      	subs	r2, #1
 8009370:	4353      	muls	r3, r2
 8009372:	658b      	str	r3, [r1, #88]	; 0x58
    switch( MacCtx.TxMsg.Type )
 8009374:	0026      	movs	r6, r4
 8009376:	36ff      	adds	r6, #255	; 0xff
 8009378:	7973      	ldrb	r3, [r6, #5]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <ScheduleTx+0x3a>
 800937e:	2b04      	cmp	r3, #4
 8009380:	d064      	beq.n	800944c <ScheduleTx+0x100>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009382:	2703      	movs	r7, #3
 8009384:	e05f      	b.n	8009446 <ScheduleTx+0xfa>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009386:	48ad      	ldr	r0, [pc, #692]	; (800963c <ScheduleTx+0x2f0>)
 8009388:	f002 ff0e 	bl	800c1a8 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800938c:	2800      	cmp	r0, #0
 800938e:	d000      	beq.n	8009392 <ScheduleTx+0x46>
 8009390:	e14c      	b.n	800962c <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009392:	7b73      	ldrb	r3, [r6, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009394:	ae0e      	add	r6, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009396:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009398:	5963      	ldr	r3, [r4, r5]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800939a:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800939c:	001a      	movs	r2, r3
 800939e:	32fc      	adds	r2, #252	; 0xfc
 80093a0:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80093a2:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 80093a4:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80093a6:	001a      	movs	r2, r3
 80093a8:	3285      	adds	r2, #133	; 0x85
 80093aa:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80093ac:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80093ae:	7232      	strb	r2, [r6, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	72b3      	strb	r3, [r6, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80093b4:	f005 f900 	bl	800e5b8 <SysTimeGetMcuTime>
 80093b8:	5963      	ldr	r3, [r4, r5]
 80093ba:	9908      	ldr	r1, [sp, #32]
 80093bc:	001a      	movs	r2, r3
 80093be:	325d      	adds	r2, #93	; 0x5d
 80093c0:	32ff      	adds	r2, #255	; 0xff
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	0038      	movs	r0, r7
 80093c6:	9200      	str	r2, [sp, #0]
 80093c8:	22ac      	movs	r2, #172	; 0xac
 80093ca:	0052      	lsls	r2, r2, #1
 80093cc:	589b      	ldr	r3, [r3, r2]
 80093ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d0:	f005 f888 	bl	800e4e4 <SysTimeSub>
 80093d4:	ab11      	add	r3, sp, #68	; 0x44
 80093d6:	cf06      	ldmia	r7!, {r1, r2}
 80093d8:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80093da:	5963      	ldr	r3, [r4, r5]
    nextChan.Joined = true;
 80093dc:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80093de:	001a      	movs	r2, r3
 80093e0:	32fc      	adds	r2, #252	; 0xfc
 80093e2:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 80093e4:	7271      	strb	r1, [r6, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80093e6:	6072      	str	r2, [r6, #4]
    nextChan.LastTxIsJoinRequest = false;
 80093e8:	2200      	movs	r2, #0
 80093ea:	7532      	strb	r2, [r6, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80093ec:	8822      	ldrh	r2, [r4, #0]
 80093ee:	82f2      	strh	r2, [r6, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80093f0:	22b2      	movs	r2, #178	; 0xb2
 80093f2:	0052      	lsls	r2, r2, #1
 80093f4:	5c9a      	ldrb	r2, [r3, r2]
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	d101      	bne.n	80093fe <ScheduleTx+0xb2>
        nextChan.LastTxIsJoinRequest = true;
 80093fa:	7531      	strb	r1, [r6, #20]
        nextChan.Joined = false;
 80093fc:	7272      	strb	r2, [r6, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 80093fe:	7818      	ldrb	r0, [r3, #0]
 8009400:	3355      	adds	r3, #85	; 0x55
 8009402:	33ff      	adds	r3, #255	; 0xff
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	0031      	movs	r1, r6
 8009408:	4b8d      	ldr	r3, [pc, #564]	; (8009640 <ScheduleTx+0x2f4>)
 800940a:	4a8e      	ldr	r2, [pc, #568]	; (8009644 <ScheduleTx+0x2f8>)
 800940c:	f003 f817 	bl	800c43e <RegionNextChannel>
 8009410:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8009412:	d01f      	beq.n	8009454 <ScheduleTx+0x108>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009414:	280b      	cmp	r0, #11
 8009416:	d116      	bne.n	8009446 <ScheduleTx+0xfa>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d013      	beq.n	8009446 <ScheduleTx+0xfa>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800941e:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 8009420:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009422:	4b84      	ldr	r3, [pc, #528]	; (8009634 <ScheduleTx+0x2e8>)
 8009424:	00d2      	lsls	r2, r2, #3
 8009426:	5899      	ldr	r1, [r3, r2]
 8009428:	42b9      	cmp	r1, r7
 800942a:	d00c      	beq.n	8009446 <ScheduleTx+0xfa>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800942c:	20d0      	movs	r0, #208	; 0xd0
 800942e:	2220      	movs	r2, #32
 8009430:	0080      	lsls	r0, r0, #2
 8009432:	581c      	ldr	r4, [r3, r0]
 8009434:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009436:	4c84      	ldr	r4, [pc, #528]	; (8009648 <ScheduleTx+0x2fc>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009438:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800943a:	0020      	movs	r0, r4
 800943c:	f005 fbd2 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009440:	0020      	movs	r0, r4
 8009442:	f005 fb73 	bl	800eb2c <UTIL_TIMER_Start>
}
 8009446:	0038      	movs	r0, r7
 8009448:	b015      	add	sp, #84	; 0x54
 800944a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800944c:	487b      	ldr	r0, [pc, #492]	; (800963c <ScheduleTx+0x2f0>)
 800944e:	f002 fee0 	bl	800c212 <LoRaMacSerializerData>
 8009452:	e79b      	b.n	800938c <ScheduleTx+0x40>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009454:	5961      	ldr	r1, [r4, r5]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8009456:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009458:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800945a:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 800945c:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800945e:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	7812      	ldrb	r2, [r2, #0]
 8009464:	31b9      	adds	r1, #185	; 0xb9
 8009466:	0030      	movs	r0, r6
 8009468:	7809      	ldrb	r1, [r1, #0]
 800946a:	b25b      	sxtb	r3, r3
 800946c:	b252      	sxtb	r2, r2
 800946e:	f002 fffb 	bl	800c468 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009472:	2288      	movs	r2, #136	; 0x88
 8009474:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8009476:	5963      	ldr	r3, [r4, r5]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009478:	b241      	sxtb	r1, r0
 800947a:	449c      	add	ip, r3
 800947c:	338c      	adds	r3, #140	; 0x8c
 800947e:	781a      	ldrb	r2, [r3, #0]
 8009480:	4b72      	ldr	r3, [pc, #456]	; (800964c <ScheduleTx+0x300>)
 8009482:	0030      	movs	r0, r6
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4663      	mov	r3, ip
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f002 ff70 	bl	800c36e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800948e:	5963      	ldr	r3, [r4, r5]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8009490:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009492:	001a      	movs	r2, r3
 8009494:	001e      	movs	r6, r3
 8009496:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8009498:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800949a:	4b6d      	ldr	r3, [pc, #436]	; (8009650 <ScheduleTx+0x304>)
 800949c:	7809      	ldrb	r1, [r1, #0]
 800949e:	328c      	adds	r2, #140	; 0x8c
 80094a0:	7812      	ldrb	r2, [r2, #0]
 80094a2:	3688      	adds	r6, #136	; 0x88
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	6833      	ldr	r3, [r6, #0]
 80094a8:	b249      	sxtb	r1, r1
 80094aa:	f002 ff60 	bl	800c36e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094ae:	22f1      	movs	r2, #241	; 0xf1
 80094b0:	0092      	lsls	r2, r2, #2
 80094b2:	5963      	ldr	r3, [r4, r5]
 80094b4:	58a2      	ldr	r2, [r4, r2]
 80094b6:	20ec      	movs	r0, #236	; 0xec
 80094b8:	0011      	movs	r1, r2
 80094ba:	001a      	movs	r2, r3
 80094bc:	3294      	adds	r2, #148	; 0x94
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	0080      	lsls	r0, r0, #2
 80094c2:	1852      	adds	r2, r2, r1
 80094c4:	5022      	str	r2, [r4, r0]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094c6:	22f6      	movs	r2, #246	; 0xf6
 80094c8:	0092      	lsls	r2, r2, #2
 80094ca:	58a0      	ldr	r0, [r4, r2]
 80094cc:	001a      	movs	r2, r3
 80094ce:	26ed      	movs	r6, #237	; 0xed
 80094d0:	3298      	adds	r2, #152	; 0x98
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	00b6      	lsls	r6, r6, #2
 80094d6:	1812      	adds	r2, r2, r0
 80094d8:	51a2      	str	r2, [r4, r6]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80094da:	22b2      	movs	r2, #178	; 0xb2
 80094dc:	0052      	lsls	r2, r2, #1
 80094de:	5c9a      	ldrb	r2, [r3, r2]
 80094e0:	4694      	mov	ip, r2
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	d10a      	bne.n	80094fc <ScheduleTx+0x1b0>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094e6:	001a      	movs	r2, r3
 80094e8:	329c      	adds	r2, #156	; 0x9c
 80094ea:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094ec:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094ee:	1852      	adds	r2, r2, r1
 80094f0:	21ec      	movs	r1, #236	; 0xec
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094f2:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094f4:	0089      	lsls	r1, r1, #2
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094f6:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094f8:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094fa:	51a0      	str	r0, [r4, r6]
    size_t macCmdsSize = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009500:	4663      	mov	r3, ip
 8009502:	2b00      	cmp	r3, #0
 8009504:	d012      	beq.n	800952c <ScheduleTx+0x1e0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009506:	a80a      	add	r0, sp, #40	; 0x28
 8009508:	f002 fa18 	bl	800b93c <LoRaMacCommandsGetSizeSerializedCmds>
 800950c:	2800      	cmp	r0, #0
 800950e:	d16f      	bne.n	80095f0 <ScheduleTx+0x2a4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009510:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8009512:	4b48      	ldr	r3, [pc, #288]	; (8009634 <ScheduleTx+0x2e8>)
 8009514:	4a4f      	ldr	r2, [pc, #316]	; (8009654 <ScheduleTx+0x308>)
 8009516:	5c9c      	ldrb	r4, [r3, r2]
 8009518:	595b      	ldr	r3, [r3, r5]
 800951a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800951c:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 800951e:	b2d6      	uxtb	r6, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009520:	f7ff fcae 	bl	8008e80 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009524:	19a4      	adds	r4, r4, r6
 8009526:	b280      	uxth	r0, r0
 8009528:	42a0      	cmp	r0, r4
 800952a:	d35f      	bcc.n	80095ec <ScheduleTx+0x2a0>
    return SendFrameOnChannel( MacCtx.Channel );
 800952c:	4c41      	ldr	r4, [pc, #260]	; (8009634 <ScheduleTx+0x2e8>)
 800952e:	4b4a      	ldr	r3, [pc, #296]	; (8009658 <ScheduleTx+0x30c>)
    int8_t txPower = 0;
 8009530:	2200      	movs	r2, #0
    return SendFrameOnChannel( MacCtx.Channel );
 8009532:	5ce6      	ldrb	r6, [r4, r3]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009534:	5963      	ldr	r3, [r4, r5]
    int8_t txPower = 0;
 8009536:	a902      	add	r1, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009538:	0018      	movs	r0, r3
    int8_t txPower = 0;
 800953a:	74ca      	strb	r2, [r1, #19]
    txConfig.Channel = channel;
 800953c:	a90a      	add	r1, sp, #40	; 0x28
 800953e:	700e      	strb	r6, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009540:	3085      	adds	r0, #133	; 0x85
 8009542:	7802      	ldrb	r2, [r0, #0]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009544:	3801      	subs	r0, #1
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009546:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009548:	7802      	ldrb	r2, [r0, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800954a:	3038      	adds	r0, #56	; 0x38
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800954c:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800954e:	6800      	ldr	r0, [r0, #0]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009550:	8822      	ldrh	r2, [r4, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8009552:	6048      	str	r0, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009554:	0018      	movs	r0, r3
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009556:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009558:	30c0      	adds	r0, #192	; 0xc0
 800955a:	6800      	ldr	r0, [r0, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800955c:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 800955e:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009560:	2213      	movs	r2, #19
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009562:	6088      	str	r0, [r1, #8]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009564:	a802      	add	r0, sp, #8
 8009566:	1812      	adds	r2, r2, r0
 8009568:	4b3c      	ldr	r3, [pc, #240]	; (800965c <ScheduleTx+0x310>)
 800956a:	4660      	mov	r0, ip
 800956c:	f002 ff16 	bl	800c39c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009570:	2201      	movs	r2, #1
 8009572:	4b3b      	ldr	r3, [pc, #236]	; (8009660 <ScheduleTx+0x314>)
    MacCtx.McpsConfirm.TxPower = txPower;
 8009574:	a902      	add	r1, sp, #8
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009576:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009578:	5963      	ldr	r3, [r4, r5]
    MacCtx.McpsConfirm.TxPower = txPower;
 800957a:	7cca      	ldrb	r2, [r1, #19]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800957c:	3385      	adds	r3, #133	; 0x85
 800957e:	781d      	ldrb	r5, [r3, #0]
 8009580:	4b38      	ldr	r3, [pc, #224]	; (8009664 <ScheduleTx+0x318>)
 8009582:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8009584:	4b38      	ldr	r3, [pc, #224]	; (8009668 <ScheduleTx+0x31c>)
 8009586:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8009588:	4b38      	ldr	r3, [pc, #224]	; (800966c <ScheduleTx+0x320>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800958a:	4a39      	ldr	r2, [pc, #228]	; (8009670 <ScheduleTx+0x324>)
    MacCtx.McpsConfirm.Channel = channel;
 800958c:	50e6      	str	r6, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800958e:	3b34      	subs	r3, #52	; 0x34
 8009590:	58e3      	ldr	r3, [r4, r3]
    switch( MacCtx.TxMsg.Type )
 8009592:	0026      	movs	r6, r4
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009594:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009596:	4a37      	ldr	r2, [pc, #220]	; (8009674 <ScheduleTx+0x328>)
    switch( MacCtx.TxMsg.Type )
 8009598:	36ff      	adds	r6, #255	; 0xff
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800959a:	50a3      	str	r3, [r4, r2]
    uint32_t fCntUp = 0;
 800959c:	2200      	movs	r2, #0
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 800959e:	4b2e      	ldr	r3, [pc, #184]	; (8009658 <ScheduleTx+0x30c>)
 80095a0:	5ce3      	ldrb	r3, [r4, r3]
    uint32_t fCntUp = 0;
 80095a2:	9207      	str	r2, [sp, #28]
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80095a4:	9303      	str	r3, [sp, #12]
    switch( MacCtx.TxMsg.Type )
 80095a6:	7973      	ldrb	r3, [r6, #5]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d023      	beq.n	80095f4 <ScheduleTx+0x2a8>
 80095ac:	2b04      	cmp	r3, #4
 80095ae:	d000      	beq.n	80095b2 <ScheduleTx+0x266>
 80095b0:	e6e7      	b.n	8009382 <ScheduleTx+0x36>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80095b2:	a807      	add	r0, sp, #28
 80095b4:	f002 fc44 	bl	800be40 <LoRaMacCryptoGetFCntUp>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d139      	bne.n	8009630 <ScheduleTx+0x2e4>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80095bc:	2382      	movs	r3, #130	; 0x82
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	5ce3      	ldrb	r3, [r4, r3]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <ScheduleTx+0x282>
 80095c6:	4b2c      	ldr	r3, [pc, #176]	; (8009678 <ScheduleTx+0x32c>)
 80095c8:	5ce3      	ldrb	r3, [r4, r3]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d902      	bls.n	80095d4 <ScheduleTx+0x288>
                fCntUp -= 1;
 80095ce:	9b07      	ldr	r3, [sp, #28]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80095d4:	0029      	movs	r1, r5
 80095d6:	4b19      	ldr	r3, [pc, #100]	; (800963c <ScheduleTx+0x2f0>)
 80095d8:	9a03      	ldr	r2, [sp, #12]
 80095da:	9807      	ldr	r0, [sp, #28]
 80095dc:	f002 fc8c 	bl	800bef8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d123      	bne.n	800962c <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80095e4:	0023      	movs	r3, r4
 80095e6:	33ff      	adds	r3, #255	; 0xff
 80095e8:	7b5b      	ldrb	r3, [r3, #13]
 80095ea:	e009      	b.n	8009600 <ScheduleTx+0x2b4>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80095ec:	2708      	movs	r7, #8
 80095ee:	e72a      	b.n	8009446 <ScheduleTx+0xfa>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80095f0:	2713      	movs	r7, #19
 80095f2:	e728      	b.n	8009446 <ScheduleTx+0xfa>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80095f4:	4811      	ldr	r0, [pc, #68]	; (800963c <ScheduleTx+0x2f0>)
 80095f6:	f002 fc4f 	bl	800be98 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d116      	bne.n	800962c <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80095fe:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009600:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009602:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009604:	2302      	movs	r3, #2
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	58a1      	ldr	r1, [r4, r2]
 800960a:	430b      	orrs	r3, r1
 800960c:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 800960e:	4b1b      	ldr	r3, [pc, #108]	; (800967c <ScheduleTx+0x330>)
 8009610:	5ce3      	ldrb	r3, [r4, r3]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <ScheduleTx+0x2d2>
        MacCtx.ChannelsNbTransCounter++;
 8009616:	32d0      	adds	r2, #208	; 0xd0
 8009618:	5ca3      	ldrb	r3, [r4, r2]
 800961a:	3301      	adds	r3, #1
 800961c:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800961e:	4b18      	ldr	r3, [pc, #96]	; (8009680 <ScheduleTx+0x334>)
 8009620:	7821      	ldrb	r1, [r4, #0]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	4817      	ldr	r0, [pc, #92]	; (8009684 <ScheduleTx+0x338>)
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	4798      	blx	r3
    return SendFrameOnChannel( MacCtx.Channel );
 800962a:	e70c      	b.n	8009446 <ScheduleTx+0xfa>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800962c:	2711      	movs	r7, #17
 800962e:	e70a      	b.n	8009446 <ScheduleTx+0xfa>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009630:	2712      	movs	r7, #18
 8009632:	e708      	b.n	8009446 <ScheduleTx+0xfa>
 8009634:	20000848 	.word	0x20000848
 8009638:	00000484 	.word	0x00000484
 800963c:	20000950 	.word	0x20000950
 8009640:	20000cd0 	.word	0x20000cd0
 8009644:	20000c5d 	.word	0x20000c5d
 8009648:	20000bb0 	.word	0x20000bb0
 800964c:	20000c00 	.word	0x20000c00
 8009650:	20000c14 	.word	0x20000c14
 8009654:	00000237 	.word	0x00000237
 8009658:	00000415 	.word	0x00000415
 800965c:	20000c60 	.word	0x20000c60
 8009660:	0000043d 	.word	0x0000043d
 8009664:	0000043e 	.word	0x0000043e
 8009668:	0000043f 	.word	0x0000043f
 800966c:	0000044c 	.word	0x0000044c
 8009670:	00000444 	.word	0x00000444
 8009674:	00000454 	.word	0x00000454
 8009678:	00000412 	.word	0x00000412
 800967c:	00000414 	.word	0x00000414
 8009680:	0800fc84 	.word	0x0800fc84
 8009684:	2000084a 	.word	0x2000084a

08009688 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8009688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800968a:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 800968c:	f005 f9fa 	bl	800ea84 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009690:	4e0c      	ldr	r6, [pc, #48]	; (80096c4 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009692:	4f0d      	ldr	r7, [pc, #52]	; (80096c8 <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8009694:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800969a:	4d0c      	ldr	r5, [pc, #48]	; (80096cc <RxWindowSetup.constprop.0+0x44>)
 800969c:	0021      	movs	r1, r4
 800969e:	59eb      	ldr	r3, [r5, r7]
 80096a0:	4a0b      	ldr	r2, [pc, #44]	; (80096d0 <RxWindowSetup.constprop.0+0x48>)
 80096a2:	7818      	ldrb	r0, [r3, #0]
 80096a4:	f002 fe6e 	bl	800c384 <RegionRxConfig>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d009      	beq.n	80096c0 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80096ac:	59eb      	ldr	r3, [r5, r7]
 80096ae:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80096b0:	3390      	adds	r3, #144	; 0x90
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	9201      	str	r2, [sp, #4]
 80096b6:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 80096b8:	2390      	movs	r3, #144	; 0x90
 80096ba:	7ce2      	ldrb	r2, [r4, #19]
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	54ea      	strb	r2, [r5, r3]
}
 80096c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	0800fc84 	.word	0x0800fc84
 80096c8:	00000484 	.word	0x00000484
 80096cc:	20000848 	.word	0x20000848
 80096d0:	20000c68 	.word	0x20000c68

080096d4 <OnRxWindow1TimerEvent>:
{
 80096d4:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80096d6:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <OnRxWindow1TimerEvent+0x40>)
 80096d8:	4a0f      	ldr	r2, [pc, #60]	; (8009718 <OnRxWindow1TimerEvent+0x44>)
 80096da:	5c99      	ldrb	r1, [r3, r2]
 80096dc:	3a5d      	subs	r2, #93	; 0x5d
 80096de:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80096e0:	4a0e      	ldr	r2, [pc, #56]	; (800971c <OnRxWindow1TimerEvent+0x48>)
 80096e2:	589a      	ldr	r2, [r3, r2]
 80096e4:	0011      	movs	r1, r2
 80096e6:	31a5      	adds	r1, #165	; 0xa5
 80096e8:	7808      	ldrb	r0, [r1, #0]
 80096ea:	490d      	ldr	r1, [pc, #52]	; (8009720 <OnRxWindow1TimerEvent+0x4c>)
 80096ec:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80096ee:	0011      	movs	r1, r2
 80096f0:	31b9      	adds	r1, #185	; 0xb9
 80096f2:	7808      	ldrb	r0, [r1, #0]
 80096f4:	21f2      	movs	r1, #242	; 0xf2
 80096f6:	0089      	lsls	r1, r1, #2
 80096f8:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80096fa:	32ca      	adds	r2, #202	; 0xca
 80096fc:	7811      	ldrb	r1, [r2, #0]
 80096fe:	4a09      	ldr	r2, [pc, #36]	; (8009724 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009700:	4809      	ldr	r0, [pc, #36]	; (8009728 <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009702:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009704:	2100      	movs	r1, #0
 8009706:	4a09      	ldr	r2, [pc, #36]	; (800972c <OnRxWindow1TimerEvent+0x58>)
 8009708:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800970a:	4909      	ldr	r1, [pc, #36]	; (8009730 <OnRxWindow1TimerEvent+0x5c>)
 800970c:	f7ff ffbc 	bl	8009688 <RxWindowSetup.constprop.0>
}
 8009710:	bd10      	pop	{r4, pc}
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	20000848 	.word	0x20000848
 8009718:	00000415 	.word	0x00000415
 800971c:	00000484 	.word	0x00000484
 8009720:	000003bb 	.word	0x000003bb
 8009724:	000003c9 	.word	0x000003c9
 8009728:	20000bc8 	.word	0x20000bc8
 800972c:	000003ca 	.word	0x000003ca
 8009730:	20000c00 	.word	0x20000c00

08009734 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009734:	2290      	movs	r2, #144	; 0x90
{
 8009736:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009738:	4b11      	ldr	r3, [pc, #68]	; (8009780 <OnRxWindow2TimerEvent+0x4c>)
 800973a:	00d2      	lsls	r2, r2, #3
 800973c:	5c9a      	ldrb	r2, [r3, r2]
 800973e:	2a00      	cmp	r2, #0
 8009740:	d01d      	beq.n	800977e <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009742:	4a10      	ldr	r2, [pc, #64]	; (8009784 <OnRxWindow2TimerEvent+0x50>)
 8009744:	5c99      	ldrb	r1, [r3, r2]
 8009746:	3a49      	subs	r2, #73	; 0x49
 8009748:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800974a:	4a0f      	ldr	r2, [pc, #60]	; (8009788 <OnRxWindow2TimerEvent+0x54>)
 800974c:	589a      	ldr	r2, [r3, r2]
 800974e:	0011      	movs	r1, r2
 8009750:	31a8      	adds	r1, #168	; 0xa8
 8009752:	6808      	ldr	r0, [r1, #0]
 8009754:	21f4      	movs	r1, #244	; 0xf4
 8009756:	0089      	lsls	r1, r1, #2
 8009758:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800975a:	0011      	movs	r1, r2
 800975c:	31b9      	adds	r1, #185	; 0xb9
 800975e:	7808      	ldrb	r0, [r1, #0]
 8009760:	21f7      	movs	r1, #247	; 0xf7
 8009762:	0089      	lsls	r1, r1, #2
 8009764:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009766:	32ca      	adds	r2, #202	; 0xca
 8009768:	7811      	ldrb	r1, [r2, #0]
 800976a:	4a08      	ldr	r2, [pc, #32]	; (800978c <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800976c:	4808      	ldr	r0, [pc, #32]	; (8009790 <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800976e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009770:	2180      	movs	r1, #128	; 0x80
 8009772:	4a08      	ldr	r2, [pc, #32]	; (8009794 <OnRxWindow2TimerEvent+0x60>)
 8009774:	0049      	lsls	r1, r1, #1
 8009776:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009778:	4907      	ldr	r1, [pc, #28]	; (8009798 <OnRxWindow2TimerEvent+0x64>)
 800977a:	f7ff ff85 	bl	8009688 <RxWindowSetup.constprop.0>
}
 800977e:	bd10      	pop	{r4, pc}
 8009780:	20000848 	.word	0x20000848
 8009784:	00000415 	.word	0x00000415
 8009788:	00000484 	.word	0x00000484
 800978c:	000003dd 	.word	0x000003dd
 8009790:	20000be0 	.word	0x20000be0
 8009794:	000003de 	.word	0x000003de
 8009798:	20000c14 	.word	0x20000c14

0800979c <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 800979c:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800979e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a0:	b095      	sub	sp, #84	; 0x54
 80097a2:	9206      	str	r2, [sp, #24]
    uint8_t status = 0;
 80097a4:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80097a6:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 80097a8:	001e      	movs	r6, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80097aa:	9103      	str	r1, [sp, #12]
    uint8_t status = 0;
 80097ac:	a906      	add	r1, sp, #24
 80097ae:	1852      	adds	r2, r2, r1
 80097b0:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80097b2:	aa0a      	add	r2, sp, #40	; 0x28
 80097b4:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 80097b6:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	429e      	cmp	r6, r3
 80097bc:	d301      	bcc.n	80097c2 <ProcessMacCommands.constprop.0+0x26>
}
 80097be:	b015      	add	sp, #84	; 0x54
 80097c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80097c2:	5db8      	ldrb	r0, [r7, r6]
 80097c4:	f002 f90e 	bl	800b9e4 <LoRaMacCommandsGetCmdSize>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	1980      	adds	r0, r0, r6
 80097cc:	19bd      	adds	r5, r7, r6
 80097ce:	4298      	cmp	r0, r3
 80097d0:	dcf5      	bgt.n	80097be <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 80097d2:	7828      	ldrb	r0, [r5, #0]
 80097d4:	1c74      	adds	r4, r6, #1
 80097d6:	3802      	subs	r0, #2
 80097d8:	b2e4      	uxtb	r4, r4
 80097da:	280b      	cmp	r0, #11
 80097dc:	d8ef      	bhi.n	80097be <ProcessMacCommands.constprop.0+0x22>
 80097de:	f7f6 fca5 	bl	800012c <__gnu_thumb1_case_shi>
 80097e2:	000c      	.short	0x000c
 80097e4:	008a0023 	.word	0x008a0023
 80097e8:	00e800a2 	.word	0x00e800a2
 80097ec:	012e0100 	.word	0x012e0100
 80097f0:	01a60150 	.word	0x01a60150
 80097f4:	ffeeffee 	.word	0xffeeffee
 80097f8:	01dd      	.short	0x01dd
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80097fa:	2004      	movs	r0, #4
 80097fc:	f002 f9ba 	bl	800bb74 <LoRaMacConfirmQueueIsCmdActive>
 8009800:	2800      	cmp	r0, #0
 8009802:	d00f      	beq.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009804:	2104      	movs	r1, #4
 8009806:	2000      	movs	r0, #0
 8009808:	f002 f972 	bl	800baf0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800980c:	228b      	movs	r2, #139	; 0x8b
 800980e:	5d39      	ldrb	r1, [r7, r4]
 8009810:	4bdd      	ldr	r3, [pc, #884]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009812:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009814:	1cf4      	adds	r4, r6, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009816:	3602      	adds	r6, #2
 8009818:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800981a:	b2f6      	uxtb	r6, r6
 800981c:	5db9      	ldrb	r1, [r7, r6]
 800981e:	4adb      	ldr	r2, [pc, #876]	; (8009b8c <ProcessMacCommands.constprop.0+0x3f0>)
 8009820:	b2e4      	uxtb	r4, r4
 8009822:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8009824:	0026      	movs	r6, r4
 8009826:	e7c7      	b.n	80097b8 <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8009828:	2300      	movs	r3, #0
 800982a:	aa06      	add	r2, sp, #24
 800982c:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800982e:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8009830:	7513      	strb	r3, [r2, #20]
                uint8_t linkAdrNbBytesParsed = 0;
 8009832:	aa0c      	add	r2, sp, #48	; 0x30
 8009834:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8009836:	9b02      	ldr	r3, [sp, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d14e      	bne.n	80098da <ProcessMacCommands.constprop.0+0x13e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800983c:	3c01      	subs	r4, #1
 800983e:	a910      	add	r1, sp, #64	; 0x40
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009840:	9b03      	ldr	r3, [sp, #12]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8009842:	193c      	adds	r4, r7, r4
 8009844:	604c      	str	r4, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8009846:	4dd0      	ldr	r5, [pc, #832]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009848:	4cd1      	ldr	r4, [pc, #836]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800984a:	1b9b      	subs	r3, r3, r6
 800984c:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800984e:	592b      	ldr	r3, [r5, r4]
 8009850:	0018      	movs	r0, r3
 8009852:	307e      	adds	r0, #126	; 0x7e
 8009854:	7800      	ldrb	r0, [r0, #0]
 8009856:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009858:	0018      	movs	r0, r3
 800985a:	30b8      	adds	r0, #184	; 0xb8
 800985c:	7800      	ldrb	r0, [r0, #0]
 800985e:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009860:	0018      	movs	r0, r3
 8009862:	3085      	adds	r0, #133	; 0x85
 8009864:	7800      	ldrb	r0, [r0, #0]
 8009866:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009868:	0018      	movs	r0, r3
 800986a:	3084      	adds	r0, #132	; 0x84
 800986c:	7800      	ldrb	r0, [r0, #0]
 800986e:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8009870:	0018      	movs	r0, r3
 8009872:	30a4      	adds	r0, #164	; 0xa4
 8009874:	7800      	ldrb	r0, [r0, #0]
 8009876:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009878:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800987a:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800987c:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800987e:	469c      	mov	ip, r3
 8009880:	ab0b      	add	r3, sp, #44	; 0x2c
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009882:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	230f      	movs	r3, #15
 8009888:	9201      	str	r2, [sp, #4]
 800988a:	aa06      	add	r2, sp, #24
 800988c:	189b      	adds	r3, r3, r2
 800988e:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009890:	9010      	str	r0, [sp, #64]	; 0x40
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009892:	a806      	add	r0, sp, #24
 8009894:	1812      	adds	r2, r2, r0
 8009896:	4660      	mov	r0, ip
 8009898:	f002 fd8d 	bl	800c3b6 <RegionLinkAdrReq>
 800989c:	ab06      	add	r3, sp, #24
 800989e:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 80098a0:	43c0      	mvns	r0, r0
 80098a2:	0743      	lsls	r3, r0, #29
 80098a4:	d10d      	bne.n	80098c2 <ProcessMacCommands.constprop.0+0x126>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80098a6:	592b      	ldr	r3, [r5, r4]
 80098a8:	a906      	add	r1, sp, #24
 80098aa:	001a      	movs	r2, r3
 80098ac:	7b89      	ldrb	r1, [r1, #14]
 80098ae:	3285      	adds	r2, #133	; 0x85
 80098b0:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80098b2:	a906      	add	r1, sp, #24
 80098b4:	7bc9      	ldrb	r1, [r1, #15]
 80098b6:	3a01      	subs	r2, #1
 80098b8:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80098ba:	aa06      	add	r2, sp, #24
 80098bc:	7d12      	ldrb	r2, [r2, #20]
 80098be:	33a4      	adds	r3, #164	; 0xa4
 80098c0:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80098c2:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80098c4:	ab0c      	add	r3, sp, #48	; 0x30
 80098c6:	781c      	ldrb	r4, [r3, #0]
 80098c8:	2105      	movs	r1, #5
 80098ca:	0020      	movs	r0, r4
 80098cc:	f7f6 fc42 	bl	8000154 <__udivsi3>
 80098d0:	b2c0      	uxtb	r0, r0
 80098d2:	4285      	cmp	r5, r0
 80098d4:	d304      	bcc.n	80098e0 <ProcessMacCommands.constprop.0+0x144>
                    macIndex += linkAdrNbBytesParsed - 1;
 80098d6:	1934      	adds	r4, r6, r4
 80098d8:	b2e4      	uxtb	r4, r4
                break;
 80098da:	2301      	movs	r3, #1
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	e7a1      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80098e0:	230d      	movs	r3, #13
 80098e2:	a906      	add	r1, sp, #24
 80098e4:	185b      	adds	r3, r3, r1
 80098e6:	2201      	movs	r2, #1
 80098e8:	0019      	movs	r1, r3
 80098ea:	2003      	movs	r0, #3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80098ec:	3501      	adds	r5, #1
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80098ee:	f001 ff7f 	bl	800b7f0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80098f2:	b2ed      	uxtb	r5, r5
 80098f4:	e7e6      	b.n	80098c4 <ProcessMacCommands.constprop.0+0x128>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80098f6:	4aa4      	ldr	r2, [pc, #656]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 80098f8:	4ba5      	ldr	r3, [pc, #660]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
 80098fa:	3602      	adds	r6, #2
 80098fc:	58d1      	ldr	r1, [r2, r3]
 80098fe:	220f      	movs	r2, #15
 8009900:	5d3b      	ldrb	r3, [r7, r4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009902:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009904:	4013      	ands	r3, r2
 8009906:	000a      	movs	r2, r1
 8009908:	32c8      	adds	r2, #200	; 0xc8
 800990a:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800990c:	2201      	movs	r2, #1
 800990e:	409a      	lsls	r2, r3
 8009910:	0013      	movs	r3, r2
 8009912:	22a6      	movs	r2, #166	; 0xa6
 8009914:	0052      	lsls	r2, r2, #1
 8009916:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009918:	2200      	movs	r2, #0
 800991a:	a90a      	add	r1, sp, #40	; 0x28
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800991c:	b2f6      	uxtb	r6, r6
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800991e:	f001 ff67 	bl	800b7f0 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009922:	0034      	movs	r4, r6
}
 8009924:	e77e      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                status = 0x07;
 8009926:	2107      	movs	r1, #7
 8009928:	ab06      	add	r3, sp, #24
 800992a:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800992c:	5d3b      	ldrb	r3, [r7, r4]
 800992e:	ad10      	add	r5, sp, #64	; 0x40
 8009930:	091a      	lsrs	r2, r3, #4
 8009932:	400a      	ands	r2, r1
 8009934:	706a      	strb	r2, [r5, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009936:	220f      	movs	r2, #15
 8009938:	4013      	ands	r3, r2
 800993a:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800993c:	1d32      	adds	r2, r6, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800993e:	1cf3      	adds	r3, r6, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009940:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009942:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009944:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009946:	5cba      	ldrb	r2, [r7, r2]
 8009948:	1d74      	adds	r4, r6, #5
                macIndex++;
 800994a:	3602      	adds	r6, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800994c:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800994e:	b2f6      	uxtb	r6, r6
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009950:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009952:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009954:	5dba      	ldrb	r2, [r7, r6]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009956:	4e8e      	ldr	r6, [pc, #568]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009958:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800995a:	2264      	movs	r2, #100	; 0x64
 800995c:	4353      	muls	r3, r2
 800995e:	9311      	str	r3, [sp, #68]	; 0x44
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009960:	4b89      	ldr	r3, [pc, #548]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009962:	0029      	movs	r1, r5
 8009964:	599b      	ldr	r3, [r3, r6]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009966:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009968:	7818      	ldrb	r0, [r3, #0]
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	f002 fd33 	bl	800c3d6 <RegionRxParamSetupReq>
 8009970:	ab06      	add	r3, sp, #24
 8009972:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8009974:	2307      	movs	r3, #7
 8009976:	4003      	ands	r3, r0
 8009978:	2b07      	cmp	r3, #7
 800997a:	d10d      	bne.n	8009998 <ProcessMacCommands.constprop.0+0x1fc>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800997c:	4b82      	ldr	r3, [pc, #520]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 800997e:	782a      	ldrb	r2, [r5, #0]
 8009980:	599b      	ldr	r3, [r3, r6]
 8009982:	0019      	movs	r1, r3
 8009984:	31ac      	adds	r1, #172	; 0xac
 8009986:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009988:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800998a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800998c:	3904      	subs	r1, #4
 800998e:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009990:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009992:	786a      	ldrb	r2, [r5, #1]
 8009994:	33a5      	adds	r3, #165	; 0xa5
 8009996:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8009998:	a90a      	add	r1, sp, #40	; 0x28
 800999a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800999c:	2201      	movs	r2, #1
 800999e:	2005      	movs	r0, #5
 80099a0:	f001 ff26 	bl	800b7f0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80099a4:	2310      	movs	r3, #16
 80099a6:	4978      	ldr	r1, [pc, #480]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 80099a8:	4a7a      	ldr	r2, [pc, #488]	; (8009b94 <ProcessMacCommands.constprop.0+0x3f8>)
 80099aa:	5c88      	ldrb	r0, [r1, r2]
 80099ac:	4303      	orrs	r3, r0
 80099ae:	548b      	strb	r3, [r1, r2]
                break;
 80099b0:	e738      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80099b2:	23d2      	movs	r3, #210	; 0xd2
 80099b4:	4a74      	ldr	r2, [pc, #464]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80099ba:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <ProcessMacCommands.constprop.0+0x22c>
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d000      	beq.n	80099c8 <ProcessMacCommands.constprop.0+0x22c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80099c6:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80099c8:	ab06      	add	r3, sp, #24
 80099ca:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80099cc:	233f      	movs	r3, #63	; 0x3f
 80099ce:	9a06      	ldr	r2, [sp, #24]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80099d0:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80099d2:	4013      	ands	r3, r2
 80099d4:	aa06      	add	r2, sp, #24
 80099d6:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80099d8:	2202      	movs	r2, #2
 80099da:	a90a      	add	r1, sp, #40	; 0x28
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80099dc:	f001 ff08 	bl	800b7f0 <LoRaMacCommandsAddCmd>
                break;
 80099e0:	e720      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80099e2:	1cf2      	adds	r2, r6, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	5cb8      	ldrb	r0, [r7, r2]
 80099e8:	1d32      	adds	r2, r6, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	5cba      	ldrb	r2, [r7, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80099ee:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80099f0:	0412      	lsls	r2, r2, #16
 80099f2:	4302      	orrs	r2, r0
                newChannelReq.ChannelId = payload[macIndex++];
 80099f4:	1cb0      	adds	r0, r6, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80099f6:	b2c0      	uxtb	r0, r0
 80099f8:	5c38      	ldrb	r0, [r7, r0]
                status = 0x03;
 80099fa:	250d      	movs	r5, #13
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80099fc:	4310      	orrs	r0, r2
                chParam.Frequency *= 100;
 80099fe:	2264      	movs	r2, #100	; 0x64
 8009a00:	4342      	muls	r2, r0
                status = 0x03;
 8009a02:	ab06      	add	r3, sp, #24
 8009a04:	18ed      	adds	r5, r5, r3
 8009a06:	2303      	movs	r3, #3
                chParam.Frequency *= 100;
 8009a08:	9210      	str	r2, [sp, #64]	; 0x40
                chParam.Rx1Frequency = 0;
 8009a0a:	2200      	movs	r2, #0
                status = 0x03;
 8009a0c:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8009a0e:	5d3b      	ldrb	r3, [r7, r4]
                chParam.DrRange.Value = payload[macIndex++];
 8009a10:	1db4      	adds	r4, r6, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009a12:	3605      	adds	r6, #5
                chParam.DrRange.Value = payload[macIndex++];
 8009a14:	b2f6      	uxtb	r6, r6
                newChannelReq.ChannelId = payload[macIndex++];
 8009a16:	a90c      	add	r1, sp, #48	; 0x30
                chParam.Rx1Frequency = 0;
 8009a18:	9211      	str	r2, [sp, #68]	; 0x44
                chParam.DrRange.Value = payload[macIndex++];
 8009a1a:	5dba      	ldrb	r2, [r7, r6]
                newChannelReq.ChannelId = payload[macIndex++];
 8009a1c:	710b      	strb	r3, [r1, #4]
                newChannelReq.NewChannel = &chParam;
 8009a1e:	ab10      	add	r3, sp, #64	; 0x40
                chParam.DrRange.Value = payload[macIndex++];
 8009a20:	721a      	strb	r2, [r3, #8]
                newChannelReq.NewChannel = &chParam;
 8009a22:	930c      	str	r3, [sp, #48]	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009a24:	4a58      	ldr	r2, [pc, #352]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009a26:	4b5a      	ldr	r3, [pc, #360]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
                chParam.DrRange.Value = payload[macIndex++];
 8009a28:	b2e4      	uxtb	r4, r4
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009a2a:	58d3      	ldr	r3, [r2, r3]
 8009a2c:	7818      	ldrb	r0, [r3, #0]
 8009a2e:	f002 fcdc 	bl	800c3ea <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8009a32:	a90a      	add	r1, sp, #40	; 0x28
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009a34:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
 8009a36:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009a38:	2201      	movs	r2, #1
 8009a3a:	2007      	movs	r0, #7
 8009a3c:	e7ce      	b.n	80099dc <ProcessMacCommands.constprop.0+0x240>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009a3e:	230f      	movs	r3, #15
 8009a40:	5d39      	ldrb	r1, [r7, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009a42:	4a51      	ldr	r2, [pc, #324]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009a44:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009a46:	4b52      	ldr	r3, [pc, #328]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009a48:	3602      	adds	r6, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009a4a:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009a4c:	b2f6      	uxtb	r6, r6
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009a4e:	1c0b      	adds	r3, r1, #0
 8009a50:	2900      	cmp	r1, #0
 8009a52:	d100      	bne.n	8009a56 <ProcessMacCommands.constprop.0+0x2ba>
 8009a54:	2301      	movs	r3, #1
 8009a56:	20fa      	movs	r0, #250	; 0xfa
 8009a58:	0011      	movs	r1, r2
 8009a5a:	0080      	lsls	r0, r0, #2
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	4343      	muls	r3, r0
 8009a60:	3194      	adds	r1, #148	; 0x94
 8009a62:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009a64:	3298      	adds	r2, #152	; 0x98
 8009a66:	181b      	adds	r3, r3, r0
 8009a68:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009a6a:	a90a      	add	r1, sp, #40	; 0x28
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2008      	movs	r0, #8
 8009a70:	f001 febe 	bl	800b7f0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009a74:	2310      	movs	r3, #16
 8009a76:	4944      	ldr	r1, [pc, #272]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009a78:	4a46      	ldr	r2, [pc, #280]	; (8009b94 <ProcessMacCommands.constprop.0+0x3f8>)
 8009a7a:	5c88      	ldrb	r0, [r1, r2]
 8009a7c:	4303      	orrs	r3, r0
 8009a7e:	548b      	strb	r3, [r1, r2]
 8009a80:	e74f      	b.n	8009922 <ProcessMacCommands.constprop.0+0x186>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009a82:	3602      	adds	r6, #2
 8009a84:	b2f3      	uxtb	r3, r6
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	5d3b      	ldrb	r3, [r7, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 8009a8a:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009a8c:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8009a8e:	ac0b      	add	r4, sp, #44	; 0x2c
 8009a90:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009a92:	3220      	adds	r2, #32
 8009a94:	4011      	ands	r1, r2
 8009a96:	4213      	tst	r3, r2
 8009a98:	d146      	bne.n	8009b28 <ProcessMacCommands.constprop.0+0x38c>
                txParamSetupReq.DownlinkDwellTime = 0;
 8009a9a:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009a9c:	06da      	lsls	r2, r3, #27
 8009a9e:	d501      	bpl.n	8009aa4 <ProcessMacCommands.constprop.0+0x308>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009aa4:	220f      	movs	r2, #15
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8009aaa:	4e39      	ldr	r6, [pc, #228]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
 8009aac:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009aae:	0021      	movs	r1, r4
 8009ab0:	599b      	ldr	r3, [r3, r6]
 8009ab2:	7818      	ldrb	r0, [r3, #0]
 8009ab4:	9304      	str	r3, [sp, #16]
 8009ab6:	f002 fca2 	bl	800c3fe <RegionTxParamSetupReq>
 8009aba:	1c43      	adds	r3, r0, #1
 8009abc:	d032      	beq.n	8009b24 <ProcessMacCommands.constprop.0+0x388>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009abe:	4b32      	ldr	r3, [pc, #200]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
 8009ac0:	599d      	ldr	r5, [r3, r6]
 8009ac2:	7823      	ldrb	r3, [r4, #0]
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	002b      	movs	r3, r5
 8009ac8:	9a04      	ldr	r2, [sp, #16]
 8009aca:	33b8      	adds	r3, #184	; 0xb8
 8009acc:	701a      	strb	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009ace:	7862      	ldrb	r2, [r4, #1]
 8009ad0:	705a      	strb	r2, [r3, #1]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	9307      	str	r3, [sp, #28]
 8009ad6:	78a3      	ldrb	r3, [r4, #2]
 8009ad8:	4a2f      	ldr	r2, [pc, #188]	; (8009b98 <ProcessMacCommands.constprop.0+0x3fc>)
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009ada:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009adc:	5cd0      	ldrb	r0, [r2, r3]
 8009ade:	f7f6 ffd3 	bl	8000a88 <__aeabi_ui2f>
 8009ae2:	9b07      	ldr	r3, [sp, #28]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009ae4:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009ae6:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009ae8:	2302      	movs	r3, #2
 8009aea:	aa06      	add	r2, sp, #24
 8009aec:	1852      	adds	r2, r2, r1
 8009aee:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009af0:	222a      	movs	r2, #42	; 0x2a
 8009af2:	ab06      	add	r3, sp, #24
 8009af4:	189b      	adds	r3, r3, r2
 8009af6:	9a04      	ldr	r2, [sp, #16]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009af8:	a910      	add	r1, sp, #64	; 0x40
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009afa:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009afc:	7828      	ldrb	r0, [r5, #0]
 8009afe:	f002 fbfc 	bl	800c2fa <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009b02:	4b21      	ldr	r3, [pc, #132]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009b04:	900c      	str	r0, [sp, #48]	; 0x30
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009b06:	599b      	ldr	r3, [r3, r6]
 8009b08:	1c02      	adds	r2, r0, #0
 8009b0a:	3385      	adds	r3, #133	; 0x85
 8009b0c:	571c      	ldrsb	r4, [r3, r4]
 8009b0e:	b240      	sxtb	r0, r0
 8009b10:	7819      	ldrb	r1, [r3, #0]
 8009b12:	42a0      	cmp	r0, r4
 8009b14:	da00      	bge.n	8009b18 <ProcessMacCommands.constprop.0+0x37c>
 8009b16:	1c0a      	adds	r2, r1, #0
 8009b18:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009b1a:	2009      	movs	r0, #9
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	a90a      	add	r1, sp, #40	; 0x28
 8009b20:	f001 fe66 	bl	800b7f0 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009b24:	9c05      	ldr	r4, [sp, #20]
 8009b26:	e67d      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009b28:	2201      	movs	r2, #1
 8009b2a:	7062      	strb	r2, [r4, #1]
 8009b2c:	e7b6      	b.n	8009a9c <ProcessMacCommands.constprop.0+0x300>
                status = 0x03;
 8009b2e:	250d      	movs	r5, #13
 8009b30:	ab06      	add	r3, sp, #24
 8009b32:	18ed      	adds	r5, r5, r3
 8009b34:	2303      	movs	r3, #3
 8009b36:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8009b38:	5d3b      	ldrb	r3, [r7, r4]
 8009b3a:	a910      	add	r1, sp, #64	; 0x40
 8009b3c:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b3e:	1d32      	adds	r2, r6, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009b40:	1cf3      	adds	r3, r6, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b42:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b44:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b46:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b48:	5cba      	ldrb	r2, [r7, r2]
 8009b4a:	1d74      	adds	r4, r6, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8009b4c:	3602      	adds	r6, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b4e:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009b50:	b2f6      	uxtb	r6, r6
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b52:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b54:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009b56:	5dba      	ldrb	r2, [r7, r6]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009b58:	4e0b      	ldr	r6, [pc, #44]	; (8009b88 <ProcessMacCommands.constprop.0+0x3ec>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b5a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8009b5c:	2264      	movs	r2, #100	; 0x64
 8009b5e:	4353      	muls	r3, r2
 8009b60:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009b62:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <ProcessMacCommands.constprop.0+0x3f4>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b64:	b2e4      	uxtb	r4, r4
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009b66:	58f3      	ldr	r3, [r6, r3]
 8009b68:	7818      	ldrb	r0, [r3, #0]
 8009b6a:	f002 fc52 	bl	800c412 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8009b6e:	a90a      	add	r1, sp, #40	; 0x28
 8009b70:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009b72:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009b74:	7028      	strb	r0, [r5, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009b76:	200a      	movs	r0, #10
 8009b78:	f001 fe3a 	bl	800b7f0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	4a05      	ldr	r2, [pc, #20]	; (8009b94 <ProcessMacCommands.constprop.0+0x3f8>)
 8009b80:	5cb1      	ldrb	r1, [r6, r2]
 8009b82:	430b      	orrs	r3, r1
 8009b84:	54b3      	strb	r3, [r6, r2]
                break;
 8009b86:	e64d      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
 8009b88:	20000848 	.word	0x20000848
 8009b8c:	00000459 	.word	0x00000459
 8009b90:	00000484 	.word	0x00000484
 8009b94:	00000481 	.word	0x00000481
 8009b98:	0800fad7 	.word	0x0800fad7
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009b9c:	200a      	movs	r0, #10
 8009b9e:	f001 ffe9 	bl	800bb74 <LoRaMacConfirmQueueIsCmdActive>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d100      	bne.n	8009ba8 <ProcessMacCommands.constprop.0+0x40c>
 8009ba6:	e63d      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009ba8:	210a      	movs	r1, #10
 8009baa:	2000      	movs	r0, #0
 8009bac:	f001 ffa0 	bl	800baf0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8009bb0:	231e      	movs	r3, #30
 8009bb2:	aa06      	add	r2, sp, #24
 8009bb4:	189b      	adds	r3, r3, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009bba:	22fa      	movs	r2, #250	; 0xfa
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009bbc:	1cb3      	adds	r3, r6, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	5cfd      	ldrb	r5, [r7, r3]
 8009bc2:	1cf3      	adds	r3, r6, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009bc8:	022d      	lsls	r5, r5, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009bca:	0409      	lsls	r1, r1, #16
 8009bcc:	430d      	orrs	r5, r1
 8009bce:	1d33      	adds	r3, r6, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009bd0:	5d39      	ldrb	r1, [r7, r4]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009bd2:	1db4      	adds	r4, r6, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009bd4:	3605      	adds	r6, #5
 8009bd6:	b2db      	uxtb	r3, r3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009bd8:	b2f6      	uxtb	r6, r6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009bda:	430d      	orrs	r5, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009bdc:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009bde:	5dbb      	ldrb	r3, [r7, r6]
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 8009be4:	aa06      	add	r2, sp, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009be6:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009be8:	0609      	lsls	r1, r1, #24
                    sysTime = gpsEpochTime;
 8009bea:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8009bec:	a810      	add	r0, sp, #64	; 0x40
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009bee:	430d      	orrs	r5, r1
                    sysTimeCurrent = SysTimeGet( );
 8009bf0:	f004 fcb6 	bl	800e560 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009bf4:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <ProcessMacCommands.constprop.0+0x49c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009bf6:	4e11      	ldr	r6, [pc, #68]	; (8009c3c <ProcessMacCommands.constprop.0+0x4a0>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009bf8:	18e9      	adds	r1, r5, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009bfa:	23cf      	movs	r3, #207	; 0xcf
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	18f3      	adds	r3, r6, r3
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	23ce      	movs	r3, #206	; 0xce
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	58f3      	ldr	r3, [r6, r3]
 8009c0c:	a80e      	add	r0, sp, #56	; 0x38
 8009c0e:	910c      	str	r1, [sp, #48]	; 0x30
 8009c10:	f004 fc68 	bl	800e4e4 <SysTimeSub>
 8009c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c18:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	a80c      	add	r0, sp, #48	; 0x30
 8009c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c20:	f004 fc46 	bl	800e4b0 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009c24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c28:	f004 fc72 	bl	800e510 <SysTimeSet>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009c2c:	2387      	movs	r3, #135	; 0x87
 8009c2e:	2201      	movs	r2, #1
 8009c30:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009c32:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009c34:	54f2      	strb	r2, [r6, r3]
 8009c36:	e5f5      	b.n	8009824 <ProcessMacCommands.constprop.0+0x88>
 8009c38:	12d53d80 	.word	0x12d53d80
 8009c3c:	20000848 	.word	0x20000848

08009c40 <StopRetransmission.isra.0>:
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009c40:	4b10      	ldr	r3, [pc, #64]	; (8009c84 <StopRetransmission.isra.0+0x44>)
 8009c42:	4a11      	ldr	r2, [pc, #68]	; (8009c88 <StopRetransmission.isra.0+0x48>)
 8009c44:	5c9a      	ldrb	r2, [r3, r2]
 8009c46:	0792      	lsls	r2, r2, #30
 8009c48:	d503      	bpl.n	8009c52 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8009c4a:	4a10      	ldr	r2, [pc, #64]	; (8009c8c <StopRetransmission.isra.0+0x4c>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009c4c:	5c9a      	ldrb	r2, [r3, r2]
 8009c4e:	2a01      	cmp	r2, #1
 8009c50:	d90a      	bls.n	8009c68 <StopRetransmission.isra.0+0x28>
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8009c52:	4a0f      	ldr	r2, [pc, #60]	; (8009c90 <StopRetransmission.isra.0+0x50>)
 8009c54:	589a      	ldr	r2, [r3, r2]
 8009c56:	0011      	movs	r1, r2
 8009c58:	317e      	adds	r1, #126	; 0x7e
 8009c5a:	7809      	ldrb	r1, [r1, #0]
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	d003      	beq.n	8009c68 <StopRetransmission.isra.0+0x28>
            MacCtx.NvmCtx->AdrAckCounter++;
 8009c60:	3204      	adds	r2, #4
 8009c62:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8009c64:	3101      	adds	r1, #1
 8009c66:	67d1      	str	r1, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8009c68:	2182      	movs	r1, #130	; 0x82
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	00c9      	lsls	r1, r1, #3
 8009c6e:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8009c70:	4908      	ldr	r1, [pc, #32]	; (8009c94 <StopRetransmission.isra.0+0x54>)
 8009c72:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8009c74:	4908      	ldr	r1, [pc, #32]	; (8009c98 <StopRetransmission.isra.0+0x58>)
 8009c76:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009c78:	39d3      	subs	r1, #211	; 0xd3
 8009c7a:	5858      	ldr	r0, [r3, r1]
 8009c7c:	3202      	adds	r2, #2
 8009c7e:	4390      	bics	r0, r2
 8009c80:	5058      	str	r0, [r3, r1]
}
 8009c82:	4770      	bx	lr
 8009c84:	20000848 	.word	0x20000848
 8009c88:	00000481 	.word	0x00000481
 8009c8c:	0000042d 	.word	0x0000042d
 8009c90:	00000484 	.word	0x00000484
 8009c94:	00000414 	.word	0x00000414
 8009c98:	00000413 	.word	0x00000413

08009c9c <OnTxDelayedTimerEvent>:
{
 8009c9c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009c9e:	4811      	ldr	r0, [pc, #68]	; (8009ce4 <OnTxDelayedTimerEvent+0x48>)
 8009ca0:	f004 fef0 	bl	800ea84 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009ca4:	22d0      	movs	r2, #208	; 0xd0
 8009ca6:	2320      	movs	r3, #32
 8009ca8:	4c0f      	ldr	r4, [pc, #60]	; (8009ce8 <OnTxDelayedTimerEvent+0x4c>)
 8009caa:	0092      	lsls	r2, r2, #2
 8009cac:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009cae:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009cb0:	4399      	bics	r1, r3
 8009cb2:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009cb4:	f7ff fb4a 	bl	800934c <ScheduleTx>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d012      	beq.n	8009ce2 <OnTxDelayedTimerEvent+0x46>
 8009cbc:	280b      	cmp	r0, #11
 8009cbe:	d010      	beq.n	8009ce2 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009cc0:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009cc2:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <OnTxDelayedTimerEvent+0x50>)
 8009cc4:	58e3      	ldr	r3, [r4, r3]
 8009cc6:	3385      	adds	r3, #133	; 0x85
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <OnTxDelayedTimerEvent+0x54>)
 8009ccc:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <OnTxDelayedTimerEvent+0x58>)
 8009cd0:	5ce2      	ldrb	r2, [r4, r3]
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <OnTxDelayedTimerEvent+0x5c>)
 8009cd4:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <OnTxDelayedTimerEvent+0x60>)
 8009cd8:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009cda:	f001 ff2f 	bl	800bb3c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009cde:	f7ff ffaf 	bl	8009c40 <StopRetransmission.isra.0>
}
 8009ce2:	bd10      	pop	{r4, pc}
 8009ce4:	20000bb0 	.word	0x20000bb0
 8009ce8:	20000848 	.word	0x20000848
 8009cec:	00000484 	.word	0x00000484
 8009cf0:	0000043e 	.word	0x0000043e
 8009cf4:	00000412 	.word	0x00000412
 8009cf8:	00000441 	.word	0x00000441
 8009cfc:	0000043d 	.word	0x0000043d

08009d00 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009d00:	22d0      	movs	r2, #208	; 0xd0
 8009d02:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <LoRaMacIsBusy+0x1c>)
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 8009d08:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009d0a:	2a00      	cmp	r2, #0
 8009d0c:	d105      	bne.n	8009d1a <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009d0e:	4a04      	ldr	r2, [pc, #16]	; (8009d20 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009d10:	5c98      	ldrb	r0, [r3, r2]
 8009d12:	3801      	subs	r0, #1
 8009d14:	1e43      	subs	r3, r0, #1
 8009d16:	4198      	sbcs	r0, r3
 8009d18:	b2c0      	uxtb	r0, r0
}
 8009d1a:	4770      	bx	lr
 8009d1c:	20000848 	.word	0x20000848
 8009d20:	00000482 	.word	0x00000482

08009d24 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8009d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d26:	b09d      	sub	sp, #116	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009d2c:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8009d2e:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 8009d30:	4add      	ldr	r2, [pc, #884]	; (800a0a8 <LoRaMacProcess+0x384>)
 8009d32:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8009d34:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d36:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009d3a:	4fdc      	ldr	r7, [pc, #880]	; (800a0ac <LoRaMacProcess+0x388>)
 8009d3c:	4283      	cmp	r3, r0
 8009d3e:	d100      	bne.n	8009d42 <LoRaMacProcess+0x1e>
 8009d40:	e11b      	b.n	8009f7a <LoRaMacProcess+0x256>
        if( events.Events.TxDone == 1 )
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	9204      	str	r2, [sp, #16]
 8009d46:	06db      	lsls	r3, r3, #27
 8009d48:	d571      	bpl.n	8009e2e <LoRaMacProcess+0x10a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009d4a:	4cd9      	ldr	r4, [pc, #868]	; (800a0b0 <LoRaMacProcess+0x38c>)
 8009d4c:	4ed9      	ldr	r6, [pc, #868]	; (800a0b4 <LoRaMacProcess+0x390>)
 8009d4e:	59a3      	ldr	r3, [r4, r6]
 8009d50:	337c      	adds	r3, #124	; 0x7c
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d003      	beq.n	8009d60 <LoRaMacProcess+0x3c>
        Radio.Sleep( );
 8009d58:	4bd7      	ldr	r3, [pc, #860]	; (800a0b8 <LoRaMacProcess+0x394>)
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009d60:	23ec      	movs	r3, #236	; 0xec
 8009d62:	4dd6      	ldr	r5, [pc, #856]	; (800a0bc <LoRaMacProcess+0x398>)
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	58e1      	ldr	r1, [r4, r3]
 8009d68:	0028      	movs	r0, r5
 8009d6a:	f004 ff3b 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009d6e:	0028      	movs	r0, r5
 8009d70:	f004 fedc 	bl	800eb2c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009d74:	23ed      	movs	r3, #237	; 0xed
 8009d76:	4dd2      	ldr	r5, [pc, #840]	; (800a0c0 <LoRaMacProcess+0x39c>)
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	58e1      	ldr	r1, [r4, r3]
 8009d7c:	0028      	movs	r0, r5
 8009d7e:	f004 ff31 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009d82:	0028      	movs	r0, r5
 8009d84:	f004 fed2 	bl	800eb2c <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009d88:	59a3      	ldr	r3, [r4, r6]
 8009d8a:	001a      	movs	r2, r3
 8009d8c:	327c      	adds	r2, #124	; 0x7c
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	2a02      	cmp	r2, #2
 8009d92:	d003      	beq.n	8009d9c <LoRaMacProcess+0x78>
 8009d94:	4acb      	ldr	r2, [pc, #812]	; (800a0c4 <LoRaMacProcess+0x3a0>)
 8009d96:	5ca2      	ldrb	r2, [r4, r2]
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	d011      	beq.n	8009dc0 <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009d9c:	2216      	movs	r2, #22
 8009d9e:	a90c      	add	r1, sp, #48	; 0x30
 8009da0:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009da2:	7818      	ldrb	r0, [r3, #0]
 8009da4:	f002 faa9 	bl	800c2fa <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009da8:	23ed      	movs	r3, #237	; 0xed
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4dc6      	ldr	r5, [pc, #792]	; (800a0c8 <LoRaMacProcess+0x3a4>)
 8009dae:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009db0:	900b      	str	r0, [sp, #44]	; 0x2c
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009db2:	1809      	adds	r1, r1, r0
 8009db4:	0028      	movs	r0, r5
 8009db6:	f004 ff15 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009dba:	0028      	movs	r0, r5
 8009dbc:	f004 feb6 	bl	800eb2c <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009dc0:	4bc2      	ldr	r3, [pc, #776]	; (800a0cc <LoRaMacProcess+0x3a8>)
    txDone.Channel = MacCtx.Channel;
 8009dc2:	ad10      	add	r5, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	59a3      	ldr	r3, [r4, r6]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009dc8:	a80e      	add	r0, sp, #56	; 0x38
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009dca:	33fc      	adds	r3, #252	; 0xfc
 8009dcc:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 8009dce:	4bc0      	ldr	r3, [pc, #768]	; (800a0d0 <LoRaMacProcess+0x3ac>)
 8009dd0:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009dd2:	606a      	str	r2, [r5, #4]
    txDone.Channel = MacCtx.Channel;
 8009dd4:	702b      	strb	r3, [r5, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009dd6:	f004 fbef 	bl	800e5b8 <SysTimeGetMcuTime>
 8009dda:	59a3      	ldr	r3, [r4, r6]
 8009ddc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009dde:	001a      	movs	r2, r3
 8009de0:	325d      	adds	r2, #93	; 0x5d
 8009de2:	32ff      	adds	r2, #255	; 0xff
 8009de4:	6812      	ldr	r2, [r2, #0]
 8009de6:	a808      	add	r0, sp, #32
 8009de8:	9200      	str	r2, [sp, #0]
 8009dea:	22ac      	movs	r2, #172	; 0xac
 8009dec:	0052      	lsls	r2, r2, #1
 8009dee:	589b      	ldr	r3, [r3, r2]
 8009df0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009df2:	f004 fb77 	bl	800e4e4 <SysTimeSub>
 8009df6:	ab13      	add	r3, sp, #76	; 0x4c
 8009df8:	aa08      	add	r2, sp, #32
 8009dfa:	ca03      	ldmia	r2!, {r0, r1}
 8009dfc:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009dfe:	2383      	movs	r3, #131	; 0x83
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e04:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009e06:	60ab      	str	r3, [r5, #8]
    txDone.Joined  = true;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	706b      	strb	r3, [r5, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e0c:	59a3      	ldr	r3, [r4, r6]
 8009e0e:	0052      	lsls	r2, r2, #1
 8009e10:	5c9a      	ldrb	r2, [r3, r2]
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	d100      	bne.n	8009e18 <LoRaMacProcess+0xf4>
        txDone.Joined  = false;
 8009e16:	706a      	strb	r2, [r5, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009e18:	7818      	ldrb	r0, [r3, #0]
 8009e1a:	0029      	movs	r1, r5
 8009e1c:	f002 fa79 	bl	800c312 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8009e20:	4ba3      	ldr	r3, [pc, #652]	; (800a0b0 <LoRaMacProcess+0x38c>)
 8009e22:	4aa8      	ldr	r2, [pc, #672]	; (800a0c4 <LoRaMacProcess+0x3a0>)
 8009e24:	5c9a      	ldrb	r2, [r3, r2]
 8009e26:	2a00      	cmp	r2, #0
 8009e28:	d101      	bne.n	8009e2e <LoRaMacProcess+0x10a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009e2a:	49aa      	ldr	r1, [pc, #680]	; (800a0d4 <LoRaMacProcess+0x3b0>)
 8009e2c:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	071b      	lsls	r3, r3, #28
 8009e32:	d574      	bpl.n	8009f1e <LoRaMacProcess+0x1fa>
    uint32_t downLinkCounter = 0;
 8009e34:	2500      	movs	r5, #0
    uint8_t *payload = RxDoneParams.Payload;
 8009e36:	4ba8      	ldr	r3, [pc, #672]	; (800a0d8 <LoRaMacProcess+0x3b4>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009e38:	4c9d      	ldr	r4, [pc, #628]	; (800a0b0 <LoRaMacProcess+0x38c>)
    uint8_t *payload = RxDoneParams.Payload;
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009e3e:	210a      	movs	r1, #10
 8009e40:	5e5a      	ldrsh	r2, [r3, r1]
    uint16_t size = RxDoneParams.Size;
 8009e42:	891e      	ldrh	r6, [r3, #8]
    int8_t snr = RxDoneParams.Snr;
 8009e44:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t downLinkCounter = 0;
 8009e46:	950b      	str	r5, [sp, #44]	; 0x2c
    int8_t snr = RxDoneParams.Snr;
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	9305      	str	r3, [sp, #20]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009e4c:	4b99      	ldr	r3, [pc, #612]	; (800a0b4 <LoRaMacProcess+0x390>)
 8009e4e:	58e3      	ldr	r3, [r4, r3]
 8009e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e52:	9306      	str	r3, [sp, #24]
    MacCtx.McpsConfirm.AckReceived = false;
 8009e54:	2388      	movs	r3, #136	; 0x88
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 8009e5a:	4ba0      	ldr	r3, [pc, #640]	; (800a0dc <LoRaMacProcess+0x3b8>)
 8009e5c:	52e2      	strh	r2, [r4, r3]
    MacCtx.McpsIndication.Snr = snr;
 8009e5e:	9a05      	ldr	r2, [sp, #20]
 8009e60:	4b9f      	ldr	r3, [pc, #636]	; (800a0e0 <LoRaMacProcess+0x3bc>)
 8009e62:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009e64:	3354      	adds	r3, #84	; 0x54
 8009e66:	5ce3      	ldrb	r3, [r4, r3]
 8009e68:	4a9e      	ldr	r2, [pc, #632]	; (800a0e4 <LoRaMacProcess+0x3c0>)
 8009e6a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009e6c:	4b9e      	ldr	r3, [pc, #632]	; (800a0e8 <LoRaMacProcess+0x3c4>)
 8009e6e:	52e5      	strh	r5, [r4, r3]
    MacCtx.McpsIndication.FramePending = 0;
 8009e70:	4b9e      	ldr	r3, [pc, #632]	; (800a0ec <LoRaMacProcess+0x3c8>)
 8009e72:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.Buffer = NULL;
 8009e74:	4b9e      	ldr	r3, [pc, #632]	; (800a0f0 <LoRaMacProcess+0x3cc>)
 8009e76:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 8009e78:	3304      	adds	r3, #4
 8009e7a:	52e5      	strh	r5, [r4, r3]
    MacCtx.McpsIndication.AckReceived = false;
 8009e7c:	4b9d      	ldr	r3, [pc, #628]	; (800a0f4 <LoRaMacProcess+0x3d0>)
 8009e7e:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009e80:	3302      	adds	r3, #2
 8009e82:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009e84:	4b9c      	ldr	r3, [pc, #624]	; (800a0f8 <LoRaMacProcess+0x3d4>)
 8009e86:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 8009e88:	4b9c      	ldr	r3, [pc, #624]	; (800a0fc <LoRaMacProcess+0x3d8>)
 8009e8a:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	54e5      	strb	r5, [r4, r3]
    Radio.Sleep( );
 8009e90:	4b89      	ldr	r3, [pc, #548]	; (800a0b8 <LoRaMacProcess+0x394>)
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009e98:	4889      	ldr	r0, [pc, #548]	; (800a0c0 <LoRaMacProcess+0x39c>)
 8009e9a:	f004 fdf3 	bl	800ea84 <UTIL_TIMER_Stop>
    macHdr.Value = payload[pktHeaderLen++];
 8009e9e:	9b02      	ldr	r3, [sp, #8]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 8009ea6:	095b      	lsrs	r3, r3, #5
 8009ea8:	2b05      	cmp	r3, #5
 8009eaa:	d100      	bne.n	8009eae <LoRaMacProcess+0x18a>
 8009eac:	e141      	b.n	800a132 <LoRaMacProcess+0x40e>
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	d100      	bne.n	8009eb4 <LoRaMacProcess+0x190>
 8009eb2:	e2cd      	b.n	800a450 <LoRaMacProcess+0x72c>
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d000      	beq.n	8009eba <LoRaMacProcess+0x196>
 8009eb8:	e31a      	b.n	800a4f0 <LoRaMacProcess+0x7cc>
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009eba:	4b7e      	ldr	r3, [pc, #504]	; (800a0b4 <LoRaMacProcess+0x390>)
 8009ebc:	a90c      	add	r1, sp, #48	; 0x30
 8009ebe:	58e3      	ldr	r3, [r4, r3]
 8009ec0:	001a      	movs	r2, r3
 8009ec2:	32b9      	adds	r2, #185	; 0xb9
 8009ec4:	7812      	ldrb	r2, [r2, #0]
 8009ec6:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009ec8:	2284      	movs	r2, #132	; 0x84
 8009eca:	00d2      	lsls	r2, r2, #3
 8009ecc:	5ca2      	ldrb	r2, [r4, r2]
 8009ece:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009ed0:	220d      	movs	r2, #13
 8009ed2:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009ed4:	001a      	movs	r2, r3
 8009ed6:	32ca      	adds	r2, #202	; 0xca
 8009ed8:	7812      	ldrb	r2, [r2, #0]
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	d001      	beq.n	8009ee2 <LoRaMacProcess+0x1be>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009ede:	220e      	movs	r2, #14
 8009ee0:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009ee2:	7818      	ldrb	r0, [r3, #0]
 8009ee4:	f002 fa09 	bl	800c2fa <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009ee8:	0032      	movs	r2, r6
 8009eea:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009eec:	900a      	str	r0, [sp, #40]	; 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009eee:	1c13      	adds	r3, r2, #0
 8009ef0:	0412      	lsls	r2, r2, #16
 8009ef2:	d500      	bpl.n	8009ef6 <LoRaMacProcess+0x1d2>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef8:	b21b      	sxth	r3, r3
 8009efa:	b212      	sxth	r2, r2
 8009efc:	4c6c      	ldr	r4, [pc, #432]	; (800a0b0 <LoRaMacProcess+0x38c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	dc02      	bgt.n	8009f08 <LoRaMacProcess+0x1e4>
 8009f02:	2e0b      	cmp	r6, #11
 8009f04:	d900      	bls.n	8009f08 <LoRaMacProcess+0x1e4>
 8009f06:	e117      	b.n	800a138 <LoRaMacProcess+0x414>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4a7d      	ldr	r2, [pc, #500]	; (800a100 <LoRaMacProcess+0x3dc>)
 8009f0c:	54a3      	strb	r3, [r4, r2]
                PrepareRxDoneAbort( );
 8009f0e:	f7ff f803 	bl	8008f18 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Region size payload error\r\n");
 8009f12:	4b7c      	ldr	r3, [pc, #496]	; (800a104 <LoRaMacProcess+0x3e0>)
                APP_LOG(TS_OFF, VLEVEL_M, "Multicast error\r\n");
 8009f14:	2200      	movs	r2, #0
 8009f16:	2002      	movs	r0, #2
 8009f18:	0011      	movs	r1, r2
 8009f1a:	f004 ff81 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
        if( events.Events.TxTimeout == 1 )
 8009f1e:	9b04      	ldr	r3, [sp, #16]
 8009f20:	075b      	lsls	r3, r3, #29
 8009f22:	d51c      	bpl.n	8009f5e <LoRaMacProcess+0x23a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009f24:	4c62      	ldr	r4, [pc, #392]	; (800a0b0 <LoRaMacProcess+0x38c>)
 8009f26:	4b63      	ldr	r3, [pc, #396]	; (800a0b4 <LoRaMacProcess+0x390>)
 8009f28:	58e3      	ldr	r3, [r4, r3]
 8009f2a:	337c      	adds	r3, #124	; 0x7c
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d003      	beq.n	8009f3a <LoRaMacProcess+0x216>
        Radio.Sleep( );
 8009f32:	4b61      	ldr	r3, [pc, #388]	; (800a0b8 <LoRaMacProcess+0x394>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	9302      	str	r3, [sp, #8]
 8009f38:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009f3a:	f7fe ff65 	bl	8008e08 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009f3e:	2002      	movs	r0, #2
 8009f40:	4b64      	ldr	r3, [pc, #400]	; (800a0d4 <LoRaMacProcess+0x3b0>)
 8009f42:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009f44:	f001 fdfa 	bl	800bb3c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009f48:	4b5e      	ldr	r3, [pc, #376]	; (800a0c4 <LoRaMacProcess+0x3a0>)
 8009f4a:	5ce3      	ldrb	r3, [r4, r3]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <LoRaMacProcess+0x232>
        MacCtx.AckTimeoutRetry = true;
 8009f50:	2201      	movs	r2, #1
 8009f52:	4b6d      	ldr	r3, [pc, #436]	; (800a108 <LoRaMacProcess+0x3e4>)
 8009f54:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009f56:	2320      	movs	r3, #32
 8009f58:	5de2      	ldrb	r2, [r4, r7]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	55e3      	strb	r3, [r4, r7]
        if( events.Events.RxError == 1 )
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	079b      	lsls	r3, r3, #30
 8009f62:	d503      	bpl.n	8009f6c <LoRaMacProcess+0x248>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009f64:	2106      	movs	r1, #6
 8009f66:	2005      	movs	r0, #5
 8009f68:	f7ff f830 	bl	8008fcc <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8009f6c:	9b04      	ldr	r3, [sp, #16]
 8009f6e:	07db      	lsls	r3, r3, #31
 8009f70:	d503      	bpl.n	8009f7a <LoRaMacProcess+0x256>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009f72:	2104      	movs	r1, #4
 8009f74:	2003      	movs	r0, #3
 8009f76:	f7ff f829 	bl	8008fcc <HandleRadioRxErrorTimeout>

    LoRaMacHandleIrqEvents( );
//    LoRaMacClassBProcess( );

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009f7a:	4c4d      	ldr	r4, [pc, #308]	; (800a0b0 <LoRaMacProcess+0x38c>)
 8009f7c:	5de2      	ldrb	r2, [r4, r7]
 8009f7e:	0693      	lsls	r3, r2, #26
 8009f80:	d569      	bpl.n	800a056 <LoRaMacProcess+0x332>
    MacCtx.AllowRequests = requestState;
 8009f82:	2300      	movs	r3, #0
 8009f84:	4961      	ldr	r1, [pc, #388]	; (800a10c <LoRaMacProcess+0x3e8>)
 8009f86:	5463      	strb	r3, [r4, r1]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009f88:	3943      	subs	r1, #67	; 0x43
 8009f8a:	39ff      	subs	r1, #255	; 0xff
 8009f8c:	5863      	ldr	r3, [r4, r1]
 8009f8e:	0618      	lsls	r0, r3, #24
 8009f90:	d502      	bpl.n	8009f98 <LoRaMacProcess+0x274>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009f92:	2082      	movs	r0, #130	; 0x82
 8009f94:	4383      	bics	r3, r0
 8009f96:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009f98:	2305      	movs	r3, #5
 8009f9a:	421a      	tst	r2, r3
 8009f9c:	d100      	bne.n	8009fa0 <LoRaMacProcess+0x27c>
 8009f9e:	e2b4      	b.n	800a50a <LoRaMacProcess+0x7e6>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009fa0:	200c      	movs	r0, #12
 8009fa2:	f001 fde7 	bl	800bb74 <LoRaMacConfirmQueueIsCmdActive>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d100      	bne.n	8009fac <LoRaMacProcess+0x288>
 8009faa:	e2ae      	b.n	800a50a <LoRaMacProcess+0x7e6>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009fac:	5de3      	ldrb	r3, [r4, r7]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009fae:	07da      	lsls	r2, r3, #31
 8009fb0:	d500      	bpl.n	8009fb4 <LoRaMacProcess+0x290>
 8009fb2:	e2aa      	b.n	800a50a <LoRaMacProcess+0x7e6>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009fb4:	075b      	lsls	r3, r3, #29
 8009fb6:	d400      	bmi.n	8009fba <LoRaMacProcess+0x296>
 8009fb8:	e2bd      	b.n	800a536 <LoRaMacProcess+0x812>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009fba:	22d0      	movs	r2, #208	; 0xd0
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	0092      	lsls	r2, r2, #2
 8009fc0:	58a1      	ldr	r1, [r4, r2]
 8009fc2:	4399      	bics	r1, r3
 8009fc4:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009fc6:	23d0      	movs	r3, #208	; 0xd0
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	58e3      	ldr	r3, [r4, r3]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d13f      	bne.n	800a050 <LoRaMacProcess+0x32c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009fd0:	5de6      	ldrb	r6, [r4, r7]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	0031      	movs	r1, r6
 8009fd6:	4019      	ands	r1, r3
 8009fd8:	421e      	tst	r6, r3
 8009fda:	d002      	beq.n	8009fe2 <LoRaMacProcess+0x2be>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009fdc:	0032      	movs	r2, r6
 8009fde:	439a      	bics	r2, r3
 8009fe0:	55e2      	strb	r2, [r4, r7]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	5de3      	ldrb	r3, [r4, r7]
 8009fe6:	4213      	tst	r3, r2
 8009fe8:	d001      	beq.n	8009fee <LoRaMacProcess+0x2ca>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009fea:	4393      	bics	r3, r2
 8009fec:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4a46      	ldr	r2, [pc, #280]	; (800a10c <LoRaMacProcess+0x3e8>)
 8009ff2:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d005      	beq.n	800a004 <LoRaMacProcess+0x2e0>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009ff8:	23d1      	movs	r3, #209	; 0xd1
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	58e3      	ldr	r3, [r4, r3]
 8009ffe:	4844      	ldr	r0, [pc, #272]	; (800a110 <LoRaMacProcess+0x3ec>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a004:	2504      	movs	r5, #4
 800a006:	422e      	tst	r6, r5
 800a008:	d009      	beq.n	800a01e <LoRaMacProcess+0x2fa>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a00a:	4842      	ldr	r0, [pc, #264]	; (800a114 <LoRaMacProcess+0x3f0>)
 800a00c:	f001 fdbe 	bl	800bb8c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a010:	f001 fde8 	bl	800bbe4 <LoRaMacConfirmQueueGetCnt>
 800a014:	2800      	cmp	r0, #0
 800a016:	d002      	beq.n	800a01e <LoRaMacProcess+0x2fa>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a018:	5de3      	ldrb	r3, [r4, r7]
 800a01a:	431d      	orrs	r5, r3
 800a01c:	55e5      	strb	r5, [r4, r7]
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a01e:	2220      	movs	r2, #32
 800a020:	5de3      	ldrb	r3, [r4, r7]
 800a022:	4393      	bics	r3, r2
 800a024:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a026:	23d0      	movs	r3, #208	; 0xd0
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	58e3      	ldr	r3, [r4, r3]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10f      	bne.n	800a050 <LoRaMacProcess+0x32c>
        bool isStickyMacCommandPending = false;
 800a030:	2528      	movs	r5, #40	; 0x28
 800a032:	aa06      	add	r2, sp, #24
 800a034:	1952      	adds	r2, r2, r5
 800a036:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a038:	a810      	add	r0, sp, #64	; 0x40
 800a03a:	f001 fcbd 	bl	800b9b8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a03e:	ab06      	add	r3, sp, #24
 800a040:	195b      	adds	r3, r3, r5
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <LoRaMacProcess+0x32c>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a048:	2310      	movs	r3, #16
 800a04a:	5de2      	ldrb	r2, [r4, r7]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a050:	2301      	movs	r3, #1
 800a052:	4a2e      	ldr	r2, [pc, #184]	; (800a10c <LoRaMacProcess+0x3e8>)
 800a054:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a056:	2208      	movs	r2, #8
 800a058:	5de3      	ldrb	r3, [r4, r7]
 800a05a:	4213      	tst	r3, r2
 800a05c:	d007      	beq.n	800a06e <LoRaMacProcess+0x34a>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a05e:	4393      	bics	r3, r2
 800a060:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a062:	23d1      	movs	r3, #209	; 0xd1
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	58e3      	ldr	r3, [r4, r3]
 800a068:	482b      	ldr	r0, [pc, #172]	; (800a118 <LoRaMacProcess+0x3f4>)
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a06e:	2510      	movs	r5, #16
 800a070:	5de3      	ldrb	r3, [r4, r7]
 800a072:	422b      	tst	r3, r5
 800a074:	d00a      	beq.n	800a08c <LoRaMacProcess+0x368>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a076:	2307      	movs	r3, #7
 800a078:	a810      	add	r0, sp, #64	; 0x40
 800a07a:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800a07c:	23d1      	movs	r3, #209	; 0xd1
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	58e3      	ldr	r3, [r4, r3]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800a086:	5de3      	ldrb	r3, [r4, r7]
 800a088:	43ab      	bics	r3, r5
 800a08a:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a08c:	2202      	movs	r2, #2
 800a08e:	5de3      	ldrb	r3, [r4, r7]
 800a090:	4213      	tst	r3, r2
 800a092:	d045      	beq.n	800a120 <LoRaMacProcess+0x3fc>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a094:	4393      	bics	r3, r2
 800a096:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800a098:	23d1      	movs	r3, #209	; 0xd1
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	58e3      	ldr	r3, [r4, r3]
 800a09e:	481f      	ldr	r0, [pc, #124]	; (800a11c <LoRaMacProcess+0x3f8>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4798      	blx	r3
 800a0a4:	e03c      	b.n	800a120 <LoRaMacProcess+0x3fc>
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	20000844 	.word	0x20000844
 800a0ac:	00000481 	.word	0x00000481
 800a0b0:	20000848 	.word	0x20000848
 800a0b4:	00000484 	.word	0x00000484
 800a0b8:	0800fc84 	.word	0x0800fc84
 800a0bc:	20000bc8 	.word	0x20000bc8
 800a0c0:	20000be0 	.word	0x20000be0
 800a0c4:	00000414 	.word	0x00000414
 800a0c8:	20000c40 	.word	0x20000c40
 800a0cc:	20000e50 	.word	0x20000e50
 800a0d0:	00000415 	.word	0x00000415
 800a0d4:	0000043d 	.word	0x0000043d
 800a0d8:	20000e40 	.word	0x20000e40
 800a0dc:	0000042a 	.word	0x0000042a
 800a0e0:	0000042c 	.word	0x0000042c
 800a0e4:	0000042d 	.word	0x0000042d
 800a0e8:	0000041e 	.word	0x0000041e
 800a0ec:	00000421 	.word	0x00000421
 800a0f0:	00000424 	.word	0x00000424
 800a0f4:	0000042e 	.word	0x0000042e
 800a0f8:	0000041c 	.word	0x0000041c
 800a0fc:	00000434 	.word	0x00000434
 800a100:	0000041d 	.word	0x0000041d
 800a104:	0800f9cb 	.word	0x0800f9cb
 800a108:	00000413 	.word	0x00000413
 800a10c:	00000482 	.word	0x00000482
 800a110:	20000c84 	.word	0x20000c84
 800a114:	20000c98 	.word	0x20000c98
 800a118:	20000cac 	.word	0x20000cac
 800a11c:	20000c64 	.word	0x20000c64
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a120:	2390      	movs	r3, #144	; 0x90
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	5ce3      	ldrb	r3, [r4, r3]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d101      	bne.n	800a12e <LoRaMacProcess+0x40a>
    {
        OpenContinuousRxCWindow( );
 800a12a:	f7ff f80d 	bl	8009148 <OpenContinuousRxCWindow>
    }
}
 800a12e:	b01d      	add	sp, #116	; 0x74
 800a130:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a132:	4bd4      	ldr	r3, [pc, #848]	; (800a484 <LoRaMacProcess+0x760>)
 800a134:	54e2      	strb	r2, [r4, r3]
 800a136:	e6c0      	b.n	8009eba <LoRaMacProcess+0x196>
            macMsgData.BufSize = size;
 800a138:	222c      	movs	r2, #44	; 0x2c
            macMsgData.Buffer = payload;
 800a13a:	9b02      	ldr	r3, [sp, #8]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a13c:	a810      	add	r0, sp, #64	; 0x40
            macMsgData.Buffer = payload;
 800a13e:	9310      	str	r3, [sp, #64]	; 0x40
            macMsgData.BufSize = size;
 800a140:	ab06      	add	r3, sp, #24
 800a142:	189b      	adds	r3, r3, r2
 800a144:	701e      	strb	r6, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a146:	4bd0      	ldr	r3, [pc, #832]	; (800a488 <LoRaMacProcess+0x764>)
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a148:	32d3      	adds	r2, #211	; 0xd3
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a14a:	9319      	str	r3, [sp, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a14c:	ab1a      	add	r3, sp, #104	; 0x68
 800a14e:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a150:	f001 ffcf 	bl	800c0f2 <LoRaMacParserData>
 800a154:	9002      	str	r0, [sp, #8]
 800a156:	2800      	cmp	r0, #0
 800a158:	d006      	beq.n	800a168 <LoRaMacProcess+0x444>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	4acb      	ldr	r2, [pc, #812]	; (800a48c <LoRaMacProcess+0x768>)
 800a15e:	54a3      	strb	r3, [r4, r2]
                PrepareRxDoneAbort( );
 800a160:	f7fe feda 	bl	8008f18 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC Parser error\r\n");
 800a164:	4bca      	ldr	r3, [pc, #808]	; (800a490 <LoRaMacProcess+0x76c>)
 800a166:	e6d5      	b.n	8009f14 <LoRaMacProcess+0x1f0>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a168:	2234      	movs	r2, #52	; 0x34
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a16a:	4bca      	ldr	r3, [pc, #808]	; (800a494 <LoRaMacProcess+0x770>)
 800a16c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a16e:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a170:	ab06      	add	r3, sp, #24
 800a172:	189b      	adds	r3, r3, r2
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	230f      	movs	r3, #15
 800a178:	0010      	movs	r0, r2
 800a17a:	4018      	ands	r0, r3
 800a17c:	421a      	tst	r2, r3
 800a17e:	d005      	beq.n	800a18c <LoRaMacProcess+0x468>
 800a180:	331a      	adds	r3, #26
 800a182:	ad06      	add	r5, sp, #24
 800a184:	195b      	adds	r3, r3, r5
 800a186:	7fdb      	ldrb	r3, [r3, #31]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d141      	bne.n	800a210 <LoRaMacProcess+0x4ec>
    else if( macMsg->FRMPayloadSize == 0 )
 800a18c:	ab1a      	add	r3, sp, #104	; 0x68
 800a18e:	781d      	ldrb	r5, [r3, #0]
 800a190:	2601      	movs	r6, #1
 800a192:	2d00      	cmp	r5, #0
 800a194:	d008      	beq.n	800a1a8 <LoRaMacProcess+0x484>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800a196:	2800      	cmp	r0, #0
 800a198:	d134      	bne.n	800a204 <LoRaMacProcess+0x4e0>
 800a19a:	2329      	movs	r3, #41	; 0x29
 800a19c:	a806      	add	r0, sp, #24
 800a19e:	181b      	adds	r3, r3, r0
 800a1a0:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 800a1a2:	1e58      	subs	r0, r3, #1
 800a1a4:	4183      	sbcs	r3, r0
 800a1a6:	1c9e      	adds	r6, r3, #2
            downLinkCounter = 0;
 800a1a8:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a1aa:	4cbb      	ldr	r4, [pc, #748]	; (800a498 <LoRaMacProcess+0x774>)
            downLinkCounter = 0;
 800a1ac:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a1ae:	4bbb      	ldr	r3, [pc, #748]	; (800a49c <LoRaMacProcess+0x778>)
 800a1b0:	58e3      	ldr	r3, [r4, r3]
 800a1b2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a1b4:	4684      	mov	ip, r0
 800a1b6:	4281      	cmp	r1, r0
 800a1b8:	d12c      	bne.n	800a214 <LoRaMacProcess+0x4f0>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a1ba:	0019      	movs	r1, r3
 800a1bc:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a1be:	7809      	ldrb	r1, [r1, #0]
 800a1c0:	2501      	movs	r5, #1
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	d027      	beq.n	800a216 <LoRaMacProcess+0x4f2>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800a1c6:	0019      	movs	r1, r3
 800a1c8:	3153      	adds	r1, #83	; 0x53
 800a1ca:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a1cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a1ce:	6809      	ldr	r1, [r1, #0]
 800a1d0:	910b      	str	r1, [sp, #44]	; 0x2c
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a1d2:	0019      	movs	r1, r3
 800a1d4:	317c      	adds	r1, #124	; 0x7c
 800a1d6:	7809      	ldrb	r1, [r1, #0]
 800a1d8:	2902      	cmp	r1, #2
 800a1da:	d102      	bne.n	800a1e2 <LoRaMacProcess+0x4be>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a1dc:	48b0      	ldr	r0, [pc, #704]	; (800a4a0 <LoRaMacProcess+0x77c>)
 800a1de:	3101      	adds	r1, #1
 800a1e0:	5421      	strb	r1, [r4, r0]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a1e2:	2e03      	cmp	r6, #3
 800a1e4:	d106      	bne.n	800a1f4 <LoRaMacProcess+0x4d0>
 800a1e6:	4660      	mov	r0, ip
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a1e8:	2160      	movs	r1, #96	; 0x60
 800a1ea:	9006      	str	r0, [sp, #24]
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	9002      	str	r0, [sp, #8]
 800a1f0:	420a      	tst	r2, r1
 800a1f2:	d010      	beq.n	800a216 <LoRaMacProcess+0x4f2>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	4ba8      	ldr	r3, [pc, #672]	; (800a498 <LoRaMacProcess+0x774>)
 800a1f8:	49a4      	ldr	r1, [pc, #656]	; (800a48c <LoRaMacProcess+0x768>)
 800a1fa:	545a      	strb	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800a1fc:	f7fe fe8c 	bl	8008f18 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Multicast error\r\n");
 800a200:	4ba8      	ldr	r3, [pc, #672]	; (800a4a4 <LoRaMacProcess+0x780>)
 800a202:	e687      	b.n	8009f14 <LoRaMacProcess+0x1f0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a204:	4ba1      	ldr	r3, [pc, #644]	; (800a48c <LoRaMacProcess+0x768>)
 800a206:	54e6      	strb	r6, [r4, r3]
                PrepareRxDoneAbort( );
 800a208:	f7fe fe86 	bl	8008f18 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Determine Frame type error\r\n");
 800a20c:	4ba6      	ldr	r3, [pc, #664]	; (800a4a8 <LoRaMacProcess+0x784>)
 800a20e:	e681      	b.n	8009f14 <LoRaMacProcess+0x1f0>
        *fType = FRAME_TYPE_A;
 800a210:	9e02      	ldr	r6, [sp, #8]
 800a212:	e7c9      	b.n	800a1a8 <LoRaMacProcess+0x484>
 800a214:	2501      	movs	r5, #1
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a216:	2215      	movs	r2, #21
 800a218:	a90c      	add	r1, sp, #48	; 0x30
 800a21a:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a21c:	7818      	ldrb	r0, [r3, #0]
 800a21e:	f002 f86c 	bl	800c2fa <RegionGetPhyParam>
 800a222:	4a9e      	ldr	r2, [pc, #632]	; (800a49c <LoRaMacProcess+0x778>)
 800a224:	4b9c      	ldr	r3, [pc, #624]	; (800a498 <LoRaMacProcess+0x774>)
 800a226:	900a      	str	r0, [sp, #40]	; 0x28
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a228:	589b      	ldr	r3, [r3, r2]
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	23b1      	movs	r3, #177	; 0xb1
 800a22e:	9a03      	ldr	r2, [sp, #12]
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 800a234:	2d00      	cmp	r5, #0
 800a236:	d009      	beq.n	800a24c <LoRaMacProcess+0x528>
 800a238:	2d01      	cmp	r5, #1
 800a23a:	d12d      	bne.n	800a298 <LoRaMacProcess+0x574>
            if( lrWanVersion.Fields.Minor == 1 )
 800a23c:	2c01      	cmp	r4, #1
 800a23e:	d129      	bne.n	800a294 <LoRaMacProcess+0x570>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800a240:	2e00      	cmp	r6, #0
 800a242:	d001      	beq.n	800a248 <LoRaMacProcess+0x524>
 800a244:	2e03      	cmp	r6, #3
 800a246:	d102      	bne.n	800a24e <LoRaMacProcess+0x52a>
                    *fCntID = A_FCNT_DOWN;
 800a248:	2402      	movs	r4, #2
 800a24a:	e000      	b.n	800a24e <LoRaMacProcess+0x52a>
    switch( addrID )
 800a24c:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800a24e:	ab06      	add	r3, sp, #24
 800a250:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a254:	0020      	movs	r0, r4
 800a256:	b299      	uxth	r1, r3
 800a258:	ab0b      	add	r3, sp, #44	; 0x2c
 800a25a:	f001 fdff 	bl	800be5c <LoRaMacCryptoGetFCntDown>
 800a25e:	9003      	str	r0, [sp, #12]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS && macCryptoStatus != LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED)
 800a260:	2800      	cmp	r0, #0
 800a262:	d01c      	beq.n	800a29e <LoRaMacProcess+0x57a>
 800a264:	2807      	cmp	r0, #7
 800a266:	d01a      	beq.n	800a29e <LoRaMacProcess+0x57a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a268:	230a      	movs	r3, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a26a:	2808      	cmp	r0, #8
 800a26c:	d000      	beq.n	800a270 <LoRaMacProcess+0x54c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	4a89      	ldr	r2, [pc, #548]	; (800a498 <LoRaMacProcess+0x774>)
 800a272:	4986      	ldr	r1, [pc, #536]	; (800a48c <LoRaMacProcess+0x768>)
 800a274:	5453      	strb	r3, [r2, r1]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a276:	2386      	movs	r3, #134	; 0x86
 800a278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a27e:	f7fe fe4b 	bl	8008f18 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Down counter error %d\r\n", macCryptoStatus);
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	4b89      	ldr	r3, [pc, #548]	; (800a4ac <LoRaMacProcess+0x788>)
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC crypto error %d\r\n", macCryptoStatus);
 800a288:	2200      	movs	r2, #0
 800a28a:	2002      	movs	r0, #2
 800a28c:	0011      	movs	r1, r2
 800a28e:	f004 fdc7 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800a292:	e644      	b.n	8009f1e <LoRaMacProcess+0x1fa>
                *fCntID = FCNT_DOWN;
 800a294:	2403      	movs	r4, #3
 800a296:	e7da      	b.n	800a24e <LoRaMacProcess+0x52a>
    switch( addrID )
 800a298:	2305      	movs	r3, #5
 800a29a:	9303      	str	r3, [sp, #12]
 800a29c:	e7e7      	b.n	800a26e <LoRaMacProcess+0x54a>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a29e:	ab10      	add	r3, sp, #64	; 0x40
 800a2a0:	0022      	movs	r2, r4
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	0028      	movs	r0, r5
 800a2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a8:	9906      	ldr	r1, [sp, #24]
 800a2aa:	f001 fe8d 	bl	800bfc8 <LoRaMacCryptoUnsecureMessage>
 800a2ae:	4b7a      	ldr	r3, [pc, #488]	; (800a498 <LoRaMacProcess+0x774>)
 800a2b0:	1e04      	subs	r4, r0, #0
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a2b2:	d00a      	beq.n	800a2ca <LoRaMacProcess+0x5a6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a2b4:	1e82      	subs	r2, r0, #2
 800a2b6:	1e51      	subs	r1, r2, #1
 800a2b8:	418a      	sbcs	r2, r1
 800a2ba:	4974      	ldr	r1, [pc, #464]	; (800a48c <LoRaMacProcess+0x768>)
 800a2bc:	320b      	adds	r2, #11
 800a2be:	545a      	strb	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800a2c0:	f7fe fe2a 	bl	8008f18 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC crypto error %d\r\n", macCryptoStatus);
 800a2c4:	4b7a      	ldr	r3, [pc, #488]	; (800a4b0 <LoRaMacProcess+0x78c>)
 800a2c6:	9400      	str	r4, [sp, #0]
 800a2c8:	e7de      	b.n	800a288 <LoRaMacProcess+0x564>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a2ca:	4a70      	ldr	r2, [pc, #448]	; (800a48c <LoRaMacProcess+0x768>)
            MacCtx.McpsIndication.Multicast = multicast;
 800a2cc:	9902      	ldr	r1, [sp, #8]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a2ce:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a2d0:	4a78      	ldr	r2, [pc, #480]	; (800a4b4 <LoRaMacProcess+0x790>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a2d2:	4879      	ldr	r0, [pc, #484]	; (800a4b8 <LoRaMacProcess+0x794>)
            MacCtx.McpsIndication.Multicast = multicast;
 800a2d4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a2d6:	2134      	movs	r1, #52	; 0x34
 800a2d8:	aa06      	add	r2, sp, #24
 800a2da:	1852      	adds	r2, r2, r1
 800a2dc:	7812      	ldrb	r2, [r2, #0]
 800a2de:	06d1      	lsls	r1, r2, #27
 800a2e0:	0fc9      	lsrs	r1, r1, #31
 800a2e2:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsIndication.Buffer = NULL;
 800a2e4:	4975      	ldr	r1, [pc, #468]	; (800a4bc <LoRaMacProcess+0x798>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a2e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
            MacCtx.McpsIndication.Buffer = NULL;
 800a2e8:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 800a2ea:	3104      	adds	r1, #4
 800a2ec:	545c      	strb	r4, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a2ee:	3108      	adds	r1, #8
 800a2f0:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a2f2:	0692      	lsls	r2, r2, #26
 800a2f4:	4972      	ldr	r1, [pc, #456]	; (800a4c0 <LoRaMacProcess+0x79c>)
 800a2f6:	0fd2      	lsrs	r2, r2, #31
 800a2f8:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a2fa:	4972      	ldr	r1, [pc, #456]	; (800a4c4 <LoRaMacProcess+0x7a0>)
 800a2fc:	545c      	strb	r4, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a2fe:	3103      	adds	r1, #3
 800a300:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a302:	4a67      	ldr	r2, [pc, #412]	; (800a4a0 <LoRaMacProcess+0x77c>)
 800a304:	5c9a      	ldrb	r2, [r3, r2]
 800a306:	2a01      	cmp	r2, #1
 800a308:	d803      	bhi.n	800a312 <LoRaMacProcess+0x5ee>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a30a:	4964      	ldr	r1, [pc, #400]	; (800a49c <LoRaMacProcess+0x778>)
 800a30c:	585b      	ldr	r3, [r3, r1]
 800a30e:	3304      	adds	r3, #4
 800a310:	67dc      	str	r4, [r3, #124]	; 0x7c
            if( multicast == 1 )
 800a312:	9b02      	ldr	r3, [sp, #8]
 800a314:	4c60      	ldr	r4, [pc, #384]	; (800a498 <LoRaMacProcess+0x774>)
 800a316:	2b01      	cmp	r3, #1
 800a318:	d152      	bne.n	800a3c0 <LoRaMacProcess+0x69c>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a31a:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a31c:	4959      	ldr	r1, [pc, #356]	; (800a484 <LoRaMacProcess+0x760>)
 800a31e:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a320:	4b69      	ldr	r3, [pc, #420]	; (800a4c8 <LoRaMacProcess+0x7a4>)
 800a322:	ad10      	add	r5, sp, #64	; 0x40
 800a324:	5ce1      	ldrb	r1, [r4, r3]
 800a326:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800a328:	2a01      	cmp	r2, #1
 800a32a:	d805      	bhi.n	800a338 <LoRaMacProcess+0x614>
        if( request == MCPS_CONFIRMED )
 800a32c:	2901      	cmp	r1, #1
 800a32e:	d101      	bne.n	800a334 <LoRaMacProcess+0x610>
            if( fCtrl.Bits.Ack == 1 )
 800a330:	069b      	lsls	r3, r3, #26
 800a332:	d501      	bpl.n	800a338 <LoRaMacProcess+0x614>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800a334:	f001 faea 	bl	800b90c <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800a338:	2e02      	cmp	r6, #2
 800a33a:	d066      	beq.n	800a40a <LoRaMacProcess+0x6e6>
 800a33c:	2e03      	cmp	r6, #3
 800a33e:	d072      	beq.n	800a426 <LoRaMacProcess+0x702>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a340:	7b29      	ldrb	r1, [r5, #12]
 800a342:	9a05      	ldr	r2, [sp, #20]
 800a344:	0709      	lsls	r1, r1, #28
 800a346:	0f09      	lsrs	r1, r1, #28
 800a348:	a814      	add	r0, sp, #80	; 0x50
 800a34a:	2e01      	cmp	r6, #1
 800a34c:	d053      	beq.n	800a3f6 <LoRaMacProcess+0x6d2>
 800a34e:	f7ff fa25 	bl	800979c <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a352:	2248      	movs	r2, #72	; 0x48
 800a354:	ab06      	add	r3, sp, #24
 800a356:	189b      	adds	r3, r3, r2
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	4a5c      	ldr	r2, [pc, #368]	; (800a4cc <LoRaMacProcess+0x7a8>)
 800a35c:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a35e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	9a02      	ldr	r2, [sp, #8]
 800a364:	4b55      	ldr	r3, [pc, #340]	; (800a4bc <LoRaMacProcess+0x798>)
 800a366:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a368:	ab1a      	add	r3, sp, #104	; 0x68
 800a36a:	781a      	ldrb	r2, [r3, #0]
 800a36c:	2385      	movs	r3, #133	; 0x85
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a372:	2201      	movs	r2, #1
 800a374:	4b56      	ldr	r3, [pc, #344]	; (800a4d0 <LoRaMacProcess+0x7ac>)
 800a376:	54e2      	strb	r2, [r4, r3]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type A\r\n");
 800a378:	4b56      	ldr	r3, [pc, #344]	; (800a4d4 <LoRaMacProcess+0x7b0>)
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type D\r\n");
 800a37a:	2200      	movs	r2, #0
 800a37c:	2002      	movs	r0, #2
 800a37e:	0011      	movs	r1, r2
 800a380:	f004 fd4e 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800a384:	2200      	movs	r2, #0
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a386:	2002      	movs	r0, #2
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800a388:	0011      	movs	r1, r2
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a38a:	5de3      	ldrb	r3, [r4, r7]
 800a38c:	4303      	orrs	r3, r0
 800a38e:	55e3      	strb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800a390:	4b51      	ldr	r3, [pc, #324]	; (800a4d8 <LoRaMacProcess+0x7b4>)
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a392:	f004 fd45 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
    if( MacCtx.NodeAckRequested == true )
 800a396:	4c40      	ldr	r4, [pc, #256]	; (800a498 <LoRaMacProcess+0x774>)
 800a398:	4b50      	ldr	r3, [pc, #320]	; (800a4dc <LoRaMacProcess+0x7b8>)
 800a39a:	5ce3      	ldrb	r3, [r4, r3]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d100      	bne.n	800a3a2 <LoRaMacProcess+0x67e>
 800a3a0:	e0ab      	b.n	800a4fa <LoRaMacProcess+0x7d6>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a3a2:	2388      	movs	r3, #136	; 0x88
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	5ce3      	ldrb	r3, [r4, r3]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <LoRaMacProcess+0x68e>
            OnAckTimeoutTimerEvent( NULL );
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f7fe fd85 	bl	8008ebc <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a3b2:	2320      	movs	r3, #32
 800a3b4:	5de2      	ldrb	r2, [r4, r7]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	55e3      	strb	r3, [r4, r7]
    UpdateRxSlotIdleState( );
 800a3ba:	f7fe fd25 	bl	8008e08 <UpdateRxSlotIdleState>
 800a3be:	e5ae      	b.n	8009f1e <LoRaMacProcess+0x1fa>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a3c0:	211f      	movs	r1, #31
 800a3c2:	9807      	ldr	r0, [sp, #28]
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a3c4:	4b35      	ldr	r3, [pc, #212]	; (800a49c <LoRaMacProcess+0x778>)
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a3c6:	4388      	bics	r0, r1
 800a3c8:	0001      	movs	r1, r0
 800a3ca:	204c      	movs	r0, #76	; 0x4c
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a3cc:	58e3      	ldr	r3, [r4, r3]
 800a3ce:	30ff      	adds	r0, #255	; 0xff
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a3d0:	29a0      	cmp	r1, #160	; 0xa0
 800a3d2:	d10b      	bne.n	800a3ec <LoRaMacProcess+0x6c8>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a3d4:	399f      	subs	r1, #159	; 0x9f
 800a3d6:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a3d8:	3162      	adds	r1, #98	; 0x62
 800a3da:	31ff      	adds	r1, #255	; 0xff
 800a3dc:	5c59      	ldrb	r1, [r3, r1]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d102      	bne.n	800a3e8 <LoRaMacProcess+0x6c4>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a3e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a3e4:	33fc      	adds	r3, #252	; 0xfc
 800a3e6:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e797      	b.n	800a31c <LoRaMacProcess+0x5f8>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a3f0:	4b24      	ldr	r3, [pc, #144]	; (800a484 <LoRaMacProcess+0x760>)
 800a3f2:	54e1      	strb	r1, [r4, r3]
 800a3f4:	e794      	b.n	800a320 <LoRaMacProcess+0x5fc>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a3f6:	f7ff f9d1 	bl	800979c <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a3fa:	2248      	movs	r2, #72	; 0x48
 800a3fc:	ab06      	add	r3, sp, #24
 800a3fe:	189b      	adds	r3, r3, r2
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	4a32      	ldr	r2, [pc, #200]	; (800a4cc <LoRaMacProcess+0x7a8>)
 800a404:	54a3      	strb	r3, [r4, r2]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type B\r\n");
 800a406:	4b36      	ldr	r3, [pc, #216]	; (800a4e0 <LoRaMacProcess+0x7bc>)
 800a408:	e7b7      	b.n	800a37a <LoRaMacProcess+0x656>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a40a:	ab1a      	add	r3, sp, #104	; 0x68
 800a40c:	7819      	ldrb	r1, [r3, #0]
 800a40e:	9a05      	ldr	r2, [sp, #20]
 800a410:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a412:	f7ff f9c3 	bl	800979c <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a416:	2248      	movs	r2, #72	; 0x48
 800a418:	ab06      	add	r3, sp, #24
 800a41a:	189b      	adds	r3, r3, r2
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	4a2b      	ldr	r2, [pc, #172]	; (800a4cc <LoRaMacProcess+0x7a8>)
 800a420:	54a3      	strb	r3, [r4, r2]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type C\r\n");
 800a422:	4b30      	ldr	r3, [pc, #192]	; (800a4e4 <LoRaMacProcess+0x7c0>)
 800a424:	e7a9      	b.n	800a37a <LoRaMacProcess+0x656>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a426:	2248      	movs	r2, #72	; 0x48
 800a428:	ab06      	add	r3, sp, #24
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	4a27      	ldr	r2, [pc, #156]	; (800a4cc <LoRaMacProcess+0x7a8>)
 800a430:	54a3      	strb	r3, [r4, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a432:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	9a02      	ldr	r2, [sp, #8]
 800a438:	4b20      	ldr	r3, [pc, #128]	; (800a4bc <LoRaMacProcess+0x798>)
 800a43a:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a43c:	ab1a      	add	r3, sp, #104	; 0x68
 800a43e:	781a      	ldrb	r2, [r3, #0]
 800a440:	2385      	movs	r3, #133	; 0x85
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a446:	2201      	movs	r2, #1
 800a448:	4b21      	ldr	r3, [pc, #132]	; (800a4d0 <LoRaMacProcess+0x7ac>)
 800a44a:	54e2      	strb	r2, [r4, r3]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type D\r\n");
 800a44c:	4b26      	ldr	r3, [pc, #152]	; (800a4e8 <LoRaMacProcess+0x7c4>)
 800a44e:	e794      	b.n	800a37a <LoRaMacProcess+0x656>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a450:	1e73      	subs	r3, r6, #1
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	466b      	mov	r3, sp
 800a456:	4e0c      	ldr	r6, [pc, #48]	; (800a488 <LoRaMacProcess+0x764>)
 800a458:	9902      	ldr	r1, [sp, #8]
 800a45a:	899a      	ldrh	r2, [r3, #12]
 800a45c:	0030      	movs	r0, r6
 800a45e:	3101      	adds	r1, #1
 800a460:	f002 ffa8 	bl	800d3b4 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a464:	2303      	movs	r3, #3
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a466:	2002      	movs	r0, #2
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a468:	4a06      	ldr	r2, [pc, #24]	; (800a484 <LoRaMacProcess+0x760>)
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a46a:	0029      	movs	r1, r5
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a46c:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a46e:	4b13      	ldr	r3, [pc, #76]	; (800a4bc <LoRaMacProcess+0x798>)
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a470:	9a03      	ldr	r2, [sp, #12]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a472:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a474:	3304      	adds	r3, #4
 800a476:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a478:	5de3      	ldrb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a47a:	002a      	movs	r2, r5
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a47c:	4303      	orrs	r3, r0
 800a47e:	55e3      	strb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a480:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <LoRaMacProcess+0x7c8>)
 800a482:	e786      	b.n	800a392 <LoRaMacProcess+0x66e>
 800a484:	0000041c 	.word	0x0000041c
 800a488:	20000a80 	.word	0x20000a80
 800a48c:	0000041d 	.word	0x0000041d
 800a490:	0800f9e7 	.word	0x0800f9e7
 800a494:	00000434 	.word	0x00000434
 800a498:	20000848 	.word	0x20000848
 800a49c:	00000484 	.word	0x00000484
 800a4a0:	0000042d 	.word	0x0000042d
 800a4a4:	0800fa1b 	.word	0x0800fa1b
 800a4a8:	0800f9fe 	.word	0x0800f9fe
 800a4ac:	0800fa2d 	.word	0x0800fa2d
 800a4b0:	0800fa45 	.word	0x0800fa45
 800a4b4:	0000041e 	.word	0x0000041e
 800a4b8:	00000421 	.word	0x00000421
 800a4bc:	00000424 	.word	0x00000424
 800a4c0:	0000042e 	.word	0x0000042e
 800a4c4:	0000043d 	.word	0x0000043d
 800a4c8:	0000043c 	.word	0x0000043c
 800a4cc:	0000041f 	.word	0x0000041f
 800a4d0:	00000429 	.word	0x00000429
 800a4d4:	0800fa5f 	.word	0x0800fa5f
 800a4d8:	0800fa9b 	.word	0x0800fa9b
 800a4dc:	00000414 	.word	0x00000414
 800a4e0:	0800fa6e 	.word	0x0800fa6e
 800a4e4:	0800fa7d 	.word	0x0800fa7d
 800a4e8:	0800fa8c 	.word	0x0800fa8c
 800a4ec:	0800fabe 	.word	0x0800fabe
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4f0:	4b58      	ldr	r3, [pc, #352]	; (800a654 <LoRaMacProcess+0x930>)
 800a4f2:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 800a4f4:	f7fe fd10 	bl	8008f18 <PrepareRxDoneAbort>
            break;
 800a4f8:	e74d      	b.n	800a396 <LoRaMacProcess+0x672>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a4fa:	4b57      	ldr	r3, [pc, #348]	; (800a658 <LoRaMacProcess+0x934>)
 800a4fc:	58e3      	ldr	r3, [r4, r3]
 800a4fe:	337c      	adds	r3, #124	; 0x7c
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d000      	beq.n	800a508 <LoRaMacProcess+0x7e4>
 800a506:	e754      	b.n	800a3b2 <LoRaMacProcess+0x68e>
 800a508:	e750      	b.n	800a3ac <LoRaMacProcess+0x688>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a50a:	5de3      	ldrb	r3, [r4, r7]
 800a50c:	075b      	lsls	r3, r3, #29
 800a50e:	d512      	bpl.n	800a536 <LoRaMacProcess+0x812>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a510:	2001      	movs	r0, #1
 800a512:	25d0      	movs	r5, #208	; 0xd0
 800a514:	f001 fb2e 	bl	800bb74 <LoRaMacConfirmQueueIsCmdActive>
 800a518:	00ad      	lsls	r5, r5, #2
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d035      	beq.n	800a58a <LoRaMacProcess+0x866>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a51e:	2001      	movs	r0, #1
 800a520:	f001 fafa 	bl	800bb18 <LoRaMacConfirmQueueGetStatus>
 800a524:	2800      	cmp	r0, #0
 800a526:	d102      	bne.n	800a52e <LoRaMacProcess+0x80a>
                MacCtx.ChannelsNbTransCounter = 0;
 800a528:	2382      	movs	r3, #130	; 0x82
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a52e:	2302      	movs	r3, #2
 800a530:	5962      	ldr	r2, [r4, r5]
 800a532:	439a      	bics	r2, r3
 800a534:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a536:	5de1      	ldrb	r1, [r4, r7]
 800a538:	07cb      	lsls	r3, r1, #31
 800a53a:	d400      	bmi.n	800a53e <LoRaMacProcess+0x81a>
 800a53c:	e543      	b.n	8009fc6 <LoRaMacProcess+0x2a2>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a53e:	4b47      	ldr	r3, [pc, #284]	; (800a65c <LoRaMacProcess+0x938>)
 800a540:	5ce3      	ldrb	r3, [r4, r3]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <LoRaMacProcess+0x826>
 800a546:	2b03      	cmp	r3, #3
 800a548:	d12a      	bne.n	800a5a0 <LoRaMacProcess+0x87c>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a54a:	4b43      	ldr	r3, [pc, #268]	; (800a658 <LoRaMacProcess+0x934>)
    if( MacCtx.ChannelsNbTransCounter >=
 800a54c:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a54e:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800a550:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a552:	001a      	movs	r2, r3
 800a554:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 800a556:	5c20      	ldrb	r0, [r4, r0]
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	4290      	cmp	r0, r2
 800a55c:	d209      	bcs.n	800a572 <LoRaMacProcess+0x84e>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a55e:	078a      	lsls	r2, r1, #30
 800a560:	d554      	bpl.n	800a60c <LoRaMacProcess+0x8e8>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a562:	337c      	adds	r3, #124	; 0x7c
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <LoRaMacProcess+0x84e>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800a56a:	4b3d      	ldr	r3, [pc, #244]	; (800a660 <LoRaMacProcess+0x93c>)
 800a56c:	5ce3      	ldrb	r3, [r4, r3]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d14c      	bne.n	800a60c <LoRaMacProcess+0x8e8>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a572:	483c      	ldr	r0, [pc, #240]	; (800a664 <LoRaMacProcess+0x940>)
 800a574:	f004 fa86 	bl	800ea84 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a578:	22d0      	movs	r2, #208	; 0xd0
 800a57a:	2320      	movs	r3, #32
 800a57c:	0092      	lsls	r2, r2, #2
 800a57e:	58a1      	ldr	r1, [r4, r2]
 800a580:	4399      	bics	r1, r3
 800a582:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 800a584:	f7ff fb5c 	bl	8009c40 <StopRetransmission.isra.0>
 800a588:	e51d      	b.n	8009fc6 <LoRaMacProcess+0x2a2>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a58a:	2005      	movs	r0, #5
 800a58c:	f001 faf2 	bl	800bb74 <LoRaMacConfirmQueueIsCmdActive>
 800a590:	2800      	cmp	r0, #0
 800a592:	d1cc      	bne.n	800a52e <LoRaMacProcess+0x80a>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a594:	2006      	movs	r0, #6
 800a596:	f001 faed 	bl	800bb74 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d1c7      	bne.n	800a52e <LoRaMacProcess+0x80a>
 800a59e:	e7ca      	b.n	800a536 <LoRaMacProcess+0x812>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d133      	bne.n	800a60c <LoRaMacProcess+0x8e8>
            if( MacCtx.AckTimeoutRetry == true )
 800a5a4:	4b30      	ldr	r3, [pc, #192]	; (800a668 <LoRaMacProcess+0x944>)
 800a5a6:	5ce2      	ldrb	r2, [r4, r3]
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	d100      	bne.n	800a5ae <LoRaMacProcess+0x88a>
 800a5ac:	e50b      	b.n	8009fc6 <LoRaMacProcess+0x2a2>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a5ae:	4d2f      	ldr	r5, [pc, #188]	; (800a66c <LoRaMacProcess+0x948>)
        MacCtx.AckTimeoutRetries )
 800a5b0:	482f      	ldr	r0, [pc, #188]	; (800a670 <LoRaMacProcess+0x94c>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a5b2:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 800a5b4:	5c20      	ldrb	r0, [r4, r0]
 800a5b6:	4684      	mov	ip, r0
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a5b8:	4283      	cmp	r3, r0
 800a5ba:	d205      	bcs.n	800a5c8 <LoRaMacProcess+0x8a4>
    return false;
 800a5bc:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a5be:	0789      	lsls	r1, r1, #30
 800a5c0:	d502      	bpl.n	800a5c8 <LoRaMacProcess+0x8a4>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a5c2:	2288      	movs	r2, #136	; 0x88
 800a5c4:	00d2      	lsls	r2, r2, #3
 800a5c6:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a5c8:	21b1      	movs	r1, #177	; 0xb1
 800a5ca:	4e23      	ldr	r6, [pc, #140]	; (800a658 <LoRaMacProcess+0x934>)
 800a5cc:	0049      	lsls	r1, r1, #1
 800a5ce:	59a0      	ldr	r0, [r4, r6]
 800a5d0:	5c41      	ldrb	r1, [r0, r1]
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	d13a      	bne.n	800a64c <LoRaMacProcess+0x928>
                    if( stopRetransmission == false )
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	d122      	bne.n	800a620 <LoRaMacProcess+0x8fc>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800a5da:	4563      	cmp	r3, ip
 800a5dc:	d216      	bcs.n	800a60c <LoRaMacProcess+0x8e8>
        MacCtx.AckTimeoutRetriesCounter++;
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800a5e4:	07db      	lsls	r3, r3, #31
 800a5e6:	d511      	bpl.n	800a60c <LoRaMacProcess+0x8e8>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a5e8:	2322      	movs	r3, #34	; 0x22
 800a5ea:	a910      	add	r1, sp, #64	; 0x40
 800a5ec:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a5ee:	0003      	movs	r3, r0
 800a5f0:	33b8      	adds	r3, #184	; 0xb8
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a5f6:	0003      	movs	r3, r0
 800a5f8:	3385      	adds	r3, #133	; 0x85
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a5fe:	7800      	ldrb	r0, [r0, #0]
 800a600:	f001 fe7b 	bl	800c2fa <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a604:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a606:	900c      	str	r0, [sp, #48]	; 0x30
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a608:	3385      	adds	r3, #133	; 0x85
 800a60a:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a60c:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800a60e:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a610:	5de3      	ldrb	r3, [r4, r7]
 800a612:	4393      	bics	r3, r2
 800a614:	55e3      	strb	r3, [r4, r7]
            MacCtx.AckTimeoutRetry = false;
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <LoRaMacProcess+0x944>)
 800a618:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800a61a:	f7ff fb3f 	bl	8009c9c <OnTxDelayedTimerEvent>
 800a61e:	e4d2      	b.n	8009fc6 <LoRaMacProcess+0x2a2>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a620:	2388      	movs	r3, #136	; 0x88
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	5ce6      	ldrb	r6, [r4, r3]
 800a626:	2e00      	cmp	r6, #0
 800a628:	d10c      	bne.n	800a644 <LoRaMacProcess+0x920>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a62a:	2302      	movs	r3, #2
 800a62c:	a910      	add	r1, sp, #64	; 0x40
 800a62e:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a630:	4b10      	ldr	r3, [pc, #64]	; (800a674 <LoRaMacProcess+0x950>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a632:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	9310      	str	r3, [sp, #64]	; 0x40
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a638:	f001 fe72 	bl	800c320 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a63c:	4b0e      	ldr	r3, [pc, #56]	; (800a678 <LoRaMacProcess+0x954>)
 800a63e:	54e6      	strb	r6, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800a640:	332c      	adds	r3, #44	; 0x2c
 800a642:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a644:	5d62      	ldrb	r2, [r4, r5]
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <LoRaMacProcess+0x958>)
 800a648:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800a64a:	e792      	b.n	800a572 <LoRaMacProcess+0x84e>
 800a64c:	2a00      	cmp	r2, #0
 800a64e:	d0dd      	beq.n	800a60c <LoRaMacProcess+0x8e8>
 800a650:	e78f      	b.n	800a572 <LoRaMacProcess+0x84e>
 800a652:	46c0      	nop			; (mov r8, r8)
 800a654:	0000041d 	.word	0x0000041d
 800a658:	00000484 	.word	0x00000484
 800a65c:	0000043c 	.word	0x0000043c
 800a660:	0000042d 	.word	0x0000042d
 800a664:	20000bb0 	.word	0x20000bb0
 800a668:	00000413 	.word	0x00000413
 800a66c:	00000412 	.word	0x00000412
 800a670:	00000411 	.word	0x00000411
 800a674:	2000080c 	.word	0x2000080c
 800a678:	00000414 	.word	0x00000414
 800a67c:	00000441 	.word	0x00000441

0800a680 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	b08d      	sub	sp, #52	; 0x34
 800a684:	0007      	movs	r7, r0
 //   LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a686:	2503      	movs	r5, #3
{
 800a688:	9103      	str	r1, [sp, #12]
 800a68a:	9202      	str	r2, [sp, #8]
    if( ( primitives == NULL ) ||
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d100      	bne.n	800a692 <LoRaMacInitialization+0x12>
 800a690:	e170      	b.n	800a974 <LoRaMacInitialization+0x2f4>
 800a692:	2900      	cmp	r1, #0
 800a694:	d100      	bne.n	800a698 <LoRaMacInitialization+0x18>
 800a696:	e16d      	b.n	800a974 <LoRaMacInitialization+0x2f4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a698:	6803      	ldr	r3, [r0, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d100      	bne.n	800a6a0 <LoRaMacInitialization+0x20>
 800a69e:	e169      	b.n	800a974 <LoRaMacInitialization+0x2f4>
 800a6a0:	6843      	ldr	r3, [r0, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d100      	bne.n	800a6a8 <LoRaMacInitialization+0x28>
 800a6a6:	e165      	b.n	800a974 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a6a8:	6883      	ldr	r3, [r0, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d100      	bne.n	800a6b0 <LoRaMacInitialization+0x30>
 800a6ae:	e161      	b.n	800a974 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a6b0:	68c3      	ldr	r3, [r0, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d100      	bne.n	800a6b8 <LoRaMacInitialization+0x38>
 800a6b6:	e15d      	b.n	800a974 <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a6b8:	0010      	movs	r0, r2
 800a6ba:	f001 fe19 	bl	800c2f0 <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a6be:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d100      	bne.n	800a6c6 <LoRaMacInitialization+0x46>
 800a6c4:	e156      	b.n	800a974 <LoRaMacInitialization+0x2f4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800a6c6:	0038      	movs	r0, r7
 800a6c8:	49bd      	ldr	r1, [pc, #756]	; (800a9c0 <LoRaMacInitialization+0x340>)
 800a6ca:	f001 f9b3 	bl	800ba34 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800a6ce:	22b6      	movs	r2, #182	; 0xb6
 800a6d0:	4dbc      	ldr	r5, [pc, #752]	; (800a9c4 <LoRaMacInitialization+0x344>)
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	0028      	movs	r0, r5
 800a6d6:	0052      	lsls	r2, r2, #1
 800a6d8:	f002 fe81 	bl	800d3de <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a6dc:	4cba      	ldr	r4, [pc, #744]	; (800a9c8 <LoRaMacInitialization+0x348>)
 800a6de:	2100      	movs	r1, #0
 800a6e0:	0020      	movs	r0, r4
 800a6e2:	4aba      	ldr	r2, [pc, #744]	; (800a9cc <LoRaMacInitialization+0x34c>)
 800a6e4:	f002 fe7b 	bl	800d3de <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	4bb9      	ldr	r3, [pc, #740]	; (800a9d0 <LoRaMacInitialization+0x350>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a6ec:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a6ee:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800a6f0:	4bb8      	ldr	r3, [pc, #736]	; (800a9d4 <LoRaMacInitialization+0x354>)
    MacCtx.NvmCtx = &NvmMacCtx;
 800a6f2:	4eb9      	ldr	r6, [pc, #740]	; (800a9d8 <LoRaMacInitialization+0x358>)
    MacCtx.AckTimeoutRetries = 1;
 800a6f4:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 800a6f6:	9b02      	ldr	r3, [sp, #8]
    MacCtx.NvmCtx = &NvmMacCtx;
 800a6f8:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 800a6fa:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a6fc:	002b      	movs	r3, r5
 800a6fe:	337c      	adds	r3, #124	; 0x7c
 800a700:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800a702:	002b      	movs	r3, r5
 800a704:	33ca      	adds	r3, #202	; 0xca
 800a706:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 800a708:	4bb4      	ldr	r3, [pc, #720]	; (800a9dc <LoRaMacInitialization+0x35c>)
 800a70a:	35fc      	adds	r5, #252	; 0xfc
 800a70c:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a70e:	230f      	movs	r3, #15
 800a710:	ad08      	add	r5, sp, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a712:	0029      	movs	r1, r5
 800a714:	9802      	ldr	r0, [sp, #8]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a716:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a718:	f001 fdef 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a71c:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a71e:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a720:	1e42      	subs	r2, r0, #1
 800a722:	4190      	sbcs	r0, r2
 800a724:	001a      	movs	r2, r3
 800a726:	32c9      	adds	r2, #201	; 0xc9
 800a728:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a72a:	200a      	movs	r0, #10
 800a72c:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a72e:	0029      	movs	r1, r5
 800a730:	7818      	ldrb	r0, [r3, #0]
 800a732:	f001 fde2 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a736:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a738:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800a73a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a73c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a73e:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a740:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a742:	7818      	ldrb	r0, [r3, #0]
 800a744:	f001 fdd9 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a748:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a74a:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a74c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a74e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a750:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a752:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a754:	7818      	ldrb	r0, [r3, #0]
 800a756:	f001 fdd0 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a75a:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a75c:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a75e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a760:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a762:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a764:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a766:	7818      	ldrb	r0, [r3, #0]
 800a768:	f001 fdc7 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a76c:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a76e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a770:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a772:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a774:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a776:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a778:	7818      	ldrb	r0, [r3, #0]
 800a77a:	f001 fdbe 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a77e:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a780:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a782:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a784:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a786:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a788:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a78a:	7818      	ldrb	r0, [r3, #0]
 800a78c:	f001 fdb5 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a790:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a792:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a794:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a796:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a798:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a79a:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a79c:	7818      	ldrb	r0, [r3, #0]
 800a79e:	f001 fdac 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a7a2:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a7a4:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a7a6:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7a8:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a7aa:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7ac:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7ae:	7818      	ldrb	r0, [r3, #0]
 800a7b0:	f001 fda3 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a7b4:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7b6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a7b8:	1d9a      	adds	r2, r3, #6
 800a7ba:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a7bc:	2218      	movs	r2, #24
 800a7be:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7c0:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7c2:	7818      	ldrb	r0, [r3, #0]
 800a7c4:	f001 fd99 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a7c8:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a7ca:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a7cc:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7ce:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a7d0:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a7d2:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7d4:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7d6:	7818      	ldrb	r0, [r3, #0]
 800a7d8:	f001 fd8f 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a7dc:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7de:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a7e0:	001a      	movs	r2, r3
 800a7e2:	b2c0      	uxtb	r0, r0
 800a7e4:	322c      	adds	r2, #44	; 0x2c
 800a7e6:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a7e8:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a7ea:	221e      	movs	r2, #30
 800a7ec:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7ee:	0029      	movs	r1, r5
 800a7f0:	7818      	ldrb	r0, [r3, #0]
 800a7f2:	f001 fd82 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a7f6:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7f8:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a7fa:	001a      	movs	r2, r3
 800a7fc:	3238      	adds	r2, #56	; 0x38
 800a7fe:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a800:	221f      	movs	r2, #31
 800a802:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a804:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a806:	7818      	ldrb	r0, [r3, #0]
 800a808:	f001 fd77 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a80c:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a80e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a810:	001a      	movs	r2, r3
 800a812:	3239      	adds	r2, #57	; 0x39
 800a814:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a816:	2220      	movs	r2, #32
 800a818:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a81a:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a81c:	7818      	ldrb	r0, [r3, #0]
 800a81e:	f001 fd6c 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a822:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a824:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a826:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a828:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a82a:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a82c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a82e:	7818      	ldrb	r0, [r3, #0]
 800a830:	f001 fd63 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a834:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a836:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a838:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a83a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a83c:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a83e:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a840:	7818      	ldrb	r0, [r3, #0]
 800a842:	f001 fd5a 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800a846:	23fd      	movs	r3, #253	; 0xfd
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a84c:	230c      	movs	r3, #12
 800a84e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a850:	59a3      	ldr	r3, [r4, r6]
 800a852:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a854:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a856:	7818      	ldrb	r0, [r3, #0]
 800a858:	f001 fd4f 	bl	800c2fa <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a85c:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800a85e:	4b60      	ldr	r3, [pc, #384]	; (800a9e0 <LoRaMacInitialization+0x360>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a860:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 800a862:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a864:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a866:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a868:	1d5a      	adds	r2, r3, #5
 800a86a:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a86c:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800a86e:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a870:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800a872:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a874:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a876:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800a878:	0018      	movs	r0, r3
 800a87a:	308c      	adds	r0, #140	; 0x8c
 800a87c:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a87e:	0018      	movs	r0, r3
 800a880:	3090      	adds	r0, #144	; 0x90
 800a882:	0002      	movs	r2, r0
 800a884:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a886:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a888:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a88a:	0018      	movs	r0, r3
 800a88c:	3094      	adds	r0, #148	; 0x94
 800a88e:	0002      	movs	r2, r0
 800a890:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 800a892:	950a      	str	r5, [sp, #40]	; 0x28
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a894:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800a896:	0018      	movs	r0, r3
 800a898:	3098      	adds	r0, #152	; 0x98
 800a89a:	0002      	movs	r2, r0
 800a89c:	6998      	ldr	r0, [r3, #24]
 800a89e:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	309c      	adds	r0, #156	; 0x9c
 800a8a4:	0002      	movs	r2, r0
 800a8a6:	69d8      	ldr	r0, [r3, #28]
 800a8a8:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	30a0      	adds	r0, #160	; 0xa0
 800a8ae:	0002      	movs	r2, r0
 800a8b0:	6a18      	ldr	r0, [r3, #32]
 800a8b2:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	30a4      	adds	r0, #164	; 0xa4
 800a8b8:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800a8ba:	a90a      	add	r1, sp, #40	; 0x28
 800a8bc:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a8be:	7818      	ldrb	r0, [r3, #0]
 800a8c0:	f001 fd2e 	bl	800c320 <RegionInitDefaults>

    ResetMacParameters( );
 800a8c4:	f7fe fbce 	bl	8009064 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800a8c8:	59a3      	ldr	r3, [r4, r6]
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	001a      	movs	r2, r3
 800a8ce:	327d      	adds	r2, #125	; 0x7d
 800a8d0:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 800a8d2:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 800a8d4:	9803      	ldr	r0, [sp, #12]
    MacCtx.MacPrimitives = primitives;
 800a8d6:	0092      	lsls	r2, r2, #2
 800a8d8:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 800a8da:	3204      	adds	r2, #4
 800a8dc:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 800a8de:	4a41      	ldr	r2, [pc, #260]	; (800a9e4 <LoRaMacInitialization+0x364>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a8e0:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 800a8e2:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800a8e4:	3a42      	subs	r2, #66	; 0x42
 800a8e6:	3aff      	subs	r2, #255	; 0xff
 800a8e8:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a8ea:	483f      	ldr	r0, [pc, #252]	; (800a9e8 <LoRaMacInitialization+0x368>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a8ec:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800a8ee:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a8f0:	002a      	movs	r2, r5
 800a8f2:	4b3e      	ldr	r3, [pc, #248]	; (800a9ec <LoRaMacInitialization+0x36c>)
 800a8f4:	9500      	str	r5, [sp, #0]
 800a8f6:	3902      	subs	r1, #2
 800a8f8:	f004 f864 	bl	800e9c4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	002a      	movs	r2, r5
 800a900:	4b3b      	ldr	r3, [pc, #236]	; (800a9f0 <LoRaMacInitialization+0x370>)
 800a902:	9500      	str	r5, [sp, #0]
 800a904:	4249      	negs	r1, r1
 800a906:	483b      	ldr	r0, [pc, #236]	; (800a9f4 <LoRaMacInitialization+0x374>)
 800a908:	f004 f85c 	bl	800e9c4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a90c:	2101      	movs	r1, #1
 800a90e:	002a      	movs	r2, r5
 800a910:	4b39      	ldr	r3, [pc, #228]	; (800a9f8 <LoRaMacInitialization+0x378>)
 800a912:	9500      	str	r5, [sp, #0]
 800a914:	4249      	negs	r1, r1
 800a916:	4839      	ldr	r0, [pc, #228]	; (800a9fc <LoRaMacInitialization+0x37c>)
 800a918:	f004 f854 	bl	800e9c4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a91c:	2101      	movs	r1, #1
 800a91e:	002a      	movs	r2, r5
 800a920:	4b37      	ldr	r3, [pc, #220]	; (800aa00 <LoRaMacInitialization+0x380>)
 800a922:	4249      	negs	r1, r1
 800a924:	9500      	str	r5, [sp, #0]
 800a926:	4837      	ldr	r0, [pc, #220]	; (800aa04 <LoRaMacInitialization+0x384>)
 800a928:	f004 f84c 	bl	800e9c4 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 800a92c:	59a7      	ldr	r7, [r4, r6]
 800a92e:	ad04      	add	r5, sp, #16
 800a930:	3759      	adds	r7, #89	; 0x59
 800a932:	0028      	movs	r0, r5
 800a934:	37ff      	adds	r7, #255	; 0xff
 800a936:	f003 fe3f 	bl	800e5b8 <SysTimeGetMcuTime>
 800a93a:	cd0c      	ldmia	r5!, {r2, r3}
 800a93c:	c70c      	stmia	r7!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a93e:	23d3      	movs	r3, #211	; 0xd3
 800a940:	4a31      	ldr	r2, [pc, #196]	; (800aa08 <LoRaMacInitialization+0x388>)
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a946:	4a31      	ldr	r2, [pc, #196]	; (800aa0c <LoRaMacInitialization+0x38c>)
 800a948:	3308      	adds	r3, #8
 800a94a:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a94c:	4a30      	ldr	r2, [pc, #192]	; (800aa10 <LoRaMacInitialization+0x390>)
 800a94e:	3308      	adds	r3, #8
 800a950:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a952:	4a30      	ldr	r2, [pc, #192]	; (800aa14 <LoRaMacInitialization+0x394>)
 800a954:	3b0c      	subs	r3, #12
 800a956:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800a958:	4f2f      	ldr	r7, [pc, #188]	; (800aa18 <LoRaMacInitialization+0x398>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a95a:	4a30      	ldr	r2, [pc, #192]	; (800aa1c <LoRaMacInitialization+0x39c>)
 800a95c:	3308      	adds	r3, #8
 800a95e:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	482f      	ldr	r0, [pc, #188]	; (800aa20 <LoRaMacInitialization+0x3a0>)
 800a964:	9302      	str	r3, [sp, #8]
 800a966:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800a968:	482e      	ldr	r0, [pc, #184]	; (800aa24 <LoRaMacInitialization+0x3a4>)
 800a96a:	f7fd fb89 	bl	8008080 <SecureElementInit>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d003      	beq.n	800a97a <LoRaMacInitialization+0x2fa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a972:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
*/
    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800a974:	0028      	movs	r0, r5
 800a976:	b00d      	add	sp, #52	; 0x34
 800a978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800a97a:	482b      	ldr	r0, [pc, #172]	; (800aa28 <LoRaMacInitialization+0x3a8>)
 800a97c:	f001 fa1e 	bl	800bdbc <LoRaMacCryptoInit>
 800a980:	2800      	cmp	r0, #0
 800a982:	d1f6      	bne.n	800a972 <LoRaMacInitialization+0x2f2>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800a984:	4829      	ldr	r0, [pc, #164]	; (800aa2c <LoRaMacInitialization+0x3ac>)
 800a986:	f000 ff0d 	bl	800b7a4 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a98a:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d1f1      	bne.n	800a974 <LoRaMacInitialization+0x2f4>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a990:	59a0      	ldr	r0, [r4, r6]
 800a992:	3050      	adds	r0, #80	; 0x50
 800a994:	f001 fa74 	bl	800be80 <LoRaMacCryptoSetMulticastReference>
 800a998:	1e05      	subs	r5, r0, #0
 800a99a:	d1ea      	bne.n	800a972 <LoRaMacInitialization+0x2f2>
    srand1( Radio.Random( ) );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	4798      	blx	r3
 800a9a2:	f002 fce5 	bl	800d370 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800a9a6:	59a3      	ldr	r3, [r4, r6]
 800a9a8:	337d      	adds	r3, #125	; 0x7d
 800a9aa:	7818      	ldrb	r0, [r3, #0]
 800a9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	4798      	blx	r3
    Radio.Sleep( );
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	9302      	str	r3, [sp, #8]
 800a9b6:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	4b1d      	ldr	r3, [pc, #116]	; (800aa30 <LoRaMacInitialization+0x3b0>)
 800a9bc:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 800a9be:	e7d9      	b.n	800a974 <LoRaMacInitialization+0x2f4>
 800a9c0:	08008e77 	.word	0x08008e77
 800a9c4:	20000cd4 	.word	0x20000cd4
 800a9c8:	20000848 	.word	0x20000848
 800a9cc:	0000048c 	.word	0x0000048c
 800a9d0:	00000412 	.word	0x00000412
 800a9d4:	00000411 	.word	0x00000411
 800a9d8:	00000484 	.word	0x00000484
 800a9dc:	01000300 	.word	0x01000300
 800a9e0:	000003f6 	.word	0x000003f6
 800a9e4:	00000481 	.word	0x00000481
 800a9e8:	20000bb0 	.word	0x20000bb0
 800a9ec:	08009c9d 	.word	0x08009c9d
 800a9f0:	080096d5 	.word	0x080096d5
 800a9f4:	20000bc8 	.word	0x20000bc8
 800a9f8:	08009735 	.word	0x08009735
 800a9fc:	20000be0 	.word	0x20000be0
 800aa00:	08008ebd 	.word	0x08008ebd
 800aa04:	20000c40 	.word	0x20000c40
 800aa08:	080092f5 	.word	0x080092f5
 800aa0c:	0800929d 	.word	0x0800929d
 800aa10:	08008ddd 	.word	0x08008ddd
 800aa14:	08008f91 	.word	0x08008f91
 800aa18:	0800fc84 	.word	0x0800fc84
 800aa1c:	08008f55 	.word	0x08008f55
 800aa20:	20000b94 	.word	0x20000b94
 800aa24:	08008e63 	.word	0x08008e63
 800aa28:	08008e59 	.word	0x08008e59
 800aa2c:	08008e6d 	.word	0x08008e6d
 800aa30:	00000482 	.word	0x00000482

0800aa34 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800aa34:	23d0      	movs	r3, #208	; 0xd0
 800aa36:	2000      	movs	r0, #0
 800aa38:	4a01      	ldr	r2, [pc, #4]	; (800aa40 <LoRaMacStart+0xc>)
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800aa3e:	4770      	bx	lr
 800aa40:	20000848 	.word	0x20000848

0800aa44 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa46:	b089      	sub	sp, #36	; 0x24
 800aa48:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800aa4a:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800aa4c:	4a29      	ldr	r2, [pc, #164]	; (800aaf4 <LoRaMacQueryTxPossible+0xb0>)
 800aa4e:	4b2a      	ldr	r3, [pc, #168]	; (800aaf8 <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800aa50:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800aa52:	58d3      	ldr	r3, [r2, r3]
{
 800aa54:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 800aa5a:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800aa5c:	795a      	ldrb	r2, [r3, #5]
 800aa5e:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800aa60:	466a      	mov	r2, sp
 800aa62:	7918      	ldrb	r0, [r3, #4]
 800aa64:	3203      	adds	r2, #3
 800aa66:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800aa68:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa6a:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800aa6c:	42b9      	cmp	r1, r7
 800aa6e:	d038      	beq.n	800aae2 <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa70:	21fc      	movs	r1, #252	; 0xfc
 800aa72:	468c      	mov	ip, r1
 800aa74:	449c      	add	ip, r3
 800aa76:	4661      	mov	r1, ip
 800aa78:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800aa7a:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800aa7c:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa7e:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800aa80:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 800aa82:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800aa84:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800aa86:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aa88:	26fd      	movs	r6, #253	; 0xfd
 800aa8a:	491a      	ldr	r1, [pc, #104]	; (800aaf4 <LoRaMacQueryTxPossible+0xb0>)
 800aa8c:	00b6      	lsls	r6, r6, #2
 800aa8e:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800aa90:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aa92:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800aa94:	0019      	movs	r1, r3
 800aa96:	3184      	adds	r1, #132	; 0x84
 800aa98:	8809      	ldrh	r1, [r1, #0]
 800aa9a:	ba49      	rev16	r1, r1
 800aa9c:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800aa9e:	0019      	movs	r1, r3
 800aaa0:	31b8      	adds	r1, #184	; 0xb8
 800aaa2:	7809      	ldrb	r1, [r1, #0]
 800aaa4:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aaa6:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800aaa8:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aaaa:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800aaac:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aaae:	ab01      	add	r3, sp, #4
 800aab0:	f000 fe04 	bl	800b6bc <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800aab4:	466b      	mov	r3, sp
 800aab6:	2002      	movs	r0, #2
 800aab8:	5618      	ldrsb	r0, [r3, r0]
 800aaba:	f7fe f9e1 	bl	8008e80 <GetMaxAppPayloadWithoutFOptsLength>
 800aabe:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800aac0:	a802      	add	r0, sp, #8
 800aac2:	f000 ff3b 	bl	800b93c <LoRaMacCommandsGetSizeSerializedCmds>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d111      	bne.n	800aaee <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800aaca:	9b02      	ldr	r3, [sp, #8]
 800aacc:	2b0f      	cmp	r3, #15
 800aace:	d80a      	bhi.n	800aae6 <LoRaMacQueryTxPossible+0xa2>
 800aad0:	7862      	ldrb	r2, [r4, #1]
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d807      	bhi.n	800aae6 <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800aad6:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aad8:	18eb      	adds	r3, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800aada:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aadc:	429a      	cmp	r2, r3
 800aade:	d200      	bcs.n	800aae2 <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800aae0:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800aae2:	b009      	add	sp, #36	; 0x24
 800aae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800aae6:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800aae8:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800aaea:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800aaec:	e7f9      	b.n	800aae2 <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aaee:	2013      	movs	r0, #19
 800aaf0:	e7f7      	b.n	800aae2 <LoRaMacQueryTxPossible+0x9e>
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	20000848 	.word	0x20000848
 800aaf8:	00000484 	.word	0x00000484

0800aafc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800aafc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aafe:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab00:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800ab02:	2c00      	cmp	r4, #0
 800ab04:	d01f      	beq.n	800ab46 <LoRaMacMibGetRequestConfirm+0x4a>
    }

    switch( mibGet->Type )
 800ab06:	7820      	ldrb	r0, [r4, #0]
 800ab08:	2828      	cmp	r0, #40	; 0x28
 800ab0a:	d829      	bhi.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
 800ab0c:	f7f5 fb04 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ab10:	2a251d15 	.word	0x2a251d15
 800ab14:	2839332d 	.word	0x2839332d
 800ab18:	28282828 	.word	0x28282828
 800ab1c:	3e282828 	.word	0x3e282828
 800ab20:	58524843 	.word	0x58524843
 800ab24:	6b6e6560 	.word	0x6b6e6560
 800ab28:	817c7671 	.word	0x817c7671
 800ab2c:	95908b86 	.word	0x95908b86
 800ab30:	a9a49a9f 	.word	0xa9a49a9f
 800ab34:	28b5ddae 	.word	0x28b5ddae
 800ab38:	e2          	.byte	0xe2
 800ab39:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800ab3a:	4a6b      	ldr	r2, [pc, #428]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab3c:	4b6b      	ldr	r3, [pc, #428]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab3e:	58d3      	ldr	r3, [r2, r3]
 800ab40:	337c      	adds	r3, #124	; 0x7c
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	7123      	strb	r3, [r4, #4]
//            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800ab46:	b004      	add	sp, #16
 800ab48:	bd70      	pop	{r4, r5, r6, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800ab4a:	4b68      	ldr	r3, [pc, #416]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab4c:	4a66      	ldr	r2, [pc, #408]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab4e:	58d2      	ldr	r2, [r2, r3]
 800ab50:	23b2      	movs	r3, #178	; 0xb2
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800ab56:	7123      	strb	r3, [r4, #4]
            break;
 800ab58:	e002      	b.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800ab5a:	f7fd fc65 	bl	8008428 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800ab5e:	6060      	str	r0, [r4, #4]
    switch( mibGet->Type )
 800ab60:	2000      	movs	r0, #0
 800ab62:	e7f0      	b.n	800ab46 <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800ab64:	f7fd fc76 	bl	8008454 <SecureElementGetJoinEui>
 800ab68:	e7f9      	b.n	800ab5e <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800ab6a:	4a5f      	ldr	r2, [pc, #380]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab6c:	4b5f      	ldr	r3, [pc, #380]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab6e:	58d3      	ldr	r3, [r2, r3]
 800ab70:	337e      	adds	r3, #126	; 0x7e
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	e7ef      	b.n	800ab56 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800ab76:	4a5c      	ldr	r2, [pc, #368]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab78:	4b5c      	ldr	r3, [pc, #368]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab7a:	58d3      	ldr	r3, [r2, r3]
 800ab7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800ab7e:	6063      	str	r3, [r4, #4]
 800ab80:	e7ee      	b.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
 800ab82:	4a59      	ldr	r2, [pc, #356]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab84:	4b59      	ldr	r3, [pc, #356]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab86:	58d3      	ldr	r3, [r2, r3]
 800ab88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab8a:	e7f8      	b.n	800ab7e <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800ab8c:	4a56      	ldr	r2, [pc, #344]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab8e:	4b57      	ldr	r3, [pc, #348]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab90:	58d3      	ldr	r3, [r2, r3]
 800ab92:	337d      	adds	r3, #125	; 0x7d
 800ab94:	e7ed      	b.n	800ab72 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ab96:	4a54      	ldr	r2, [pc, #336]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ab98:	4b54      	ldr	r3, [pc, #336]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ab9a:	58d3      	ldr	r3, [r2, r3]
 800ab9c:	33ca      	adds	r3, #202	; 0xca
 800ab9e:	e7e8      	b.n	800ab72 <LoRaMacMibGetRequestConfirm+0x76>
            getPhy.Attribute = PHY_CHANNELS;
 800aba0:	231d      	movs	r3, #29
 800aba2:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800aba4:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aba6:	4a50      	ldr	r2, [pc, #320]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800aba8:	4b50      	ldr	r3, [pc, #320]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800abaa:	58d3      	ldr	r3, [r2, r3]
 800abac:	7818      	ldrb	r0, [r3, #0]
 800abae:	f001 fba4 	bl	800c2fa <RegionGetPhyParam>
 800abb2:	e7d4      	b.n	800ab5e <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800abb4:	4a4c      	ldr	r2, [pc, #304]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800abb6:	4b4d      	ldr	r3, [pc, #308]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800abb8:	58d3      	ldr	r3, [r2, r3]
 800abba:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800abbc:	3404      	adds	r4, #4
 800abbe:	e004      	b.n	800abca <LoRaMacMibGetRequestConfirm+0xce>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800abc0:	4a49      	ldr	r2, [pc, #292]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800abc2:	4b4a      	ldr	r3, [pc, #296]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800abc4:	3404      	adds	r4, #4
 800abc6:	58d3      	ldr	r3, [r2, r3]
 800abc8:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800abca:	cb06      	ldmia	r3!, {r1, r2}
 800abcc:	c406      	stmia	r4!, {r1, r2}
            break;
 800abce:	e7c7      	b.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800abd0:	4a45      	ldr	r2, [pc, #276]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800abd2:	4b46      	ldr	r3, [pc, #280]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800abd4:	58d3      	ldr	r3, [r2, r3]
 800abd6:	33b0      	adds	r3, #176	; 0xb0
 800abd8:	e7f0      	b.n	800abbc <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800abda:	4a43      	ldr	r2, [pc, #268]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800abdc:	4b43      	ldr	r3, [pc, #268]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800abde:	3404      	adds	r4, #4
 800abe0:	58d3      	ldr	r3, [r2, r3]
 800abe2:	3330      	adds	r3, #48	; 0x30
 800abe4:	e7f1      	b.n	800abca <LoRaMacMibGetRequestConfirm+0xce>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800abe6:	231b      	movs	r3, #27
 800abe8:	a902      	add	r1, sp, #8
 800abea:	e7db      	b.n	800aba4 <LoRaMacMibGetRequestConfirm+0xa8>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800abec:	231a      	movs	r3, #26
 800abee:	a902      	add	r1, sp, #8
 800abf0:	e7d8      	b.n	800aba4 <LoRaMacMibGetRequestConfirm+0xa8>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800abf2:	4a3d      	ldr	r2, [pc, #244]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800abf4:	4b3d      	ldr	r3, [pc, #244]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800abf6:	58d3      	ldr	r3, [r2, r3]
 800abf8:	33a4      	adds	r3, #164	; 0xa4
 800abfa:	e7ba      	b.n	800ab72 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800abfc:	4a3a      	ldr	r2, [pc, #232]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800abfe:	4b3b      	ldr	r3, [pc, #236]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac00:	58d3      	ldr	r3, [r2, r3]
 800ac02:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	e7ba      	b.n	800ab7e <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800ac08:	4a37      	ldr	r2, [pc, #220]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac0a:	4b38      	ldr	r3, [pc, #224]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac0c:	58d3      	ldr	r3, [r2, r3]
 800ac0e:	3394      	adds	r3, #148	; 0x94
 800ac10:	e7f8      	b.n	800ac04 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800ac12:	4a35      	ldr	r2, [pc, #212]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac14:	4b35      	ldr	r3, [pc, #212]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac16:	58d3      	ldr	r3, [r2, r3]
 800ac18:	3398      	adds	r3, #152	; 0x98
 800ac1a:	e7f3      	b.n	800ac04 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800ac1c:	4a32      	ldr	r2, [pc, #200]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac1e:	4b33      	ldr	r3, [pc, #204]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac20:	58d3      	ldr	r3, [r2, r3]
 800ac22:	339c      	adds	r3, #156	; 0x9c
 800ac24:	e7ee      	b.n	800ac04 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800ac26:	4a30      	ldr	r2, [pc, #192]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac28:	4b30      	ldr	r3, [pc, #192]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac2a:	58d3      	ldr	r3, [r2, r3]
 800ac2c:	33a0      	adds	r3, #160	; 0xa0
 800ac2e:	e7e9      	b.n	800ac04 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ac30:	4a2d      	ldr	r2, [pc, #180]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac32:	4b2e      	ldr	r3, [pc, #184]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac34:	58d3      	ldr	r3, [r2, r3]
 800ac36:	795b      	ldrb	r3, [r3, #5]
 800ac38:	e78d      	b.n	800ab56 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ac3a:	4a2b      	ldr	r2, [pc, #172]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac3c:	4b2b      	ldr	r3, [pc, #172]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac3e:	58d3      	ldr	r3, [r2, r3]
 800ac40:	3385      	adds	r3, #133	; 0x85
 800ac42:	e796      	b.n	800ab72 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ac44:	4a28      	ldr	r2, [pc, #160]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac46:	4b29      	ldr	r3, [pc, #164]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac48:	58d3      	ldr	r3, [r2, r3]
 800ac4a:	791b      	ldrb	r3, [r3, #4]
 800ac4c:	e783      	b.n	800ab56 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ac4e:	4a26      	ldr	r2, [pc, #152]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac50:	4b26      	ldr	r3, [pc, #152]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac52:	58d3      	ldr	r3, [r2, r3]
 800ac54:	3384      	adds	r3, #132	; 0x84
 800ac56:	e78c      	b.n	800ab72 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800ac58:	4a23      	ldr	r2, [pc, #140]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac5a:	4b24      	ldr	r3, [pc, #144]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac5c:	58d3      	ldr	r3, [r2, r3]
 800ac5e:	3388      	adds	r3, #136	; 0x88
 800ac60:	e7d0      	b.n	800ac04 <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800ac62:	4a21      	ldr	r2, [pc, #132]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac64:	4b21      	ldr	r3, [pc, #132]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac66:	58d3      	ldr	r3, [r2, r3]
 800ac68:	338c      	adds	r3, #140	; 0x8c
 800ac6a:	e782      	b.n	800ab72 <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ac6c:	4a1e      	ldr	r2, [pc, #120]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac6e:	4b1f      	ldr	r3, [pc, #124]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac70:	58d3      	ldr	r3, [r2, r3]
 800ac72:	33c0      	adds	r3, #192	; 0xc0
 800ac74:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800ac76:	6063      	str	r3, [r4, #4]
 800ac78:	e772      	b.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
    Contexts.MacNvmCtx = &NvmMacCtx;
 800ac7a:	4e1d      	ldr	r6, [pc, #116]	; (800acf0 <LoRaMacMibGetRequestConfirm+0x1f4>)
 800ac7c:	4b1d      	ldr	r3, [pc, #116]	; (800acf4 <LoRaMacMibGetRequestConfirm+0x1f8>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ac7e:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 800ac80:	6033      	str	r3, [r6, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800ac82:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ac84:	3014      	adds	r0, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	6073      	str	r3, [r6, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ac8a:	f001 f8d3 	bl	800be34 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800ac8e:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ac90:	4a15      	ldr	r2, [pc, #84]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac92:	4b16      	ldr	r3, [pc, #88]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac94:	a902      	add	r1, sp, #8
 800ac96:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ac98:	6130      	str	r0, [r6, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ac9a:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 800ac9c:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ac9e:	f001 fb46 	bl	800c32e <RegionGetNvmCtx>
 800aca2:	60b0      	str	r0, [r6, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800aca4:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800aca6:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800aca8:	301c      	adds	r0, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800acaa:	60f3      	str	r3, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800acac:	f7fd fae0 	bl	8008270 <SecureElementGetNvmCtx>
 800acb0:	61b0      	str	r0, [r6, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800acb2:	0030      	movs	r0, r6
 800acb4:	3024      	adds	r0, #36	; 0x24
 800acb6:	f000 fd95 	bl	800b7e4 <LoRaMacCommandsGetNvmCtx>
 800acba:	6230      	str	r0, [r6, #32]
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800acbc:	0030      	movs	r0, r6
 800acbe:	3034      	adds	r0, #52	; 0x34
 800acc0:	f000 fede 	bl	800ba80 <LoRaMacConfirmQueueGetNvmCtx>
 800acc4:	6330      	str	r0, [r6, #48]	; 0x30
            mibGet->Param.Contexts = GetCtxs( );
 800acc6:	6066      	str	r6, [r4, #4]
            break;
 800acc8:	e74a      	b.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800acca:	4a07      	ldr	r2, [pc, #28]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800accc:	4b07      	ldr	r3, [pc, #28]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acce:	58d3      	ldr	r3, [r2, r3]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	e7d0      	b.n	800ac76 <LoRaMacMibGetRequestConfirm+0x17a>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 800acd4:	4a04      	ldr	r2, [pc, #16]	; (800ace8 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800acd6:	4b05      	ldr	r3, [pc, #20]	; (800acec <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acd8:	58d3      	ldr	r3, [r2, r3]
 800acda:	33fc      	adds	r3, #252	; 0xfc
 800acdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acde:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800ace0:	f001 fbd0 	bl	800c484 <RegionGetVersion>
 800ace4:	60a0      	str	r0, [r4, #8]
            break;
 800ace6:	e73b      	b.n	800ab60 <LoRaMacMibGetRequestConfirm+0x64>
 800ace8:	20000848 	.word	0x20000848
 800acec:	00000484 	.word	0x00000484
 800acf0:	2000080c 	.word	0x2000080c
 800acf4:	20000cd4 	.word	0x20000cd4

0800acf8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800acfc:	2603      	movs	r6, #3
{
 800acfe:	b086      	sub	sp, #24
    if( mibSet == NULL )
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d068      	beq.n	800add6 <LoRaMacMibSetRequestConfirm+0xde>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ad04:	23d0      	movs	r3, #208	; 0xd0
 800ad06:	4db7      	ldr	r5, [pc, #732]	; (800afe4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800ad0c:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ad0e:	079a      	lsls	r2, r3, #30
 800ad10:	d461      	bmi.n	800add6 <LoRaMacMibSetRequestConfirm+0xde>
    }

    switch( mibSet->Type )
 800ad12:	7800      	ldrb	r0, [r0, #0]
 800ad14:	2827      	cmp	r0, #39	; 0x27
 800ad16:	d838      	bhi.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
 800ad18:	f7f5 fa12 	bl	8000140 <__gnu_thumb1_case_uhi>
 800ad1c:	00310028 	.word	0x00310028
 800ad20:	00400039 	.word	0x00400039
 800ad24:	004a0044 	.word	0x004a0044
 800ad28:	0054004f 	.word	0x0054004f
 800ad2c:	00650060 	.word	0x00650060
 800ad30:	006f006a 	.word	0x006f006a
 800ad34:	00790074 	.word	0x00790074
 800ad38:	0083007e 	.word	0x0083007e
 800ad3c:	00370090 	.word	0x00370090
 800ad40:	00b60094 	.word	0x00b60094
 800ad44:	00f500cb 	.word	0x00f500cb
 800ad48:	010a0118 	.word	0x010a0118
 800ad4c:	0126011d 	.word	0x0126011d
 800ad50:	0130012c 	.word	0x0130012c
 800ad54:	01380134 	.word	0x01380134
 800ad58:	014e013c 	.word	0x014e013c
 800ad5c:	016a017c 	.word	0x016a017c
 800ad60:	0194018e 	.word	0x0194018e
 800ad64:	01a0019a 	.word	0x01a0019a
 800ad68:	01f201a5 	.word	0x01f201a5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ad6c:	7920      	ldrb	r0, [r4, #4]
 800ad6e:	f7fe fa25 	bl	80091bc <SwitchClass>
 800ad72:	0006      	movs	r6, r0
        {
//            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    EventRegionNvmCtxChanged( );
 800ad74:	f7fe f86b 	bl	8008e4e <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800ad78:	f7fe f864 	bl	8008e44 <EventMacNvmCtxChanged>
    return status;
 800ad7c:	e02b      	b.n	800add6 <LoRaMacMibSetRequestConfirm+0xde>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800ad7e:	4b9a      	ldr	r3, [pc, #616]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ad80:	7921      	ldrb	r1, [r4, #4]
 800ad82:	58ea      	ldr	r2, [r5, r3]
 800ad84:	23b2      	movs	r3, #178	; 0xb2
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	54d1      	strb	r1, [r2, r3]
    switch( mibSet->Type )
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	e7f2      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ad8e:	6860      	ldr	r0, [r4, #4]
 800ad90:	f7fd fb38 	bl	8008404 <SecureElementSetDevEui>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d0f8      	beq.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad98:	2603      	movs	r6, #3
 800ad9a:	e7eb      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ad9c:	6860      	ldr	r0, [r4, #4]
 800ad9e:	f7fd fb47 	bl	8008430 <SecureElementSetJoinEui>
 800ada2:	e7f7      	b.n	800ad94 <LoRaMacMibSetRequestConfirm+0x9c>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800ada4:	4b90      	ldr	r3, [pc, #576]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ada6:	58eb      	ldr	r3, [r5, r3]
 800ada8:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800adaa:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	e7ec      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800adb0:	4b8d      	ldr	r3, [pc, #564]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800adb2:	6862      	ldr	r2, [r4, #4]
 800adb4:	58eb      	ldr	r3, [r5, r3]
 800adb6:	649a      	str	r2, [r3, #72]	; 0x48
 800adb8:	e7e7      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800adba:	4b8b      	ldr	r3, [pc, #556]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800adbc:	6862      	ldr	r2, [r4, #4]
 800adbe:	58eb      	ldr	r3, [r5, r3]
 800adc0:	64da      	str	r2, [r3, #76]	; 0x4c
 800adc2:	e7e2      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.AppKey != NULL )
 800adc4:	6861      	ldr	r1, [r4, #4]
 800adc6:	2900      	cmp	r1, #0
 800adc8:	d0e6      	beq.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800adca:	2000      	movs	r0, #0
 800adcc:	f001 f97e 	bl	800c0cc <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800add0:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800add2:	2800      	cmp	r0, #0
 800add4:	d0d9      	beq.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
}
 800add6:	0030      	movs	r0, r6
 800add8:	b006      	add	sp, #24
 800adda:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 800addc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800adde:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800ade0:	2900      	cmp	r1, #0
 800ade2:	d1f3      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800ade4:	e7d8      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NwkSKey != NULL )
 800ade6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800ade8:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800adea:	2900      	cmp	r1, #0
 800adec:	d1ee      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800adee:	e7d3      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AppSKey != NULL )
 800adf0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800adf2:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800adf4:	2900      	cmp	r1, #0
 800adf6:	d1e9      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800adf8:	e7ce      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McKEKey != NULL )
 800adfa:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800adfc:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800adfe:	2900      	cmp	r1, #0
 800ae00:	d1e4      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800ae02:	e7c9      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McKey0 != NULL )
 800ae04:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ae06:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	d1df      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800ae0c:	e7c4      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ae0e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ae10:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800ae12:	2900      	cmp	r1, #0
 800ae14:	d1da      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800ae16:	e7bf      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ae18:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ae1a:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d1d5      	bne.n	800adcc <LoRaMacMibSetRequestConfirm+0xd4>
 800ae20:	e7ba      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ae22:	4b71      	ldr	r3, [pc, #452]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ae24:	7920      	ldrb	r0, [r4, #4]
 800ae26:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ae28:	4c70      	ldr	r4, [pc, #448]	; (800afec <LoRaMacMibSetRequestConfirm+0x2f4>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ae2a:	337d      	adds	r3, #125	; 0x7d
 800ae2c:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800ae2e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	4798      	blx	r3
            Radio.Sleep( );
 800ae34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	4798      	blx	r3
            break;
 800ae3a:	e7a6      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ae3c:	4b6a      	ldr	r3, [pc, #424]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ae3e:	58eb      	ldr	r3, [r5, r3]
 800ae40:	33ca      	adds	r3, #202	; 0xca
 800ae42:	e7b2      	b.n	800adaa <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ae44:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae46:	4e68      	ldr	r6, [pc, #416]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ae48:	aa02      	add	r2, sp, #8
 800ae4a:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae4c:	59ab      	ldr	r3, [r5, r6]
 800ae4e:	a902      	add	r1, sp, #8
 800ae50:	001a      	movs	r2, r3
 800ae52:	32b9      	adds	r2, #185	; 0xb9
 800ae54:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800ae56:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae58:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800ae5a:	2207      	movs	r2, #7
 800ae5c:	a903      	add	r1, sp, #12
 800ae5e:	f001 fa70 	bl	800c342 <RegionVerify>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d098      	beq.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ae66:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800ae68:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ae6a:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800ae6c:	59ab      	ldr	r3, [r5, r6]
 800ae6e:	a903      	add	r1, sp, #12
 800ae70:	7818      	ldrb	r0, [r3, #0]
 800ae72:	f001 fa66 	bl	800c342 <RegionVerify>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d100      	bne.n	800ae7c <LoRaMacMibSetRequestConfirm+0x184>
 800ae7a:	e78d      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ae7c:	59ab      	ldr	r3, [r5, r6]
 800ae7e:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ae80:	3404      	adds	r4, #4
 800ae82:	cc06      	ldmia	r4!, {r1, r2}
 800ae84:	c306      	stmia	r3!, {r1, r2}
 800ae86:	e780      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ae88:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae8a:	4e57      	ldr	r6, [pc, #348]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ae8c:	aa02      	add	r2, sp, #8
 800ae8e:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae90:	59ab      	ldr	r3, [r5, r6]
 800ae92:	a902      	add	r1, sp, #8
 800ae94:	001a      	movs	r2, r3
 800ae96:	32b9      	adds	r2, #185	; 0xb9
 800ae98:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ae9a:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ae9c:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800ae9e:	2207      	movs	r2, #7
 800aea0:	a903      	add	r1, sp, #12
 800aea2:	f001 fa4e 	bl	800c342 <RegionVerify>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d100      	bne.n	800aeac <LoRaMacMibSetRequestConfirm+0x1b4>
 800aeaa:	e775      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800aeac:	59ab      	ldr	r3, [r5, r6]
 800aeae:	3328      	adds	r3, #40	; 0x28
 800aeb0:	e7e6      	b.n	800ae80 <LoRaMacMibSetRequestConfirm+0x188>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800aeb2:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800aeb4:	4e4c      	ldr	r6, [pc, #304]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800aeb6:	aa02      	add	r2, sp, #8
 800aeb8:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800aeba:	59ab      	ldr	r3, [r5, r6]
 800aebc:	a902      	add	r1, sp, #8
 800aebe:	001a      	movs	r2, r3
 800aec0:	32b9      	adds	r2, #185	; 0xb9
 800aec2:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800aec4:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800aec6:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800aec8:	2207      	movs	r2, #7
 800aeca:	a903      	add	r1, sp, #12
 800aecc:	f001 fa39 	bl	800c342 <RegionVerify>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d100      	bne.n	800aed6 <LoRaMacMibSetRequestConfirm+0x1de>
 800aed4:	e760      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800aed6:	59ab      	ldr	r3, [r5, r6]
 800aed8:	3404      	adds	r4, #4
 800aeda:	001a      	movs	r2, r3
 800aedc:	32b0      	adds	r2, #176	; 0xb0
 800aede:	cc03      	ldmia	r4!, {r0, r1}
 800aee0:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800aee2:	3a3c      	subs	r2, #60	; 0x3c
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	2a02      	cmp	r2, #2
 800aee8:	d000      	beq.n	800aeec <LoRaMacMibSetRequestConfirm+0x1f4>
 800aeea:	e74e      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
 800aeec:	3263      	adds	r2, #99	; 0x63
 800aeee:	32ff      	adds	r2, #255	; 0xff
 800aef0:	5c9b      	ldrb	r3, [r3, r2]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d100      	bne.n	800aef8 <LoRaMacMibSetRequestConfirm+0x200>
 800aef6:	e748      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
                    Radio.Sleep( );
 800aef8:	4b3c      	ldr	r3, [pc, #240]	; (800afec <LoRaMacMibSetRequestConfirm+0x2f4>)
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800af00:	f7fe f922 	bl	8009148 <OpenContinuousRxCWindow>
 800af04:	e741      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800af06:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af08:	4e37      	ldr	r6, [pc, #220]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800af0a:	aa02      	add	r2, sp, #8
 800af0c:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af0e:	59ab      	ldr	r3, [r5, r6]
 800af10:	a902      	add	r1, sp, #8
 800af12:	001a      	movs	r2, r3
 800af14:	32b9      	adds	r2, #185	; 0xb9
 800af16:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800af18:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af1a:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800af1c:	2207      	movs	r2, #7
 800af1e:	a903      	add	r1, sp, #12
 800af20:	f001 fa0f 	bl	800c342 <RegionVerify>
 800af24:	2800      	cmp	r0, #0
 800af26:	d100      	bne.n	800af2a <LoRaMacMibSetRequestConfirm+0x232>
 800af28:	e736      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800af2a:	59ab      	ldr	r3, [r5, r6]
 800af2c:	3330      	adds	r3, #48	; 0x30
 800af2e:	e7a7      	b.n	800ae80 <LoRaMacMibSetRequestConfirm+0x188>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800af30:	6863      	ldr	r3, [r4, #4]
 800af32:	a904      	add	r1, sp, #16
 800af34:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800af36:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800af38:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800af3a:	4b2b      	ldr	r3, [pc, #172]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af3c:	58eb      	ldr	r3, [r5, r3]
 800af3e:	7818      	ldrb	r0, [r3, #0]
 800af40:	f001 fa0b 	bl	800c35a <RegionChanMaskSet>
 800af44:	2800      	cmp	r0, #0
 800af46:	d000      	beq.n	800af4a <LoRaMacMibSetRequestConfirm+0x252>
 800af48:	e71f      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
 800af4a:	e725      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800af4c:	6863      	ldr	r3, [r4, #4]
 800af4e:	a904      	add	r1, sp, #16
 800af50:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800af52:	2300      	movs	r3, #0
 800af54:	e7f0      	b.n	800af38 <LoRaMacMibSetRequestConfirm+0x240>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800af56:	7922      	ldrb	r2, [r4, #4]
 800af58:	1e53      	subs	r3, r2, #1
 800af5a:	2b0e      	cmp	r3, #14
 800af5c:	d900      	bls.n	800af60 <LoRaMacMibSetRequestConfirm+0x268>
 800af5e:	e71b      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800af60:	4b21      	ldr	r3, [pc, #132]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af62:	58eb      	ldr	r3, [r5, r3]
 800af64:	33a4      	adds	r3, #164	; 0xa4
 800af66:	e721      	b.n	800adac <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800af68:	4b1f      	ldr	r3, [pc, #124]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af6a:	58eb      	ldr	r3, [r5, r3]
 800af6c:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800af6e:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800af70:	601a      	str	r2, [r3, #0]
            break;
 800af72:	e70a      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800af74:	4b1c      	ldr	r3, [pc, #112]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af76:	58eb      	ldr	r3, [r5, r3]
 800af78:	3394      	adds	r3, #148	; 0x94
 800af7a:	e7f8      	b.n	800af6e <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800af7c:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af7e:	58eb      	ldr	r3, [r5, r3]
 800af80:	3398      	adds	r3, #152	; 0x98
 800af82:	e7f4      	b.n	800af6e <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800af84:	4b18      	ldr	r3, [pc, #96]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af86:	58eb      	ldr	r3, [r5, r3]
 800af88:	339c      	adds	r3, #156	; 0x9c
 800af8a:	e7f0      	b.n	800af6e <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800af8c:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af8e:	58eb      	ldr	r3, [r5, r3]
 800af90:	33a0      	adds	r3, #160	; 0xa0
 800af92:	e7ec      	b.n	800af6e <LoRaMacMibSetRequestConfirm+0x276>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800af94:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800af96:	4c14      	ldr	r4, [pc, #80]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800af98:	aa02      	add	r2, sp, #8
 800af9a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800af9c:	592b      	ldr	r3, [r5, r4]
 800af9e:	2206      	movs	r2, #6
 800afa0:	7818      	ldrb	r0, [r3, #0]
 800afa2:	a903      	add	r1, sp, #12
 800afa4:	f001 f9cd 	bl	800c342 <RegionVerify>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d100      	bne.n	800afae <LoRaMacMibSetRequestConfirm+0x2b6>
 800afac:	e6f4      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800afae:	aa02      	add	r2, sp, #8
 800afb0:	592b      	ldr	r3, [r5, r4]
 800afb2:	7912      	ldrb	r2, [r2, #4]
 800afb4:	715a      	strb	r2, [r3, #5]
 800afb6:	e6e8      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800afb8:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800afba:	4c0b      	ldr	r4, [pc, #44]	; (800afe8 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800afbc:	ae03      	add	r6, sp, #12
 800afbe:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800afc0:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800afc2:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800afc4:	001a      	movs	r2, r3
 800afc6:	32b8      	adds	r2, #184	; 0xb8
 800afc8:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800afca:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800afcc:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800afce:	2205      	movs	r2, #5
 800afd0:	f001 f9b7 	bl	800c342 <RegionVerify>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d100      	bne.n	800afda <LoRaMacMibSetRequestConfirm+0x2e2>
 800afd8:	e6de      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800afda:	592b      	ldr	r3, [r5, r4]
 800afdc:	7832      	ldrb	r2, [r6, #0]
 800afde:	3385      	adds	r3, #133	; 0x85
 800afe0:	e6e4      	b.n	800adac <LoRaMacMibSetRequestConfirm+0xb4>
 800afe2:	46c0      	nop			; (mov r8, r8)
 800afe4:	20000848 	.word	0x20000848
 800afe8:	00000484 	.word	0x00000484
 800afec:	0800fc84 	.word	0x0800fc84
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800aff0:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800aff2:	4c4a      	ldr	r4, [pc, #296]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800aff4:	aa02      	add	r2, sp, #8
 800aff6:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800aff8:	592b      	ldr	r3, [r5, r4]
 800affa:	220a      	movs	r2, #10
 800affc:	7818      	ldrb	r0, [r3, #0]
 800affe:	a903      	add	r1, sp, #12
 800b000:	f001 f99f 	bl	800c342 <RegionVerify>
 800b004:	2800      	cmp	r0, #0
 800b006:	d100      	bne.n	800b00a <LoRaMacMibSetRequestConfirm+0x312>
 800b008:	e6c6      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800b00a:	aa02      	add	r2, sp, #8
 800b00c:	592b      	ldr	r3, [r5, r4]
 800b00e:	7912      	ldrb	r2, [r2, #4]
 800b010:	711a      	strb	r2, [r3, #4]
 800b012:	e6ba      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b014:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b016:	4c41      	ldr	r4, [pc, #260]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b018:	aa02      	add	r2, sp, #8
 800b01a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b01c:	592b      	ldr	r3, [r5, r4]
 800b01e:	2209      	movs	r2, #9
 800b020:	7818      	ldrb	r0, [r3, #0]
 800b022:	a903      	add	r1, sp, #12
 800b024:	f001 f98d 	bl	800c342 <RegionVerify>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d100      	bne.n	800b02e <LoRaMacMibSetRequestConfirm+0x336>
 800b02c:	e6b4      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800b02e:	592b      	ldr	r3, [r5, r4]
 800b030:	aa02      	add	r2, sp, #8
 800b032:	7912      	ldrb	r2, [r2, #4]
 800b034:	3384      	adds	r3, #132	; 0x84
 800b036:	e6b9      	b.n	800adac <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b038:	4b38      	ldr	r3, [pc, #224]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
 800b03a:	6862      	ldr	r2, [r4, #4]
 800b03c:	58eb      	ldr	r3, [r5, r3]
 800b03e:	609a      	str	r2, [r3, #8]
 800b040:	3388      	adds	r3, #136	; 0x88
 800b042:	e795      	b.n	800af70 <LoRaMacMibSetRequestConfirm+0x278>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b044:	4b35      	ldr	r3, [pc, #212]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
 800b046:	7922      	ldrb	r2, [r4, #4]
 800b048:	58eb      	ldr	r3, [r5, r3]
 800b04a:	731a      	strb	r2, [r3, #12]
 800b04c:	338c      	adds	r3, #140	; 0x8c
 800b04e:	e6ad      	b.n	800adac <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b050:	4b32      	ldr	r3, [pc, #200]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
 800b052:	6862      	ldr	r2, [r4, #4]
 800b054:	58eb      	ldr	r3, [r5, r3]
 800b056:	33c0      	adds	r3, #192	; 0xc0
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	e696      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b05c:	4b2f      	ldr	r3, [pc, #188]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
 800b05e:	6862      	ldr	r2, [r4, #4]
 800b060:	58eb      	ldr	r3, [r5, r3]
 800b062:	641a      	str	r2, [r3, #64]	; 0x40
 800b064:	e691      	b.n	800ad8a <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.Contexts != 0 )
 800b066:	6864      	ldr	r4, [r4, #4]
 800b068:	2c00      	cmp	r4, #0
 800b06a:	d100      	bne.n	800b06e <LoRaMacMibSetRequestConfirm+0x376>
 800b06c:	e694      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_BUSY;
 800b06e:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b070:	42b3      	cmp	r3, r6
 800b072:	d000      	beq.n	800b076 <LoRaMacMibSetRequestConfirm+0x37e>
 800b074:	e67e      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
    if( contexts->MacNvmCtx != NULL )
 800b076:	6821      	ldr	r1, [r4, #0]
 800b078:	2900      	cmp	r1, #0
 800b07a:	d004      	beq.n	800b086 <LoRaMacMibSetRequestConfirm+0x38e>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800b07c:	6863      	ldr	r3, [r4, #4]
 800b07e:	4828      	ldr	r0, [pc, #160]	; (800b120 <LoRaMacMibSetRequestConfirm+0x428>)
 800b080:	b29a      	uxth	r2, r3
 800b082:	f002 f997 	bl	800d3b4 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800b086:	2303      	movs	r3, #3
 800b088:	a904      	add	r1, sp, #16
 800b08a:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800b08c:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b08e:	4e23      	ldr	r6, [pc, #140]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
    params.NvmCtx = contexts->RegionNvmCtx;
 800b090:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b092:	59ab      	ldr	r3, [r5, r6]
 800b094:	7818      	ldrb	r0, [r3, #0]
 800b096:	f001 f943 	bl	800c320 <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b09a:	4b22      	ldr	r3, [pc, #136]	; (800b124 <LoRaMacMibSetRequestConfirm+0x42c>)
 800b09c:	5cea      	ldrb	r2, [r5, r3]
 800b09e:	3b35      	subs	r3, #53	; 0x35
 800b0a0:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800b0a2:	59ab      	ldr	r3, [r5, r6]
 800b0a4:	001a      	movs	r2, r3
 800b0a6:	32b0      	adds	r2, #176	; 0xb0
 800b0a8:	6811      	ldr	r1, [r2, #0]
 800b0aa:	22f9      	movs	r2, #249	; 0xf9
 800b0ac:	0092      	lsls	r2, r2, #2
 800b0ae:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b0b0:	001a      	movs	r2, r3
 800b0b2:	32b9      	adds	r2, #185	; 0xb9
 800b0b4:	7811      	ldrb	r1, [r2, #0]
 800b0b6:	22fc      	movs	r2, #252	; 0xfc
 800b0b8:	0092      	lsls	r2, r2, #2
 800b0ba:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b0bc:	33ca      	adds	r3, #202	; 0xca
 800b0be:	781a      	ldrb	r2, [r3, #0]
 800b0c0:	4b19      	ldr	r3, [pc, #100]	; (800b128 <LoRaMacMibSetRequestConfirm+0x430>)
 800b0c2:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <LoRaMacMibSetRequestConfirm+0x434>)
 800b0c6:	4a1a      	ldr	r2, [pc, #104]	; (800b130 <LoRaMacMibSetRequestConfirm+0x438>)
 800b0c8:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800b0ca:	69a0      	ldr	r0, [r4, #24]
 800b0cc:	f7fd f8c2 	bl	8008254 <SecureElementRestoreNvmCtx>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d001      	beq.n	800b0d8 <LoRaMacMibSetRequestConfirm+0x3e0>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b0d4:	2611      	movs	r6, #17
 800b0d6:	e64d      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800b0d8:	6920      	ldr	r0, [r4, #16]
 800b0da:	f000 fe9d 	bl	800be18 <LoRaMacCryptoRestoreNvmCtx>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d1f8      	bne.n	800b0d4 <LoRaMacMibSetRequestConfirm+0x3dc>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800b0e2:	6a20      	ldr	r0, [r4, #32]
 800b0e4:	f000 fb70 	bl	800b7c8 <LoRaMacCommandsRestoreNvmCtx>
 800b0e8:	1e06      	subs	r6, r0, #0
 800b0ea:	d107      	bne.n	800b0fc <LoRaMacMibSetRequestConfirm+0x404>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800b0ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b0ee:	f000 fcb9 	bl	800ba64 <LoRaMacConfirmQueueRestoreNvmCtx>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d000      	beq.n	800b0f8 <LoRaMacMibSetRequestConfirm+0x400>
 800b0f6:	e63d      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800b0f8:	3615      	adds	r6, #21
 800b0fa:	e63b      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b0fc:	2613      	movs	r6, #19
 800b0fe:	e639      	b.n	800ad74 <LoRaMacMibSetRequestConfirm+0x7c>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b100:	79a3      	ldrb	r3, [r4, #6]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d900      	bls.n	800b108 <LoRaMacMibSetRequestConfirm+0x410>
 800b106:	e647      	b.n	800ad98 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b108:	4b04      	ldr	r3, [pc, #16]	; (800b11c <LoRaMacMibSetRequestConfirm+0x424>)
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b10e:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b110:	33fc      	adds	r3, #252	; 0xfc
 800b112:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b114:	f000 fe78 	bl	800be08 <LoRaMacCryptoSetLrWanVersion>
 800b118:	e65a      	b.n	800add0 <LoRaMacMibSetRequestConfirm+0xd8>
 800b11a:	46c0      	nop			; (mov r8, r8)
 800b11c:	00000484 	.word	0x00000484
 800b120:	20000cd4 	.word	0x20000cd4
 800b124:	00000415 	.word	0x00000415
 800b128:	000003f1 	.word	0x000003f1
 800b12c:	000003f2 	.word	0x000003f2
 800b130:	00000201 	.word	0x00000201

0800b134 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b134:	2300      	movs	r3, #0
{
 800b136:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b138:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b13a:	aa02      	add	r2, sp, #8
{
 800b13c:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b13e:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b140:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800b142:	4298      	cmp	r0, r3
 800b144:	d004      	beq.n	800b150 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800b146:	f7fe fddb 	bl	8009d00 <LoRaMacIsBusy>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d003      	beq.n	800b156 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b14e:	2501      	movs	r5, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800b150:	0028      	movs	r0, r5
 800b152:	b009      	add	sp, #36	; 0x24
 800b154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b156:	f000 fd4b 	bl	800bbf0 <LoRaMacConfirmQueueIsFull>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d1f7      	bne.n	800b14e <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b15e:	f000 fd41 	bl	800bbe4 <LoRaMacConfirmQueueGetCnt>
 800b162:	1e01      	subs	r1, r0, #0
 800b164:	d103      	bne.n	800b16e <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b166:	2214      	movs	r2, #20
 800b168:	4863      	ldr	r0, [pc, #396]	; (800b2f8 <LoRaMacMlmeRequest+0x1c4>)
 800b16a:	f002 f938 	bl	800d3de <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b16e:	2201      	movs	r2, #1
 800b170:	4c62      	ldr	r4, [pc, #392]	; (800b2fc <LoRaMacMlmeRequest+0x1c8>)
 800b172:	4b63      	ldr	r3, [pc, #396]	; (800b300 <LoRaMacMlmeRequest+0x1cc>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b174:	4863      	ldr	r0, [pc, #396]	; (800b304 <LoRaMacMlmeRequest+0x1d0>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b176:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b178:	2304      	movs	r3, #4
 800b17a:	5c21      	ldrb	r1, [r4, r0]
 800b17c:	430b      	orrs	r3, r1
 800b17e:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 800b180:	ab03      	add	r3, sp, #12
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b182:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800b184:	2200      	movs	r2, #0
    queueElement.Request = mlmeRequest->Type;
 800b186:	7830      	ldrb	r0, [r6, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 800b188:	70da      	strb	r2, [r3, #3]
    queueElement.Request = mlmeRequest->Type;
 800b18a:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 800b18c:	3801      	subs	r0, #1
 800b18e:	280d      	cmp	r0, #13
 800b190:	d900      	bls.n	800b194 <LoRaMacMlmeRequest+0x60>
 800b192:	e0a8      	b.n	800b2e6 <LoRaMacMlmeRequest+0x1b2>
 800b194:	f7f4 ffc0 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b198:	5ca7a707 	.word	0x5ca7a707
 800b19c:	a7a78866 	.word	0xa7a78866
 800b1a0:	a7a791a7 	.word	0xa7a791a7
 800b1a4:	a395      	.short	0xa395
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b1a6:	23d0      	movs	r3, #208	; 0xd0
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	58e2      	ldr	r2, [r4, r3]
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	0015      	movs	r5, r2
 800b1b0:	401d      	ands	r5, r3
 800b1b2:	421a      	tst	r2, r3
 800b1b4:	d1cb      	bne.n	800b14e <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800b1b6:	f7fd ff55 	bl	8009064 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	4b52      	ldr	r3, [pc, #328]	; (800b308 <LoRaMacMlmeRequest+0x1d4>)
 800b1be:	5671      	ldrsb	r1, [r6, r1]
 800b1c0:	58e7      	ldr	r7, [r4, r3]
 800b1c2:	002a      	movs	r2, r5
 800b1c4:	7838      	ldrb	r0, [r7, #0]
 800b1c6:	f001 f92e 	bl	800c426 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b1ca:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b1cc:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b1ce:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b1d0:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800b1d2:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b1d4:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800b1d6:	f7fd fff1 	bl	80091bc <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b1da:	0023      	movs	r3, r4
 800b1dc:	33ff      	adds	r3, #255	; 0xff
 800b1de:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b1e0:	0023      	movs	r3, r4
 800b1e2:	4a4a      	ldr	r2, [pc, #296]	; (800b30c <LoRaMacMlmeRequest+0x1d8>)
 800b1e4:	33fc      	adds	r3, #252	; 0xfc
 800b1e6:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b1e8:	0023      	movs	r3, r4
 800b1ea:	22ff      	movs	r2, #255	; 0xff
 800b1ec:	33fe      	adds	r3, #254	; 0xfe
 800b1ee:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b1f0:	f7fd f930 	bl	8008454 <SecureElementGetJoinEui>
 800b1f4:	2208      	movs	r2, #8
 800b1f6:	0001      	movs	r1, r0
 800b1f8:	4845      	ldr	r0, [pc, #276]	; (800b310 <LoRaMacMlmeRequest+0x1dc>)
 800b1fa:	f002 f8db 	bl	800d3b4 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b1fe:	f7fd f913 	bl	8008428 <SecureElementGetDevEui>
 800b202:	2208      	movs	r2, #8
 800b204:	0001      	movs	r1, r0
 800b206:	4843      	ldr	r0, [pc, #268]	; (800b314 <LoRaMacMlmeRequest+0x1e0>)
 800b208:	f002 f8d4 	bl	800d3b4 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800b20c:	0028      	movs	r0, r5
 800b20e:	f7fe f89d 	bl	800934c <ScheduleTx>
 800b212:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800b214:	d009      	beq.n	800b22a <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b216:	2104      	movs	r1, #4
 800b218:	4b3b      	ldr	r3, [pc, #236]	; (800b308 <LoRaMacMlmeRequest+0x1d4>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	58e7      	ldr	r7, [r4, r3]
 800b21e:	5671      	ldrsb	r1, [r6, r1]
 800b220:	7838      	ldrb	r0, [r7, #0]
 800b222:	f001 f900 	bl	800c426 <RegionAlternateDr>
 800b226:	3785      	adds	r7, #133	; 0x85
 800b228:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b22a:	2391      	movs	r3, #145	; 0x91
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	58e3      	ldr	r3, [r4, r3]
 800b230:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 800b232:	2d00      	cmp	r5, #0
 800b234:	d059      	beq.n	800b2ea <LoRaMacMlmeRequest+0x1b6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b236:	f000 fcd5 	bl	800bbe4 <LoRaMacConfirmQueueGetCnt>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d000      	beq.n	800b240 <LoRaMacMlmeRequest+0x10c>
 800b23e:	e787      	b.n	800b150 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b240:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800b242:	4b35      	ldr	r3, [pc, #212]	; (800b318 <LoRaMacMlmeRequest+0x1e4>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b244:	492f      	ldr	r1, [pc, #188]	; (800b304 <LoRaMacMlmeRequest+0x1d0>)
            MacCtx.NodeAckRequested = false;
 800b246:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b248:	5c63      	ldrb	r3, [r4, r1]
 800b24a:	4393      	bics	r3, r2
 800b24c:	5463      	strb	r3, [r4, r1]
 800b24e:	e77f      	b.n	800b150 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b250:	2200      	movs	r2, #0
 800b252:	2002      	movs	r0, #2
 800b254:	a902      	add	r1, sp, #8
 800b256:	f000 facb 	bl	800b7f0 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b25a:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d1e4      	bne.n	800b22a <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b260:	2500      	movs	r5, #0
            break;
 800b262:	e7e2      	b.n	800b22a <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 800b264:	4b2d      	ldr	r3, [pc, #180]	; (800b31c <LoRaMacMlmeRequest+0x1e8>)
 800b266:	a904      	add	r1, sp, #16
 800b268:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b26a:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 800b26c:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b26e:	4b26      	ldr	r3, [pc, #152]	; (800b308 <LoRaMacMlmeRequest+0x1d4>)
 800b270:	58e3      	ldr	r3, [r4, r3]
 800b272:	0018      	movs	r0, r3
 800b274:	3085      	adds	r0, #133	; 0x85
 800b276:	7800      	ldrb	r0, [r0, #0]
 800b278:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b27a:	0018      	movs	r0, r3
 800b27c:	3084      	adds	r0, #132	; 0x84
 800b27e:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 800b280:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b282:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800b284:	0018      	movs	r0, r3
 800b286:	30bc      	adds	r0, #188	; 0xbc
 800b288:	6800      	ldr	r0, [r0, #0]
 800b28a:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b28c:	0018      	movs	r0, r3
 800b28e:	30c0      	adds	r0, #192	; 0xc0
 800b290:	6800      	ldr	r0, [r0, #0]
 800b292:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800b294:	7818      	ldrb	r0, [r3, #0]
 800b296:	f001 f8e0 	bl	800c45a <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b29a:	22d0      	movs	r2, #208	; 0xd0
 800b29c:	2302      	movs	r3, #2
 800b29e:	0092      	lsls	r2, r2, #2
 800b2a0:	58a1      	ldr	r1, [r4, r2]
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	50a3      	str	r3, [r4, r2]
 800b2a6:	e7db      	b.n	800b260 <LoRaMacMlmeRequest+0x12c>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b2a8:	210c      	movs	r1, #12
 800b2aa:	4b1d      	ldr	r3, [pc, #116]	; (800b320 <LoRaMacMlmeRequest+0x1ec>)
 800b2ac:	88b2      	ldrh	r2, [r6, #4]
 800b2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b0:	5671      	ldrsb	r1, [r6, r1]
 800b2b2:	68b0      	ldr	r0, [r6, #8]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b2b8:	e7ef      	b.n	800b29a <LoRaMacMlmeRequest+0x166>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	200d      	movs	r0, #13
 800b2be:	a902      	add	r1, sp, #8
 800b2c0:	e7c9      	b.n	800b256 <LoRaMacMlmeRequest+0x122>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b2c2:	4b11      	ldr	r3, [pc, #68]	; (800b308 <LoRaMacMlmeRequest+0x1d4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b2c4:	2502      	movs	r5, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b2c6:	58e3      	ldr	r3, [r4, r3]
 800b2c8:	337c      	adds	r3, #124	; 0x7c
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1ac      	bne.n	800b22a <LoRaMacMlmeRequest+0xf6>
                macCmdPayload[0] = value;
 800b2d0:	7933      	ldrb	r3, [r6, #4]
 800b2d2:	aa02      	add	r2, sp, #8
 800b2d4:	7013      	strb	r3, [r2, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b2d6:	2010      	movs	r0, #16
 800b2d8:	2201      	movs	r2, #1
 800b2da:	a902      	add	r1, sp, #8
 800b2dc:	e7bb      	b.n	800b256 <LoRaMacMlmeRequest+0x122>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2012      	movs	r0, #18
 800b2e2:	a902      	add	r1, sp, #8
 800b2e4:	e7b7      	b.n	800b256 <LoRaMacMlmeRequest+0x122>
    switch( mlmeRequest->Type )
 800b2e6:	2502      	movs	r5, #2
 800b2e8:	e79f      	b.n	800b22a <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b2ea:	a803      	add	r0, sp, #12
 800b2ec:	f000 fbce 	bl	800ba8c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800b2f0:	f7fd fda8 	bl	8008e44 <EventMacNvmCtxChanged>
 800b2f4:	e72c      	b.n	800b150 <LoRaMacMlmeRequest+0x1c>
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	20000c98 	.word	0x20000c98
 800b2fc:	20000848 	.word	0x20000848
 800b300:	00000451 	.word	0x00000451
 800b304:	00000481 	.word	0x00000481
 800b308:	00000484 	.word	0x00000484
 800b30c:	2000084a 	.word	0x2000084a
 800b310:	20000956 	.word	0x20000956
 800b314:	2000095e 	.word	0x2000095e
 800b318:	00000414 	.word	0x00000414
 800b31c:	00000415 	.word	0x00000415
 800b320:	0800fc84 	.word	0x0800fc84

0800b324 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b324:	2300      	movs	r3, #0
 800b326:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b328:	b095      	sub	sp, #84	; 0x54
 800b32a:	0007      	movs	r7, r0
 800b32c:	9107      	str	r1, [sp, #28]
 800b32e:	9301      	str	r3, [sp, #4]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b330:	4298      	cmp	r0, r3
 800b332:	d103      	bne.n	800b33c <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b334:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b336:	0020      	movs	r0, r4
 800b338:	b015      	add	sp, #84	; 0x54
 800b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800b33c:	f7fe fce0 	bl	8009d00 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800b340:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 800b342:	1e05      	subs	r5, r0, #0
 800b344:	d1f7      	bne.n	800b336 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800b346:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b348:	0001      	movs	r1, r0
    macHdr.Value = 0;
 800b34a:	7318      	strb	r0, [r3, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b34c:	2214      	movs	r2, #20
 800b34e:	48c2      	ldr	r0, [pc, #776]	; (800b658 <LoRaMacMcpsRequest+0x334>)
 800b350:	f002 f845 	bl	800d3de <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b354:	4ec1      	ldr	r6, [pc, #772]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b356:	4bc2      	ldr	r3, [pc, #776]	; (800b660 <LoRaMacMcpsRequest+0x33c>)
 800b358:	54f4      	strb	r4, [r6, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b35a:	4bc2      	ldr	r3, [pc, #776]	; (800b664 <LoRaMacMcpsRequest+0x340>)
 800b35c:	54f4      	strb	r4, [r6, r3]
    switch( mcpsRequest->Type )
 800b35e:	783b      	ldrb	r3, [r7, #0]
 800b360:	42a3      	cmp	r3, r4
 800b362:	d100      	bne.n	800b366 <LoRaMacMcpsRequest+0x42>
 800b364:	e0bf      	b.n	800b4e6 <LoRaMacMcpsRequest+0x1c2>
 800b366:	2b03      	cmp	r3, #3
 800b368:	d100      	bne.n	800b36c <LoRaMacMcpsRequest+0x48>
 800b36a:	e0c5      	b.n	800b4f8 <LoRaMacMcpsRequest+0x1d4>
 800b36c:	9504      	str	r5, [sp, #16]
 800b36e:	9505      	str	r5, [sp, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10e      	bne.n	800b392 <LoRaMacMcpsRequest+0x6e>
            MacCtx.AckTimeoutRetries = 1;
 800b374:	4bbc      	ldr	r3, [pc, #752]	; (800b668 <LoRaMacMcpsRequest+0x344>)
 800b376:	54f4      	strb	r4, [r6, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b378:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b37a:	466a      	mov	r2, sp
 800b37c:	7313      	strb	r3, [r2, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b37e:	793b      	ldrb	r3, [r7, #4]
            readyToSend = true;
 800b380:	2501      	movs	r5, #1
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b382:	9305      	str	r3, [sp, #20]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b388:	89bb      	ldrh	r3, [r7, #12]
 800b38a:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b38c:	230e      	movs	r3, #14
 800b38e:	56fb      	ldrsb	r3, [r7, r3]
 800b390:	9304      	str	r3, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b392:	2402      	movs	r4, #2
 800b394:	ab08      	add	r3, sp, #32
 800b396:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b398:	4bb4      	ldr	r3, [pc, #720]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b39a:	a908      	add	r1, sp, #32
 800b39c:	58f3      	ldr	r3, [r6, r3]
 800b39e:	001a      	movs	r2, r3
 800b3a0:	32b8      	adds	r2, #184	; 0xb8
 800b3a2:	7812      	ldrb	r2, [r2, #0]
 800b3a4:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b3a6:	7818      	ldrb	r0, [r3, #0]
 800b3a8:	a90d      	add	r1, sp, #52	; 0x34
 800b3aa:	f000 ffa6 	bl	800c2fa <RegionGetPhyParam>
 800b3ae:	9008      	str	r0, [sp, #32]
    if( readyToSend == true )
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	d100      	bne.n	800b3b6 <LoRaMacMcpsRequest+0x92>
 800b3b4:	e091      	b.n	800b4da <LoRaMacMcpsRequest+0x1b6>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800b3b6:	4bad      	ldr	r3, [pc, #692]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b3b8:	58f3      	ldr	r3, [r6, r3]
 800b3ba:	001a      	movs	r2, r3
 800b3bc:	327e      	adds	r2, #126	; 0x7e
 800b3be:	7812      	ldrb	r2, [r2, #0]
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	d119      	bne.n	800b3f8 <LoRaMacMcpsRequest+0xd4>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b3c4:	9904      	ldr	r1, [sp, #16]
 800b3c6:	1c02      	adds	r2, r0, #0
 800b3c8:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800b3ca:	ac09      	add	r4, sp, #36	; 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b3cc:	4288      	cmp	r0, r1
 800b3ce:	da01      	bge.n	800b3d4 <LoRaMacMcpsRequest+0xb0>
 800b3d0:	466a      	mov	r2, sp
 800b3d2:	7c12      	ldrb	r2, [r2, #16]
            verify.DatarateParams.Datarate = datarate;
 800b3d4:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b3d6:	001a      	movs	r2, r3
 800b3d8:	32b8      	adds	r2, #184	; 0xb8
 800b3da:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b3dc:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b3de:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b3e0:	7818      	ldrb	r0, [r3, #0]
 800b3e2:	2205      	movs	r2, #5
 800b3e4:	f000 ffad 	bl	800c342 <RegionVerify>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d0a3      	beq.n	800b334 <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b3ec:	4a9f      	ldr	r2, [pc, #636]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b3ee:	4b9b      	ldr	r3, [pc, #620]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b3f0:	589b      	ldr	r3, [r3, r2]
 800b3f2:	7822      	ldrb	r2, [r4, #0]
 800b3f4:	3385      	adds	r3, #133	; 0x85
 800b3f6:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b3f8:	4b98      	ldr	r3, [pc, #608]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b3fa:	4a9c      	ldr	r2, [pc, #624]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b3fc:	5899      	ldr	r1, [r3, r2]
 800b3fe:	000a      	movs	r2, r1
 800b400:	3284      	adds	r2, #132	; 0x84
 800b402:	8812      	ldrh	r2, [r2, #0]
 800b404:	1d0b      	adds	r3, r1, #4
 800b406:	9204      	str	r2, [sp, #16]
 800b408:	ba52      	rev16	r2, r2
 800b40a:	4694      	mov	ip, r2
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b40c:	22b2      	movs	r2, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b40e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b410:	0052      	lsls	r2, r2, #1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b412:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b414:	5c8a      	ldrb	r2, [r1, r2]
 800b416:	2a00      	cmp	r2, #0
 800b418:	d100      	bne.n	800b41c <LoRaMacMcpsRequest+0xf8>
 800b41a:	e110      	b.n	800b63e <LoRaMacMcpsRequest+0x31a>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800b41c:	000a      	movs	r2, r1
 800b41e:	32c8      	adds	r2, #200	; 0xc8
 800b420:	7812      	ldrb	r2, [r2, #0]
 800b422:	2a00      	cmp	r2, #0
 800b424:	d102      	bne.n	800b42c <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800b426:	0008      	movs	r0, r1
 800b428:	30fc      	adds	r0, #252	; 0xfc
 800b42a:	6582      	str	r2, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800b42c:	000a      	movs	r2, r1
 800b42e:	327e      	adds	r2, #126	; 0x7e
 800b430:	7816      	ldrb	r6, [r2, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b432:	224c      	movs	r2, #76	; 0x4c
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b434:	a80f      	add	r0, sp, #60	; 0x3c
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b436:	32ff      	adds	r2, #255	; 0xff
 800b438:	5c8a      	ldrb	r2, [r1, r2]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b43a:	6083      	str	r3, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b43c:	23fd      	movs	r3, #253	; 0xfd
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b43e:	9206      	str	r2, [sp, #24]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b440:	000a      	movs	r2, r1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b442:	4c86      	ldr	r4, [pc, #536]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	58e3      	ldr	r3, [r4, r3]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b448:	32fc      	adds	r2, #252	; 0xfc
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b44a:	9312      	str	r3, [sp, #72]	; 0x48
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b44c:	4663      	mov	r3, ip
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b44e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b450:	8203      	strh	r3, [r0, #16]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b452:	920f      	str	r2, [sp, #60]	; 0x3c
    adrNext.UpdateChanMask = true;
 800b454:	2201      	movs	r2, #1
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b456:	000b      	movs	r3, r1
    adrNext.UpdateChanMask = true;
 800b458:	7102      	strb	r2, [r0, #4]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b45a:	000a      	movs	r2, r1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b45c:	7146      	strb	r6, [r0, #5]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b45e:	33b8      	adds	r3, #184	; 0xb8
 800b460:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b462:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b464:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b466:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b468:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b46a:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b46c:	ab0a      	add	r3, sp, #40	; 0x28
 800b46e:	f000 f925 	bl	800b6bc <LoRaMacAdrCalcNext>
    fCtrl.Value = 0;
 800b472:	2500      	movs	r5, #0
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b474:	9b06      	ldr	r3, [sp, #24]
 800b476:	0180      	lsls	r0, r0, #6
 800b478:	015b      	lsls	r3, r3, #5
 800b47a:	4303      	orrs	r3, r0
 800b47c:	01f6      	lsls	r6, r6, #7
 800b47e:	4333      	orrs	r3, r6
 800b480:	9306      	str	r3, [sp, #24]
    MacCtx.NodeAckRequested = false;
 800b482:	4b7b      	ldr	r3, [pc, #492]	; (800b670 <LoRaMacMcpsRequest+0x34c>)
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b484:	9902      	ldr	r1, [sp, #8]
    MacCtx.NodeAckRequested = false;
 800b486:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 800b488:	9b02      	ldr	r3, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b48a:	487a      	ldr	r0, [pc, #488]	; (800b674 <LoRaMacMcpsRequest+0x350>)
        fBufferSize = 0;
 800b48c:	1e5a      	subs	r2, r3, #1
 800b48e:	4193      	sbcs	r3, r2
 800b490:	9a01      	ldr	r2, [sp, #4]
 800b492:	425b      	negs	r3, r3
 800b494:	401a      	ands	r2, r3
 800b496:	9201      	str	r2, [sp, #4]
    MacCtx.PktBufferLen = 0;
 800b498:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 800b49a:	950b      	str	r5, [sp, #44]	; 0x2c
    size_t macCmdsSize = 0;
 800b49c:	950c      	str	r5, [sp, #48]	; 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b49e:	f001 ff89 	bl	800d3b4 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b4a2:	466b      	mov	r3, sp
 800b4a4:	791a      	ldrb	r2, [r3, #4]
 800b4a6:	4b74      	ldr	r3, [pc, #464]	; (800b678 <LoRaMacMcpsRequest+0x354>)
 800b4a8:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b4aa:	466b      	mov	r3, sp
 800b4ac:	7b19      	ldrb	r1, [r3, #12]
    switch( macHdr->Bits.MType )
 800b4ae:	9b03      	ldr	r3, [sp, #12]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b4b0:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800b4b2:	061b      	lsls	r3, r3, #24
 800b4b4:	0f5b      	lsrs	r3, r3, #29
 800b4b6:	2b04      	cmp	r3, #4
 800b4b8:	d02e      	beq.n	800b518 <LoRaMacMcpsRequest+0x1f4>
 800b4ba:	2b07      	cmp	r3, #7
 800b4bc:	d100      	bne.n	800b4c0 <LoRaMacMcpsRequest+0x19c>
 800b4be:	e0ac      	b.n	800b61a <LoRaMacMcpsRequest+0x2f6>
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d02c      	beq.n	800b51e <LoRaMacMcpsRequest+0x1fa>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b4c4:	2402      	movs	r4, #2
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800b4c6:	4a69      	ldr	r2, [pc, #420]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b4c8:	4b64      	ldr	r3, [pc, #400]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b4ca:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800b4cc:	9a04      	ldr	r2, [sp, #16]
 800b4ce:	3384      	adds	r3, #132	; 0x84
 800b4d0:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4b61      	ldr	r3, [pc, #388]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b4d6:	4966      	ldr	r1, [pc, #408]	; (800b670 <LoRaMacMcpsRequest+0x34c>)
 800b4d8:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b4da:	2391      	movs	r3, #145	; 0x91
 800b4dc:	4a5f      	ldr	r2, [pc, #380]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	58d3      	ldr	r3, [r2, r3]
 800b4e2:	613b      	str	r3, [r7, #16]
    return status;
 800b4e4:	e727      	b.n	800b336 <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b4e6:	7bfa      	ldrb	r2, [r7, #15]
 800b4e8:	1c13      	adds	r3, r2, #0
 800b4ea:	2a08      	cmp	r2, #8
 800b4ec:	d900      	bls.n	800b4f0 <LoRaMacMcpsRequest+0x1cc>
 800b4ee:	2308      	movs	r3, #8
 800b4f0:	4a5d      	ldr	r2, [pc, #372]	; (800b668 <LoRaMacMcpsRequest+0x344>)
 800b4f2:	54b3      	strb	r3, [r6, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b4f4:	2380      	movs	r3, #128	; 0x80
 800b4f6:	e740      	b.n	800b37a <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800b4f8:	4b5b      	ldr	r3, [pc, #364]	; (800b668 <LoRaMacMcpsRequest+0x344>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b4fa:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 800b4fc:	54f4      	strb	r4, [r6, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b4fe:	23e0      	movs	r3, #224	; 0xe0
 800b500:	7313      	strb	r3, [r2, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b502:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 800b504:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b506:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b508:	893b      	ldrh	r3, [r7, #8]
 800b50a:	9301      	str	r3, [sp, #4]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b50c:	230a      	movs	r3, #10
 800b50e:	56fb      	ldrsb	r3, [r7, r3]
 800b510:	9304      	str	r3, [sp, #16]
    uint8_t fPort = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	9305      	str	r3, [sp, #20]
            break;
 800b516:	e73c      	b.n	800b392 <LoRaMacMcpsRequest+0x6e>
            MacCtx.NodeAckRequested = true;
 800b518:	2001      	movs	r0, #1
 800b51a:	4b55      	ldr	r3, [pc, #340]	; (800b670 <LoRaMacMcpsRequest+0x34c>)
 800b51c:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b51e:	0025      	movs	r5, r4
 800b520:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b522:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b524:	35ff      	adds	r5, #255	; 0xff
 800b526:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b528:	4b54      	ldr	r3, [pc, #336]	; (800b67c <LoRaMacMcpsRequest+0x358>)
 800b52a:	36fc      	adds	r6, #252	; 0xfc
 800b52c:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b52e:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b530:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b532:	9905      	ldr	r1, [sp, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b534:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b536:	3329      	adds	r3, #41	; 0x29
 800b538:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b53a:	4b4c      	ldr	r3, [pc, #304]	; (800b66c <LoRaMacMcpsRequest+0x348>)
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b53c:	a80b      	add	r0, sp, #44	; 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b53e:	58e3      	ldr	r3, [r4, r3]
 800b540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b542:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b544:	9b06      	ldr	r3, [sp, #24]
 800b546:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b548:	2398      	movs	r3, #152	; 0x98
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b54e:	4b49      	ldr	r3, [pc, #292]	; (800b674 <LoRaMacMcpsRequest+0x350>)
 800b550:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b552:	f000 fc75 	bl	800be40 <LoRaMacCryptoGetFCntUp>
 800b556:	2800      	cmp	r0, #0
 800b558:	d16f      	bne.n	800b63a <LoRaMacMcpsRequest+0x316>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b55a:	0022      	movs	r2, r4
 800b55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b55e:	32fe      	adds	r2, #254	; 0xfe
 800b560:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800b562:	2288      	movs	r2, #136	; 0x88
 800b564:	00d2      	lsls	r2, r2, #3
 800b566:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b568:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b56a:	a80c      	add	r0, sp, #48	; 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b56c:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b56e:	f000 f9e5 	bl	800b93c <LoRaMacCommandsGetSizeSerializedCmds>
 800b572:	2800      	cmp	r0, #0
 800b574:	d139      	bne.n	800b5ea <LoRaMacMcpsRequest+0x2c6>
            if( macCmdsSize > 0 )
 800b576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01a      	beq.n	800b5b2 <LoRaMacMcpsRequest+0x28e>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800b57c:	2085      	movs	r0, #133	; 0x85
 800b57e:	4b3b      	ldr	r3, [pc, #236]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b580:	58e3      	ldr	r3, [r4, r3]
 800b582:	9301      	str	r3, [sp, #4]
 800b584:	5618      	ldrsb	r0, [r3, r0]
 800b586:	f7fd fc7b 	bl	8008e80 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b58a:	4b3b      	ldr	r3, [pc, #236]	; (800b678 <LoRaMacMcpsRequest+0x354>)
 800b58c:	5ce3      	ldrb	r3, [r4, r3]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d02d      	beq.n	800b5ee <LoRaMacMcpsRequest+0x2ca>
 800b592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b594:	2b0f      	cmp	r3, #15
 800b596:	d820      	bhi.n	800b5da <LoRaMacMcpsRequest+0x2b6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b598:	200f      	movs	r0, #15
 800b59a:	4a39      	ldr	r2, [pc, #228]	; (800b680 <LoRaMacMcpsRequest+0x35c>)
 800b59c:	a90c      	add	r1, sp, #48	; 0x30
 800b59e:	f000 f9d9 	bl	800b954 <LoRaMacCommandsSerializeCmds>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d121      	bne.n	800b5ea <LoRaMacMcpsRequest+0x2c6>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b5a6:	260f      	movs	r6, #15
 800b5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5aa:	401e      	ands	r6, r3
 800b5ac:	9b06      	ldr	r3, [sp, #24]
 800b5ae:	4333      	orrs	r3, r6
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b5b0:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 800b5b2:	9807      	ldr	r0, [sp, #28]
 800b5b4:	f7fd feca 	bl	800934c <ScheduleTx>
 800b5b8:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800b5ba:	d184      	bne.n	800b4c6 <LoRaMacMcpsRequest+0x1a2>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800b5bc:	224c      	movs	r2, #76	; 0x4c
 800b5be:	4d27      	ldr	r5, [pc, #156]	; (800b65c <LoRaMacMcpsRequest+0x338>)
 800b5c0:	4b2a      	ldr	r3, [pc, #168]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b5c2:	32ff      	adds	r2, #255	; 0xff
 800b5c4:	58eb      	ldr	r3, [r5, r3]
 800b5c6:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800b5c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b5ce:	f000 f989 	bl	800b8e4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b5d2:	1e04      	subs	r4, r0, #0
 800b5d4:	d035      	beq.n	800b642 <LoRaMacMcpsRequest+0x31e>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b5d6:	2413      	movs	r4, #19
 800b5d8:	e77b      	b.n	800b4d2 <LoRaMacMcpsRequest+0x1ae>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b5da:	4b24      	ldr	r3, [pc, #144]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b5dc:	a90c      	add	r1, sp, #48	; 0x30
 800b5de:	58e2      	ldr	r2, [r4, r3]
 800b5e0:	32cb      	adds	r2, #203	; 0xcb
 800b5e2:	f000 f9b7 	bl	800b954 <LoRaMacCommandsSerializeCmds>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d0e3      	beq.n	800b5b2 <LoRaMacMcpsRequest+0x28e>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b5ea:	2413      	movs	r4, #19
 800b5ec:	e76b      	b.n	800b4c6 <LoRaMacMcpsRequest+0x1a2>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b5ee:	4d1f      	ldr	r5, [pc, #124]	; (800b66c <LoRaMacMcpsRequest+0x348>)
 800b5f0:	a90c      	add	r1, sp, #48	; 0x30
 800b5f2:	5963      	ldr	r3, [r4, r5]
 800b5f4:	001a      	movs	r2, r3
 800b5f6:	32cb      	adds	r2, #203	; 0xcb
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	f000 f9ab 	bl	800b954 <LoRaMacCommandsSerializeCmds>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d1f3      	bne.n	800b5ea <LoRaMacMcpsRequest+0x2c6>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b602:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b604:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800b60a:	5963      	ldr	r3, [r4, r5]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b60c:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	33cb      	adds	r3, #203	; 0xcb
 800b612:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b616:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b618:	e7cb      	b.n	800b5b2 <LoRaMacMcpsRequest+0x28e>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b61a:	9b02      	ldr	r3, [sp, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d0c8      	beq.n	800b5b2 <LoRaMacMcpsRequest+0x28e>
 800b620:	2a00      	cmp	r2, #0
 800b622:	d0c6      	beq.n	800b5b2 <LoRaMacMcpsRequest+0x28e>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b624:	466b      	mov	r3, sp
 800b626:	9902      	ldr	r1, [sp, #8]
 800b628:	791a      	ldrb	r2, [r3, #4]
 800b62a:	4816      	ldr	r0, [pc, #88]	; (800b684 <LoRaMacMcpsRequest+0x360>)
 800b62c:	f001 fec2 	bl	800d3b4 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b630:	4b11      	ldr	r3, [pc, #68]	; (800b678 <LoRaMacMcpsRequest+0x354>)
 800b632:	5ce3      	ldrb	r3, [r4, r3]
 800b634:	3301      	adds	r3, #1
 800b636:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b638:	e7bb      	b.n	800b5b2 <LoRaMacMcpsRequest+0x28e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b63a:	2412      	movs	r4, #18
 800b63c:	e743      	b.n	800b4c6 <LoRaMacMcpsRequest+0x1a2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b63e:	2407      	movs	r4, #7
 800b640:	e747      	b.n	800b4d2 <LoRaMacMcpsRequest+0x1ae>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b642:	783a      	ldrb	r2, [r7, #0]
 800b644:	4b10      	ldr	r3, [pc, #64]	; (800b688 <LoRaMacMcpsRequest+0x364>)
 800b646:	54ea      	strb	r2, [r5, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b648:	2301      	movs	r3, #1
 800b64a:	4a10      	ldr	r2, [pc, #64]	; (800b68c <LoRaMacMcpsRequest+0x368>)
 800b64c:	5ca9      	ldrb	r1, [r5, r2]
 800b64e:	430b      	orrs	r3, r1
 800b650:	54ab      	strb	r3, [r5, r2]
            EventMacNvmCtxChanged( );
 800b652:	f7fd fbf7 	bl	8008e44 <EventMacNvmCtxChanged>
 800b656:	e740      	b.n	800b4da <LoRaMacMcpsRequest+0x1b6>
 800b658:	20000c84 	.word	0x20000c84
 800b65c:	20000848 	.word	0x20000848
 800b660:	0000043d 	.word	0x0000043d
 800b664:	00000412 	.word	0x00000412
 800b668:	00000411 	.word	0x00000411
 800b66c:	00000484 	.word	0x00000484
 800b670:	00000414 	.word	0x00000414
 800b674:	20000980 	.word	0x20000980
 800b678:	00000237 	.word	0x00000237
 800b67c:	2000084a 	.word	0x2000084a
 800b680:	20000960 	.word	0x20000960
 800b684:	2000084b 	.word	0x2000084b
 800b688:	0000043c 	.word	0x0000043c
 800b68c:	00000481 	.word	0x00000481

0800b690 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b690:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b692:	4e08      	ldr	r6, [pc, #32]	; (800b6b4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b694:	4d08      	ldr	r5, [pc, #32]	; (800b6b8 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800b696:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b698:	5973      	ldr	r3, [r6, r5]
{
 800b69a:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800b69c:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b69e:	220f      	movs	r2, #15
 800b6a0:	7818      	ldrb	r0, [r3, #0]
 800b6a2:	f000 fe4e 	bl	800c342 <RegionVerify>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d002      	beq.n	800b6b0 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800b6aa:	5973      	ldr	r3, [r6, r5]
 800b6ac:	33c9      	adds	r3, #201	; 0xc9
 800b6ae:	701c      	strb	r4, [r3, #0]
    }
}
 800b6b0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	20000848 	.word	0x20000848
 800b6b8:	00000484 	.word	0x00000484

0800b6bc <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800b6be:	2500      	movs	r5, #0
{
 800b6c0:	b08d      	sub	sp, #52	; 0x34
 800b6c2:	9104      	str	r1, [sp, #16]
 800b6c4:	9205      	str	r2, [sp, #20]
 800b6c6:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800b6c8:	7883      	ldrb	r3, [r0, #2]
{
 800b6ca:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800b6cc:	42ab      	cmp	r3, r5
 800b6ce:	d12b      	bne.n	800b728 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800b6d0:	2310      	movs	r3, #16
 800b6d2:	56c3      	ldrsb	r3, [r0, r3]
 800b6d4:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b6d6:	2311      	movs	r3, #17
 800b6d8:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800b6da:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b6dc:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800b6de:	6883      	ldr	r3, [r0, #8]
 800b6e0:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800b6e2:	7945      	ldrb	r5, [r0, #5]
 800b6e4:	2d00      	cmp	r5, #0
 800b6e6:	d01a      	beq.n	800b71e <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	aa06      	add	r2, sp, #24
 800b6ec:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b6ee:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b6f0:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b6f2:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b6f4:	7cc0      	ldrb	r0, [r0, #19]
 800b6f6:	f000 fe00 	bl	800c2fa <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800b6fa:	b243      	sxtb	r3, r0
 800b6fc:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b6fe:	466b      	mov	r3, sp
 800b700:	9a02      	ldr	r2, [sp, #8]
 800b702:	791f      	ldrb	r7, [r3, #4]
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	4293      	cmp	r3, r2
 800b708:	da01      	bge.n	800b70e <LoRaMacAdrCalcNext+0x52>
 800b70a:	466b      	mov	r3, sp
 800b70c:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b712:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800b714:	4293      	cmp	r3, r2
 800b716:	dc0a      	bgt.n	800b72e <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800b71c:	2500      	movs	r5, #0
    *drOut = datarate;
 800b71e:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800b720:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800b722:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800b724:	9b05      	ldr	r3, [sp, #20]
 800b726:	701a      	strb	r2, [r3, #0]
}
 800b728:	0028      	movs	r0, r5
 800b72a:	b00d      	add	sp, #52	; 0x34
 800b72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b72e:	2500      	movs	r5, #0
 800b730:	89a1      	ldrh	r1, [r4, #12]
 800b732:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b734:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b736:	428a      	cmp	r2, r1
 800b738:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b73a:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b73c:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b73e:	429a      	cmp	r2, r3
 800b740:	d3ed      	bcc.n	800b71e <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b742:	2308      	movs	r3, #8
 800b744:	ae08      	add	r6, sp, #32
 800b746:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b748:	0031      	movs	r1, r6
 800b74a:	7ce0      	ldrb	r0, [r4, #19]
 800b74c:	f000 fdd5 	bl	800c2fa <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b750:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800b752:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b754:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800b756:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b758:	f7f4 fd82 	bl	8000260 <__aeabi_uidivmod>
 800b75c:	2901      	cmp	r1, #1
 800b75e:	d1de      	bne.n	800b71e <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b760:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800b762:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b764:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b766:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b768:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b76a:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b76c:	7ce0      	ldrb	r0, [r4, #19]
 800b76e:	f000 fdc4 	bl	800c2fa <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800b772:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800b774:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800b776:	42bb      	cmp	r3, r7
 800b778:	d1d1      	bne.n	800b71e <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800b77a:	7925      	ldrb	r5, [r4, #4]
 800b77c:	2d00      	cmp	r5, #0
 800b77e:	d0ce      	beq.n	800b71e <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b780:	2302      	movs	r3, #2
 800b782:	a90a      	add	r1, sp, #40	; 0x28
 800b784:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800b786:	7ce0      	ldrb	r0, [r4, #19]
 800b788:	f000 fdca 	bl	800c320 <RegionInitDefaults>
 800b78c:	e7c6      	b.n	800b71c <LoRaMacAdrCalcNext+0x60>
	...

0800b790 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800b790:	4b03      	ldr	r3, [pc, #12]	; (800b7a0 <NvmCtxCallback+0x10>)
{
 800b792:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d000      	beq.n	800b79c <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800b79a:	4798      	blx	r3
    }
}
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	20000e54 	.word	0x20000e54

0800b7a4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800b7a4:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800b7a6:	4d06      	ldr	r5, [pc, #24]	; (800b7c0 <LoRaMacCommandsInit+0x1c>)
{
 800b7a8:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800b7aa:	0028      	movs	r0, r5
 800b7ac:	22fc      	movs	r2, #252	; 0xfc
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	f001 fe15 	bl	800d3de <memset1>
    list->First = NULL;
 800b7b4:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800b7b6:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 800b7b8:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 800b7ba:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800b7bc:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	20000e58 	.word	0x20000e58
 800b7c4:	20000e54 	.word	0x20000e54

0800b7c8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800b7c8:	0001      	movs	r1, r0
 800b7ca:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b7cc:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	d004      	beq.n	800b7dc <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800b7d2:	4803      	ldr	r0, [pc, #12]	; (800b7e0 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800b7d4:	22fc      	movs	r2, #252	; 0xfc
 800b7d6:	f001 fded 	bl	800d3b4 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800b7da:	2000      	movs	r0, #0
    }
}
 800b7dc:	bd10      	pop	{r4, pc}
 800b7de:	46c0      	nop			; (mov r8, r8)
 800b7e0:	20000e58 	.word	0x20000e58

0800b7e4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800b7e4:	23fc      	movs	r3, #252	; 0xfc
 800b7e6:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800b7e8:	4800      	ldr	r0, [pc, #0]	; (800b7ec <LoRaMacCommandsGetNvmCtx+0x8>)
 800b7ea:	4770      	bx	lr
 800b7ec:	20000e58 	.word	0x20000e58

0800b7f0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800b7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f2:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b7f4:	2701      	movs	r7, #1
{
 800b7f6:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800b7f8:	2900      	cmp	r1, #0
 800b7fa:	d03b      	beq.n	800b874 <LoRaMacCommandsAddCmd+0x84>
 800b7fc:	2400      	movs	r4, #0
 800b7fe:	4b21      	ldr	r3, [pc, #132]	; (800b884 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800b800:	0122      	lsls	r2, r4, #4
 800b802:	0018      	movs	r0, r3
 800b804:	4694      	mov	ip, r2
 800b806:	001a      	movs	r2, r3
 800b808:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800b80a:	7817      	ldrb	r7, [r2, #0]
 800b80c:	2f00      	cmp	r7, #0
 800b80e:	d133      	bne.n	800b878 <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b810:	3201      	adds	r2, #1
 800b812:	4282      	cmp	r2, r0
 800b814:	d1f9      	bne.n	800b80a <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800b816:	481c      	ldr	r0, [pc, #112]	; (800b888 <LoRaMacCommandsAddCmd+0x98>)
 800b818:	6802      	ldr	r2, [r0, #0]
 800b81a:	2a00      	cmp	r2, #0
 800b81c:	d100      	bne.n	800b820 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800b81e:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800b820:	6842      	ldr	r2, [r0, #4]
 800b822:	2a00      	cmp	r2, #0
 800b824:	d000      	beq.n	800b828 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800b826:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800b828:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800b82a:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b82c:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800b82e:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800b830:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800b832:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800b834:	0123      	lsls	r3, r4, #4
 800b836:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b838:	4663      	mov	r3, ip
    element->Next = NULL;
 800b83a:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b83c:	330d      	adds	r3, #13
    element->Next = NULL;
 800b83e:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b840:	18c0      	adds	r0, r0, r3
 800b842:	b2aa      	uxth	r2, r5
 800b844:	f001 fdb6 	bl	800d3b4 <memcpy1>
    switch( cid )
 800b848:	9b01      	ldr	r3, [sp, #4]
            return true;
 800b84a:	2201      	movs	r2, #1
    switch( cid )
 800b84c:	2b05      	cmp	r3, #5
 800b84e:	d006      	beq.n	800b85e <LoRaMacCommandsAddCmd+0x6e>
 800b850:	0018      	movs	r0, r3
 800b852:	2302      	movs	r3, #2
 800b854:	3808      	subs	r0, #8
 800b856:	b2c0      	uxtb	r0, r0
 800b858:	4283      	cmp	r3, r0
 800b85a:	4176      	adcs	r6, r6
 800b85c:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800b85e:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <LoRaMacCommandsAddCmd+0x98>)
 800b860:	0124      	lsls	r4, r4, #4
 800b862:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b864:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800b866:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	3201      	adds	r2, #1
 800b86c:	1955      	adds	r5, r2, r5
 800b86e:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 800b870:	f7ff ff8e 	bl	800b790 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b874:	0038      	movs	r0, r7
 800b876:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800b878:	3401      	adds	r4, #1
 800b87a:	0003      	movs	r3, r0
 800b87c:	2c0f      	cmp	r4, #15
 800b87e:	d1bf      	bne.n	800b800 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b880:	2702      	movs	r7, #2
 800b882:	e7f7      	b.n	800b874 <LoRaMacCommandsAddCmd+0x84>
 800b884:	20000e60 	.word	0x20000e60
 800b888:	20000e58 	.word	0x20000e58

0800b88c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800b88c:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b88e:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800b890:	2800      	cmp	r0, #0
 800b892:	d023      	beq.n	800b8dc <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800b894:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <LoRaMacCommandsRemoveCmd+0x54>)
 800b896:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800b898:	4290      	cmp	r0, r2
 800b89a:	d104      	bne.n	800b8a6 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800b89c:	6802      	ldr	r2, [r0, #0]
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	e005      	b.n	800b8b0 <LoRaMacCommandsRemoveCmd+0x24>
 800b8a4:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b8a6:	2a00      	cmp	r2, #0
 800b8a8:	d002      	beq.n	800b8b0 <LoRaMacCommandsRemoveCmd+0x24>
 800b8aa:	6811      	ldr	r1, [r2, #0]
 800b8ac:	4288      	cmp	r0, r1
 800b8ae:	d1f9      	bne.n	800b8a4 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800b8b0:	6859      	ldr	r1, [r3, #4]
 800b8b2:	4288      	cmp	r0, r1
 800b8b4:	d100      	bne.n	800b8b8 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800b8b6:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800b8b8:	2a00      	cmp	r2, #0
 800b8ba:	d001      	beq.n	800b8c0 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800b8bc:	6801      	ldr	r1, [r0, #0]
 800b8be:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800b8c0:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b8c2:	33f8      	adds	r3, #248	; 0xf8
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	6881      	ldr	r1, [r0, #8]
 800b8c8:	3a01      	subs	r2, #1
 800b8ca:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800b8cc:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b8ce:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b8d0:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b8d2:	2210      	movs	r2, #16
 800b8d4:	f001 fd83 	bl	800d3de <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800b8d8:	f7ff ff5a 	bl	800b790 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8dc:	0020      	movs	r0, r4
 800b8de:	bd10      	pop	{r4, pc}
 800b8e0:	20000e58 	.word	0x20000e58

0800b8e4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800b8e4:	4b08      	ldr	r3, [pc, #32]	; (800b908 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800b8e6:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800b8e8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b8ea:	2c00      	cmp	r4, #0
 800b8ec:	d103      	bne.n	800b8f6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800b8ee:	f7ff ff4f 	bl	800b790 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8f2:	0020      	movs	r0, r4
 800b8f4:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800b8f6:	7b23      	ldrb	r3, [r4, #12]
            nexElement = curElement->Next;
 800b8f8:	6825      	ldr	r5, [r4, #0]
        if( curElement->IsSticky == false )
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800b8fe:	0020      	movs	r0, r4
 800b900:	f7ff ffc4 	bl	800b88c <LoRaMacCommandsRemoveCmd>
{
 800b904:	002c      	movs	r4, r5
 800b906:	e7f0      	b.n	800b8ea <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800b908:	20000e58 	.word	0x20000e58

0800b90c <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800b90c:	4b0a      	ldr	r3, [pc, #40]	; (800b938 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 800b90e:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800b910:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b912:	2c00      	cmp	r4, #0
 800b914:	d103      	bne.n	800b91e <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800b916:	f7ff ff3b 	bl	800b790 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b91a:	0020      	movs	r0, r4
 800b91c:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800b91e:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800b920:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 800b922:	2b05      	cmp	r3, #5
 800b924:	d002      	beq.n	800b92c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 800b926:	3b08      	subs	r3, #8
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d802      	bhi.n	800b932 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 800b92c:	0020      	movs	r0, r4
 800b92e:	f7ff ffad 	bl	800b88c <LoRaMacCommandsRemoveCmd>
{
 800b932:	002c      	movs	r4, r5
 800b934:	e7ed      	b.n	800b912 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800b936:	46c0      	nop			; (mov r8, r8)
 800b938:	20000e58 	.word	0x20000e58

0800b93c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800b93c:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b93e:	2001      	movs	r0, #1
    if( size == NULL )
 800b940:	2b00      	cmp	r3, #0
 800b942:	d004      	beq.n	800b94e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800b944:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800b946:	4a02      	ldr	r2, [pc, #8]	; (800b950 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b948:	32f8      	adds	r2, #248	; 0xf8
 800b94a:	6812      	ldr	r2, [r2, #0]
 800b94c:	601a      	str	r2, [r3, #0]
}
 800b94e:	4770      	bx	lr
 800b950:	20000e58 	.word	0x20000e58

0800b954 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b956:	000f      	movs	r7, r1
 800b958:	9001      	str	r0, [sp, #4]
 800b95a:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b95c:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b95e:	2a00      	cmp	r2, #0
 800b960:	d00a      	beq.n	800b978 <LoRaMacCommandsSerializeCmds+0x24>
 800b962:	2900      	cmp	r1, #0
 800b964:	d008      	beq.n	800b978 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 800b966:	4b13      	ldr	r3, [pc, #76]	; (800b9b4 <LoRaMacCommandsSerializeCmds+0x60>)
 800b968:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800b96a:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	d104      	bne.n	800b97a <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b970:	0038      	movs	r0, r7
 800b972:	f7ff ffe3 	bl	800b93c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b976:	2000      	movs	r0, #0
}
 800b978:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b97a:	9a01      	ldr	r2, [sp, #4]
 800b97c:	1ad1      	subs	r1, r2, r3
 800b97e:	68a2      	ldr	r2, [r4, #8]
 800b980:	3201      	adds	r2, #1
 800b982:	4291      	cmp	r1, r2
 800b984:	d30e      	bcc.n	800b9a4 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800b986:	7922      	ldrb	r2, [r4, #4]
 800b988:	1c5d      	adds	r5, r3, #1
 800b98a:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b98c:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800b98e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b990:	b29a      	uxth	r2, r3
 800b992:	1d61      	adds	r1, r4, #5
 800b994:	1970      	adds	r0, r6, r5
 800b996:	f001 fd0d 	bl	800d3b4 <memcpy1>
            itr += curElement->PayloadSize;
 800b99a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800b99c:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800b99e:	18ed      	adds	r5, r5, r3
 800b9a0:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800b9a2:	e7e3      	b.n	800b96c <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800b9a4:	0020      	movs	r0, r4
 800b9a6:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b9a8:	f7ff ff70 	bl	800b88c <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800b9ac:	2c00      	cmp	r4, #0
 800b9ae:	d1f9      	bne.n	800b9a4 <LoRaMacCommandsSerializeCmds+0x50>
 800b9b0:	e7de      	b.n	800b970 <LoRaMacCommandsSerializeCmds+0x1c>
 800b9b2:	46c0      	nop			; (mov r8, r8)
 800b9b4:	20000e58 	.word	0x20000e58

0800b9b8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800b9b8:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b9ba:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00b      	beq.n	800b9d8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800b9c0:	4a07      	ldr	r2, [pc, #28]	; (800b9e0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b9c2:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d005      	beq.n	800b9d8 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800b9cc:	7b02      	ldrb	r2, [r0, #12]
 800b9ce:	2a00      	cmp	r2, #0
 800b9d0:	d003      	beq.n	800b9da <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800b9d2:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800b9d4:	2000      	movs	r0, #0
            *cmdsPending = true;
 800b9d6:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b9d8:	4770      	bx	lr
        curElement = curElement->Next;
 800b9da:	6800      	ldr	r0, [r0, #0]
 800b9dc:	e7f4      	b.n	800b9c8 <LoRaMacCommandsStickyCmdsPending+0x10>
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	20000e58 	.word	0x20000e58

0800b9e4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b9e4:	3802      	subs	r0, #2
 800b9e6:	b2c3      	uxtb	r3, r0
{
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	2b11      	cmp	r3, #17
 800b9ec:	d801      	bhi.n	800b9f2 <LoRaMacCommandsGetCmdSize+0xe>
 800b9ee:	4a01      	ldr	r2, [pc, #4]	; (800b9f4 <LoRaMacCommandsGetCmdSize+0x10>)
 800b9f0:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b9f2:	4770      	bx	lr
 800b9f4:	0800fae7 	.word	0x0800fae7

0800b9f8 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b9f8:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800b9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <GetElement.constprop.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b9fc:	0004      	movs	r4, r0
 800b9fe:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800ba00:	6919      	ldr	r1, [r3, #16]
 800ba02:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 800ba04:	2a00      	cmp	r2, #0
 800ba06:	d010      	beq.n	800ba2a <GetElement.constprop.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba08:	000d      	movs	r5, r1
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800ba0e:	7806      	ldrb	r6, [r0, #0]
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d007      	beq.n	800ba24 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba14:	42a8      	cmp	r0, r5
 800ba16:	d106      	bne.n	800ba26 <GetElement.constprop.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800ba18:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d1f5      	bne.n	800ba0e <GetElement.constprop.0+0x16>
        return NULL;
 800ba22:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800ba26:	3004      	adds	r0, #4
 800ba28:	e7f7      	b.n	800ba1a <GetElement.constprop.0+0x22>
        return NULL;
 800ba2a:	0010      	movs	r0, r2
 800ba2c:	e7fa      	b.n	800ba24 <GetElement.constprop.0+0x2c>
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	20000f54 	.word	0x20000f54

0800ba34 <LoRaMacConfirmQueueInit>:

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800ba34:	2300      	movs	r3, #0
{
 800ba36:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800ba38:	4c08      	ldr	r4, [pc, #32]	; (800ba5c <LoRaMacConfirmQueueInit+0x28>)
{
 800ba3a:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
 800ba3c:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800ba3e:	4808      	ldr	r0, [pc, #32]	; (800ba60 <LoRaMacConfirmQueueInit+0x2c>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800ba40:	2214      	movs	r2, #20
 800ba42:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800ba44:	7503      	strb	r3, [r0, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800ba46:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800ba48:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800ba4a:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800ba4c:	f001 fcc7 	bl	800d3de <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800ba54:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ba56:	7553      	strb	r3, [r2, #21]
}
 800ba58:	bd70      	pop	{r4, r5, r6, pc}
 800ba5a:	46c0      	nop			; (mov r8, r8)
 800ba5c:	20000f54 	.word	0x20000f54
 800ba60:	20000f68 	.word	0x20000f68

0800ba64 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800ba64:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800ba66:	2000      	movs	r0, #0
{
 800ba68:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800ba6a:	4281      	cmp	r1, r0
 800ba6c:	d004      	beq.n	800ba78 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800ba6e:	4803      	ldr	r0, [pc, #12]	; (800ba7c <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800ba70:	2216      	movs	r2, #22
 800ba72:	f001 fc9f 	bl	800d3b4 <memcpy1>
        return true;
 800ba76:	2001      	movs	r0, #1
    }
}
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	46c0      	nop			; (mov r8, r8)
 800ba7c:	20000f68 	.word	0x20000f68

0800ba80 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800ba80:	2316      	movs	r3, #22
 800ba82:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 800ba84:	4800      	ldr	r0, [pc, #0]	; (800ba88 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 800ba86:	4770      	bx	lr
 800ba88:	20000f68 	.word	0x20000f68

0800ba8c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800ba8c:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800ba8e:	4d0d      	ldr	r5, [pc, #52]	; (800bac4 <LoRaMacConfirmQueueAdd+0x38>)
{
 800ba90:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800ba92:	6929      	ldr	r1, [r5, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800ba94:	2000      	movs	r0, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800ba96:	7d0c      	ldrb	r4, [r1, #20]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800ba98:	2c04      	cmp	r4, #4
 800ba9a:	d812      	bhi.n	800bac2 <LoRaMacConfirmQueueAdd+0x36>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800ba9c:	7810      	ldrb	r0, [r2, #0]
 800ba9e:	68ab      	ldr	r3, [r5, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800baa0:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800baa2:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800baa4:	7850      	ldrb	r0, [r2, #1]
 800baa6:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800baa8:	78d2      	ldrb	r2, [r2, #3]
        bufferPointer++;
 800baaa:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800baac:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800baae:	2200      	movs	r2, #0
 800bab0:	709a      	strb	r2, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bab2:	000a      	movs	r2, r1
 800bab4:	3210      	adds	r2, #16
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800bab6:	750c      	strb	r4, [r1, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bab8:	4293      	cmp	r3, r2
 800baba:	d100      	bne.n	800babe <LoRaMacConfirmQueueAdd+0x32>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800babc:	0008      	movs	r0, r1
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800babe:	60a8      	str	r0, [r5, #8]

    return true;
 800bac0:	2001      	movs	r0, #1
}
 800bac2:	bd30      	pop	{r4, r5, pc}
 800bac4:	20000f54 	.word	0x20000f54

0800bac8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800bac8:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800baca:	4908      	ldr	r1, [pc, #32]	; (800baec <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800bacc:	690a      	ldr	r2, [r1, #16]
 800bace:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800bad0:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800bad2:	d00a      	beq.n	800baea <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800bad4:	3b01      	subs	r3, #1
 800bad6:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bad8:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800bada:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800badc:	3310      	adds	r3, #16
        bufferPointer++;
 800bade:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bae0:	429c      	cmp	r4, r3
 800bae2:	d100      	bne.n	800bae6 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bae4:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800bae6:	6048      	str	r0, [r1, #4]

    return true;
 800bae8:	2001      	movs	r0, #1
}
 800baea:	bd10      	pop	{r4, pc}
 800baec:	20000f54 	.word	0x20000f54

0800baf0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800baf0:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800baf2:	4b08      	ldr	r3, [pc, #32]	; (800bb14 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800baf4:	0004      	movs	r4, r0
    if( count == 0 )
 800baf6:	691a      	ldr	r2, [r3, #16]
{
 800baf8:	0008      	movs	r0, r1
    if( count == 0 )
 800bafa:	7d12      	ldrb	r2, [r2, #20]
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	d007      	beq.n	800bb10 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bb00:	6859      	ldr	r1, [r3, #4]
 800bb02:	f7ff ff79 	bl	800b9f8 <GetElement.constprop.0>
        if( element != NULL )
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d002      	beq.n	800bb10 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800bb0a:	2301      	movs	r3, #1
            element->Status = status;
 800bb0c:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800bb0e:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800bb10:	bd10      	pop	{r4, pc}
 800bb12:	46c0      	nop			; (mov r8, r8)
 800bb14:	20000f54 	.word	0x20000f54

0800bb18 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bb18:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800bb1a:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 800bb1c:	691a      	ldr	r2, [r3, #16]
 800bb1e:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb20:	2201      	movs	r2, #1
    if( count == 0 )
 800bb22:	2900      	cmp	r1, #0
 800bb24:	d006      	beq.n	800bb34 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bb26:	6859      	ldr	r1, [r3, #4]
 800bb28:	f7ff ff66 	bl	800b9f8 <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb2c:	2201      	movs	r2, #1
        if( element != NULL )
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d000      	beq.n	800bb34 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800bb32:	7842      	ldrb	r2, [r0, #1]
}
 800bb34:	0010      	movs	r0, r2
 800bb36:	bd10      	pop	{r4, pc}
 800bb38:	20000f54 	.word	0x20000f54

0800bb3c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bb3c:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bb3e:	490c      	ldr	r1, [pc, #48]	; (800bb70 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bb40:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bb42:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 800bb44:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bb46:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 800bb48:	2c00      	cmp	r4, #0
 800bb4a:	d00d      	beq.n	800bb68 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bb4c:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800bb4e:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bb50:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bb52:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800bb54:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800bb56:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bb58:	2e00      	cmp	r6, #0
 800bb5a:	d100      	bne.n	800bb5e <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800bb5c:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	d103      	bne.n	800bb6a <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bb62:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bb64:	4299      	cmp	r1, r3
 800bb66:	d1f5      	bne.n	800bb54 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	e7fa      	b.n	800bb64 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800bb6e:	46c0      	nop			; (mov r8, r8)
 800bb70:	20000f54 	.word	0x20000f54

0800bb74 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800bb76:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bb78:	6859      	ldr	r1, [r3, #4]
 800bb7a:	f7ff ff3d 	bl	800b9f8 <GetElement.constprop.0>
 800bb7e:	1e43      	subs	r3, r0, #1
 800bb80:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800bb82:	b2c0      	uxtb	r0, r0
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	20000f54 	.word	0x20000f54

0800bb8c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8e:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800bb90:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bb92:	4e13      	ldr	r6, [pc, #76]	; (800bbe0 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800bb94:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bb96:	6933      	ldr	r3, [r6, #16]
 800bb98:	7d1b      	ldrb	r3, [r3, #20]
 800bb9a:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800bb9c:	9b01      	ldr	r3, [sp, #4]
 800bb9e:	429c      	cmp	r4, r3
 800bba0:	d101      	bne.n	800bba6 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800bba2:	b005      	add	sp, #20
 800bba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bba6:	6873      	ldr	r3, [r6, #4]
 800bba8:	7818      	ldrb	r0, [r3, #0]
 800bbaa:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bbac:	7859      	ldrb	r1, [r3, #1]
 800bbae:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bbb0:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800bbb2:	2f00      	cmp	r7, #0
 800bbb4:	d00d      	beq.n	800bbd2 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bbb6:	6833      	ldr	r3, [r6, #0]
 800bbb8:	0028      	movs	r0, r5
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800bbbe:	f7ff ff83 	bl	800bac8 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800bbc2:	2f00      	cmp	r7, #0
 800bbc4:	d102      	bne.n	800bbcc <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bbc6:	a803      	add	r0, sp, #12
 800bbc8:	f7ff ff60 	bl	800ba8c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bbcc:	3401      	adds	r4, #1
 800bbce:	b2e4      	uxtb	r4, r4
 800bbd0:	e7e4      	b.n	800bb9c <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bbd2:	aa03      	add	r2, sp, #12
 800bbd4:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bbd6:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bbd8:	78db      	ldrb	r3, [r3, #3]
 800bbda:	70d3      	strb	r3, [r2, #3]
 800bbdc:	e7ef      	b.n	800bbbe <LoRaMacConfirmQueueHandleCb+0x32>
 800bbde:	46c0      	nop			; (mov r8, r8)
 800bbe0:	20000f54 	.word	0x20000f54

0800bbe4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bbe4:	4b01      	ldr	r3, [pc, #4]	; (800bbec <LoRaMacConfirmQueueGetCnt+0x8>)
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	7d18      	ldrb	r0, [r3, #20]
}
 800bbea:	4770      	bx	lr
 800bbec:	20000f54 	.word	0x20000f54

0800bbf0 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800bbf0:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800bbf2:	4b03      	ldr	r3, [pc, #12]	; (800bc00 <LoRaMacConfirmQueueIsFull+0x10>)
 800bbf4:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bbf6:	7d1b      	ldrb	r3, [r3, #20]
}
 800bbf8:	4298      	cmp	r0, r3
 800bbfa:	4180      	sbcs	r0, r0
 800bbfc:	4240      	negs	r0, r0
 800bbfe:	4770      	bx	lr
 800bc00:	20000f54 	.word	0x20000f54

0800bc04 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800bc04:	4770      	bx	lr

0800bc06 <PayloadEncrypt>:
{
 800bc06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc08:	b08d      	sub	sp, #52	; 0x34
 800bc0a:	001d      	movs	r5, r3
 800bc0c:	ab12      	add	r3, sp, #72	; 0x48
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	9001      	str	r0, [sp, #4]
 800bc12:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800bc14:	9b01      	ldr	r3, [sp, #4]
{
 800bc16:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc18:	200a      	movs	r0, #10
{
 800bc1a:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d02b      	beq.n	800bc78 <PayloadEncrypt+0x72>
    uint8_t sBlock[16] = { 0 };
 800bc20:	2600      	movs	r6, #0
 800bc22:	220c      	movs	r2, #12
 800bc24:	0031      	movs	r1, r6
 800bc26:	a805      	add	r0, sp, #20
 800bc28:	9604      	str	r6, [sp, #16]
 800bc2a:	f003 f9d6 	bl	800efda <memset>
    uint8_t aBlock[16] = { 0 };
 800bc2e:	220c      	movs	r2, #12
 800bc30:	0031      	movs	r1, r6
 800bc32:	a809      	add	r0, sp, #36	; 0x24
 800bc34:	9608      	str	r6, [sp, #32]
 800bc36:	f003 f9d0 	bl	800efda <memset>
    aBlock[0] = 0x01;
 800bc3a:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800bc3c:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800bc3e:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800bc40:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800bc42:	0a2b      	lsrs	r3, r5, #8
 800bc44:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bc46:	0c2b      	lsrs	r3, r5, #16
 800bc48:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800bc4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800bc4c:	71a5      	strb	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800bc4e:	72a3      	strb	r3, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800bc50:	0a1b      	lsrs	r3, r3, #8
 800bc52:	72e3      	strb	r3, [r4, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bc54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bc56:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bc58:	0c1b      	lsrs	r3, r3, #16
 800bc5a:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bc5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[0] = 0x01;
 800bc5e:	7022      	strb	r2, [r4, #0]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bc60:	0e1b      	lsrs	r3, r3, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bc62:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bc64:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800bc66:	0014      	movs	r4, r2
 800bc68:	b2e2      	uxtb	r2, r4
 800bc6a:	0113      	lsls	r3, r2, #4
 800bc6c:	3b10      	subs	r3, #16
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800bc72:	2f00      	cmp	r7, #0
 800bc74:	dc02      	bgt.n	800bc7c <PayloadEncrypt+0x76>
    return LORAMAC_CRYPTO_SUCCESS;
 800bc76:	2000      	movs	r0, #0
}
 800bc78:	b00d      	add	sp, #52	; 0x34
 800bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800bc7c:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bc7e:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800bc80:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800bc82:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bc84:	002b      	movs	r3, r5
 800bc86:	2110      	movs	r1, #16
 800bc88:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800bc8a:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bc8c:	f7fc fb19 	bl	80082c2 <SecureElementAesEncrypt>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d115      	bne.n	800bcc0 <PayloadEncrypt+0xba>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc94:	1c39      	adds	r1, r7, #0
 800bc96:	1c0b      	adds	r3, r1, #0
 800bc98:	2f10      	cmp	r7, #16
 800bc9a:	dd00      	ble.n	800bc9e <PayloadEncrypt+0x98>
 800bc9c:	2310      	movs	r3, #16
 800bc9e:	b21b      	sxth	r3, r3
 800bca0:	4298      	cmp	r0, r3
 800bca2:	db02      	blt.n	800bcaa <PayloadEncrypt+0xa4>
        size -= 16;
 800bca4:	3f10      	subs	r7, #16
 800bca6:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800bca8:	e7de      	b.n	800bc68 <PayloadEncrypt+0x62>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bcaa:	9b02      	ldr	r3, [sp, #8]
 800bcac:	5c2e      	ldrb	r6, [r5, r0]
 800bcae:	181a      	adds	r2, r3, r0
 800bcb0:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bcb2:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bcb4:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bcb6:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bcb8:	4073      	eors	r3, r6
 800bcba:	9e01      	ldr	r6, [sp, #4]
 800bcbc:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bcbe:	e7ea      	b.n	800bc96 <PayloadEncrypt+0x90>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bcc0:	200f      	movs	r0, #15
 800bcc2:	e7d9      	b.n	800bc78 <PayloadEncrypt+0x72>

0800bcc4 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800bcc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	220c      	movs	r2, #12
 800bcca:	a801      	add	r0, sp, #4
 800bccc:	9100      	str	r1, [sp, #0]
 800bcce:	f003 f984 	bl	800efda <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bcd2:	4b06      	ldr	r3, [pc, #24]	; (800bcec <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	6818      	ldr	r0, [r3, #0]
 800bcd8:	4669      	mov	r1, sp
 800bcda:	237f      	movs	r3, #127	; 0x7f
 800bcdc:	6800      	ldr	r0, [r0, #0]
 800bcde:	f7fc fb62 	bl	80083a6 <SecureElementDeriveAndStoreKey>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d000      	beq.n	800bce8 <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bce6:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bce8:	b005      	add	sp, #20
 800bcea:	bd00      	pop	{pc}
 800bcec:	20000f80 	.word	0x20000f80

0800bcf0 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800bcf0:	3801      	subs	r0, #1
 800bcf2:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800bcf4:	b500      	push	{lr}
    switch( fCntID )
 800bcf6:	2803      	cmp	r0, #3
 800bcf8:	d80b      	bhi.n	800bd12 <GetLastFcntDown.constprop.0+0x22>
 800bcfa:	4b0d      	ldr	r3, [pc, #52]	; (800bd30 <GetLastFcntDown.constprop.0+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bcfc:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800bcfe:	f7f4 fa0b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bd02:	0a02      	.short	0x0a02
 800bd04:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bd06:	691a      	ldr	r2, [r3, #16]
 800bd08:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bd0a:	001a      	movs	r2, r3
 800bd0c:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bd0e:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800bd16:	695a      	ldr	r2, [r3, #20]
 800bd18:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800bd1a:	001a      	movs	r2, r3
 800bd1c:	3214      	adds	r2, #20
 800bd1e:	e7f6      	b.n	800bd0e <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bd20:	699a      	ldr	r2, [r3, #24]
 800bd22:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bd24:	001a      	movs	r2, r3
 800bd26:	3218      	adds	r2, #24
 800bd28:	e7f1      	b.n	800bd0e <GetLastFcntDown.constprop.0+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	600b      	str	r3, [r1, #0]
 800bd2e:	e7ef      	b.n	800bd10 <GetLastFcntDown.constprop.0+0x20>
 800bd30:	20000f80 	.word	0x20000f80

0800bd34 <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800bd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd36:	b0c7      	sub	sp, #284	; 0x11c
 800bd38:	0007      	movs	r7, r0
 800bd3a:	000c      	movs	r4, r1
 800bd3c:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd3e:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800bd40:	9e4c      	ldr	r6, [sp, #304]	; 0x130
 800bd42:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800bd44:	2f00      	cmp	r7, #0
 800bd46:	d037      	beq.n	800bdb8 <VerifyCmacB0.constprop.0.isra.0+0x84>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bd48:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bd4a:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	4299      	cmp	r1, r3
 800bd50:	d832      	bhi.n	800bdb8 <VerifyCmacB0.constprop.0.isra.0+0x84>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800bd52:	2288      	movs	r2, #136	; 0x88
 800bd54:	2100      	movs	r1, #0
 800bd56:	0052      	lsls	r2, r2, #1
 800bd58:	a802      	add	r0, sp, #8
 800bd5a:	f001 fb40 	bl	800d3de <memset1>
    b0[0] = 0x49;
 800bd5e:	2349      	movs	r3, #73	; 0x49
 800bd60:	aa02      	add	r2, sp, #8
 800bd62:	7013      	strb	r3, [r2, #0]
        b0[1] = 0x00;
 800bd64:	2300      	movs	r3, #0
 800bd66:	7053      	strb	r3, [r2, #1]
        b0[2] = 0x00;
 800bd68:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800bd6a:	70d3      	strb	r3, [r2, #3]
    b0[4] = 0x00;
 800bd6c:	7113      	strb	r3, [r2, #4]
    b0[5] = dir;
 800bd6e:	2201      	movs	r2, #1
 800bd70:	a902      	add	r1, sp, #8
 800bd72:	714a      	strb	r2, [r1, #5]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bd74:	0a2a      	lsrs	r2, r5, #8
 800bd76:	71ca      	strb	r2, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bd78:	0c2a      	lsrs	r2, r5, #16
 800bd7a:	720a      	strb	r2, [r1, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bd7c:	0a32      	lsrs	r2, r6, #8
    b0[6] = devAddr & 0xFF;
 800bd7e:	718d      	strb	r5, [r1, #6]
    b0[10] = fCnt & 0xFF;
 800bd80:	728e      	strb	r6, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bd82:	72ca      	strb	r2, [r1, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bd84:	0e2d      	lsrs	r5, r5, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bd86:	0c32      	lsrs	r2, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bd88:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bd8a:	730a      	strb	r2, [r1, #12]
    b0[14] = 0x00;
 800bd8c:	738b      	strb	r3, [r1, #14]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bd8e:	0022      	movs	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bd90:	724d      	strb	r5, [r1, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bd92:	734e      	strb	r6, [r1, #13]
    b0[15] = msgLen & 0xFF;
 800bd94:	73cc      	strb	r4, [r1, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bd96:	a806      	add	r0, sp, #24
 800bd98:	0039      	movs	r1, r7
 800bd9a:	f001 fb0b 	bl	800d3b4 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bd9e:	0021      	movs	r1, r4
 800bda0:	3110      	adds	r1, #16
 800bda2:	9b01      	ldr	r3, [sp, #4]
 800bda4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800bda6:	b289      	uxth	r1, r1
 800bda8:	a802      	add	r0, sp, #8
 800bdaa:	f7fc fa72 	bl	8008292 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	d002      	beq.n	800bdb8 <VerifyCmacB0.constprop.0.isra.0+0x84>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bdb2:	2801      	cmp	r0, #1
 800bdb4:	d000      	beq.n	800bdb8 <VerifyCmacB0.constprop.0.isra.0+0x84>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdb6:	200f      	movs	r0, #15
}
 800bdb8:	b047      	add	sp, #284	; 0x11c
 800bdba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdbc <LoRaMacCryptoInit>:
{
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	1e03      	subs	r3, r0, #0
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800bdc0:	4c0d      	ldr	r4, [pc, #52]	; (800bdf8 <LoRaMacCryptoInit+0x3c>)
 800bdc2:	480e      	ldr	r0, [pc, #56]	; (800bdfc <LoRaMacCryptoInit+0x40>)
 800bdc4:	6020      	str	r0, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 800bdc6:	d100      	bne.n	800bdca <LoRaMacCryptoInit+0xe>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800bdc8:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <LoRaMacCryptoInit+0x44>)
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800bdca:	2224      	movs	r2, #36	; 0x24
 800bdcc:	2100      	movs	r1, #0
 800bdce:	6063      	str	r3, [r4, #4]
 800bdd0:	f001 fb05 	bl	800d3de <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800bdd4:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800bdd6:	4a0b      	ldr	r2, [pc, #44]	; (800be04 <LoRaMacCryptoInit+0x48>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bdd8:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800bdda:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bddc:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800bdde:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bde0:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bde2:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800bde4:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bde6:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bde8:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bdea:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bdec:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800bdee:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bdf0:	6863      	ldr	r3, [r4, #4]
 800bdf2:	4798      	blx	r3
}
 800bdf4:	0028      	movs	r0, r5
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	20000f80 	.word	0x20000f80
 800bdfc:	20000f88 	.word	0x20000f88
 800be00:	0800bc05 	.word	0x0800bc05
 800be04:	01010100 	.word	0x01010100

0800be08 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800be08:	4b02      	ldr	r3, [pc, #8]	; (800be14 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6018      	str	r0, [r3, #0]
}
 800be0e:	2000      	movs	r0, #0
 800be10:	4770      	bx	lr
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	20000f80 	.word	0x20000f80

0800be18 <LoRaMacCryptoRestoreNvmCtx>:
{
 800be18:	0001      	movs	r1, r0
 800be1a:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be1c:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800be1e:	2900      	cmp	r1, #0
 800be20:	d004      	beq.n	800be2c <LoRaMacCryptoRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800be22:	4803      	ldr	r0, [pc, #12]	; (800be30 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800be24:	2224      	movs	r2, #36	; 0x24
 800be26:	f001 fac5 	bl	800d3b4 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800be2a:	2000      	movs	r0, #0
}
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	20000f88 	.word	0x20000f88

0800be34 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800be34:	2324      	movs	r3, #36	; 0x24
 800be36:	6003      	str	r3, [r0, #0]
}
 800be38:	4800      	ldr	r0, [pc, #0]	; (800be3c <LoRaMacCryptoGetNvmCtx+0x8>)
 800be3a:	4770      	bx	lr
 800be3c:	20000f88 	.word	0x20000f88

0800be40 <LoRaMacCryptoGetFCntUp>:
{
 800be40:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be42:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800be44:	2b00      	cmp	r3, #0
 800be46:	d005      	beq.n	800be54 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800be48:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800be4a:	4a03      	ldr	r2, [pc, #12]	; (800be58 <LoRaMacCryptoGetFCntUp+0x18>)
 800be4c:	6812      	ldr	r2, [r2, #0]
 800be4e:	68d2      	ldr	r2, [r2, #12]
 800be50:	3201      	adds	r2, #1
 800be52:	601a      	str	r2, [r3, #0]
}
 800be54:	4770      	bx	lr
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	20000f80 	.word	0x20000f80

0800be5c <LoRaMacCryptoGetFCntDown>:
{
 800be5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be5e:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800be60:	2300      	movs	r3, #0
{
 800be62:	0006      	movs	r6, r0
 800be64:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be66:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800be68:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800be6a:	429c      	cmp	r4, r3
 800be6c:	d006      	beq.n	800be7c <LoRaMacCryptoGetFCntDown+0x20>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800be6e:	0030      	movs	r0, r6
 800be70:	a901      	add	r1, sp, #4
 800be72:	f7ff ff3d 	bl	800bcf0 <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be76:	2800      	cmp	r0, #0
 800be78:	d100      	bne.n	800be7c <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
 800be7a:	6025      	str	r5, [r4, #0]
}
 800be7c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

0800be80 <LoRaMacCryptoSetMulticastReference>:
{
 800be80:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be82:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800be84:	2b00      	cmp	r3, #0
 800be86:	d004      	beq.n	800be92 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800be88:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800be8a:	4a02      	ldr	r2, [pc, #8]	; (800be94 <LoRaMacCryptoSetMulticastReference+0x14>)
 800be8c:	6812      	ldr	r2, [r2, #0]
 800be8e:	321c      	adds	r2, #28
 800be90:	621a      	str	r2, [r3, #32]
}
 800be92:	4770      	bx	lr
 800be94:	20000f80 	.word	0x20000f80

0800be98 <LoRaMacCryptoPrepareJoinRequest>:
{
 800be98:	b530      	push	{r4, r5, lr}
 800be9a:	0004      	movs	r4, r0
 800be9c:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be9e:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800bea0:	2c00      	cmp	r4, #0
 800bea2:	d024      	beq.n	800beee <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800bea4:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800bea6:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800bea8:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800beaa:	f7fc fa9d 	bl	80083e8 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800beae:	4d11      	ldr	r5, [pc, #68]	; (800bef4 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	682a      	ldr	r2, [r5, #0]
 800beb4:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800beb6:	686b      	ldr	r3, [r5, #4]
 800beb8:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800beba:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bebc:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800bebe:	889b      	ldrh	r3, [r3, #4]
 800bec0:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bec2:	f000 f971 	bl	800c1a8 <LoRaMacSerializerJoinRequest>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d110      	bne.n	800beec <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800beca:	0023      	movs	r3, r4
 800becc:	3318      	adds	r3, #24
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	2213      	movs	r2, #19
 800bed2:	2301      	movs	r3, #1
 800bed4:	6821      	ldr	r1, [r4, #0]
 800bed6:	f7fc f9d1 	bl	800827c <SecureElementComputeAesCmac>
 800beda:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bedc:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bee2:	0020      	movs	r0, r4
 800bee4:	f000 f960 	bl	800c1a8 <LoRaMacSerializerJoinRequest>
 800bee8:	2800      	cmp	r0, #0
 800beea:	d000      	beq.n	800beee <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800beec:	2011      	movs	r0, #17
}
 800beee:	b005      	add	sp, #20
 800bef0:	bd30      	pop	{r4, r5, pc}
 800bef2:	46c0      	nop			; (mov r8, r8)
 800bef4:	20000f80 	.word	0x20000f80

0800bef8 <LoRaMacCryptoSecureMessage>:
{
 800bef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befa:	0006      	movs	r6, r0
 800befc:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800befe:	240a      	movs	r4, #10
{
 800bf00:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d01f      	beq.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bf06:	4b2f      	ldr	r3, [pc, #188]	; (800bfc4 <LoRaMacCryptoSecureMessage+0xcc>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bf08:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	4283      	cmp	r3, r0
 800bf10:	d819      	bhi.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800bf12:	1c6a      	adds	r2, r5, #1
 800bf14:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800bf16:	1e51      	subs	r1, r2, #1
 800bf18:	418a      	sbcs	r2, r1
 800bf1a:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bf1c:	4283      	cmp	r3, r0
 800bf1e:	d306      	bcc.n	800bf2e <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bf20:	0028      	movs	r0, r5
 800bf22:	f000 f976 	bl	800c212 <LoRaMacSerializerData>
 800bf26:	1e03      	subs	r3, r0, #0
 800bf28:	d010      	beq.n	800bf4c <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bf2a:	2411      	movs	r4, #17
 800bf2c:	e00b      	b.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bf2e:	002b      	movs	r3, r5
 800bf30:	3328      	adds	r3, #40	; 0x28
 800bf32:	7819      	ldrb	r1, [r3, #0]
 800bf34:	2300      	movs	r3, #0
 800bf36:	9001      	str	r0, [sp, #4]
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bf3c:	68ab      	ldr	r3, [r5, #8]
 800bf3e:	f7ff fe62 	bl	800bc06 <PayloadEncrypt>
 800bf42:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf44:	d0ec      	beq.n	800bf20 <LoRaMacCryptoSecureMessage+0x28>
}
 800bf46:	0020      	movs	r0, r4
 800bf48:	b009      	add	sp, #36	; 0x24
 800bf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf4c:	792f      	ldrb	r7, [r5, #4]
 800bf4e:	6829      	ldr	r1, [r5, #0]
 800bf50:	3f04      	subs	r7, #4
 800bf52:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf54:	240a      	movs	r4, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf56:	9203      	str	r2, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	d0f4      	beq.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bf5c:	2080      	movs	r0, #128	; 0x80
 800bf5e:	b2ba      	uxth	r2, r7
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bf60:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bf62:	0040      	lsls	r0, r0, #1
 800bf64:	4282      	cmp	r2, r0
 800bf66:	d8ee      	bhi.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800bf68:	2249      	movs	r2, #73	; 0x49
 800bf6a:	a804      	add	r0, sp, #16
        b0[1] = 0x00;
 800bf6c:	7043      	strb	r3, [r0, #1]
        b0[2] = 0x00;
 800bf6e:	7083      	strb	r3, [r0, #2]
    b0[3] = 0x00;
 800bf70:	70c3      	strb	r3, [r0, #3]
    b0[4] = 0x00;
 800bf72:	7103      	strb	r3, [r0, #4]
    b0[5] = dir;
 800bf74:	7143      	strb	r3, [r0, #5]
    b0[14] = 0x00;
 800bf76:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf78:	002b      	movs	r3, r5
 800bf7a:	68ac      	ldr	r4, [r5, #8]
    b0[0] = 0x49;
 800bf7c:	7002      	strb	r2, [r0, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bf7e:	0a22      	lsrs	r2, r4, #8
    b0[6] = devAddr & 0xFF;
 800bf80:	7184      	strb	r4, [r0, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800bf82:	71c2      	strb	r2, [r0, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bf84:	0c22      	lsrs	r2, r4, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bf86:	0e24      	lsrs	r4, r4, #24
 800bf88:	7244      	strb	r4, [r0, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800bf8a:	0a34      	lsrs	r4, r6, #8
 800bf8c:	72c4      	strb	r4, [r0, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bf8e:	0c34      	lsrs	r4, r6, #16
 800bf90:	7304      	strb	r4, [r0, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf92:	332c      	adds	r3, #44	; 0x2c
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bf94:	0e34      	lsrs	r4, r6, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bf96:	7202      	strb	r2, [r0, #8]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bf98:	7344      	strb	r4, [r0, #13]
    b0[10] = fCnt & 0xFF;
 800bf9a:	7286      	strb	r6, [r0, #10]
    b0[15] = msgLen & 0xFF;
 800bf9c:	73c7      	strb	r7, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800bf9e:	9a03      	ldr	r2, [sp, #12]
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	f7fc f96a 	bl	800827c <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfa8:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d1cb      	bne.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bfae:	0028      	movs	r0, r5
 800bfb0:	f000 f92f 	bl	800c212 <LoRaMacSerializerData>
 800bfb4:	1e04      	subs	r4, r0, #0
 800bfb6:	d1b8      	bne.n	800bf2a <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800bfb8:	4b02      	ldr	r3, [pc, #8]	; (800bfc4 <LoRaMacCryptoSecureMessage+0xcc>)
 800bfba:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bfbc:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800bfbe:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bfc0:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800bfc2:	e7c0      	b.n	800bf46 <LoRaMacCryptoSecureMessage+0x4e>
 800bfc4:	20000f80 	.word	0x20000f80

0800bfc8 <LoRaMacCryptoUnsecureMessage>:
{
 800bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfce:	000f      	movs	r7, r1
 800bfd0:	001e      	movs	r6, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfd2:	240a      	movs	r4, #10
{
 800bfd4:	9002      	str	r0, [sp, #8]
 800bfd6:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800bfd8:	2d00      	cmp	r5, #0
 800bfda:	d04a      	beq.n	800c072 <LoRaMacCryptoUnsecureMessage+0xaa>
    uint32_t lastDown = 0;
 800bfdc:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bfde:	0010      	movs	r0, r2
 800bfe0:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800bfe2:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bfe4:	f7ff fe84 	bl	800bcf0 <GetLastFcntDown.constprop.0>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bfe8:	0028      	movs	r0, r5
 800bfea:	f000 f882 	bl	800c0f2 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bfee:	3406      	adds	r4, #6
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d13e      	bne.n	800c072 <LoRaMacCryptoUnsecureMessage+0xaa>
        if( KeyAddrList[i].AddrID == addrID )
 800bff4:	4b23      	ldr	r3, [pc, #140]	; (800c084 <LoRaMacCryptoUnsecureMessage+0xbc>)
 800bff6:	9902      	ldr	r1, [sp, #8]
 800bff8:	781a      	ldrb	r2, [r3, #0]
 800bffa:	428a      	cmp	r2, r1
 800bffc:	d004      	beq.n	800c008 <LoRaMacCryptoUnsecureMessage+0x40>
 800bffe:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c000:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 800c002:	428a      	cmp	r2, r1
 800c004:	d135      	bne.n	800c072 <LoRaMacCryptoUnsecureMessage+0xaa>
 800c006:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800c008:	68aa      	ldr	r2, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c00a:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800c00c:	42ba      	cmp	r2, r7
 800c00e:	d130      	bne.n	800c072 <LoRaMacCryptoUnsecureMessage+0xaa>
    payloadDecryptionKeyID = curItem->AppSkey;
 800c010:	40a0      	lsls	r0, r4
 800c012:	1818      	adds	r0, r3, r0
 800c014:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c016:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800c018:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c01a:	7929      	ldrb	r1, [r5, #4]
 800c01c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c01e:	3904      	subs	r1, #4
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	9600      	str	r6, [sp, #0]
 800c024:	003b      	movs	r3, r7
 800c026:	6828      	ldr	r0, [r5, #0]
 800c028:	b289      	uxth	r1, r1
 800c02a:	f7ff fe83 	bl	800bd34 <VerifyCmacB0.constprop.0.isra.0>
 800c02e:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c030:	d11f      	bne.n	800c072 <LoRaMacCryptoUnsecureMessage+0xaa>
    if( macMsg->FPort == 0 )
 800c032:	1c6b      	adds	r3, r5, #1
 800c034:	7fdb      	ldrb	r3, [r3, #31]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <LoRaMacCryptoUnsecureMessage+0x76>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c03a:	3302      	adds	r3, #2
 800c03c:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c03e:	002b      	movs	r3, r5
 800c040:	3328      	adds	r3, #40	; 0x28
 800c042:	7819      	ldrb	r1, [r3, #0]
 800c044:	2301      	movs	r3, #1
 800c046:	9601      	str	r6, [sp, #4]
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	9a02      	ldr	r2, [sp, #8]
 800c04c:	003b      	movs	r3, r7
 800c04e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c050:	f7ff fdd9 	bl	800bc06 <PayloadEncrypt>
 800c054:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c056:	d10c      	bne.n	800c072 <LoRaMacCryptoUnsecureMessage+0xaa>
    switch( fCntID )
 800c058:	9803      	ldr	r0, [sp, #12]
 800c05a:	4b0b      	ldr	r3, [pc, #44]	; (800c088 <LoRaMacCryptoUnsecureMessage+0xc0>)
 800c05c:	3801      	subs	r0, #1
 800c05e:	2803      	cmp	r0, #3
 800c060:	d805      	bhi.n	800c06e <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800c062:	681a      	ldr	r2, [r3, #0]
    switch( fCntID )
 800c064:	f7f4 f858 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c068:	0c0a0802 	.word	0x0c0a0802
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800c06c:	6116      	str	r6, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	4798      	blx	r3
}
 800c072:	0020      	movs	r0, r4
 800c074:	b007      	add	sp, #28
 800c076:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800c078:	6156      	str	r6, [r2, #20]
            break;
 800c07a:	e7f8      	b.n	800c06e <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800c07c:	6196      	str	r6, [r2, #24]
            break;
 800c07e:	e7f6      	b.n	800c06e <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800c080:	61d6      	str	r6, [r2, #28]
            break;
 800c082:	e7f4      	b.n	800c06e <LoRaMacCryptoUnsecureMessage+0xa6>
 800c084:	20000184 	.word	0x20000184
 800c088:	20000f80 	.word	0x20000f80

0800c08c <LoRaMacCryptoDeriveMcRootKey>:
{
 800c08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c08e:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c090:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800c092:	2900      	cmp	r1, #0
 800c094:	d115      	bne.n	800c0c2 <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 800c096:	220c      	movs	r2, #12
 800c098:	a801      	add	r0, sp, #4
 800c09a:	9100      	str	r1, [sp, #0]
 800c09c:	f002 ff9d 	bl	800efda <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 800c0a2:	6818      	ldr	r0, [r3, #0]
 800c0a4:	7883      	ldrb	r3, [r0, #2]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d102      	bne.n	800c0b0 <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 800c0aa:	466a      	mov	r2, sp
 800c0ac:	331f      	adds	r3, #31
 800c0ae:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c0b0:	2304      	movs	r3, #4
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4669      	mov	r1, sp
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	f7fc f975 	bl	80083a6 <SecureElementDeriveAndStoreKey>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d000      	beq.n	800c0c2 <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0c0:	200f      	movs	r0, #15
}
 800c0c2:	b005      	add	sp, #20
 800c0c4:	bd00      	pop	{pc}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	20000f80 	.word	0x20000f80

0800c0cc <LoRaMacCryptoSetKey>:
{
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c0d0:	f7fc f960 	bl	8008394 <SecureElementSetKey>
 800c0d4:	1e04      	subs	r4, r0, #0
 800c0d6:	d109      	bne.n	800c0ec <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 800c0d8:	2d00      	cmp	r5, #0
 800c0da:	d108      	bne.n	800c0ee <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800c0dc:	f7ff ffd6 	bl	800c08c <LoRaMacCryptoDeriveMcRootKey>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d103      	bne.n	800c0ec <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 800c0e4:	f7ff fdee 	bl	800bcc4 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d000      	beq.n	800c0ee <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0ec:	240f      	movs	r4, #15
}
 800c0ee:	0020      	movs	r0, r4
 800c0f0:	bd70      	pop	{r4, r5, r6, pc}

0800c0f2 <LoRaMacParserData>:

    return LORAMAC_PARSER_SUCCESS;
}

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800c0f2:	b570      	push	{r4, r5, r6, lr}
 800c0f4:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c0f6:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c0f8:	2c00      	cmp	r4, #0
 800c0fa:	d054      	beq.n	800c1a6 <LoRaMacParserData+0xb4>
 800c0fc:	6821      	ldr	r1, [r4, #0]
 800c0fe:	2900      	cmp	r1, #0
 800c100:	d051      	beq.n	800c1a6 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c102:	780b      	ldrb	r3, [r1, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c104:	1c65      	adds	r5, r4, #1
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c106:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c108:	7848      	ldrb	r0, [r1, #1]
 800c10a:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c10c:	788a      	ldrb	r2, [r1, #2]
 800c10e:	0212      	lsls	r2, r2, #8
 800c110:	4310      	orrs	r0, r2
 800c112:	60a0      	str	r0, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c114:	78cb      	ldrb	r3, [r1, #3]
 800c116:	041b      	lsls	r3, r3, #16
 800c118:	4303      	orrs	r3, r0
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c11a:	0020      	movs	r0, r4
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c11c:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c11e:	790a      	ldrb	r2, [r1, #4]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c120:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c122:	0612      	lsls	r2, r2, #24
 800c124:	4313      	orrs	r3, r2
 800c126:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c128:	794b      	ldrb	r3, [r1, #5]
 800c12a:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c12c:	798b      	ldrb	r3, [r1, #6]
 800c12e:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c130:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c132:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c134:	0212      	lsls	r2, r2, #8
 800c136:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c138:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c13a:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c13c:	0712      	lsls	r2, r2, #28
 800c13e:	0f12      	lsrs	r2, r2, #28
 800c140:	f001 f938 	bl	800d3b4 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c144:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800c146:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800c148:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c14a:	0709      	lsls	r1, r1, #28
 800c14c:	0f09      	lsrs	r1, r1, #28
 800c14e:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800c150:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800c152:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800c154:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c156:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c158:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c15a:	1b93      	subs	r3, r2, r6
 800c15c:	2b04      	cmp	r3, #4
 800c15e:	dd0c      	ble.n	800c17a <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c160:	6823      	ldr	r3, [r4, #0]
 800c162:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c164:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c166:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c168:	1a52      	subs	r2, r2, r1
 800c16a:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c16c:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c16e:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c170:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c172:	b292      	uxth	r2, r2
 800c174:	1859      	adds	r1, r3, r1
 800c176:	f001 f91d 	bl	800d3b4 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c17a:	6822      	ldr	r2, [r4, #0]
 800c17c:	7923      	ldrb	r3, [r4, #4]
 800c17e:	18d3      	adds	r3, r2, r3
 800c180:	1f1a      	subs	r2, r3, #4
 800c182:	7810      	ldrb	r0, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c184:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c186:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c188:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c18a:	1e9a      	subs	r2, r3, #2
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c18c:	0209      	lsls	r1, r1, #8
 800c18e:	4308      	orrs	r0, r1
 800c190:	62e0      	str	r0, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c192:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c194:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c196:	0412      	lsls	r2, r2, #16
 800c198:	4302      	orrs	r2, r0

    return LORAMAC_PARSER_SUCCESS;
 800c19a:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c19c:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	061b      	lsls	r3, r3, #24
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}

0800c1a8 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c1a8:	b510      	push	{r4, lr}
 800c1aa:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c1ac:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1ae:	2c00      	cmp	r4, #0
 800c1b0:	d02e      	beq.n	800c210 <LoRaMacSerializerJoinRequest+0x68>
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d02b      	beq.n	800c210 <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c1b8:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c1ba:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c1bc:	2a16      	cmp	r2, #22
 800c1be:	d927      	bls.n	800c210 <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c1c0:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c1c2:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c1c4:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	2208      	movs	r2, #8
 800c1ca:	1c58      	adds	r0, r3, #1
 800c1cc:	f001 f8fb 	bl	800d3c6 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c1d0:	0021      	movs	r1, r4
 800c1d2:	6820      	ldr	r0, [r4, #0]
 800c1d4:	2208      	movs	r2, #8
 800c1d6:	3009      	adds	r0, #9
 800c1d8:	310e      	adds	r1, #14
 800c1da:	f001 f8f4 	bl	800d3c6 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c1de:	8ae3      	ldrh	r3, [r4, #22]
 800c1e0:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c1e2:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c1e4:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c1e6:	8ae3      	ldrh	r3, [r4, #22]
 800c1e8:	6822      	ldr	r2, [r4, #0]
 800c1ea:	0a1b      	lsrs	r3, r3, #8
 800c1ec:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c1ee:	69a3      	ldr	r3, [r4, #24]
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c1f4:	69a3      	ldr	r3, [r4, #24]
 800c1f6:	6822      	ldr	r2, [r4, #0]
 800c1f8:	0a1b      	lsrs	r3, r3, #8
 800c1fa:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c1fc:	69a3      	ldr	r3, [r4, #24]
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	0c1b      	lsrs	r3, r3, #16
 800c202:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c204:	69a3      	ldr	r3, [r4, #24]
 800c206:	6822      	ldr	r2, [r4, #0]
 800c208:	0e1b      	lsrs	r3, r3, #24
 800c20a:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800c20c:	2317      	movs	r3, #23
 800c20e:	7123      	strb	r3, [r4, #4]
}
 800c210:	bd10      	pop	{r4, pc}

0800c212 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800c212:	b570      	push	{r4, r5, r6, lr}
 800c214:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c216:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c218:	2c00      	cmp	r4, #0
 800c21a:	d068      	beq.n	800c2ee <LoRaMacSerializerData+0xdc>
 800c21c:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c21e:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c220:	2900      	cmp	r1, #0
 800c222:	d064      	beq.n	800c2ee <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800c224:	0025      	movs	r5, r4
 800c226:	3528      	adds	r5, #40	; 0x28
 800c228:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c22a:	7b22      	ldrb	r2, [r4, #12]
 800c22c:	0003      	movs	r3, r0
 800c22e:	1e5e      	subs	r6, r3, #1
 800c230:	41b3      	sbcs	r3, r6
 800c232:	0712      	lsls	r2, r2, #28
 800c234:	0f12      	lsrs	r2, r2, #28
 800c236:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c238:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c23a:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c23c:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800c23e:	7922      	ldrb	r2, [r4, #4]
 800c240:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c242:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800c244:	429a      	cmp	r2, r3
 800c246:	d352      	bcc.n	800c2ee <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c248:	7963      	ldrb	r3, [r4, #5]
 800c24a:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c24c:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c24e:	68a3      	ldr	r3, [r4, #8]
 800c250:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c252:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c254:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	6822      	ldr	r2, [r4, #0]
 800c25a:	0a1b      	lsrs	r3, r3, #8
 800c25c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c25e:	68a3      	ldr	r3, [r4, #8]
 800c260:	6822      	ldr	r2, [r4, #0]
 800c262:	0c1b      	lsrs	r3, r3, #16
 800c264:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	6822      	ldr	r2, [r4, #0]
 800c26a:	0e1b      	lsrs	r3, r3, #24
 800c26c:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c26e:	7b23      	ldrb	r3, [r4, #12]
 800c270:	6822      	ldr	r2, [r4, #0]
 800c272:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c274:	89e3      	ldrh	r3, [r4, #14]
 800c276:	6822      	ldr	r2, [r4, #0]
 800c278:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c27a:	89e3      	ldrh	r3, [r4, #14]
 800c27c:	6822      	ldr	r2, [r4, #0]
 800c27e:	0a1b      	lsrs	r3, r3, #8
 800c280:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c282:	7b22      	ldrb	r2, [r4, #12]
 800c284:	6820      	ldr	r0, [r4, #0]
 800c286:	0712      	lsls	r2, r2, #28
 800c288:	0f12      	lsrs	r2, r2, #28
 800c28a:	3008      	adds	r0, #8
 800c28c:	f001 f892 	bl	800d3b4 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c290:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800c292:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c294:	071b      	lsls	r3, r3, #28
 800c296:	0f1b      	lsrs	r3, r3, #28
 800c298:	001e      	movs	r6, r3
 800c29a:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800c29c:	2a00      	cmp	r2, #0
 800c29e:	d005      	beq.n	800c2ac <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c2a0:	1c62      	adds	r2, r4, #1
 800c2a2:	7fd2      	ldrb	r2, [r2, #31]
 800c2a4:	6821      	ldr	r1, [r4, #0]
 800c2a6:	3309      	adds	r3, #9
 800c2a8:	558a      	strb	r2, [r1, r6]
 800c2aa:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	782a      	ldrb	r2, [r5, #0]
 800c2b0:	1998      	adds	r0, r3, r6
 800c2b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c2b4:	f001 f87e 	bl	800d3b4 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c2b8:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c2bc:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c2be:	18f3      	adds	r3, r6, r3
 800c2c0:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2c2:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2c6:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2c8:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2ca:	b292      	uxth	r2, r2
 800c2cc:	0a09      	lsrs	r1, r1, #8
 800c2ce:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2d2:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2d4:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2d6:	b292      	uxth	r2, r2
 800c2d8:	0c09      	lsrs	r1, r1, #16
 800c2da:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c2de:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2e0:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2e2:	b292      	uxth	r2, r2
 800c2e4:	0e09      	lsrs	r1, r1, #24
 800c2e6:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c2e8:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2ea:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800c2ec:	7123      	strb	r3, [r4, #4]
}
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}

0800c2f0 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c2f0:	3801      	subs	r0, #1
 800c2f2:	4243      	negs	r3, r0
 800c2f4:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800c2f6:	b2c0      	uxtb	r0, r0
 800c2f8:	4770      	bx	lr

0800c2fa <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c2fa:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800c2fc:	2801      	cmp	r0, #1
 800c2fe:	d105      	bne.n	800c30c <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 800c300:	0008      	movs	r0, r1
 800c302:	f000 f911 	bl	800c528 <RegionAU915GetPhyParam>
 800c306:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800c308:	9801      	ldr	r0, [sp, #4]
 800c30a:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800c30c:	2300      	movs	r3, #0
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	e7fa      	b.n	800c308 <RegionGetPhyParam+0xe>

0800c312 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c312:	b510      	push	{r4, lr}
    switch( region )
 800c314:	2801      	cmp	r0, #1
 800c316:	d102      	bne.n	800c31e <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 800c318:	0008      	movs	r0, r1
 800c31a:	f000 f9b9 	bl	800c690 <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c31e:	bd10      	pop	{r4, pc}

0800c320 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c320:	b510      	push	{r4, lr}
    switch( region )
 800c322:	2801      	cmp	r0, #1
 800c324:	d102      	bne.n	800c32c <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 800c326:	0008      	movs	r0, r1
 800c328:	f000 f9ca 	bl	800c6c0 <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c32c:	bd10      	pop	{r4, pc}

0800c32e <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800c32e:	2300      	movs	r3, #0
{
 800c330:	b510      	push	{r4, lr}
    switch( region )
 800c332:	2801      	cmp	r0, #1
 800c334:	d103      	bne.n	800c33e <RegionGetNvmCtx+0x10>
        AU915_GET_NVM_CTX( );
 800c336:	0008      	movs	r0, r1
 800c338:	f000 fa3c 	bl	800c7b4 <RegionAU915GetNvmCtx>
 800c33c:	0003      	movs	r3, r0
        }
    }
}
 800c33e:	0018      	movs	r0, r3
 800c340:	bd10      	pop	{r4, pc}

0800c342 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c342:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c344:	2300      	movs	r3, #0
{
 800c346:	0004      	movs	r4, r0
 800c348:	0008      	movs	r0, r1
 800c34a:	0011      	movs	r1, r2
    switch( region )
 800c34c:	2c01      	cmp	r4, #1
 800c34e:	d102      	bne.n	800c356 <RegionVerify+0x14>
        AU915_VERIFY( );
 800c350:	f000 fa38 	bl	800c7c4 <RegionAU915Verify>
 800c354:	0003      	movs	r3, r0
        }
    }
}
 800c356:	0018      	movs	r0, r3
 800c358:	bd10      	pop	{r4, pc}

0800c35a <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c35a:	2300      	movs	r3, #0
{
 800c35c:	b510      	push	{r4, lr}
    switch( region )
 800c35e:	2801      	cmp	r0, #1
 800c360:	d103      	bne.n	800c36a <RegionChanMaskSet+0x10>
        AU915_CHAN_MASK_SET( );
 800c362:	0008      	movs	r0, r1
 800c364:	f000 fa58 	bl	800c818 <RegionAU915ChanMaskSet>
 800c368:	0003      	movs	r3, r0
        }
    }
}
 800c36a:	0018      	movs	r0, r3
 800c36c:	bd10      	pop	{r4, pc}

0800c36e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c36e:	b510      	push	{r4, lr}
 800c370:	0004      	movs	r4, r0
 800c372:	0008      	movs	r0, r1
 800c374:	0011      	movs	r1, r2
 800c376:	001a      	movs	r2, r3
    switch( region )
 800c378:	2c01      	cmp	r4, #1
 800c37a:	d102      	bne.n	800c382 <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	f000 fa77 	bl	800c870 <RegionAU915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c382:	bd10      	pop	{r4, pc}

0800c384 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c384:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c386:	2300      	movs	r3, #0
{
 800c388:	0004      	movs	r4, r0
 800c38a:	0008      	movs	r0, r1
 800c38c:	0011      	movs	r1, r2
    switch( region )
 800c38e:	2c01      	cmp	r4, #1
 800c390:	d102      	bne.n	800c398 <RegionRxConfig+0x14>
        AU915_RX_CONFIG( );
 800c392:	f000 fa9b 	bl	800c8cc <RegionAU915RxConfig>
 800c396:	0003      	movs	r3, r0
        }
    }
}
 800c398:	0018      	movs	r0, r3
 800c39a:	bd10      	pop	{r4, pc}

0800c39c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c3a0:	2400      	movs	r4, #0
{
 800c3a2:	0008      	movs	r0, r1
 800c3a4:	0011      	movs	r1, r2
 800c3a6:	001a      	movs	r2, r3
    switch( region )
 800c3a8:	2d01      	cmp	r5, #1
 800c3aa:	d102      	bne.n	800c3b2 <RegionTxConfig+0x16>
        AU915_TX_CONFIG( );
 800c3ac:	f000 faea 	bl	800c984 <RegionAU915TxConfig>
 800c3b0:	0004      	movs	r4, r0
        }
    }
}
 800c3b2:	0020      	movs	r0, r4
 800c3b4:	bd70      	pop	{r4, r5, r6, pc}

0800c3b6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c3b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3b8:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c3ba:	2400      	movs	r4, #0
{
 800c3bc:	0008      	movs	r0, r1
 800c3be:	0011      	movs	r1, r2
 800c3c0:	001a      	movs	r2, r3
    switch( region )
 800c3c2:	2d01      	cmp	r5, #1
 800c3c4:	d105      	bne.n	800c3d2 <RegionLinkAdrReq+0x1c>
        AU915_LINK_ADR_REQ( );
 800c3c6:	9b07      	ldr	r3, [sp, #28]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	9b06      	ldr	r3, [sp, #24]
 800c3cc:	f000 fb46 	bl	800ca5c <RegionAU915LinkAdrReq>
 800c3d0:	0004      	movs	r4, r0
        }
    }
}
 800c3d2:	0020      	movs	r0, r4
 800c3d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c3d6 <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c3d6:	2300      	movs	r3, #0
{
 800c3d8:	b510      	push	{r4, lr}
    switch( region )
 800c3da:	2801      	cmp	r0, #1
 800c3dc:	d103      	bne.n	800c3e6 <RegionRxParamSetupReq+0x10>
        AU915_RX_PARAM_SETUP_REQ( );
 800c3de:	0008      	movs	r0, r1
 800c3e0:	f000 fc28 	bl	800cc34 <RegionAU915RxParamSetupReq>
 800c3e4:	0003      	movs	r3, r0
        }
    }
}
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	bd10      	pop	{r4, pc}

0800c3ea <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c3ea:	2300      	movs	r3, #0
{
 800c3ec:	b510      	push	{r4, lr}
    switch( region )
 800c3ee:	2801      	cmp	r0, #1
 800c3f0:	d103      	bne.n	800c3fa <RegionNewChannelReq+0x10>
        AU915_NEW_CHANNEL_REQ( );
 800c3f2:	0008      	movs	r0, r1
 800c3f4:	f000 fc45 	bl	800cc82 <RegionAU915NewChannelReq>
 800c3f8:	0003      	movs	r3, r0
        }
    }
}
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	bd10      	pop	{r4, pc}

0800c3fe <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c3fe:	2300      	movs	r3, #0
{
 800c400:	b510      	push	{r4, lr}
    switch( region )
 800c402:	2801      	cmp	r0, #1
 800c404:	d103      	bne.n	800c40e <RegionTxParamSetupReq+0x10>
        AU915_TX_PARAM_SETUP_REQ( );
 800c406:	0008      	movs	r0, r1
 800c408:	f000 fc3d 	bl	800cc86 <RegionAU915TxParamSetupReq>
 800c40c:	0003      	movs	r3, r0
        }
    }
}
 800c40e:	0018      	movs	r0, r3
 800c410:	bd10      	pop	{r4, pc}

0800c412 <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c412:	2300      	movs	r3, #0
{
 800c414:	b510      	push	{r4, lr}
    switch( region )
 800c416:	2801      	cmp	r0, #1
 800c418:	d103      	bne.n	800c422 <RegionDlChannelReq+0x10>
        AU915_DL_CHANNEL_REQ( );
 800c41a:	0008      	movs	r0, r1
 800c41c:	f000 fc35 	bl	800cc8a <RegionAU915DlChannelReq>
 800c420:	0003      	movs	r3, r0
        }
    }
}
 800c422:	0018      	movs	r0, r3
 800c424:	bd10      	pop	{r4, pc}

0800c426 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c426:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c428:	2300      	movs	r3, #0
{
 800c42a:	0004      	movs	r4, r0
 800c42c:	0008      	movs	r0, r1
 800c42e:	0011      	movs	r1, r2
    switch( region )
 800c430:	2c01      	cmp	r4, #1
 800c432:	d102      	bne.n	800c43a <RegionAlternateDr+0x14>
        AU915_ALTERNATE_DR( );
 800c434:	f000 fc2c 	bl	800cc90 <RegionAU915AlternateDr>
 800c438:	0003      	movs	r3, r0
        }
    }
}
 800c43a:	0018      	movs	r0, r3
 800c43c:	bd10      	pop	{r4, pc}

0800c43e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c43e:	b570      	push	{r4, r5, r6, lr}
 800c440:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c442:	2409      	movs	r4, #9
{
 800c444:	0008      	movs	r0, r1
 800c446:	0011      	movs	r1, r2
 800c448:	001a      	movs	r2, r3
    switch( region )
 800c44a:	2d01      	cmp	r5, #1
 800c44c:	d103      	bne.n	800c456 <RegionNextChannel+0x18>
        AU915_NEXT_CHANNEL( );
 800c44e:	9b04      	ldr	r3, [sp, #16]
 800c450:	f000 fc30 	bl	800ccb4 <RegionAU915NextChannel>
 800c454:	0004      	movs	r4, r0
        }
    }
}
 800c456:	0020      	movs	r0, r4
 800c458:	bd70      	pop	{r4, r5, r6, pc}

0800c45a <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c45a:	b510      	push	{r4, lr}
    switch( region )
 800c45c:	2801      	cmp	r0, #1
 800c45e:	d102      	bne.n	800c466 <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 800c460:	0008      	movs	r0, r1
 800c462:	f000 fc9b 	bl	800cd9c <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c466:	bd10      	pop	{r4, pc}

0800c468 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	0005      	movs	r5, r0
 800c46c:	0008      	movs	r0, r1
 800c46e:	0011      	movs	r1, r2
 800c470:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c472:	b2cc      	uxtb	r4, r1
    switch( region )
 800c474:	2d01      	cmp	r5, #1
 800c476:	d102      	bne.n	800c47e <RegionApplyDrOffset+0x16>
        AU915_APPLY_DR_OFFSET( );
 800c478:	f000 fcba 	bl	800cdf0 <RegionAU915ApplyDrOffset>
 800c47c:	0004      	movs	r4, r0
        }
    }
}
 800c47e:	0020      	movs	r0, r4
 800c480:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c484 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c484:	4800      	ldr	r0, [pc, #0]	; (800c488 <RegionGetVersion+0x4>)
 800c486:	4770      	bx	lr
 800c488:	01000300 	.word	0x01000300

0800c48c <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsAU915[drIndex] )
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <GetBandwidth+0x1c>)
 800c48e:	0080      	lsls	r0, r0, #2
 800c490:	58c3      	ldr	r3, [r0, r3]
 800c492:	4a06      	ldr	r2, [pc, #24]	; (800c4ac <GetBandwidth+0x20>)
 800c494:	2001      	movs	r0, #1
 800c496:	4293      	cmp	r3, r2
 800c498:	d004      	beq.n	800c4a4 <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800c49a:	4a05      	ldr	r2, [pc, #20]	; (800c4b0 <GetBandwidth+0x24>)
 800c49c:	189b      	adds	r3, r3, r2
 800c49e:	425a      	negs	r2, r3
 800c4a0:	4153      	adcs	r3, r2
 800c4a2:	0058      	lsls	r0, r3, #1
    }
}
 800c4a4:	4770      	bx	lr
 800c4a6:	46c0      	nop			; (mov r8, r8)
 800c4a8:	0800fafc 	.word	0x0800fafc
 800c4ac:	0003d090 	.word	0x0003d090
 800c4b0:	fff85ee0 	.word	0xfff85ee0

0800c4b4 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c4b4:	b530      	push	{r4, r5, lr}
 800c4b6:	0005      	movs	r5, r0
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	000c      	movs	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
    uint32_t bandwidth = GetBandwidth( datarate );
 800c4bc:	f7ff ffe6 	bl	800c48c <GetBandwidth>
    int8_t phyDr = DataratesAU915[datarate];
 800c4c0:	4b08      	ldr	r3, [pc, #32]	; (800c4e4 <GetTimeOnAir+0x30>)
    uint32_t bandwidth = GetBandwidth( datarate );
 800c4c2:	0001      	movs	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c4c4:	575a      	ldrsb	r2, [r3, r5]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	3308      	adds	r3, #8
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <GetTimeOnAir+0x34>)
 800c4d2:	b2e4      	uxtb	r4, r4
 800c4d4:	9402      	str	r4, [sp, #8]
 800c4d6:	9003      	str	r0, [sp, #12]
 800c4d8:	6a1c      	ldr	r4, [r3, #32]
 800c4da:	0003      	movs	r3, r0
 800c4dc:	47a0      	blx	r4
}
 800c4de:	b005      	add	sp, #20
 800c4e0:	bd30      	pop	{r4, r5, pc}
 800c4e2:	46c0      	nop			; (mov r8, r8)
 800c4e4:	0800fb66 	.word	0x0800fb66
 800c4e8:	0800fc84 	.word	0x0800fc84

0800c4ec <VerifyRfFreq>:
{
 800c4ec:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800c4ee:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <VerifyRfFreq+0x2c>)
{
 800c4f0:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	4798      	blx	r3
 800c4f8:	1e01      	subs	r1, r0, #0
 800c4fa:	d00b      	beq.n	800c514 <VerifyRfFreq+0x28>
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800c4fc:	4b07      	ldr	r3, [pc, #28]	; (800c51c <VerifyRfFreq+0x30>)
        return false;
 800c4fe:	2100      	movs	r1, #0
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800c500:	18e0      	adds	r0, r4, r3
 800c502:	4b07      	ldr	r3, [pc, #28]	; (800c520 <VerifyRfFreq+0x34>)
 800c504:	4298      	cmp	r0, r3
 800c506:	d805      	bhi.n	800c514 <VerifyRfFreq+0x28>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 800c508:	4906      	ldr	r1, [pc, #24]	; (800c524 <VerifyRfFreq+0x38>)
 800c50a:	f7f3 fea9 	bl	8000260 <__aeabi_uidivmod>
 800c50e:	424b      	negs	r3, r1
 800c510:	4159      	adcs	r1, r3
 800c512:	b2c9      	uxtb	r1, r1
}
 800c514:	0008      	movs	r0, r1
 800c516:	bd16      	pop	{r1, r2, r4, pc}
 800c518:	0800fc84 	.word	0x0800fc84
 800c51c:	c8f78f60 	.word	0xc8f78f60
 800c520:	00401640 	.word	0x00401640
 800c524:	000927c0 	.word	0x000927c0

0800c528 <RegionAU915GetPhyParam>:

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 800c528:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800c52a:	2200      	movs	r2, #0
{
 800c52c:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800c52e:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800c530:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800c532:	3801      	subs	r0, #1
 800c534:	2838      	cmp	r0, #56	; 0x38
 800c536:	d831      	bhi.n	800c59c <RegionAU915GetPhyParam+0x74>
 800c538:	f7f3 fdee 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c53c:	3030301d 	.word	0x3030301d
 800c540:	30303030 	.word	0x30303030
 800c544:	39363030 	.word	0x39363030
 800c548:	4e30453b 	.word	0x4e30453b
 800c54c:	52505250 	.word	0x52505250
 800c550:	61305754 	.word	0x61305754
 800c554:	67656320 	.word	0x67656320
 800c558:	6b303069 	.word	0x6b303069
 800c55c:	3030226e 	.word	0x3030226e
 800c560:	30303030 	.word	0x30303030
 800c564:	30303030 	.word	0x30303030
 800c568:	70303030 	.word	0x70303030
 800c56c:	207c2076 	.word	0x207c2076
 800c570:	7e202070 	.word	0x7e202070
 800c574:	82          	.byte	0x82
 800c575:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 800c576:	78db      	ldrb	r3, [r3, #3]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10f      	bne.n	800c59c <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 800c57c:	2308      	movs	r3, #8
 800c57e:	e014      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            if( getPhy->UplinkDwellTime == 0)
 800c580:	789a      	ldrb	r2, [r3, #2]
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_TX_MIN_DATARATE );
 800c582:	785b      	ldrb	r3, [r3, #1]
 800c584:	b25b      	sxtb	r3, r3
            if( getPhy->UplinkDwellTime == 0)
 800c586:	2a00      	cmp	r2, #0
 800c588:	d10a      	bne.n	800c5a0 <RegionAU915GetPhyParam+0x78>
    if( dr == minDr )
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <RegionAU915GetPhyParam+0x70>
        nextLowerDr = DR_6;
 800c58e:	3206      	adds	r2, #6
    else if( dr == DR_8 )
 800c590:	2b08      	cmp	r3, #8
 800c592:	d001      	beq.n	800c598 <RegionAU915GetPhyParam+0x70>
        nextLowerDr = dr - 1;
 800c594:	3b01      	subs	r3, #1
 800c596:	b2da      	uxtb	r2, r3
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 800c598:	b252      	sxtb	r2, r2
 800c59a:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800c59c:	9800      	ldr	r0, [sp, #0]
 800c59e:	bd0e      	pop	{r1, r2, r3, pc}
        nextLowerDr = minDr;
 800c5a0:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 800c5a2:	d0f9      	beq.n	800c598 <RegionAU915GetPhyParam+0x70>
        nextLowerDr = DR_6;
 800c5a4:	2206      	movs	r2, #6
 800c5a6:	e7f3      	b.n	800c590 <RegionAU915GetPhyParam+0x68>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 800c5a8:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800c5aa:	9300      	str	r3, [sp, #0]
            break;
 800c5ac:	e7f6      	b.n	800c59c <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 800c5ae:	2320      	movs	r3, #32
 800c5b0:	e7fb      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	569a      	ldrsb	r2, [r3, r2]
            if( getPhy->UplinkDwellTime == 0 )
 800c5b6:	789b      	ldrb	r3, [r3, #2]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d102      	bne.n	800c5c2 <RegionAU915GetPhyParam+0x9a>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800c5bc:	4b23      	ldr	r3, [pc, #140]	; (800c64c <RegionAU915GetPhyParam+0x124>)
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800c5be:	5cd3      	ldrb	r3, [r2, r3]
 800c5c0:	e7f3      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 800c5c2:	4b23      	ldr	r3, [pc, #140]	; (800c650 <RegionAU915GetPhyParam+0x128>)
 800c5c4:	e7fb      	b.n	800c5be <RegionAU915GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	569a      	ldrsb	r2, [r3, r2]
            if( getPhy->UplinkDwellTime == 0)
 800c5ca:	789b      	ldrb	r3, [r3, #2]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <RegionAU915GetPhyParam+0xac>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800c5d0:	4b20      	ldr	r3, [pc, #128]	; (800c654 <RegionAU915GetPhyParam+0x12c>)
 800c5d2:	e7f4      	b.n	800c5be <RegionAU915GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 800c5d4:	4b20      	ldr	r3, [pc, #128]	; (800c658 <RegionAU915GetPhyParam+0x130>)
 800c5d6:	e7f2      	b.n	800c5be <RegionAU915GetPhyParam+0x96>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 800c5d8:	4b20      	ldr	r3, [pc, #128]	; (800c65c <RegionAU915GetPhyParam+0x134>)
 800c5da:	e7e6      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <RegionAU915GetPhyParam+0x138>)
 800c5de:	e7e4      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 800c5e0:	4b20      	ldr	r3, [pc, #128]	; (800c664 <RegionAU915GetPhyParam+0x13c>)
 800c5e2:	e7e2      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 800c5e4:	2380      	movs	r3, #128	; 0x80
 800c5e6:	01db      	lsls	r3, r3, #7
 800c5e8:	e7df      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 800c5ea:	21fa      	movs	r1, #250	; 0xfa
 800c5ec:	481e      	ldr	r0, [pc, #120]	; (800c668 <RegionAU915GetPhyParam+0x140>)
 800c5ee:	0089      	lsls	r1, r1, #2
 800c5f0:	f000 fec4 	bl	800d37c <randr>
 800c5f4:	23fa      	movs	r3, #250	; 0xfa
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800c5fa:	9000      	str	r0, [sp, #0]
            break;
 800c5fc:	e7ce      	b.n	800c59c <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 800c5fe:	4b1b      	ldr	r3, [pc, #108]	; (800c66c <RegionAU915GetPhyParam+0x144>)
 800c600:	e7d3      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800c602:	4b1b      	ldr	r3, [pc, #108]	; (800c670 <RegionAU915GetPhyParam+0x148>)
 800c604:	e7d1      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800c606:	4b1b      	ldr	r3, [pc, #108]	; (800c674 <RegionAU915GetPhyParam+0x14c>)
 800c608:	e7cf      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 800c60a:	2348      	movs	r3, #72	; 0x48
 800c60c:	e7cd      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Channels = NvmCtx.Channels;
 800c60e:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <RegionAU915GetPhyParam+0x150>)
 800c610:	e7cb      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 800c612:	4b1a      	ldr	r3, [pc, #104]	; (800c67c <RegionAU915GetPhyParam+0x154>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800c614:	9300      	str	r3, [sp, #0]
            break;
 800c616:	e7c1      	b.n	800c59c <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800c618:	4b19      	ldr	r3, [pc, #100]	; (800c680 <RegionAU915GetPhyParam+0x158>)
 800c61a:	e7fb      	b.n	800c614 <RegionAU915GetPhyParam+0xec>
            phyParam.Value = AU915_BEACON_CHANNEL_FREQ + ( getPhy->Channel * AU915_BEACON_CHANNEL_STEPWIDTH );
 800c61c:	791a      	ldrb	r2, [r3, #4]
 800c61e:	4b19      	ldr	r3, [pc, #100]	; (800c684 <RegionAU915GetPhyParam+0x15c>)
 800c620:	4353      	muls	r3, r2
 800c622:	4a12      	ldr	r2, [pc, #72]	; (800c66c <RegionAU915GetPhyParam+0x144>)
 800c624:	189b      	adds	r3, r3, r2
 800c626:	e7c0      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 800c628:	466a      	mov	r2, sp
 800c62a:	4b17      	ldr	r3, [pc, #92]	; (800c688 <RegionAU915GetPhyParam+0x160>)
 800c62c:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 800c62e:	2301      	movs	r3, #1
 800c630:	7093      	strb	r3, [r2, #2]
            break;
 800c632:	e7b3      	b.n	800c59c <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 800c634:	4b13      	ldr	r3, [pc, #76]	; (800c684 <RegionAU915GetPhyParam+0x15c>)
 800c636:	e7b8      	b.n	800c5aa <RegionAU915GetPhyParam+0x82>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800c638:	785b      	ldrb	r3, [r3, #1]
 800c63a:	4a14      	ldr	r2, [pc, #80]	; (800c68c <RegionAU915GetPhyParam+0x164>)
 800c63c:	b25b      	sxtb	r3, r3
 800c63e:	e7be      	b.n	800c5be <RegionAU915GetPhyParam+0x96>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800c640:	2001      	movs	r0, #1
 800c642:	5618      	ldrsb	r0, [r3, r0]
 800c644:	f7ff ff22 	bl	800c48c <GetBandwidth>
 800c648:	e7d7      	b.n	800c5fa <RegionAU915GetPhyParam+0xd2>
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	0800fb76 	.word	0x0800fb76
 800c650:	0800fb84 	.word	0x0800fb84
 800c654:	0800fb92 	.word	0x0800fb92
 800c658:	0800fba0 	.word	0x0800fba0
 800c65c:	00000bb8 	.word	0x00000bb8
 800c660:	00001388 	.word	0x00001388
 800c664:	00001770 	.word	0x00001770
 800c668:	fffffc18 	.word	0xfffffc18
 800c66c:	370870a0 	.word	0x370870a0
 800c670:	20001320 	.word	0x20001320
 800c674:	20001338 	.word	0x20001338
 800c678:	20000fac 	.word	0x20000fac
 800c67c:	41f00000 	.word	0x41f00000
 800c680:	4009999a 	.word	0x4009999a
 800c684:	000927c0 	.word	0x000927c0
 800c688:	00000313 	.word	0x00000313
 800c68c:	0800fb66 	.word	0x0800fb66

0800c690 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800c690:	230c      	movs	r3, #12
{
 800c692:	b513      	push	{r0, r1, r4, lr}
 800c694:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800c696:	7842      	ldrb	r2, [r0, #1]
 800c698:	7800      	ldrb	r0, [r0, #0]
 800c69a:	4c08      	ldr	r4, [pc, #32]	; (800c6bc <RegionAU915SetBandTxDone+0x2c>)
 800c69c:	4343      	muls	r3, r0
 800c69e:	2014      	movs	r0, #20
 800c6a0:	18e3      	adds	r3, r4, r3
 800c6a2:	7a5b      	ldrb	r3, [r3, #9]
 800c6a4:	4358      	muls	r0, r3
 800c6a6:	23d8      	movs	r3, #216	; 0xd8
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	18c0      	adds	r0, r0, r3
 800c6ac:	690b      	ldr	r3, [r1, #16]
 800c6ae:	1900      	adds	r0, r0, r4
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	68cb      	ldr	r3, [r1, #12]
 800c6b4:	6889      	ldr	r1, [r1, #8]
 800c6b6:	f000 fc2b 	bl	800cf10 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800c6ba:	bd13      	pop	{r0, r1, r4, pc}
 800c6bc:	20000fac 	.word	0x20000fac

0800c6c0 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
    Band_t bands[AU915_MAX_NB_BANDS] =
 800c6c0:	2301      	movs	r3, #1
{
 800c6c2:	b570      	push	{r4, r5, r6, lr}
 800c6c4:	b086      	sub	sp, #24
    Band_t bands[AU915_MAX_NB_BANDS] =
 800c6c6:	a901      	add	r1, sp, #4
 800c6c8:	800b      	strh	r3, [r1, #0]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	708b      	strb	r3, [r1, #2]
 800c6ce:	604b      	str	r3, [r1, #4]
 800c6d0:	608b      	str	r3, [r1, #8]
 800c6d2:	60cb      	str	r3, [r1, #12]
 800c6d4:	740b      	strb	r3, [r1, #16]
    {
        AU915_BAND0
    };

    switch( params->Type )
 800c6d6:	7904      	ldrb	r4, [r0, #4]
 800c6d8:	2c02      	cmp	r4, #2
 800c6da:	d812      	bhi.n	800c702 <RegionAU915InitDefaults+0x42>
 800c6dc:	429c      	cmp	r4, r3
 800c6de:	d014      	beq.n	800c70a <RegionAU915InitDefaults+0x4a>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c6e0:	4c28      	ldr	r4, [pc, #160]	; (800c784 <RegionAU915InitDefaults+0xc4>)
 800c6e2:	2206      	movs	r2, #6
 800c6e4:	0020      	movs	r0, r4
 800c6e6:	4928      	ldr	r1, [pc, #160]	; (800c788 <RegionAU915InitDefaults+0xc8>)
 800c6e8:	f000 fc03 	bl	800cef2 <RegionCommonChanMaskCopy>
 800c6ec:	2306      	movs	r3, #6

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
            { // Copy-And the channels mask
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c6ee:	89a1      	ldrh	r1, [r4, #12]
 800c6f0:	8822      	ldrh	r2, [r4, #0]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800c6f2:	3b01      	subs	r3, #1
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c6f4:	400a      	ands	r2, r1
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800c6f6:	b2db      	uxtb	r3, r3
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c6f8:	81a2      	strh	r2, [r4, #12]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800c6fa:	3402      	adds	r4, #2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f6      	bne.n	800c6ee <RegionAU915InitDefaults+0x2e>
 800c700:	e001      	b.n	800c706 <RegionAU915InitDefaults+0x46>
    switch( params->Type )
 800c702:	2c03      	cmp	r4, #3
 800c704:	d034      	beq.n	800c770 <RegionAU915InitDefaults+0xb0>
        default:
        {
            break;
        }
    }
}
 800c706:	b006      	add	sp, #24
 800c708:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800c70a:	2214      	movs	r2, #20
 800c70c:	481f      	ldr	r0, [pc, #124]	; (800c78c <RegionAU915InitDefaults+0xcc>)
 800c70e:	f000 fe51 	bl	800d3b4 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c712:	4b1f      	ldr	r3, [pc, #124]	; (800c790 <RegionAU915InitDefaults+0xd0>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c714:	2550      	movs	r5, #80	; 0x50
 800c716:	0019      	movs	r1, r3
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800c718:	4a1e      	ldr	r2, [pc, #120]	; (800c794 <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c71a:	481f      	ldr	r0, [pc, #124]	; (800c798 <RegionAU915InitDefaults+0xd8>)
 800c71c:	4e1f      	ldr	r6, [pc, #124]	; (800c79c <RegionAU915InitDefaults+0xdc>)
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 800c71e:	601a      	str	r2, [r3, #0]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c720:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c722:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 800c724:	725c      	strb	r4, [r3, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c726:	330c      	adds	r3, #12
 800c728:	4282      	cmp	r2, r0
 800c72a:	d1f7      	bne.n	800c71c <RegionAU915InitDefaults+0x5c>
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800c72c:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 800c72e:	2000      	movs	r0, #0
 800c730:	4b1b      	ldr	r3, [pc, #108]	; (800c7a0 <RegionAU915InitDefaults+0xe0>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c732:	4a1c      	ldr	r2, [pc, #112]	; (800c7a4 <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800c734:	4c1c      	ldr	r4, [pc, #112]	; (800c7a8 <RegionAU915InitDefaults+0xe8>)
 800c736:	4e1d      	ldr	r6, [pc, #116]	; (800c7ac <RegionAU915InitDefaults+0xec>)
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800c738:	601a      	str	r2, [r3, #0]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800c73a:	1992      	adds	r2, r2, r6
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800c73c:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 800c73e:	7258      	strb	r0, [r3, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800c740:	330c      	adds	r3, #12
 800c742:	42a2      	cmp	r2, r4
 800c744:	d1f7      	bne.n	800c736 <RegionAU915InitDefaults+0x76>
            NvmCtx.ChannelsDefaultMask[0] = 0x00FF;
 800c746:	23e3      	movs	r3, #227	; 0xe3
 800c748:	22ff      	movs	r2, #255	; 0xff
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	50ca      	str	r2, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c74e:	4c0d      	ldr	r4, [pc, #52]	; (800c784 <RegionAU915InitDefaults+0xc4>)
            NvmCtx.ChannelsDefaultMask[2] = 0x0000;
 800c750:	3304      	adds	r3, #4
 800c752:	50c8      	str	r0, [r1, r3]
            NvmCtx.ChannelsDefaultMask[4] = 0x0001;
 800c754:	3afe      	subs	r2, #254	; 0xfe
 800c756:	3304      	adds	r3, #4
 800c758:	50ca      	str	r2, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c75a:	0020      	movs	r0, r4
 800c75c:	490a      	ldr	r1, [pc, #40]	; (800c788 <RegionAU915InitDefaults+0xc8>)
 800c75e:	3205      	adds	r2, #5
 800c760:	f000 fbc7 	bl	800cef2 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, CHANNELS_MASK_SIZE );
 800c764:	2206      	movs	r2, #6
 800c766:	0021      	movs	r1, r4
 800c768:	4811      	ldr	r0, [pc, #68]	; (800c7b0 <RegionAU915InitDefaults+0xf0>)
 800c76a:	f000 fbc2 	bl	800cef2 <RegionCommonChanMaskCopy>
            break;
 800c76e:	e7ca      	b.n	800c706 <RegionAU915InitDefaults+0x46>
            if( params->NvmCtx != 0 )
 800c770:	6801      	ldr	r1, [r0, #0]
 800c772:	2900      	cmp	r1, #0
 800c774:	d0c7      	beq.n	800c706 <RegionAU915InitDefaults+0x46>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800c776:	22e6      	movs	r2, #230	; 0xe6
 800c778:	4805      	ldr	r0, [pc, #20]	; (800c790 <RegionAU915InitDefaults+0xd0>)
 800c77a:	0092      	lsls	r2, r2, #2
 800c77c:	f000 fe1a 	bl	800d3b4 <memcpy1>
}
 800c780:	e7c1      	b.n	800c706 <RegionAU915InitDefaults+0x46>
 800c782:	46c0      	nop			; (mov r8, r8)
 800c784:	20001320 	.word	0x20001320
 800c788:	20001338 	.word	0x20001338
 800c78c:	2000130c 	.word	0x2000130c
 800c790:	20000fac 	.word	0x20000fac
 800c794:	368cd800 	.word	0x368cd800
 800c798:	37502800 	.word	0x37502800
 800c79c:	00030d40 	.word	0x00030d40
 800c7a0:	200012ac 	.word	0x200012ac
 800c7a4:	36978660 	.word	0x36978660
 800c7a8:	375ad660 	.word	0x375ad660
 800c7ac:	00186a00 	.word	0x00186a00
 800c7b0:	2000132c 	.word	0x2000132c

0800c7b4 <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 800c7b4:	23e6      	movs	r3, #230	; 0xe6
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800c7ba:	4801      	ldr	r0, [pc, #4]	; (800c7c0 <RegionAU915GetNvmCtx+0xc>)
 800c7bc:	4770      	bx	lr
 800c7be:	46c0      	nop			; (mov r8, r8)
 800c7c0:	20000fac 	.word	0x20000fac

0800c7c4 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c7c4:	0003      	movs	r3, r0
 800c7c6:	b510      	push	{r4, lr}
 800c7c8:	0008      	movs	r0, r1
    switch( phyAttribute )
 800c7ca:	290a      	cmp	r1, #10
 800c7cc:	d821      	bhi.n	800c812 <RegionAU915Verify+0x4e>
 800c7ce:	f7f3 fca3 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c7d2:	2006      	.short	0x2006
 800c7d4:	0a202020 	.word	0x0a202020
 800c7d8:	1c200f0a 	.word	0x1c200f0a
 800c7dc:	1c          	.byte	0x1c
 800c7dd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800c7de:	6818      	ldr	r0, [r3, #0]
 800c7e0:	f7ff fe84 	bl	800c4ec <VerifyRfFreq>
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800c7e4:	bd10      	pop	{r4, pc}
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	220c      	movs	r2, #12
 800c7ea:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	e006      	b.n	800c7fe <RegionAU915Verify+0x3a>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	5618      	ldrsb	r0, [r3, r0]
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c7f4:	789b      	ldrb	r3, [r3, #2]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 800c7f6:	220d      	movs	r2, #13
 800c7f8:	2108      	movs	r1, #8
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1f6      	bne.n	800c7ec <RegionAU915Verify+0x28>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800c7fe:	f000 fb3b 	bl	800ce78 <RegionCommonValueInRange>
 800c802:	1e43      	subs	r3, r0, #1
 800c804:	4198      	sbcs	r0, r3
 800c806:	b2c0      	uxtb	r0, r0
 800c808:	e7ec      	b.n	800c7e4 <RegionAU915Verify+0x20>
 800c80a:	2000      	movs	r0, #0
 800c80c:	2216      	movs	r2, #22
 800c80e:	5618      	ldrsb	r0, [r3, r0]
 800c810:	e7ec      	b.n	800c7ec <RegionAU915Verify+0x28>
    switch( phyAttribute )
 800c812:	2000      	movs	r0, #0
 800c814:	e7e6      	b.n	800c7e4 <RegionAU915Verify+0x20>
	...

0800c818 <RegionAU915ChanMaskSet>:
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
    }
}

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c818:	b570      	push	{r4, r5, r6, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800c81a:	7904      	ldrb	r4, [r0, #4]
 800c81c:	2c00      	cmp	r4, #0
 800c81e:	d003      	beq.n	800c828 <RegionAU915ChanMaskSet+0x10>
 800c820:	2c01      	cmp	r4, #1
 800c822:	d017      	beq.n	800c854 <RegionAU915ChanMaskSet+0x3c>
 800c824:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800c826:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 800c828:	4d0e      	ldr	r5, [pc, #56]	; (800c864 <RegionAU915ChanMaskSet+0x4c>)
 800c82a:	2206      	movs	r2, #6
 800c82c:	6801      	ldr	r1, [r0, #0]
 800c82e:	0028      	movs	r0, r5
 800c830:	f000 fb5f 	bl	800cef2 <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800c834:	23e5      	movs	r3, #229	; 0xe5
 800c836:	4a0c      	ldr	r2, [pc, #48]	; (800c868 <RegionAU915ChanMaskSet+0x50>)
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	50d4      	str	r4, [r2, r3]
 800c83c:	2306      	movs	r3, #6
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c83e:	89a9      	ldrh	r1, [r5, #12]
 800c840:	882a      	ldrh	r2, [r5, #0]
            for( uint8_t i = 0; i < 6; i++ )
 800c842:	3b01      	subs	r3, #1
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c844:	400a      	ands	r2, r1
            for( uint8_t i = 0; i < 6; i++ )
 800c846:	b2db      	uxtb	r3, r3
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c848:	81aa      	strh	r2, [r5, #12]
            for( uint8_t i = 0; i < 6; i++ )
 800c84a:	3502      	adds	r5, #2
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1f6      	bne.n	800c83e <RegionAU915ChanMaskSet+0x26>
    return true;
 800c850:	2001      	movs	r0, #1
 800c852:	e7e8      	b.n	800c826 <RegionAU915ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 800c854:	6801      	ldr	r1, [r0, #0]
 800c856:	2206      	movs	r2, #6
 800c858:	4804      	ldr	r0, [pc, #16]	; (800c86c <RegionAU915ChanMaskSet+0x54>)
 800c85a:	f000 fb4a 	bl	800cef2 <RegionCommonChanMaskCopy>
    return true;
 800c85e:	0020      	movs	r0, r4
            break;
 800c860:	e7e1      	b.n	800c826 <RegionAU915ChanMaskSet+0xe>
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	20001320 	.word	0x20001320
 800c868:	20000fac 	.word	0x20000fac
 800c86c:	20001338 	.word	0x20001338

0800c870 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c872:	001c      	movs	r4, r3
 800c874:	000e      	movs	r6, r1
 800c876:	0017      	movs	r7, r2
 800c878:	b085      	sub	sp, #20
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 800c87a:	1c03      	adds	r3, r0, #0
 800c87c:	280d      	cmp	r0, #13
 800c87e:	dd00      	ble.n	800c882 <RegionAU915ComputeRxWindowParameters+0x12>
 800c880:	230d      	movs	r3, #13
 800c882:	b25d      	sxtb	r5, r3
 800c884:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800c886:	0028      	movs	r0, r5
 800c888:	f7ff fe00 	bl	800c48c <GetBandwidth>

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800c88c:	4b0c      	ldr	r3, [pc, #48]	; (800c8c0 <RegionAU915ComputeRxWindowParameters+0x50>)
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800c88e:	70a0      	strb	r0, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800c890:	5d58      	ldrb	r0, [r3, r5]
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <RegionAU915ComputeRxWindowParameters+0x54>)
 800c894:	00aa      	lsls	r2, r5, #2
 800c896:	58d1      	ldr	r1, [r2, r3]
 800c898:	f000 fc4a 	bl	800d130 <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c89c:	4b0a      	ldr	r3, [pc, #40]	; (800c8c8 <RegionAU915ComputeRxWindowParameters+0x58>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800c89e:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	4798      	blx	r3
 800c8a6:	0022      	movs	r2, r4
 800c8a8:	3408      	adds	r4, #8
 800c8aa:	320c      	adds	r2, #12
 800c8ac:	0003      	movs	r3, r0
 800c8ae:	9201      	str	r2, [sp, #4]
 800c8b0:	0031      	movs	r1, r6
 800c8b2:	003a      	movs	r2, r7
 800c8b4:	0028      	movs	r0, r5
 800c8b6:	9400      	str	r4, [sp, #0]
 800c8b8:	f000 fc44 	bl	800d144 <RegionCommonComputeRxWindowParameters>
}
 800c8bc:	b005      	add	sp, #20
 800c8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c0:	0800fb66 	.word	0x0800fb66
 800c8c4:	0800fafc 	.word	0x0800fafc
 800c8c8:	0800fc84 	.word	0x0800fc84

0800c8cc <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 800c8ce:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800c8d0:	4f26      	ldr	r7, [pc, #152]	; (800c96c <RegionAU915RxConfig+0xa0>)
{
 800c8d2:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 800c8d4:	687b      	ldr	r3, [r7, #4]
{
 800c8d6:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800c8d8:	5786      	ldrsb	r6, [r0, r6]
{
 800c8da:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800c8dc:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 800c8de:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800c8e0:	4798      	blx	r3
    {
        return false;
 800c8e2:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800c8e4:	4298      	cmp	r0, r3
 800c8e6:	d13b      	bne.n	800c960 <RegionAU915RxConfig+0x94>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c8e8:	7ce3      	ldrb	r3, [r4, #19]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <RegionAU915RxConfig+0x30>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 800c8ee:	7825      	ldrb	r5, [r4, #0]
 800c8f0:	3307      	adds	r3, #7
 800c8f2:	402b      	ands	r3, r5
 800c8f4:	4d1e      	ldr	r5, [pc, #120]	; (800c970 <RegionAU915RxConfig+0xa4>)
 800c8f6:	435d      	muls	r5, r3
 800c8f8:	4b1e      	ldr	r3, [pc, #120]	; (800c974 <RegionAU915RxConfig+0xa8>)
 800c8fa:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 800c8fc:	4b1e      	ldr	r3, [pc, #120]	; (800c978 <RegionAU915RxConfig+0xac>)

    Radio.SetChannel( frequency );
 800c8fe:	0028      	movs	r0, r5
    phyDr = DataratesAU915[dr];
 800c900:	579b      	ldrsb	r3, [r3, r6]
 800c902:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	930d      	str	r3, [sp, #52]	; 0x34
 800c908:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c90a:	7ca3      	ldrb	r3, [r4, #18]
 800c90c:	2200      	movs	r2, #0
 800c90e:	9309      	str	r3, [sp, #36]	; 0x24
 800c910:	68a3      	ldr	r3, [r4, #8]
 800c912:	2001      	movs	r0, #1
 800c914:	b29b      	uxth	r3, r3
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	2308      	movs	r3, #8
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	9207      	str	r2, [sp, #28]
 800c920:	930d      	str	r3, [sp, #52]	; 0x34
 800c922:	9206      	str	r2, [sp, #24]
 800c924:	0003      	movs	r3, r0
 800c926:	9205      	str	r2, [sp, #20]
 800c928:	9204      	str	r2, [sp, #16]
 800c92a:	9203      	str	r2, [sp, #12]
 800c92c:	9200      	str	r2, [sp, #0]
 800c92e:	78a1      	ldrb	r1, [r4, #2]
 800c930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c932:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c934:	9008      	str	r0, [sp, #32]
 800c936:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 800c938:	7c63      	ldrb	r3, [r4, #17]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d013      	beq.n	800c966 <RegionAU915RxConfig+0x9a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 800c93e:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <RegionAU915RxConfig+0xb0>)
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800c940:	5d99      	ldrb	r1, [r3, r6]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c942:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <RegionAU915RxConfig+0xa0>)
 800c944:	310d      	adds	r1, #13
 800c946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c948:	2001      	movs	r0, #1
 800c94a:	b2c9      	uxtb	r1, r1
 800c94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c94e:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c950:	0032      	movs	r2, r6
 800c952:	0029      	movs	r1, r5
 800c954:	7ce0      	ldrb	r0, [r4, #19]
 800c956:	f000 fcd5 	bl	800d304 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800c95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95c:	701e      	strb	r6, [r3, #0]
    return true;
 800c95e:	2301      	movs	r3, #1
}
 800c960:	0018      	movs	r0, r3
 800c962:	b00f      	add	sp, #60	; 0x3c
 800c964:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800c966:	4b06      	ldr	r3, [pc, #24]	; (800c980 <RegionAU915RxConfig+0xb4>)
 800c968:	e7ea      	b.n	800c940 <RegionAU915RxConfig+0x74>
 800c96a:	46c0      	nop			; (mov r8, r8)
 800c96c:	0800fc84 	.word	0x0800fc84
 800c970:	000927c0 	.word	0x000927c0
 800c974:	370870a0 	.word	0x370870a0
 800c978:	0800fb66 	.word	0x0800fb66
 800c97c:	0800fb92 	.word	0x0800fb92
 800c980:	0800fb76 	.word	0x0800fb76

0800c984 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c986:	0004      	movs	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800c988:	2001      	movs	r0, #1
{
 800c98a:	b091      	sub	sp, #68	; 0x44
 800c98c:	920d      	str	r2, [sp, #52]	; 0x34
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c98e:	220c      	movs	r2, #12
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800c990:	5620      	ldrsb	r0, [r4, r0]
 800c992:	4b2e      	ldr	r3, [pc, #184]	; (800ca4c <RegionAU915TxConfig+0xc8>)
{
 800c994:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c996:	7821      	ldrb	r1, [r4, #0]
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800c998:	561b      	ldrsb	r3, [r3, r0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c99a:	434a      	muls	r2, r1
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800c99c:	001f      	movs	r7, r3
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c99e:	4b2c      	ldr	r3, [pc, #176]	; (800ca50 <RegionAU915TxConfig+0xcc>)
 800c9a0:	189a      	adds	r2, r3, r2
 800c9a2:	7a51      	ldrb	r1, [r2, #9]
 800c9a4:	2214      	movs	r2, #20
 800c9a6:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c9a8:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c9aa:	189b      	adds	r3, r3, r2
 800c9ac:	4a29      	ldr	r2, [pc, #164]	; (800ca54 <RegionAU915TxConfig+0xd0>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c9ae:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800c9b0:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	78a2      	ldrb	r2, [r4, #2]
 800c9b6:	1c1e      	adds	r6, r3, #0
 800c9b8:	b25b      	sxtb	r3, r3
 800c9ba:	428b      	cmp	r3, r1
 800c9bc:	da00      	bge.n	800c9c0 <RegionAU915TxConfig+0x3c>
 800c9be:	1c16      	adds	r6, r2, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800c9c0:	f7ff fd64 	bl	800c48c <GetBandwidth>
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800c9c4:	b275      	sxtb	r5, r6
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c9c6:	68a2      	ldr	r2, [r4, #8]
 800c9c8:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800c9ca:	900b      	str	r0, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c9cc:	0028      	movs	r0, r5
 800c9ce:	f000 fbe3 	bl	800d198 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800c9d2:	220c      	movs	r2, #12
 800c9d4:	7823      	ldrb	r3, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c9d6:	900e      	str	r0, [sp, #56]	; 0x38
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800c9d8:	4353      	muls	r3, r2
 800c9da:	4a1f      	ldr	r2, [pc, #124]	; (800ca58 <RegionAU915TxConfig+0xd4>)

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c9dc:	2501      	movs	r5, #1
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800c9de:	68d1      	ldr	r1, [r2, #12]
 800c9e0:	910f      	str	r1, [sp, #60]	; 0x3c
 800c9e2:	491b      	ldr	r1, [pc, #108]	; (800ca50 <RegionAU915TxConfig+0xcc>)
 800c9e4:	5858      	ldr	r0, [r3, r1]
 800c9e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9e8:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c9ea:	23fa      	movs	r3, #250	; 0xfa
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	9308      	str	r3, [sp, #32]
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	9302      	str	r3, [sp, #8]
 800c9f6:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <RegionAU915TxConfig+0xd4>)
 800c9f8:	0028      	movs	r0, r5
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca00:	9207      	str	r2, [sp, #28]
 800ca02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca04:	9206      	str	r2, [sp, #24]
 800ca06:	9205      	str	r2, [sp, #20]
 800ca08:	9203      	str	r2, [sp, #12]
 800ca0a:	9700      	str	r7, [sp, #0]
 800ca0c:	9504      	str	r5, [sp, #16]
 800ca0e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ca10:	9501      	str	r5, [sp, #4]
 800ca12:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ca14:	220c      	movs	r2, #12
 800ca16:	2101      	movs	r1, #1
 800ca18:	7823      	ldrb	r3, [r4, #0]
 800ca1a:	5661      	ldrsb	r1, [r4, r1]
 800ca1c:	4353      	muls	r3, r2
 800ca1e:	4a0c      	ldr	r2, [pc, #48]	; (800ca50 <RegionAU915TxConfig+0xcc>)
 800ca20:	5898      	ldr	r0, [r3, r2]
 800ca22:	f000 fc99 	bl	800d358 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <RegionAU915TxConfig+0xd4>)
 800ca28:	0028      	movs	r0, r5
 800ca2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca2c:	7b21      	ldrb	r1, [r4, #12]
 800ca2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca30:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ca32:	2001      	movs	r0, #1
 800ca34:	89a1      	ldrh	r1, [r4, #12]
 800ca36:	5620      	ldrsb	r0, [r4, r0]
 800ca38:	f7ff fd3c 	bl	800c4b4 <GetTimeOnAir>
 800ca3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca3e:	6018      	str	r0, [r3, #0]

    *txPower = txPowerLimited;
    return true;
}
 800ca40:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 800ca42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca44:	701e      	strb	r6, [r3, #0]
}
 800ca46:	b011      	add	sp, #68	; 0x44
 800ca48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca4a:	46c0      	nop			; (mov r8, r8)
 800ca4c:	0800fb66 	.word	0x0800fb66
 800ca50:	20000fac 	.word	0x20000fac
 800ca54:	00000362 	.word	0x00000362
 800ca58:	0800fc84 	.word	0x0800fc84

0800ca5c <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5e:	b099      	sub	sp, #100	; 0x64
 800ca60:	9105      	str	r1, [sp, #20]
 800ca62:	9206      	str	r2, [sp, #24]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ca64:	2100      	movs	r1, #0
 800ca66:	2206      	movs	r2, #6
{
 800ca68:	0005      	movs	r5, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ca6a:	a80b      	add	r0, sp, #44	; 0x2c
{
 800ca6c:	9307      	str	r3, [sp, #28]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ca6e:	f002 fab4 	bl	800efda <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800ca72:	220c      	movs	r2, #12
 800ca74:	2100      	movs	r1, #0
 800ca76:	a80d      	add	r0, sp, #52	; 0x34
 800ca78:	f002 faaf 	bl	800efda <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 800ca7c:	2206      	movs	r2, #6
 800ca7e:	496a      	ldr	r1, [pc, #424]	; (800cc28 <RegionAU915LinkAdrReq+0x1cc>)
 800ca80:	a80d      	add	r0, sp, #52	; 0x34
 800ca82:	f000 fa36 	bl	800cef2 <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 800ca86:	2300      	movs	r3, #0
            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800ca88:	27ff      	movs	r7, #255	; 0xff
    uint8_t bytesProcessed = 0;
 800ca8a:	9301      	str	r3, [sp, #4]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ca8c:	7a2b      	ldrb	r3, [r5, #8]
 800ca8e:	9a01      	ldr	r2, [sp, #4]
 800ca90:	ae0b      	add	r6, sp, #44	; 0x2c
 800ca92:	ac0d      	add	r4, sp, #52	; 0x34
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d907      	bls.n	800caa8 <RegionAU915LinkAdrReq+0x4c>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ca98:	686b      	ldr	r3, [r5, #4]
 800ca9a:	9a01      	ldr	r2, [sp, #4]
 800ca9c:	0031      	movs	r1, r6
 800ca9e:	1898      	adds	r0, r3, r2
 800caa0:	f000 fae4 	bl	800d06c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d167      	bne.n	800cb78 <RegionAU915LinkAdrReq+0x11c>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800caa8:	2301      	movs	r3, #1
 800caaa:	56f3      	ldrsb	r3, [r6, r3]
 800caac:	2b05      	cmp	r3, #5
 800caae:	dc07      	bgt.n	800cac0 <RegionAU915LinkAdrReq+0x64>
 800cab0:	0020      	movs	r0, r4
 800cab2:	2204      	movs	r2, #4
 800cab4:	2100      	movs	r1, #0
 800cab6:	f000 f9fd 	bl	800ceb4 <RegionCommonCountChannels>
    {
        status &= 0xFE; // Channel mask KO
 800caba:	2406      	movs	r4, #6
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800cabc:	2801      	cmp	r0, #1
 800cabe:	d900      	bls.n	800cac2 <RegionAU915LinkAdrReq+0x66>
    uint8_t bytesProcessed = 0;
 800cac0:	2407      	movs	r4, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800cac2:	2302      	movs	r3, #2
 800cac4:	aa08      	add	r2, sp, #32
 800cac6:	7113      	strb	r3, [r2, #4]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cac8:	7a6b      	ldrb	r3, [r5, #9]
    phyParam = RegionAU915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800caca:	af10      	add	r7, sp, #64	; 0x40
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800cacc:	a809      	add	r0, sp, #36	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cace:	7193      	strb	r3, [r2, #6]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800cad0:	f7ff fd2a 	bl	800c528 <RegionAU915GetPhyParam>
    linkAdrVerifyParams.Status = status;
 800cad4:	713c      	strb	r4, [r7, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cad6:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cad8:	a908      	add	r1, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cada:	717b      	strb	r3, [r7, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cadc:	ab0b      	add	r3, sp, #44	; 0x2c
 800cade:	785a      	ldrb	r2, [r3, #1]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800cae0:	4c52      	ldr	r4, [pc, #328]	; (800cc2c <RegionAU915LinkAdrReq+0x1d0>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cae2:	71ba      	strb	r2, [r7, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cae4:	789a      	ldrb	r2, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800cae6:	ae0d      	add	r6, sp, #52	; 0x34
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cae8:	71fa      	strb	r2, [r7, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800caea:	781a      	ldrb	r2, [r3, #0]
 800caec:	723a      	strb	r2, [r7, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800caee:	7aea      	ldrb	r2, [r5, #11]
 800caf0:	727a      	strb	r2, [r7, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800caf2:	7b2a      	ldrb	r2, [r5, #12]
 800caf4:	72ba      	strb	r2, [r7, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800caf6:	7b6a      	ldrb	r2, [r5, #13]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800caf8:	7538      	strb	r0, [r7, #20]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cafa:	72fa      	strb	r2, [r7, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800cafc:	2248      	movs	r2, #72	; 0x48
 800cafe:	733a      	strb	r2, [r7, #12]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800cb00:	3a3c      	subs	r2, #60	; 0x3c
 800cb02:	757a      	strb	r2, [r7, #21]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 800cb04:	320a      	adds	r2, #10
 800cb06:	83ba      	strh	r2, [r7, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cb08:	682a      	ldr	r2, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cb0a:	a808      	add	r0, sp, #32
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cb0c:	9210      	str	r2, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cb0e:	220e      	movs	r2, #14
 800cb10:	1852      	adds	r2, r2, r1
 800cb12:	210d      	movs	r1, #13
 800cb14:	1809      	adds	r1, r1, r0
 800cb16:	0038      	movs	r0, r7
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800cb18:	9614      	str	r6, [sp, #80]	; 0x50
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800cb1a:	9416      	str	r4, [sp, #88]	; 0x58
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cb1c:	f000 fac1 	bl	800d0a2 <RegionCommonLinkAdrReqVerifyParams>
 800cb20:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800cb22:	2807      	cmp	r0, #7
 800cb24:	d118      	bne.n	800cb58 <RegionAU915LinkAdrReq+0xfc>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 800cb26:	2206      	movs	r2, #6
 800cb28:	0031      	movs	r1, r6
 800cb2a:	483f      	ldr	r0, [pc, #252]	; (800cc28 <RegionAU915LinkAdrReq+0x1cc>)
 800cb2c:	f000 f9e1 	bl	800cef2 <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 800cb30:	22e0      	movs	r2, #224	; 0xe0
 800cb32:	23dd      	movs	r3, #221	; 0xdd
 800cb34:	0092      	lsls	r2, r2, #2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	58a1      	ldr	r1, [r4, r2]
 800cb3a:	58e3      	ldr	r3, [r4, r3]
 800cb3c:	400b      	ands	r3, r1
 800cb3e:	50a3      	str	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 800cb40:	23de      	movs	r3, #222	; 0xde
 800cb42:	3204      	adds	r2, #4
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	58a1      	ldr	r1, [r4, r2]
 800cb48:	58e3      	ldr	r3, [r4, r3]
 800cb4a:	400b      	ands	r3, r1
 800cb4c:	50a3      	str	r3, [r4, r2]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 800cb4e:	23df      	movs	r3, #223	; 0xdf
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	58e2      	ldr	r2, [r4, r3]
 800cb54:	330c      	adds	r3, #12
 800cb56:	50e2      	str	r2, [r4, r3]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800cb58:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800cb5a:	ab0b      	add	r3, sp, #44	; 0x2c
 800cb5c:	785a      	ldrb	r2, [r3, #1]
 800cb5e:	9905      	ldr	r1, [sp, #20]
 800cb60:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800cb62:	789a      	ldrb	r2, [r3, #2]
 800cb64:	9906      	ldr	r1, [sp, #24]
    *nbRepOut = linkAdrParams.NbRep;
 800cb66:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 800cb68:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800cb6a:	9a07      	ldr	r2, [sp, #28]
 800cb6c:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800cb6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cb70:	9a01      	ldr	r2, [sp, #4]
 800cb72:	701a      	strb	r2, [r3, #0]
}
 800cb74:	b019      	add	sp, #100	; 0x64
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800cb78:	9b01      	ldr	r3, [sp, #4]
 800cb7a:	1818      	adds	r0, r3, r0
 800cb7c:	b2c3      	uxtb	r3, r0
 800cb7e:	9301      	str	r3, [sp, #4]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800cb80:	78f3      	ldrb	r3, [r6, #3]
 800cb82:	2b06      	cmp	r3, #6
 800cb84:	d106      	bne.n	800cb94 <RegionAU915LinkAdrReq+0x138>
            channelsMask[1] = 0x0000;//0xFFFF;
 800cb86:	2300      	movs	r3, #0
            channelsMask[0] = 0x00FF;//0xFFFF;
 800cb88:	8027      	strh	r7, [r4, #0]
            channelsMask[1] = 0x0000;
 800cb8a:	8063      	strh	r3, [r4, #2]
            channelsMask[2] = 0x0000;
 800cb8c:	80a3      	strh	r3, [r4, #4]
            channelsMask[3] = 0x0000;
 800cb8e:	80e3      	strh	r3, [r4, #6]
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800cb90:	8123      	strh	r3, [r4, #8]
 800cb92:	e77b      	b.n	800ca8c <RegionAU915LinkAdrReq+0x30>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800cb94:	2b07      	cmp	r3, #7
 800cb96:	d102      	bne.n	800cb9e <RegionAU915LinkAdrReq+0x142>
            channelsMask[0] = 0x0000;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	8023      	strh	r3, [r4, #0]
 800cb9c:	e7f5      	b.n	800cb8a <RegionAU915LinkAdrReq+0x12e>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800cb9e:	88b2      	ldrh	r2, [r6, #4]
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800cba0:	2b05      	cmp	r3, #5
 800cba2:	d13d      	bne.n	800cc20 <RegionAU915LinkAdrReq+0x1c4>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800cba4:	2100      	movs	r1, #0
 800cba6:	403a      	ands	r2, r7
 800cba8:	9204      	str	r2, [sp, #16]
            uint8_t cntChannelMask = 0;
 800cbaa:	000a      	movs	r2, r1
                        channelsMask[4] |= ( bitMask << i );
 800cbac:	2001      	movs	r0, #1
                    if( ( i % 2 ) == 0 )
 800cbae:	2301      	movs	r3, #1
                        channelsMask[4] |= ( bitMask << i );
 800cbb0:	4088      	lsls	r0, r1
                    if( ( i % 2 ) == 0 )
 800cbb2:	400b      	ands	r3, r1
                        channelsMask[cntChannelMask] |= 0x00FF;
 800cbb4:	0056      	lsls	r6, r2, #1
                    if( ( i % 2 ) == 0 )
 800cbb6:	469c      	mov	ip, r3
                        channelsMask[cntChannelMask] |= 0x00FF;
 800cbb8:	5b33      	ldrh	r3, [r6, r4]
 800cbba:	9302      	str	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800cbbc:	b203      	sxth	r3, r0
 800cbbe:	9303      	str	r3, [sp, #12]
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800cbc0:	0003      	movs	r3, r0
 800cbc2:	9804      	ldr	r0, [sp, #16]
 800cbc4:	4203      	tst	r3, r0
 800cbc6:	d018      	beq.n	800cbfa <RegionAU915LinkAdrReq+0x19e>
                    if( ( i % 2 ) == 0 )
 800cbc8:	4663      	mov	r3, ip
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <RegionAU915LinkAdrReq+0x188>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800cbce:	9b02      	ldr	r3, [sp, #8]
                        channelsMask[4] |= ( bitMask << i );
 800cbd0:	9803      	ldr	r0, [sp, #12]
                        channelsMask[cntChannelMask] |= 0x00FF;
 800cbd2:	433b      	orrs	r3, r7
 800cbd4:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800cbd6:	8923      	ldrh	r3, [r4, #8]
 800cbd8:	4303      	orrs	r3, r0
 800cbda:	8123      	strh	r3, [r4, #8]
            for( uint8_t i = 0; i <= 7; i++ )
 800cbdc:	3101      	adds	r1, #1
 800cbde:	2908      	cmp	r1, #8
 800cbe0:	d1e4      	bne.n	800cbac <RegionAU915LinkAdrReq+0x150>
 800cbe2:	e753      	b.n	800ca8c <RegionAU915LinkAdrReq+0x30>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800cbe4:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <RegionAU915LinkAdrReq+0x1d4>)
 800cbe6:	9802      	ldr	r0, [sp, #8]
 800cbe8:	4318      	orrs	r0, r3
 800cbea:	5330      	strh	r0, [r6, r4]
                        channelsMask[4] |= ( bitMask << i );
 800cbec:	8923      	ldrh	r3, [r4, #8]
 800cbee:	9803      	ldr	r0, [sp, #12]
 800cbf0:	4303      	orrs	r3, r0
 800cbf2:	8123      	strh	r3, [r4, #8]
                        cntChannelMask++;
 800cbf4:	3201      	adds	r2, #1
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	e7f0      	b.n	800cbdc <RegionAU915LinkAdrReq+0x180>
                        channelsMask[4] &= ~( bitMask << i );
 800cbfa:	9b03      	ldr	r3, [sp, #12]
 800cbfc:	43d8      	mvns	r0, r3
                    if( ( i % 2 ) == 0 )
 800cbfe:	4663      	mov	r3, ip
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <RegionAU915LinkAdrReq+0x1b6>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800cc04:	9b02      	ldr	r3, [sp, #8]
 800cc06:	43bb      	bics	r3, r7
 800cc08:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800cc0a:	8923      	ldrh	r3, [r4, #8]
 800cc0c:	4018      	ands	r0, r3
 800cc0e:	8120      	strh	r0, [r4, #8]
 800cc10:	e7e4      	b.n	800cbdc <RegionAU915LinkAdrReq+0x180>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800cc12:	9b02      	ldr	r3, [sp, #8]
 800cc14:	403b      	ands	r3, r7
 800cc16:	5333      	strh	r3, [r6, r4]
                        channelsMask[4] &= ~( bitMask << i );
 800cc18:	8923      	ldrh	r3, [r4, #8]
 800cc1a:	4018      	ands	r0, r3
 800cc1c:	8120      	strh	r0, [r4, #8]
 800cc1e:	e7e9      	b.n	800cbf4 <RegionAU915LinkAdrReq+0x198>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800cc20:	005b      	lsls	r3, r3, #1
 800cc22:	531a      	strh	r2, [r3, r4]
 800cc24:	e732      	b.n	800ca8c <RegionAU915LinkAdrReq+0x30>
 800cc26:	46c0      	nop			; (mov r8, r8)
 800cc28:	20001320 	.word	0x20001320
 800cc2c:	20000fac 	.word	0x20000fac
 800cc30:	ffffff00 	.word	0xffffff00

0800cc34 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800cc34:	b570      	push	{r4, r5, r6, lr}
 800cc36:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800cc38:	6840      	ldr	r0, [r0, #4]
 800cc3a:	f7ff fc57 	bl	800c4ec <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800cc3e:	1e43      	subs	r3, r0, #1
 800cc40:	4198      	sbcs	r0, r3
 800cc42:	0004      	movs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800cc44:	2000      	movs	r0, #0
 800cc46:	220d      	movs	r2, #13
 800cc48:	2108      	movs	r1, #8
 800cc4a:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800cc4c:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800cc4e:	f000 f913 	bl	800ce78 <RegionCommonValueInRange>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d101      	bne.n	800cc5a <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800cc56:	2302      	movs	r3, #2
 800cc58:	439c      	bics	r4, r3
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	56eb      	ldrsb	r3, [r5, r3]
 800cc5e:	2b07      	cmp	r3, #7
 800cc60:	d001      	beq.n	800cc66 <RegionAU915RxParamSetupReq+0x32>
 800cc62:	2b0d      	cmp	r3, #13
 800cc64:	dd01      	ble.n	800cc6a <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800cc66:	2302      	movs	r3, #2
 800cc68:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	2206      	movs	r2, #6
 800cc6e:	2100      	movs	r1, #0
 800cc70:	5628      	ldrsb	r0, [r5, r0]
 800cc72:	f000 f901 	bl	800ce78 <RegionCommonValueInRange>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d101      	bne.n	800cc7e <RegionAU915RxParamSetupReq+0x4a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800cc7a:	2304      	movs	r3, #4
 800cc7c:	439c      	bics	r4, r3
    }

    return status;
}
 800cc7e:	0020      	movs	r0, r4
 800cc80:	bd70      	pop	{r4, r5, r6, pc}

0800cc82 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 800cc82:	2000      	movs	r0, #0
 800cc84:	4770      	bx	lr

0800cc86 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800cc86:	2000      	movs	r0, #0
 800cc88:	4770      	bx	lr

0800cc8a <RegionAU915DlChannelReq>:
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	4770      	bx	lr
	...

0800cc90 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    static int8_t trialsCount = 0;

    // Re-enable 500 kHz default channels
    NvmCtx.ChannelsMask[4] = CHANNELS_MASK_500KHZ_MASK;
 800cc90:	23df      	movs	r3, #223	; 0xdf
 800cc92:	2100      	movs	r1, #0
 800cc94:	4a05      	ldr	r2, [pc, #20]	; (800ccac <RegionAU915AlternateDr+0x1c>)
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	52d1      	strh	r1, [r2, r3]

    if( ( trialsCount & 0x01 ) == 0x01 )
 800cc9a:	4a05      	ldr	r2, [pc, #20]	; (800ccb0 <RegionAU915AlternateDr+0x20>)
    {
        currentDr = DR_6;
 800cc9c:	2006      	movs	r0, #6
    if( ( trialsCount & 0x01 ) == 0x01 )
 800cc9e:	7813      	ldrb	r3, [r2, #0]
 800cca0:	07d9      	lsls	r1, r3, #31
 800cca2:	d400      	bmi.n	800cca6 <RegionAU915AlternateDr+0x16>
    }
    else
    {
        currentDr = DR_2;
 800cca4:	3804      	subs	r0, #4
    }
    trialsCount++;
 800cca6:	3301      	adds	r3, #1
 800cca8:	7013      	strb	r3, [r2, #0]
    return currentDr;
}
 800ccaa:	4770      	bx	lr
 800ccac:	20000fac 	.word	0x20000fac
 800ccb0:	20001344 	.word	0x20001344

0800ccb4 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800ccb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb6:	b0a7      	sub	sp, #156	; 0x9c
 800ccb8:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800ccba:	230a      	movs	r3, #10
 800ccbc:	2500      	movs	r5, #0
{
 800ccbe:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 800ccc0:	aa04      	add	r2, sp, #16
 800ccc2:	189b      	adds	r3, r3, r2
 800ccc4:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800ccc6:	230b      	movs	r3, #11
{
 800ccc8:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800ccca:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800cccc:	0029      	movs	r1, r5
 800ccce:	2244      	movs	r2, #68	; 0x44
{
 800ccd0:	0004      	movs	r4, r0
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800ccd2:	a815      	add	r0, sp, #84	; 0x54
    uint8_t nbRestrictedChannels = 0;
 800ccd4:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800ccd6:	9514      	str	r5, [sp, #80]	; 0x50
 800ccd8:	f002 f97f 	bl	800efda <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 800ccdc:	4e2b      	ldr	r6, [pc, #172]	; (800cd8c <RegionAU915NextChannel+0xd8>)
 800ccde:	2204      	movs	r2, #4
 800cce0:	0029      	movs	r1, r5
 800cce2:	0030      	movs	r0, r6
 800cce4:	f000 f8e6 	bl	800ceb4 <RegionCommonCountChannels>
 800cce8:	42a8      	cmp	r0, r5
 800ccea:	d104      	bne.n	800ccf6 <RegionAU915NextChannel+0x42>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 800ccec:	2204      	movs	r2, #4
 800ccee:	0030      	movs	r0, r6
 800ccf0:	4927      	ldr	r1, [pc, #156]	; (800cd90 <RegionAU915NextChannel+0xdc>)
 800ccf2:	f000 f8fe 	bl	800cef2 <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 800ccf6:	2008      	movs	r0, #8
 800ccf8:	5620      	ldrsb	r0, [r4, r0]
 800ccfa:	2805      	cmp	r0, #5
 800ccfc:	dd05      	ble.n	800cd0a <RegionAU915NextChannel+0x56>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 800ccfe:	22df      	movs	r2, #223	; 0xdf
 800cd00:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <RegionAU915NextChannel+0xe0>)
 800cd02:	0092      	lsls	r2, r2, #2
 800cd04:	5a99      	ldrh	r1, [r3, r2]
 800cd06:	320c      	adds	r2, #12
 800cd08:	5299      	strh	r1, [r3, r2]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800cd0a:	7a63      	ldrb	r3, [r4, #9]
 800cd0c:	ae07      	add	r6, sp, #28
 800cd0e:	7033      	strb	r3, [r6, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMaskRemaining;
 800cd10:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <RegionAU915NextChannel+0xd8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800cd12:	7070      	strb	r0, [r6, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMaskRemaining;
 800cd14:	9308      	str	r3, [sp, #32]
    countChannelsParams.Channels = NvmCtx.Channels;
 800cd16:	4b1f      	ldr	r3, [pc, #124]	; (800cd94 <RegionAU915NextChannel+0xe0>)
    countChannelsParams.Bands = NvmCtx.Bands;
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = 0;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cd18:	ad0c      	add	r5, sp, #48	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 800cd1a:	9309      	str	r3, [sp, #36]	; 0x24
    countChannelsParams.Bands = NvmCtx.Bands;
 800cd1c:	4b1e      	ldr	r3, [pc, #120]	; (800cd98 <RegionAU915NextChannel+0xe4>)
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cd1e:	0022      	movs	r2, r4
    countChannelsParams.Bands = NvmCtx.Bands;
 800cd20:	930a      	str	r3, [sp, #40]	; 0x28
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 800cd22:	2348      	movs	r3, #72	; 0x48
 800cd24:	930b      	str	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cd26:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cd28:	320c      	adds	r2, #12
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cd2a:	930c      	str	r3, [sp, #48]	; 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800cd2c:	6863      	ldr	r3, [r4, #4]
 800cd2e:	930d      	str	r3, [sp, #52]	; 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800cd30:	7aa3      	ldrb	r3, [r4, #10]
 800cd32:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800cd34:	2301      	movs	r3, #1
 800cd36:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cd38:	ab0f      	add	r3, sp, #60	; 0x3c
 800cd3a:	ca82      	ldmia	r2!, {r1, r7}
 800cd3c:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800cd3e:	7d23      	ldrb	r3, [r4, #20]
 800cd40:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800cd42:	8ae1      	ldrh	r1, [r4, #22]
 800cd44:	f7ff fbb6 	bl	800c4b4 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800cd48:	9613      	str	r6, [sp, #76]	; 0x4c

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800cd4a:	260a      	movs	r6, #10
 800cd4c:	ab04      	add	r3, sp, #16
 800cd4e:	18f6      	adds	r6, r6, r3
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	aa04      	add	r2, sp, #16
 800cd54:	9301      	str	r3, [sp, #4]
 800cd56:	230b      	movs	r3, #11
 800cd58:	ac14      	add	r4, sp, #80	; 0x50
 800cd5a:	189b      	adds	r3, r3, r2
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800cd5c:	9012      	str	r0, [sp, #72]	; 0x48
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	0028      	movs	r0, r5
 800cd62:	0033      	movs	r3, r6
 800cd64:	0022      	movs	r2, r4
 800cd66:	9905      	ldr	r1, [sp, #20]
 800cd68:	f000 fa87 	bl	800d27a <RegionCommonIdentifyChannels>
 800cd6c:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800cd6e:	d10a      	bne.n	800cd86 <RegionAU915NextChannel+0xd2>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800cd70:	7831      	ldrb	r1, [r6, #0]
 800cd72:	3901      	subs	r1, #1
 800cd74:	f000 fb02 	bl	800d37c <randr>
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	5c21      	ldrb	r1, [r4, r0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 800cd7c:	2240      	movs	r2, #64	; 0x40
 800cd7e:	4803      	ldr	r0, [pc, #12]	; (800cd8c <RegionAU915NextChannel+0xd8>)
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800cd80:	7019      	strb	r1, [r3, #0]
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 800cd82:	f000 f883 	bl	800ce8c <RegionCommonChanDisable>
    }
    return status;
}
 800cd86:	0028      	movs	r0, r5
 800cd88:	b027      	add	sp, #156	; 0x9c
 800cd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8c:	2000132c 	.word	0x2000132c
 800cd90:	20001320 	.word	0x20001320
 800cd94:	20000fac 	.word	0x20000fac
 800cd98:	2000130c 	.word	0x2000130c

0800cd9c <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800cd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800cd9e:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800cda0:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800cda2:	4b10      	ldr	r3, [pc, #64]	; (800cde4 <RegionAU915SetContinuousWave+0x48>)
 800cda4:	434a      	muls	r2, r1
 800cda6:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800cda8:	189a      	adds	r2, r3, r2
 800cdaa:	7a51      	ldrb	r1, [r2, #9]
 800cdac:	2214      	movs	r2, #20
{
 800cdae:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800cdb0:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800cdb2:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800cdb4:	189b      	adds	r3, r3, r2
 800cdb6:	4a0c      	ldr	r2, [pc, #48]	; (800cde8 <RegionAU915SetContinuousWave+0x4c>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800cdb8:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800cdba:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	7882      	ldrb	r2, [r0, #2]
 800cdc0:	1c18      	adds	r0, r3, #0
 800cdc2:	b25b      	sxtb	r3, r3
 800cdc4:	428b      	cmp	r3, r1
 800cdc6:	da00      	bge.n	800cdca <RegionAU915SetContinuousWave+0x2e>
 800cdc8:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800cdca:	68a2      	ldr	r2, [r4, #8]
 800cdcc:	6861      	ldr	r1, [r4, #4]
 800cdce:	b240      	sxtb	r0, r0
 800cdd0:	f000 f9e2 	bl	800d198 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800cdd4:	4b05      	ldr	r3, [pc, #20]	; (800cdec <RegionAU915SetContinuousWave+0x50>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800cdd6:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdda:	0028      	movs	r0, r5
 800cddc:	89a2      	ldrh	r2, [r4, #12]
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	4798      	blx	r3
}
 800cde2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800cde4:	20000fac 	.word	0x20000fac
 800cde8:	00000362 	.word	0x00000362
 800cdec:	0800fc84 	.word	0x0800fc84

0800cdf0 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 800cdf0:	2306      	movs	r3, #6
 800cdf2:	434b      	muls	r3, r1
 800cdf4:	4904      	ldr	r1, [pc, #16]	; (800ce08 <RegionAU915ApplyDrOffset+0x18>)
 800cdf6:	18c9      	adds	r1, r1, r3
 800cdf8:	568b      	ldrsb	r3, [r1, r2]
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
        }
    }
    return datarate;
 800cdfa:	1c18      	adds	r0, r3, #0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	da00      	bge.n	800ce02 <RegionAU915ApplyDrOffset+0x12>
 800ce00:	2000      	movs	r0, #0
 800ce02:	b2c0      	uxtb	r0, r0
}
 800ce04:	4770      	bx	lr
 800ce06:	46c0      	nop			; (mov r8, r8)
 800ce08:	0800fb3c 	.word	0x0800fb3c

0800ce0c <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800ce0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce0e:	9101      	str	r1, [sp, #4]
 800ce10:	a908      	add	r1, sp, #32
 800ce12:	7809      	ldrb	r1, [r1, #0]
 800ce14:	9000      	str	r0, [sp, #0]
 800ce16:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800ce18:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	db29      	blt.n	800ce72 <RegionCommonChanVerifyDr+0x66>
 800ce1e:	428a      	cmp	r2, r1
 800ce20:	dc27      	bgt.n	800ce72 <RegionCommonChanVerifyDr+0x66>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ce22:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ce24:	260f      	movs	r6, #15
 800ce26:	e01e      	b.n	800ce66 <RegionCommonChanVerifyDr+0x5a>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ce28:	9c01      	ldr	r4, [sp, #4]
 800ce2a:	0041      	lsls	r1, r0, #1
 800ce2c:	5b09      	ldrh	r1, [r1, r4]
 800ce2e:	2500      	movs	r5, #0
 800ce30:	468c      	mov	ip, r1
 800ce32:	210c      	movs	r1, #12
 800ce34:	434b      	muls	r3, r1
 800ce36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce38:	18cb      	adds	r3, r1, r3
 800ce3a:	4661      	mov	r1, ip
 800ce3c:	4129      	asrs	r1, r5
 800ce3e:	4239      	tst	r1, r7
 800ce40:	d00b      	beq.n	800ce5a <RegionCommonChanVerifyDr+0x4e>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ce42:	2408      	movs	r4, #8
 800ce44:	7a19      	ldrb	r1, [r3, #8]
 800ce46:	571c      	ldrsb	r4, [r3, r4]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ce48:	0709      	lsls	r1, r1, #28
 800ce4a:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ce4c:	1124      	asrs	r4, r4, #4
    if( ( value >= min ) && ( value <= max ) )
 800ce4e:	4031      	ands	r1, r6
 800ce50:	428a      	cmp	r2, r1
 800ce52:	db02      	blt.n	800ce5a <RegionCommonChanVerifyDr+0x4e>
 800ce54:	4034      	ands	r4, r6
 800ce56:	42a2      	cmp	r2, r4
 800ce58:	dd0c      	ble.n	800ce74 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800ce5a:	3501      	adds	r5, #1
 800ce5c:	330c      	adds	r3, #12
 800ce5e:	2d10      	cmp	r5, #16
 800ce60:	d1eb      	bne.n	800ce3a <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ce62:	3001      	adds	r0, #1
 800ce64:	b2c0      	uxtb	r0, r0
 800ce66:	0103      	lsls	r3, r0, #4
 800ce68:	9900      	ldr	r1, [sp, #0]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	4299      	cmp	r1, r3
 800ce6e:	d8db      	bhi.n	800ce28 <RegionCommonChanVerifyDr+0x1c>
        return false;
 800ce70:	2000      	movs	r0, #0
}
 800ce72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800ce74:	2001      	movs	r0, #1
 800ce76:	e7fc      	b.n	800ce72 <RegionCommonChanVerifyDr+0x66>

0800ce78 <RegionCommonValueInRange>:
{
 800ce78:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800ce7a:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800ce7c:	428b      	cmp	r3, r1
 800ce7e:	db04      	blt.n	800ce8a <RegionCommonValueInRange+0x12>
 800ce80:	0fd8      	lsrs	r0, r3, #31
 800ce82:	17d1      	asrs	r1, r2, #31
 800ce84:	429a      	cmp	r2, r3
 800ce86:	4148      	adcs	r0, r1
        return 1;
 800ce88:	b2c0      	uxtb	r0, r0
}
 800ce8a:	4770      	bx	lr

0800ce8c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800ce8c:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800ce8e:	090b      	lsrs	r3, r1, #4
{
 800ce90:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ce92:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800ce94:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800ce96:	429d      	cmp	r5, r3
 800ce98:	d30b      	bcc.n	800ceb2 <RegionCommonChanDisable+0x26>
 800ce9a:	4291      	cmp	r1, r2
 800ce9c:	d209      	bcs.n	800ceb2 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800ce9e:	220f      	movs	r2, #15
 800cea0:	3001      	adds	r0, #1
 800cea2:	4011      	ands	r1, r2
 800cea4:	0002      	movs	r2, r0
 800cea6:	408a      	lsls	r2, r1
 800cea8:	0011      	movs	r1, r2
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	5ae2      	ldrh	r2, [r4, r3]
 800ceae:	438a      	bics	r2, r1
 800ceb0:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800ceb2:	bd30      	pop	{r4, r5, pc}

0800ceb4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800ceb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceb6:	1e03      	subs	r3, r0, #0
 800ceb8:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800ceba:	d005      	beq.n	800cec8 <RegionCommonCountChannels+0x14>
 800cebc:	0048      	lsls	r0, r1, #1
 800cebe:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800cec0:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cec2:	9a01      	ldr	r2, [sp, #4]
 800cec4:	4291      	cmp	r1, r2
 800cec6:	d300      	bcc.n	800ceca <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800cec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ceca:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800cecc:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cece:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800ced0:	2501      	movs	r5, #1
 800ced2:	40a5      	lsls	r5, r4
 800ced4:	002e      	movs	r6, r5
 800ced6:	403e      	ands	r6, r7
 800ced8:	42b5      	cmp	r5, r6
 800ceda:	d101      	bne.n	800cee0 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800cedc:	3201      	adds	r2, #1
 800cede:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800cee0:	3401      	adds	r4, #1
 800cee2:	2c10      	cmp	r4, #16
 800cee4:	d1f4      	bne.n	800ced0 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cee6:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cee8:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800ceea:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ceec:	b2c9      	uxtb	r1, r1
 800ceee:	3302      	adds	r3, #2
 800cef0:	e7e7      	b.n	800cec2 <RegionCommonCountChannels+0xe>

0800cef2 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800cef2:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d005      	beq.n	800cf04 <RegionCommonChanMaskCopy+0x12>
 800cef8:	2900      	cmp	r1, #0
 800cefa:	d003      	beq.n	800cf04 <RegionCommonChanMaskCopy+0x12>
 800cefc:	2300      	movs	r3, #0
 800cefe:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d100      	bne.n	800cf06 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800cf04:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800cf06:	5acc      	ldrh	r4, [r1, r3]
 800cf08:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800cf0a:	3302      	adds	r3, #2
 800cf0c:	e7f8      	b.n	800cf00 <RegionCommonChanMaskCopy+0xe>
	...

0800cf10 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800cf10:	b082      	sub	sp, #8
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	8805      	ldrh	r5, [r0, #0]
 800cf16:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800cf18:	2a00      	cmp	r2, #0
 800cf1a:	d111      	bne.n	800cf40 <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 800cf1c:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800cf1e:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800cf20:	0136      	lsls	r6, r6, #4
 800cf22:	42b3      	cmp	r3, r6
 800cf24:	d307      	bcc.n	800cf36 <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800cf26:	4c0e      	ldr	r4, [pc, #56]	; (800cf60 <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800cf28:	429c      	cmp	r4, r3
 800cf2a:	4152      	adcs	r2, r2
 800cf2c:	4254      	negs	r4, r2
 800cf2e:	4a0d      	ldr	r2, [pc, #52]	; (800cf64 <RegionCommonSetBandTxDone+0x54>)
 800cf30:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <RegionCommonSetBandTxDone+0x58>)
 800cf32:	4014      	ands	r4, r2
 800cf34:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800cf36:	1c2b      	adds	r3, r5, #0
 800cf38:	42a5      	cmp	r5, r4
 800cf3a:	d200      	bcs.n	800cf3e <RegionCommonSetBandTxDone+0x2e>
 800cf3c:	1c23      	adds	r3, r4, #0
 800cf3e:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800cf40:	6882      	ldr	r2, [r0, #8]
 800cf42:	1c2b      	adds	r3, r5, #0
 800cf44:	2d00      	cmp	r5, #0
 800cf46:	d100      	bne.n	800cf4a <RegionCommonSetBandTxDone+0x3a>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800cf4e:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800cf50:	428a      	cmp	r2, r1
 800cf52:	d900      	bls.n	800cf56 <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800cf54:	1a53      	subs	r3, r2, r1
 800cf56:	6083      	str	r3, [r0, #8]
    }
}
 800cf58:	bc70      	pop	{r4, r5, r6}
 800cf5a:	bc08      	pop	{r3}
 800cf5c:	b002      	add	sp, #8
 800cf5e:	4718      	bx	r3
 800cf60:	00009aaf 	.word	0x00009aaf
 800cf64:	ffffdcd8 	.word	0xffffdcd8
 800cf68:	00002710 	.word	0x00002710

0800cf6c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800cf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	9302      	str	r3, [sp, #8]
 800cf72:	ab0c      	add	r3, sp, #48	; 0x30
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	0015      	movs	r5, r2
 800cf78:	000c      	movs	r4, r1
 800cf7a:	9305      	str	r3, [sp, #20]
 800cf7c:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800cf7e:	f001 fd3d 	bl	800e9fc <UTIL_TIMER_GetCurrentTime>
 800cf82:	2214      	movs	r2, #20
 800cf84:	4355      	muls	r5, r2
 800cf86:	1963      	adds	r3, r4, r5
 800cf88:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800cf8a:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800cf8c:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800cf8e:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800cf90:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800cf92:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	42a3      	cmp	r3, r4
 800cf98:	d107      	bne.n	800cfaa <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	d102      	bne.n	800cfa4 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	425b      	negs	r3, r3
 800cfa2:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 800cfa4:	9801      	ldr	r0, [sp, #4]
 800cfa6:	b007      	add	sp, #28
 800cfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800cfaa:	990d      	ldr	r1, [sp, #52]	; 0x34
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800cfac:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 800cfae:	2f00      	cmp	r7, #0
 800cfb0:	d112      	bne.n	800cfd8 <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 800cfb2:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800cfb4:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800cfb6:	0100      	lsls	r0, r0, #4
 800cfb8:	4281      	cmp	r1, r0
 800cfba:	d308      	bcc.n	800cfce <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 800cfbc:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800cfbe:	4b27      	ldr	r3, [pc, #156]	; (800d05c <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800cfc0:	428b      	cmp	r3, r1
 800cfc2:	4178      	adcs	r0, r7
 800cfc4:	4926      	ldr	r1, [pc, #152]	; (800d060 <RegionCommonUpdateBandTimeOff+0xf4>)
 800cfc6:	4243      	negs	r3, r0
 800cfc8:	400b      	ands	r3, r1
 800cfca:	4926      	ldr	r1, [pc, #152]	; (800d064 <RegionCommonUpdateBandTimeOff+0xf8>)
 800cfcc:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800cfce:	1c11      	adds	r1, r2, #0
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d200      	bcs.n	800cfd6 <RegionCommonUpdateBandTimeOff+0x6a>
 800cfd4:	1c19      	adds	r1, r3, #0
 800cfd6:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 800cfd8:	1c15      	adds	r5, r2, #0
 800cfda:	2a00      	cmp	r2, #0
 800cfdc:	d100      	bne.n	800cfe0 <RegionCommonUpdateBandTimeOff+0x74>
 800cfde:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	b2ad      	uxth	r5, r5
    if( joined == false )
 800cfe4:	2f00      	cmp	r7, #0
 800cfe6:	d104      	bne.n	800cff2 <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 800cfe8:	2164      	movs	r1, #100	; 0x64
 800cfea:	0028      	movs	r0, r5
 800cfec:	f7f3 f8b2 	bl	8000154 <__udivsi3>
 800cff0:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800cff2:	4b1d      	ldr	r3, [pc, #116]	; (800d068 <RegionCommonUpdateBandTimeOff+0xfc>)
 800cff4:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 800cff6:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800cff8:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d100      	bne.n	800d000 <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 800cffe:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 800d000:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 800d002:	2f00      	cmp	r7, #0
 800d004:	d102      	bne.n	800d00c <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 800d006:	2a00      	cmp	r2, #0
 800d008:	d103      	bne.n	800d012 <RegionCommonUpdateBandTimeOff+0xa6>
 800d00a:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	d100      	bne.n	800d012 <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 800d010:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d012:	f001 fcfd 	bl	800ea10 <UTIL_TIMER_GetElapsedTime>
 800d016:	68a3      	ldr	r3, [r4, #8]
 800d018:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 800d01a:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d01c:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 800d01e:	4298      	cmp	r0, r3
 800d020:	d900      	bls.n	800d024 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 800d022:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 800d024:	9a03      	ldr	r2, [sp, #12]
 800d026:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d02a:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d02c:	68a2      	ldr	r2, [r4, #8]
 800d02e:	42aa      	cmp	r2, r5
 800d030:	d802      	bhi.n	800d038 <RegionCommonUpdateBandTimeOff+0xcc>
 800d032:	9902      	ldr	r1, [sp, #8]
 800d034:	2900      	cmp	r1, #0
 800d036:	d105      	bne.n	800d044 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 800d038:	2301      	movs	r3, #1
 800d03a:	7423      	strb	r3, [r4, #16]
            validBands++;
 800d03c:	18f6      	adds	r6, r6, r3
                validBands++;
 800d03e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d040:	3414      	adds	r4, #20
 800d042:	e7a7      	b.n	800cf94 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 800d044:	2100      	movs	r1, #0
 800d046:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 800d048:	429d      	cmp	r5, r3
 800d04a:	d2f9      	bcs.n	800d040 <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	1aad      	subs	r5, r5, r2
 800d050:	42ab      	cmp	r3, r5
 800d052:	d900      	bls.n	800d056 <RegionCommonUpdateBandTimeOff+0xea>
 800d054:	9501      	str	r5, [sp, #4]
                validBands++;
 800d056:	3601      	adds	r6, #1
 800d058:	e7f1      	b.n	800d03e <RegionCommonUpdateBandTimeOff+0xd2>
 800d05a:	46c0      	nop			; (mov r8, r8)
 800d05c:	00009aaf 	.word	0x00009aaf
 800d060:	ffffdcd8 	.word	0xffffdcd8
 800d064:	00002710 	.word	0x00002710
 800d068:	0036ee80 	.word	0x0036ee80

0800d06c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800d06c:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d06e:	7802      	ldrb	r2, [r0, #0]
{
 800d070:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800d072:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d074:	2a03      	cmp	r2, #3
 800d076:	d113      	bne.n	800d0a0 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800d078:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d07a:	300f      	adds	r0, #15
 800d07c:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d07e:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d080:	4004      	ands	r4, r0
 800d082:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d084:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d086:	789a      	ldrb	r2, [r3, #2]
 800d088:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d08a:	78dc      	ldrb	r4, [r3, #3]
 800d08c:	0224      	lsls	r4, r4, #8
 800d08e:	4322      	orrs	r2, r4
 800d090:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800d092:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d094:	065a      	lsls	r2, r3, #25
 800d096:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800d098:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d09a:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d09c:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800d09e:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800d0a0:	bd10      	pop	{r4, pc}

0800d0a2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0a4:	b087      	sub	sp, #28
 800d0a6:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800d0a8:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800d0aa:	2707      	movs	r7, #7
{
 800d0ac:	9103      	str	r1, [sp, #12]
 800d0ae:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800d0b0:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800d0b2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d0b4:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d0b6:	7943      	ldrb	r3, [r0, #5]
{
 800d0b8:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800d0ba:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d0bc:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d026      	beq.n	800d110 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800d0c2:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800d0c4:	2d00      	cmp	r5, #0
 800d0c6:	d019      	beq.n	800d0fc <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d0c8:	69a2      	ldr	r2, [r4, #24]
 800d0ca:	2314      	movs	r3, #20
 800d0cc:	9201      	str	r2, [sp, #4]
 800d0ce:	2215      	movs	r2, #21
 800d0d0:	56a2      	ldrsb	r2, [r4, r2]
 800d0d2:	56e3      	ldrsb	r3, [r4, r3]
 800d0d4:	9200      	str	r2, [sp, #0]
 800d0d6:	7b20      	ldrb	r0, [r4, #12]
 800d0d8:	9a02      	ldr	r2, [sp, #8]
 800d0da:	6921      	ldr	r1, [r4, #16]
 800d0dc:	f7ff fe96 	bl	800ce0c <RegionCommonChanVerifyDr>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d101      	bne.n	800d0e8 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d0e8:	231d      	movs	r3, #29
 800d0ea:	221c      	movs	r2, #28
 800d0ec:	56e3      	ldrsb	r3, [r4, r3]
 800d0ee:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800d0f0:	42bb      	cmp	r3, r7
 800d0f2:	dc15      	bgt.n	800d120 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800d0f4:	42ba      	cmp	r2, r7
 800d0f6:	da14      	bge.n	800d122 <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d0f8:	2304      	movs	r3, #4
 800d0fa:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800d0fc:	0028      	movs	r0, r5
    *dr = datarate;
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	9a02      	ldr	r2, [sp, #8]
 800d102:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800d104:	9b04      	ldr	r3, [sp, #16]
 800d106:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800d108:	9b05      	ldr	r3, [sp, #20]
 800d10a:	701e      	strb	r6, [r3, #0]
}
 800d10c:	b007      	add	sp, #28
 800d10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800d110:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800d112:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800d114:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800d116:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800d118:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800d11a:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800d11c:	57c7      	ldrsb	r7, [r0, r7]
 800d11e:	e7d1      	b.n	800d0c4 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800d120:	001f      	movs	r7, r3
    if( status == 0x07 )
 800d122:	2d07      	cmp	r5, #7
 800d124:	d1ea      	bne.n	800d0fc <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800d126:	2e00      	cmp	r6, #0
 800d128:	d1e8      	bne.n	800d0fc <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800d12a:	3601      	adds	r6, #1
 800d12c:	e7e6      	b.n	800d0fc <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800d130 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800d130:	b510      	push	{r4, lr}
 800d132:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 800d134:	4802      	ldr	r0, [pc, #8]	; (800d140 <RegionCommonComputeSymbolTimeLoRa+0x10>)
 800d136:	f7f3 f80d 	bl	8000154 <__udivsi3>
 800d13a:	40a0      	lsls	r0, r4
}
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	46c0      	nop			; (mov r8, r8)
 800d140:	3b9aca00 	.word	0x3b9aca00

0800d144 <RegionCommonComputeRxWindowParameters>:
    // ((8 * 1000000) / 50);
    return 160000UL;
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d148:	480f      	ldr	r0, [pc, #60]	; (800d188 <RegionCommonComputeRxWindowParameters+0x44>)
{
 800d14a:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d14c:	4350      	muls	r0, r2
 800d14e:	1e62      	subs	r2, r4, #1
 800d150:	0021      	movs	r1, r4
 800d152:	1880      	adds	r0, r0, r2
{
 800d154:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d156:	f7f2 fffd 	bl	8000154 <__udivsi3>
 800d15a:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <RegionCommonComputeRxWindowParameters+0x48>)
 800d15c:	18f3      	adds	r3, r6, r3
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	18c0      	adds	r0, r0, r3
 800d162:	42b0      	cmp	r0, r6
 800d164:	d200      	bcs.n	800d168 <RegionCommonComputeRxWindowParameters+0x24>
 800d166:	0030      	movs	r0, r6
 800d168:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d16a:	4909      	ldr	r1, [pc, #36]	; (800d190 <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d16c:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d16e:	00a3      	lsls	r3, r4, #2
 800d170:	4344      	muls	r4, r0
 800d172:	0864      	lsrs	r4, r4, #1
 800d174:	1b18      	subs	r0, r3, r4
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <RegionCommonComputeRxWindowParameters+0x50>)
 800d178:	43ed      	mvns	r5, r5
 800d17a:	18c0      	adds	r0, r0, r3
 800d17c:	f7f3 f874 	bl	8000268 <__divsi3>
 800d180:	9b05      	ldr	r3, [sp, #20]
 800d182:	1940      	adds	r0, r0, r5
 800d184:	6018      	str	r0, [r3, #0]
}
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	001e8480 	.word	0x001e8480
 800d18c:	7ffffffc 	.word	0x7ffffffc
 800d190:	000f4240 	.word	0x000f4240
 800d194:	000f423f 	.word	0x000f423f

0800d198 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d198:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d19a:	0040      	lsls	r0, r0, #1
{
 800d19c:	1c14      	adds	r4, r2, #0
 800d19e:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d1a0:	f7f3 fc72 	bl	8000a88 <__aeabi_ui2f>
 800d1a4:	1c01      	adds	r1, r0, #0
 800d1a6:	1c28      	adds	r0, r5, #0
 800d1a8:	f7f3 fac0 	bl	800072c <__aeabi_fsub>
 800d1ac:	1c21      	adds	r1, r4, #0
 800d1ae:	f7f3 fabd 	bl	800072c <__aeabi_fsub>
 800d1b2:	f7f4 ffd7 	bl	8002164 <__aeabi_f2d>
 800d1b6:	f001 ff19 	bl	800efec <floor>
 800d1ba:	f7f4 ff77 	bl	80020ac <__aeabi_d2iz>

    return phyTxPower;
 800d1be:	b240      	sxtb	r0, r0
}
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}

0800d1c2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1c4:	b089      	sub	sp, #36	; 0x24
 800d1c6:	9307      	str	r3, [sp, #28]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d1c8:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800d1ca:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800d1cc:	001d      	movs	r5, r3
{
 800d1ce:	9105      	str	r1, [sp, #20]
 800d1d0:	9206      	str	r2, [sp, #24]
 800d1d2:	011a      	lsls	r2, r3, #4
 800d1d4:	b2d2      	uxtb	r2, r2
 800d1d6:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d1d8:	9901      	ldr	r1, [sp, #4]
 800d1da:	8a02      	ldrh	r2, [r0, #16]
 800d1dc:	428a      	cmp	r2, r1
 800d1de:	d806      	bhi.n	800d1ee <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d1e0:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800d1e2:	9b06      	ldr	r3, [sp, #24]
 800d1e4:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d1e6:	9b07      	ldr	r3, [sp, #28]
 800d1e8:	701a      	strb	r2, [r3, #0]
}
 800d1ea:	b009      	add	sp, #36	; 0x24
 800d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ee:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d1f0:	005a      	lsls	r2, r3, #1
 800d1f2:	9204      	str	r2, [sp, #16]
 800d1f4:	9a01      	ldr	r2, [sp, #4]
 800d1f6:	4356      	muls	r6, r2
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	6841      	ldr	r1, [r0, #4]
 800d1fc:	9c04      	ldr	r4, [sp, #16]
 800d1fe:	2701      	movs	r7, #1
 800d200:	5b09      	ldrh	r1, [r1, r4]
 800d202:	4111      	asrs	r1, r2
 800d204:	4239      	tst	r1, r7
 800d206:	d02a      	beq.n	800d25e <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d208:	6881      	ldr	r1, [r0, #8]
 800d20a:	198c      	adds	r4, r1, r6
 800d20c:	6821      	ldr	r1, [r4, #0]
 800d20e:	2900      	cmp	r1, #0
 800d210:	d025      	beq.n	800d25e <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d212:	7801      	ldrb	r1, [r0, #0]
 800d214:	2900      	cmp	r1, #0
 800d216:	d105      	bne.n	800d224 <RegionCommonCountNbOfEnabledChannels+0x62>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 800d218:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d21a:	2900      	cmp	r1, #0
 800d21c:	d002      	beq.n	800d224 <RegionCommonCountNbOfEnabledChannels+0x62>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 800d21e:	4111      	asrs	r1, r2
 800d220:	4239      	tst	r1, r7
 800d222:	d01c      	beq.n	800d25e <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d224:	2101      	movs	r1, #1
 800d226:	5641      	ldrsb	r1, [r0, r1]
 800d228:	9102      	str	r1, [sp, #8]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d22a:	7a21      	ldrb	r1, [r4, #8]
 800d22c:	070f      	lsls	r7, r1, #28
 800d22e:	9103      	str	r1, [sp, #12]
    if( ( value >= min ) && ( value <= max ) )
 800d230:	9902      	ldr	r1, [sp, #8]
 800d232:	173f      	asrs	r7, r7, #28
 800d234:	42b9      	cmp	r1, r7
 800d236:	db12      	blt.n	800d25e <RegionCommonCountNbOfEnabledChannels+0x9c>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d238:	4669      	mov	r1, sp
 800d23a:	7b09      	ldrb	r1, [r1, #12]
    if( ( value >= min ) && ( value <= max ) )
 800d23c:	9f02      	ldr	r7, [sp, #8]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d23e:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800d240:	1109      	asrs	r1, r1, #4
 800d242:	428f      	cmp	r7, r1
 800d244:	dc0b      	bgt.n	800d25e <RegionCommonCountNbOfEnabledChannels+0x9c>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d246:	7a61      	ldrb	r1, [r4, #9]
 800d248:	2414      	movs	r4, #20
 800d24a:	4361      	muls	r1, r4
 800d24c:	68c4      	ldr	r4, [r0, #12]
 800d24e:	1861      	adds	r1, r4, r1
 800d250:	7c09      	ldrb	r1, [r1, #16]
 800d252:	2900      	cmp	r1, #0
 800d254:	d10a      	bne.n	800d26c <RegionCommonCountNbOfEnabledChannels+0xaa>
                    nbRestrictedChannelsCount++;
 800d256:	4661      	mov	r1, ip
 800d258:	3101      	adds	r1, #1
 800d25a:	b2c9      	uxtb	r1, r1
 800d25c:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800d25e:	3201      	adds	r2, #1
 800d260:	360c      	adds	r6, #12
 800d262:	2a10      	cmp	r2, #16
 800d264:	d1c9      	bne.n	800d1fa <RegionCommonCountNbOfEnabledChannels+0x38>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d266:	3301      	adds	r3, #1
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	e7b2      	b.n	800d1d2 <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800d26c:	9c01      	ldr	r4, [sp, #4]
 800d26e:	9f05      	ldr	r7, [sp, #20]
 800d270:	1c69      	adds	r1, r5, #1
 800d272:	18a4      	adds	r4, r4, r2
 800d274:	557c      	strb	r4, [r7, r5]
 800d276:	b2cd      	uxtb	r5, r1
 800d278:	e7f1      	b.n	800d25e <RegionCommonCountNbOfEnabledChannels+0x9c>

0800d27a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d27a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d27c:	0004      	movs	r4, r0
 800d27e:	b087      	sub	sp, #28
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d280:	6840      	ldr	r0, [r0, #4]
{
 800d282:	001d      	movs	r5, r3
 800d284:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d286:	9204      	str	r2, [sp, #16]
 800d288:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d28a:	f001 fbc1 	bl	800ea10 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d28e:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800d290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d292:	1a1b      	subs	r3, r3, r0
 800d294:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800d296:	2301      	movs	r3, #1
 800d298:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d29e:	6863      	ldr	r3, [r4, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <RegionCommonIdentifyChannels+0x30>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	4283      	cmp	r3, r0
 800d2a8:	d825      	bhi.n	800d2f6 <RegionCommonIdentifyChannels+0x7c>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	6033      	str	r3, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d2ae:	7a62      	ldrb	r2, [r4, #9]
 800d2b0:	69e1      	ldr	r1, [r4, #28]
 800d2b2:	4694      	mov	ip, r2
 800d2b4:	780a      	ldrb	r2, [r1, #0]
 800d2b6:	69a1      	ldr	r1, [r4, #24]
 800d2b8:	9205      	str	r2, [sp, #20]
 800d2ba:	9103      	str	r1, [sp, #12]
 800d2bc:	0021      	movs	r1, r4
 800d2be:	ae01      	add	r6, sp, #4
 800d2c0:	310c      	adds	r1, #12
 800d2c2:	7a23      	ldrb	r3, [r4, #8]
 800d2c4:	c905      	ldmia	r1!, {r0, r2}
 800d2c6:	c605      	stmia	r6!, {r0, r2}
 800d2c8:	7d21      	ldrb	r1, [r4, #20]
 800d2ca:	4662      	mov	r2, ip
 800d2cc:	9100      	str	r1, [sp, #0]
 800d2ce:	69e1      	ldr	r1, [r4, #28]
 800d2d0:	9805      	ldr	r0, [sp, #20]
 800d2d2:	68c9      	ldr	r1, [r1, #12]
 800d2d4:	f7ff fe4a 	bl	800cf6c <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d2da:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d2dc:	002a      	movs	r2, r5
 800d2de:	9904      	ldr	r1, [sp, #16]
 800d2e0:	69e0      	ldr	r0, [r4, #28]
 800d2e2:	f7ff ff6e 	bl	800d1c2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d2e6:	782b      	ldrb	r3, [r5, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d004      	beq.n	800d2f6 <RegionCommonIdentifyChannels+0x7c>
    {
        *nextTxDelay = 0;
 800d2ec:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 800d2ee:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 800d2f0:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d2f2:	b007      	add	sp, #28
 800d2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800d2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2f8:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d2fa:	4243      	negs	r3, r0
 800d2fc:	4158      	adcs	r0, r3
 800d2fe:	300b      	adds	r0, #11
 800d300:	e7f7      	b.n	800d2f2 <RegionCommonIdentifyChannels+0x78>
	...

0800d304 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d306:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d308:	ac04      	add	r4, sp, #16
 800d30a:	0025      	movs	r5, r4
{
 800d30c:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d30e:	4b0f      	ldr	r3, [pc, #60]	; (800d34c <RegionCommonRxConfigPrint+0x48>)
 800d310:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d312:	c5c4      	stmia	r5!, {r2, r6, r7}
 800d314:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d316:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d318:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800d31a:	2805      	cmp	r0, #5
 800d31c:	d80c      	bhi.n	800d338 <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d31e:	9101      	str	r1, [sp, #4]
 800d320:	0080      	lsls	r0, r0, #2
 800d322:	9302      	str	r3, [sp, #8]
 800d324:	5903      	ldr	r3, [r0, r4]
 800d326:	2201      	movs	r2, #1
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	2100      	movs	r1, #0
 800d32c:	2002      	movs	r0, #2
 800d32e:	4b08      	ldr	r3, [pc, #32]	; (800d350 <RegionCommonRxConfigPrint+0x4c>)
 800d330:	f001 fd76 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d334:	b00b      	add	sp, #44	; 0x2c
 800d336:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	9100      	str	r1, [sp, #0]
 800d33c:	2201      	movs	r2, #1
 800d33e:	2100      	movs	r1, #0
 800d340:	4b04      	ldr	r3, [pc, #16]	; (800d354 <RegionCommonRxConfigPrint+0x50>)
 800d342:	2002      	movs	r0, #2
 800d344:	f001 fd6c 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 800d348:	e7f4      	b.n	800d334 <RegionCommonRxConfigPrint+0x30>
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	0800f118 	.word	0x0800f118
 800d350:	0800fbc2 	.word	0x0800fbc2
 800d354:	0800fbe1 	.word	0x0800fbe1

0800d358 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d358:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d35a:	4b04      	ldr	r3, [pc, #16]	; (800d36c <RegionCommonTxConfigPrint+0x14>)
 800d35c:	9101      	str	r1, [sp, #4]
 800d35e:	9000      	str	r0, [sp, #0]
 800d360:	2201      	movs	r2, #1
 800d362:	2100      	movs	r1, #0
 800d364:	2002      	movs	r0, #2
 800d366:	f001 fd5b 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
}
 800d36a:	bd07      	pop	{r0, r1, r2, pc}
 800d36c:	0800fbfd 	.word	0x0800fbfd

0800d370 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800d370:	4b01      	ldr	r3, [pc, #4]	; (800d378 <srand1+0x8>)
 800d372:	6018      	str	r0, [r3, #0]
}
 800d374:	4770      	bx	lr
 800d376:	46c0      	nop			; (mov r8, r8)
 800d378:	2000018c 	.word	0x2000018c

0800d37c <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d37c:	4b09      	ldr	r3, [pc, #36]	; (800d3a4 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800d37e:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d380:	681a      	ldr	r2, [r3, #0]
{
 800d382:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d384:	4808      	ldr	r0, [pc, #32]	; (800d3a8 <randr+0x2c>)
{
 800d386:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d388:	4350      	muls	r0, r2
 800d38a:	4a08      	ldr	r2, [pc, #32]	; (800d3ac <randr+0x30>)
 800d38c:	4908      	ldr	r1, [pc, #32]	; (800d3b0 <randr+0x34>)
 800d38e:	1880      	adds	r0, r0, r2
 800d390:	6018      	str	r0, [r3, #0]
 800d392:	f7f2 ff65 	bl	8000260 <__aeabi_uidivmod>
 800d396:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800d398:	1b61      	subs	r1, r4, r5
 800d39a:	3101      	adds	r1, #1
 800d39c:	f7f3 f84a 	bl	8000434 <__aeabi_idivmod>
 800d3a0:	1948      	adds	r0, r1, r5
}
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	2000018c 	.word	0x2000018c
 800d3a8:	41c64e6d 	.word	0x41c64e6d
 800d3ac:	00003039 	.word	0x00003039
 800d3b0:	7fffffff 	.word	0x7fffffff

0800d3b4 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800d3b4:	2300      	movs	r3, #0
{
 800d3b6:	b510      	push	{r4, lr}
    while( size-- )
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d100      	bne.n	800d3be <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800d3bc:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800d3be:	5ccc      	ldrb	r4, [r1, r3]
 800d3c0:	54c4      	strb	r4, [r0, r3]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	e7f8      	b.n	800d3b8 <memcpy1+0x4>

0800d3c6 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800d3c6:	1e53      	subs	r3, r2, #1
 800d3c8:	18c0      	adds	r0, r0, r3
    while( size-- )
 800d3ca:	2300      	movs	r3, #0
{
 800d3cc:	b530      	push	{r4, r5, lr}
    while( size-- )
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d100      	bne.n	800d3d4 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800d3d2:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800d3d4:	5ccd      	ldrb	r5, [r1, r3]
 800d3d6:	425c      	negs	r4, r3
 800d3d8:	5505      	strb	r5, [r0, r4]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	e7f7      	b.n	800d3ce <memcpyr+0x8>

0800d3de <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800d3de:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800d3e0:	f001 fdfb 	bl	800efda <memset>
    }
}
 800d3e4:	bd10      	pop	{r4, pc}

0800d3e6 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	4770      	bx	lr
	...

0800d3ec <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 800d3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ee:	0014      	movs	r4, r2
 800d3f0:	aa08      	add	r2, sp, #32
 800d3f2:	8816      	ldrh	r6, [r2, #0]
 800d3f4:	aa09      	add	r2, sp, #36	; 0x24
 800d3f6:	000d      	movs	r5, r1
 800d3f8:	7812      	ldrb	r2, [r2, #0]
 800d3fa:	a90a      	add	r1, sp, #40	; 0x28
 800d3fc:	780f      	ldrb	r7, [r1, #0]
 800d3fe:	a90b      	add	r1, sp, #44	; 0x2c
 800d400:	4694      	mov	ip, r2
 800d402:	7809      	ldrb	r1, [r1, #0]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

	if( modem == MODEM_LORA){
 800d404:	2801      	cmp	r0, #1
 800d406:	d150      	bne.n	800d4aa <RadioTimeOnAir+0xbe>
    int32_t crDenom           = coderate + 4;
 800d408:	3304      	adds	r3, #4
 800d40a:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d40c:	1f63      	subs	r3, r4, #5
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d804      	bhi.n	800d41c <RadioTimeOnAir+0x30>
        if( preambleLen < 12 )
 800d412:	1c33      	adds	r3, r6, #0
 800d414:	2e0c      	cmp	r6, #12
 800d416:	d200      	bcs.n	800d41a <RadioTimeOnAir+0x2e>
 800d418:	230c      	movs	r3, #12
 800d41a:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d41c:	2d00      	cmp	r5, #0
 800d41e:	d13c      	bne.n	800d49a <RadioTimeOnAir+0xae>
 800d420:	0023      	movs	r3, r4
 800d422:	2001      	movs	r0, #1
 800d424:	002a      	movs	r2, r5
 800d426:	3b0b      	subs	r3, #11
 800d428:	4298      	cmp	r0, r3
 800d42a:	416a      	adcs	r2, r5
 800d42c:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d42e:	b2db      	uxtb	r3, r3
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d430:	00f8      	lsls	r0, r7, #3
                            ( crcOn ? 16 : 0 ) -
 800d432:	1e4f      	subs	r7, r1, #1
 800d434:	41b9      	sbcs	r1, r7
 800d436:	010f      	lsls	r7, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d438:	19c0      	adds	r0, r0, r7
                            ( fixLen ? 0 : 20 );
 800d43a:	4662      	mov	r2, ip
 800d43c:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 800d43e:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800d440:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800d442:	42ba      	cmp	r2, r7
 800d444:	d100      	bne.n	800d448 <RadioTimeOnAir+0x5c>
 800d446:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 800d448:	19c0      	adds	r0, r0, r7
            ceilDenominator = 4 * ( datarate - 2 );
 800d44a:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800d44c:	2c06      	cmp	r4, #6
 800d44e:	d903      	bls.n	800d458 <RadioTimeOnAir+0x6c>
        ceilNumerator += 8;
 800d450:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800d452:	2b00      	cmp	r3, #0
 800d454:	d000      	beq.n	800d458 <RadioTimeOnAir+0x6c>
            ceilDenominator = 4 * ( datarate - 2 );
 800d456:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d458:	43c3      	mvns	r3, r0
 800d45a:	17db      	asrs	r3, r3, #31
 800d45c:	4018      	ands	r0, r3
 800d45e:	1840      	adds	r0, r0, r1
 800d460:	3801      	subs	r0, #1
 800d462:	f7f2 ff01 	bl	8000268 <__divsi3>
 800d466:	9b01      	ldr	r3, [sp, #4]
 800d468:	4343      	muls	r3, r0
 800d46a:	199e      	adds	r6, r3, r6
        intermediate += 2;
 800d46c:	0032      	movs	r2, r6
 800d46e:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800d470:	2c06      	cmp	r4, #6
 800d472:	d900      	bls.n	800d476 <RadioTimeOnAir+0x8a>
    int32_t intermediate =
 800d474:	3a02      	subs	r2, #2
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
															  coderate, preambleLen,
															  fixLen, payloadLen, crcOn );
		denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <RadioTimeOnAir+0xc8>)
 800d478:	5d5b      	ldrb	r3, [r3, r5]
    switch( bw )
 800d47a:	2b0a      	cmp	r3, #10
 800d47c:	d818      	bhi.n	800d4b0 <RadioTimeOnAir+0xc4>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d47e:	0092      	lsls	r2, r2, #2
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d480:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d482:	3201      	adds	r2, #1
 800d484:	40ba      	lsls	r2, r7
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d486:	0080      	lsls	r0, r0, #2
 800d488:	4350      	muls	r0, r2
 800d48a:	4a0b      	ldr	r2, [pc, #44]	; (800d4b8 <RadioTimeOnAir+0xcc>)
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	5899      	ldr	r1, [r3, r2]
	}
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 800d490:	1840      	adds	r0, r0, r1
 800d492:	3801      	subs	r0, #1
 800d494:	f7f2 fe5e 	bl	8000154 <__udivsi3>
}
 800d498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bool    lowDatareOptimize = false;
 800d49a:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d49c:	2d01      	cmp	r5, #1
 800d49e:	d1c7      	bne.n	800d430 <RadioTimeOnAir+0x44>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d4a0:	0023      	movs	r3, r4
 800d4a2:	3b0c      	subs	r3, #12
 800d4a4:	4258      	negs	r0, r3
 800d4a6:	4143      	adcs	r3, r0
 800d4a8:	e7c1      	b.n	800d42e <RadioTimeOnAir+0x42>
    uint32_t denominator = 1;
 800d4aa:	2101      	movs	r1, #1
    uint32_t numerator = 0;
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7ef      	b.n	800d490 <RadioTimeOnAir+0xa4>
    return ( numerator + denominator - 1 ) / denominator;
 800d4b0:	deff      	udf	#255	; 0xff
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	0800fc4e 	.word	0x0800fc4e
 800d4b8:	0800fc54 	.word	0x0800fc54

0800d4bc <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d4bc:	4b04      	ldr	r3, [pc, #16]	; (800d4d0 <RadioOnTxTimeoutIrq+0x14>)
{
 800d4be:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <RadioOnTxTimeoutIrq+0x12>
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d000      	beq.n	800d4ce <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 800d4cc:	4798      	blx	r3
    }
}
 800d4ce:	bd10      	pop	{r4, pc}
 800d4d0:	20001348 	.word	0x20001348

0800d4d4 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d4d4:	4b04      	ldr	r3, [pc, #16]	; (800d4e8 <RadioOnRxTimeoutIrq+0x14>)
{
 800d4d6:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <RadioOnRxTimeoutIrq+0x12>
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d000      	beq.n	800d4e6 <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 800d4e4:	4798      	blx	r3
    }
}
 800d4e6:	bd10      	pop	{r4, pc}
 800d4e8:	20001348 	.word	0x20001348

0800d4ec <RadioStandby>:
{
 800d4ec:	b510      	push	{r4, lr}
	SX126xSetStandby(STDBY_XOSC);//SX126xSetStandby( STDBY_RC );
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	f000 fbc8 	bl	800dc84 <SX126xSetStandby>
}
 800d4f4:	bd10      	pop	{r4, pc}
	...

0800d4f8 <RadioGetStatus>:
{
 800d4f8:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 800d4fa:	f000 fb6b 	bl	800dbd4 <SX126xGetOperatingMode>
 800d4fe:	1f03      	subs	r3, r0, #4
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2000      	movs	r0, #0
 800d504:	2b03      	cmp	r3, #3
 800d506:	d801      	bhi.n	800d50c <RadioGetStatus+0x14>
 800d508:	4a01      	ldr	r2, [pc, #4]	; (800d510 <RadioGetStatus+0x18>)
 800d50a:	5cd0      	ldrb	r0, [r2, r3]
}
 800d50c:	bd10      	pop	{r4, pc}
 800d50e:	46c0      	nop			; (mov r8, r8)
 800d510:	0800fc80 	.word	0x0800fc80

0800d514 <RadioSetChannel>:
{
 800d514:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 800d516:	f000 fca5 	bl	800de64 <SX126xSetRfFrequency>
}
 800d51a:	bd10      	pop	{r4, pc}

0800d51c <RadioRead>:
{
 800d51c:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 800d51e:	b280      	uxth	r0, r0
 800d520:	f000 fe52 	bl	800e1c8 <SX126xReadRegister>
}
 800d524:	bd10      	pop	{r4, pc}

0800d526 <RadioWrite>:
{
 800d526:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 800d528:	b280      	uxth	r0, r0
 800d52a:	f000 fdad 	bl	800e088 <SX126xWriteRegister>
}
 800d52e:	bd10      	pop	{r4, pc}

0800d530 <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800d530:	2300      	movs	r3, #0
{
 800d532:	b570      	push	{r4, r5, r6, lr}
 800d534:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800d536:	4910      	ldr	r1, [pc, #64]	; (800d578 <RadioSend+0x48>)
 800d538:	001a      	movs	r2, r3
{
 800d53a:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800d53c:	0008      	movs	r0, r1
 800d53e:	f000 fc41 	bl	800ddc4 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 800d542:	f000 fb65 	bl	800dc10 <SX126xGetPacketType>
 800d546:	4b0d      	ldr	r3, [pc, #52]	; (800d57c <RadioSend+0x4c>)
 800d548:	2801      	cmp	r0, #1
 800d54a:	d112      	bne.n	800d572 <RadioSend+0x42>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800d54c:	73dc      	strb	r4, [r3, #15]
    SX126xSetPacketParams( &SX126x.PacketParams );
 800d54e:	0018      	movs	r0, r3
 800d550:	f000 fcde 	bl	800df10 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 800d554:	2200      	movs	r2, #0
 800d556:	0028      	movs	r0, r5
 800d558:	0021      	movs	r1, r4
 800d55a:	f000 feeb 	bl	800e334 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800d55e:	4c08      	ldr	r4, [pc, #32]	; (800d580 <RadioSend+0x50>)
 800d560:	4b08      	ldr	r3, [pc, #32]	; (800d584 <RadioSend+0x54>)
 800d562:	0020      	movs	r0, r4
 800d564:	6819      	ldr	r1, [r3, #0]
 800d566:	f001 fb3d 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d56a:	0020      	movs	r0, r4
 800d56c:	f001 fade 	bl	800eb2c <UTIL_TIMER_Start>
}
 800d570:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800d572:	721c      	strb	r4, [r3, #8]
 800d574:	e7eb      	b.n	800d54e <RadioSend+0x1e>
 800d576:	46c0      	nop			; (mov r8, r8)
 800d578:	00000201 	.word	0x00000201
 800d57c:	20001480 	.word	0x20001480
 800d580:	200014c0 	.word	0x200014c0
 800d584:	200014bc 	.word	0x200014bc

0800d588 <RadioSleep>:
{
 800d588:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 800d58a:	2004      	movs	r0, #4
 800d58c:	f000 fb62 	bl	800dc54 <SX126xSetSleep>
    RADIO_DELAY_MS( 2 );
 800d590:	2002      	movs	r0, #2
 800d592:	f7f5 fbcd 	bl	8002d30 <HAL_Delay>
}
 800d596:	bd10      	pop	{r4, pc}

0800d598 <RadioSetRxDutyCycle>:
{
 800d598:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800d59a:	f000 fb85 	bl	800dca8 <SX126xSetRxDutyCycle>
}
 800d59e:	bd10      	pop	{r4, pc}

0800d5a0 <RadioSetTxContinuousWave>:
{
 800d5a0:	b570      	push	{r4, r5, r6, lr}
 800d5a2:	000d      	movs	r5, r1
 800d5a4:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 800d5a6:	f000 fc5d 	bl	800de64 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800d5aa:	0028      	movs	r0, r5
 800d5ac:	f000 fe76 	bl	800e29c <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800d5b0:	f000 fb92 	bl	800dcd8 <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 800d5b4:	21fa      	movs	r1, #250	; 0xfa
 800d5b6:	0089      	lsls	r1, r1, #2
 800d5b8:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d5ba:	4c04      	ldr	r4, [pc, #16]	; (800d5cc <RadioSetTxContinuousWave+0x2c>)
 800d5bc:	0020      	movs	r0, r4
 800d5be:	f001 fb11 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d5c2:	0020      	movs	r0, r4
 800d5c4:	f001 fab2 	bl	800eb2c <UTIL_TIMER_Start>
}
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	46c0      	nop			; (mov r8, r8)
 800d5cc:	200014c0 	.word	0x200014c0

0800d5d0 <RadioWriteBuffer>:
{
 800d5d0:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 800d5d2:	b280      	uxth	r0, r0
 800d5d4:	f000 fd38 	bl	800e048 <SX126xWriteRegisters>
}
 800d5d8:	bd10      	pop	{r4, pc}

0800d5da <RadioReadBuffer>:
{
 800d5da:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 800d5dc:	b280      	uxth	r0, r0
 800d5de:	f000 fdcf 	bl	800e180 <SX126xReadRegisters>
}
 800d5e2:	bd10      	pop	{r4, pc}

0800d5e4 <RadioGetWakeupTime>:
{
 800d5e4:	b510      	push	{r4, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d5e6:	f7f6 fd97 	bl	8004118 <SX1262DVK1CAS_RADIO_GetWakeUpTime>
 800d5ea:	3003      	adds	r0, #3
}
 800d5ec:	bd10      	pop	{r4, pc}
	...

0800d5f0 <RadioInit>:
    RadioEvents = events;
 800d5f0:	4b17      	ldr	r3, [pc, #92]	; (800d650 <RadioInit+0x60>)
{
 800d5f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RadioEvents = events;
 800d5f4:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 800d5f6:	4817      	ldr	r0, [pc, #92]	; (800d654 <RadioInit+0x64>)
 800d5f8:	f000 fc12 	bl	800de20 <SX126xInit>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	f000 fb41 	bl	800dc84 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800d602:	2001      	movs	r0, #1
 800d604:	f000 fb7d 	bl	800dd02 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 800d608:	2100      	movs	r1, #0
 800d60a:	0008      	movs	r0, r1
 800d60c:	f000 fcb0 	bl	800df70 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800d610:	2104      	movs	r1, #4
 800d612:	2000      	movs	r0, #0
 800d614:	f000 fe1a 	bl	800e24c <SX126xSetTxParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d618:	2501      	movs	r5, #1
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d61a:	2300      	movs	r3, #0
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d61c:	2400      	movs	r4, #0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d61e:	480e      	ldr	r0, [pc, #56]	; (800d658 <RadioInit+0x68>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d620:	426d      	negs	r5, r5
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d622:	001a      	movs	r2, r3
 800d624:	0001      	movs	r1, r0
 800d626:	f000 fbcd 	bl	800ddc4 <SX126xSetDioIrqParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d62a:	0029      	movs	r1, r5
 800d62c:	0022      	movs	r2, r4
 800d62e:	4b0b      	ldr	r3, [pc, #44]	; (800d65c <RadioInit+0x6c>)
 800d630:	9400      	str	r4, [sp, #0]
 800d632:	480b      	ldr	r0, [pc, #44]	; (800d660 <RadioInit+0x70>)
 800d634:	f001 f9c6 	bl	800e9c4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800d638:	0029      	movs	r1, r5
 800d63a:	0022      	movs	r2, r4
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <RadioInit+0x74>)
 800d63e:	9400      	str	r4, [sp, #0]
 800d640:	4809      	ldr	r0, [pc, #36]	; (800d668 <RadioInit+0x78>)
 800d642:	f001 f9bf 	bl	800e9c4 <UTIL_TIMER_Create>
    IrqFired = false;
 800d646:	4b09      	ldr	r3, [pc, #36]	; (800d66c <RadioInit+0x7c>)
 800d648:	701c      	strb	r4, [r3, #0]
    return ( uint32_t )RadioGetWakeupTime( ) ;
 800d64a:	f7ff ffcb 	bl	800d5e4 <RadioGetWakeupTime>
}
 800d64e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800d650:	20001348 	.word	0x20001348
 800d654:	0800d905 	.word	0x0800d905
 800d658:	0000ffff 	.word	0x0000ffff
 800d65c:	0800d4bd 	.word	0x0800d4bd
 800d660:	200014c0 	.word	0x200014c0
 800d664:	0800d4d5 	.word	0x0800d4d5
 800d668:	20001468 	.word	0x20001468
 800d66c:	20001345 	.word	0x20001345

0800d670 <RadioSetMaxPayloadLength>:
{
 800d670:	b510      	push	{r4, lr}
    if( modem == MODEM_LORA )
 800d672:	2801      	cmp	r0, #1
 800d674:	d105      	bne.n	800d682 <RadioSetMaxPayloadLength+0x12>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800d676:	4b03      	ldr	r3, [pc, #12]	; (800d684 <RadioSetMaxPayloadLength+0x14>)
 800d678:	4803      	ldr	r0, [pc, #12]	; (800d688 <RadioSetMaxPayloadLength+0x18>)
 800d67a:	7019      	strb	r1, [r3, #0]
 800d67c:	73c1      	strb	r1, [r0, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 800d67e:	f000 fc47 	bl	800df10 <SX126xSetPacketParams>
}
 800d682:	bd10      	pop	{r4, pc}
 800d684:	20000190 	.word	0x20000190
 800d688:	20001480 	.word	0x20001480

0800d68c <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d68c:	2300      	movs	r3, #0
 800d68e:	490e      	ldr	r1, [pc, #56]	; (800d6c8 <RadioRx+0x3c>)
{
 800d690:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d692:	001a      	movs	r2, r3
{
 800d694:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d696:	0008      	movs	r0, r1
 800d698:	f000 fb94 	bl	800ddc4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800d69c:	2c00      	cmp	r4, #0
 800d69e:	d007      	beq.n	800d6b0 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d6a0:	4d0a      	ldr	r5, [pc, #40]	; (800d6cc <RadioRx+0x40>)
 800d6a2:	0021      	movs	r1, r4
 800d6a4:	0028      	movs	r0, r5
 800d6a6:	f001 fa9d 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d6aa:	0028      	movs	r0, r5
 800d6ac:	f001 fa3e 	bl	800eb2c <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <RadioRx+0x44>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d003      	beq.n	800d6c0 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800d6b8:	4806      	ldr	r0, [pc, #24]	; (800d6d4 <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 800d6ba:	f000 fd11 	bl	800e0e0 <SX126xSetRx>
}
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 800d6c0:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <RadioRx+0x4c>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	0180      	lsls	r0, r0, #6
 800d6c6:	e7f8      	b.n	800d6ba <RadioRx+0x2e>
 800d6c8:	0000ffff 	.word	0x0000ffff
 800d6cc:	20001468 	.word	0x20001468
 800d6d0:	20001461 	.word	0x20001461
 800d6d4:	00ffffff 	.word	0x00ffffff
 800d6d8:	20001464 	.word	0x20001464

0800d6dc <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d6dc:	2300      	movs	r3, #0
 800d6de:	490e      	ldr	r1, [pc, #56]	; (800d718 <RadioRxBoosted+0x3c>)
{
 800d6e0:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d6e2:	001a      	movs	r2, r3
{
 800d6e4:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d6e6:	0008      	movs	r0, r1
 800d6e8:	f000 fb6c 	bl	800ddc4 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800d6ec:	2c00      	cmp	r4, #0
 800d6ee:	d007      	beq.n	800d700 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d6f0:	4d0a      	ldr	r5, [pc, #40]	; (800d71c <RadioRxBoosted+0x40>)
 800d6f2:	0021      	movs	r1, r4
 800d6f4:	0028      	movs	r0, r5
 800d6f6:	f001 fa75 	bl	800ebe4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d6fa:	0028      	movs	r0, r5
 800d6fc:	f001 fa16 	bl	800eb2c <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800d700:	4b07      	ldr	r3, [pc, #28]	; (800d720 <RadioRxBoosted+0x44>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800d708:	4806      	ldr	r0, [pc, #24]	; (800d724 <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 800d70a:	f000 fd0b 	bl	800e124 <SX126xSetRxBoosted>
}
 800d70e:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 800d710:	4b05      	ldr	r3, [pc, #20]	; (800d728 <RadioRxBoosted+0x4c>)
 800d712:	6818      	ldr	r0, [r3, #0]
 800d714:	0180      	lsls	r0, r0, #6
 800d716:	e7f8      	b.n	800d70a <RadioRxBoosted+0x2e>
 800d718:	0000ffff 	.word	0x0000ffff
 800d71c:	20001468 	.word	0x20001468
 800d720:	20001461 	.word	0x20001461
 800d724:	00ffffff 	.word	0x00ffffff
 800d728:	20001464 	.word	0x20001464

0800d72c <RadioIrqProcess>:
  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
    if( IrqFired == true )
 800d72c:	4b67      	ldr	r3, [pc, #412]	; (800d8cc <RadioIrqProcess+0x1a0>)
{
 800d72e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( IrqFired == true )
 800d730:	781a      	ldrb	r2, [r3, #0]
 800d732:	2a00      	cmp	r2, #0
 800d734:	d100      	bne.n	800d738 <RadioIrqProcess+0xc>
 800d736:	e086      	b.n	800d846 <RadioIrqProcess+0x11a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d738:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d73c:	b672      	cpsid	i
    {
        CRITICAL_SECTION_BEGIN( );
        // Clear IRQ flag
        IrqFired = false;
 800d73e:	2100      	movs	r1, #0
 800d740:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d742:	f382 8810 	msr	PRIMASK, r2
        CRITICAL_SECTION_END( );

        uint16_t irqRegs = SX126xGetIrqStatus( );
 800d746:	f000 fc48 	bl	800dfda <SX126xGetIrqStatus>
 800d74a:	0004      	movs	r4, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800d74c:	4860      	ldr	r0, [pc, #384]	; (800d8d0 <RadioIrqProcess+0x1a4>)
 800d74e:	f000 fc19 	bl	800df84 <SX126xClearIrqStatus>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800d752:	07e3      	lsls	r3, r4, #31
 800d754:	d50d      	bpl.n	800d772 <RadioIrqProcess+0x46>
        {
            TimerStop( &TxTimeoutTimer );
 800d756:	485f      	ldr	r0, [pc, #380]	; (800d8d4 <RadioIrqProcess+0x1a8>)
 800d758:	f001 f994 	bl	800ea84 <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d75c:	2002      	movs	r0, #2
 800d75e:	f000 fa3f 	bl	800dbe0 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d762:	4b5d      	ldr	r3, [pc, #372]	; (800d8d8 <RadioIrqProcess+0x1ac>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d003      	beq.n	800d772 <RadioIrqProcess+0x46>
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d000      	beq.n	800d772 <RadioIrqProcess+0x46>
            {
                RadioEvents->TxDone( );
 800d770:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800d772:	2502      	movs	r5, #2
 800d774:	422c      	tst	r4, r5
 800d776:	d010      	beq.n	800d79a <RadioIrqProcess+0x6e>
        {
            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800d778:	4f57      	ldr	r7, [pc, #348]	; (800d8d8 <RadioIrqProcess+0x1ac>)
 800d77a:	4e58      	ldr	r6, [pc, #352]	; (800d8dc <RadioIrqProcess+0x1b0>)
 800d77c:	0663      	lsls	r3, r4, #25
 800d77e:	d563      	bpl.n	800d848 <RadioIrqProcess+0x11c>
            {
                if( RxContinuous == false )
 800d780:	7833      	ldrb	r3, [r6, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <RadioIrqProcess+0x60>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d786:	0028      	movs	r0, r5
 800d788:	f000 fa2a 	bl	800dbe0 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <RadioIrqProcess+0x6e>
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d000      	beq.n	800d79a <RadioIrqProcess+0x6e>
                {
                    RadioEvents->RxError( );
 800d798:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800d79a:	0623      	lsls	r3, r4, #24
 800d79c:	d50c      	bpl.n	800d7b8 <RadioIrqProcess+0x8c>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
        	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d79e:	2002      	movs	r0, #2
 800d7a0:	f000 fa1e 	bl	800dbe0 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d7a4:	4b4c      	ldr	r3, [pc, #304]	; (800d8d8 <RadioIrqProcess+0x1ac>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d005      	beq.n	800d7b8 <RadioIrqProcess+0x8c>
 800d7ac:	699b      	ldr	r3, [r3, #24]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <RadioIrqProcess+0x8c>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800d7b2:	05e0      	lsls	r0, r4, #23
 800d7b4:	0fc0      	lsrs	r0, r0, #31
 800d7b6:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800d7b8:	05a3      	lsls	r3, r4, #22
 800d7ba:	d512      	bpl.n	800d7e2 <RadioIrqProcess+0xb6>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800d7bc:	f000 fa0a 	bl	800dbd4 <SX126xGetOperatingMode>
 800d7c0:	2804      	cmp	r0, #4
 800d7c2:	d000      	beq.n	800d7c6 <RadioIrqProcess+0x9a>
 800d7c4:	e071      	b.n	800d8aa <RadioIrqProcess+0x17e>
            {
                TimerStop( &TxTimeoutTimer );
 800d7c6:	4843      	ldr	r0, [pc, #268]	; (800d8d4 <RadioIrqProcess+0x1a8>)
 800d7c8:	f001 f95c 	bl	800ea84 <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d7cc:	2002      	movs	r0, #2
 800d7ce:	f000 fa07 	bl	800dbe0 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d7d2:	4b41      	ldr	r3, [pc, #260]	; (800d8d8 <RadioIrqProcess+0x1ac>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d003      	beq.n	800d7e2 <RadioIrqProcess+0xb6>
 800d7da:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d000      	beq.n	800d7e2 <RadioIrqProcess+0xb6>
                {
                    RadioEvents->RxTimeout( );
 800d7e0:	4798      	blx	r3
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 800d7e2:	0763      	lsls	r3, r4, #29
 800d7e4:	d505      	bpl.n	800d7f2 <RadioIrqProcess+0xc6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	2003      	movs	r0, #3
 800d7ea:	0011      	movs	r1, r2
 800d7ec:	4b3c      	ldr	r3, [pc, #240]	; (800d8e0 <RadioIrqProcess+0x1b4>)
 800d7ee:	f001 fb17 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800d7f2:	0723      	lsls	r3, r4, #28
 800d7f4:	d505      	bpl.n	800d802 <RadioIrqProcess+0xd6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2003      	movs	r0, #3
 800d7fa:	0011      	movs	r1, r2
 800d7fc:	4b39      	ldr	r3, [pc, #228]	; (800d8e4 <RadioIrqProcess+0x1b8>)
 800d7fe:	f001 fb0f 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800d802:	06e3      	lsls	r3, r4, #27
 800d804:	d505      	bpl.n	800d812 <RadioIrqProcess+0xe6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800d806:	2200      	movs	r2, #0
 800d808:	2003      	movs	r0, #3
 800d80a:	0011      	movs	r1, r2
 800d80c:	4b36      	ldr	r3, [pc, #216]	; (800d8e8 <RadioIrqProcess+0x1bc>)
 800d80e:	f001 fb07 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800d812:	06a3      	lsls	r3, r4, #26
 800d814:	d517      	bpl.n	800d846 <RadioIrqProcess+0x11a>
        {
            TimerStop( &RxTimeoutTimer );
 800d816:	4835      	ldr	r0, [pc, #212]	; (800d8ec <RadioIrqProcess+0x1c0>)
 800d818:	f001 f934 	bl	800ea84 <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 800d81c:	4b2f      	ldr	r3, [pc, #188]	; (800d8dc <RadioIrqProcess+0x1b0>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d102      	bne.n	800d82a <RadioIrqProcess+0xfe>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d824:	2002      	movs	r0, #2
 800d826:	f000 f9db 	bl	800dbe0 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d82a:	4b2b      	ldr	r3, [pc, #172]	; (800d8d8 <RadioIrqProcess+0x1ac>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d009      	beq.n	800d846 <RadioIrqProcess+0x11a>
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d006      	beq.n	800d846 <RadioIrqProcess+0x11a>
            {
                RadioEvents->RxTimeout( );
 800d838:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 800d83a:	2200      	movs	r2, #0
 800d83c:	2003      	movs	r0, #3
 800d83e:	0011      	movs	r1, r2
 800d840:	4b2b      	ldr	r3, [pc, #172]	; (800d8f0 <RadioIrqProcess+0x1c4>)
 800d842:	f001 faed 	bl	800ee20 <UTIL_ADV_TRACE_COND_FSend>
            }
        }
    }
}
 800d846:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                TimerStop( &RxTimeoutTimer );
 800d848:	4828      	ldr	r0, [pc, #160]	; (800d8ec <RadioIrqProcess+0x1c0>)
 800d84a:	f001 f91b 	bl	800ea84 <UTIL_TIMER_Stop>
                if( RxContinuous == false )
 800d84e:	7836      	ldrb	r6, [r6, #0]
 800d850:	2e00      	cmp	r6, #0
 800d852:	d10e      	bne.n	800d872 <RadioIrqProcess+0x146>
                	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d854:	0028      	movs	r0, r5
 800d856:	f000 f9c3 	bl	800dbe0 <SX126xSetOperatingMode>
                    SX126xWriteRegister( 0x0902, 0x00 );
 800d85a:	0031      	movs	r1, r6
 800d85c:	4825      	ldr	r0, [pc, #148]	; (800d8f4 <RadioIrqProcess+0x1c8>)
 800d85e:	f000 fc13 	bl	800e088 <SX126xWriteRegister>
                    SX126xWriteRegister( 0x0944, SX126xReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800d862:	4825      	ldr	r0, [pc, #148]	; (800d8f8 <RadioIrqProcess+0x1cc>)
 800d864:	f000 fcb0 	bl	800e1c8 <SX126xReadRegister>
 800d868:	4305      	orrs	r5, r0
 800d86a:	b2e9      	uxtb	r1, r5
 800d86c:	4822      	ldr	r0, [pc, #136]	; (800d8f8 <RadioIrqProcess+0x1cc>)
 800d86e:	f000 fc0b 	bl	800e088 <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 800d872:	466b      	mov	r3, sp
 800d874:	4e21      	ldr	r6, [pc, #132]	; (800d8fc <RadioIrqProcess+0x1d0>)
 800d876:	1dd9      	adds	r1, r3, #7
 800d878:	22ff      	movs	r2, #255	; 0xff
 800d87a:	0030      	movs	r0, r6
 800d87c:	f000 fd83 	bl	800e386 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 800d880:	4d1f      	ldr	r5, [pc, #124]	; (800d900 <RadioIrqProcess+0x1d4>)
 800d882:	0028      	movs	r0, r5
 800d884:	f000 fbb4 	bl	800dff0 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d100      	bne.n	800d890 <RadioIrqProcess+0x164>
 800d88e:	e784      	b.n	800d79a <RadioIrqProcess+0x6e>
 800d890:	689f      	ldr	r7, [r3, #8]
 800d892:	2f00      	cmp	r7, #0
 800d894:	d100      	bne.n	800d898 <RadioIrqProcess+0x16c>
 800d896:	e780      	b.n	800d79a <RadioIrqProcess+0x6e>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 800d898:	4669      	mov	r1, sp
 800d89a:	230d      	movs	r3, #13
 800d89c:	220c      	movs	r2, #12
 800d89e:	0030      	movs	r0, r6
 800d8a0:	56eb      	ldrsb	r3, [r5, r3]
 800d8a2:	56aa      	ldrsb	r2, [r5, r2]
 800d8a4:	79c9      	ldrb	r1, [r1, #7]
 800d8a6:	47b8      	blx	r7
 800d8a8:	e777      	b.n	800d79a <RadioIrqProcess+0x6e>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 800d8aa:	f000 f993 	bl	800dbd4 <SX126xGetOperatingMode>
 800d8ae:	2805      	cmp	r0, #5
 800d8b0:	d197      	bne.n	800d7e2 <RadioIrqProcess+0xb6>
                TimerStop( &RxTimeoutTimer );
 800d8b2:	480e      	ldr	r0, [pc, #56]	; (800d8ec <RadioIrqProcess+0x1c0>)
 800d8b4:	f001 f8e6 	bl	800ea84 <UTIL_TIMER_Stop>
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d8b8:	2002      	movs	r0, #2
 800d8ba:	f000 f991 	bl	800dbe0 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d8be:	4b06      	ldr	r3, [pc, #24]	; (800d8d8 <RadioIrqProcess+0x1ac>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d100      	bne.n	800d8c8 <RadioIrqProcess+0x19c>
 800d8c6:	e78c      	b.n	800d7e2 <RadioIrqProcess+0xb6>
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	e787      	b.n	800d7dc <RadioIrqProcess+0xb0>
 800d8cc:	20001345 	.word	0x20001345
 800d8d0:	0000ffff 	.word	0x0000ffff
 800d8d4:	200014c0 	.word	0x200014c0
 800d8d8:	20001348 	.word	0x20001348
 800d8dc:	20001461 	.word	0x20001461
 800d8e0:	0800fc19 	.word	0x0800fc19
 800d8e4:	0800fc26 	.word	0x0800fc26
 800d8e8:	0800fc34 	.word	0x0800fc34
 800d8ec:	20001468 	.word	0x20001468
 800d8f0:	0800fc41 	.word	0x0800fc41
 800d8f4:	00000902 	.word	0x00000902
 800d8f8:	00000944 	.word	0x00000944
 800d8fc:	20001362 	.word	0x20001362
 800d900:	2000134c 	.word	0x2000134c

0800d904 <RadioOnDioIrq>:
  IrqFired = true;
 800d904:	2201      	movs	r2, #1
{
 800d906:	b510      	push	{r4, lr}
  IrqFired = true;
 800d908:	4b02      	ldr	r3, [pc, #8]	; (800d914 <RadioOnDioIrq+0x10>)
 800d90a:	701a      	strb	r2, [r3, #0]
  RadioIrqProcess();
 800d90c:	f7ff ff0e 	bl	800d72c <RadioIrqProcess>
}
 800d910:	bd10      	pop	{r4, pc}
 800d912:	46c0      	nop			; (mov r8, r8)
 800d914:	20001345 	.word	0x20001345

0800d918 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800d918:	4b0c      	ldr	r3, [pc, #48]	; (800d94c <RadioSetPublicNetwork+0x34>)
{
 800d91a:	b510      	push	{r4, lr}
 800d91c:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800d91e:	7018      	strb	r0, [r3, #0]
 800d920:	7058      	strb	r0, [r3, #1]
    if( modem == MODEM_LORA){
 800d922:	f000 f817 	bl	800d954 <RadioSetModem.part.0>
    if( enable == true )
 800d926:	2c00      	cmp	r4, #0
 800d928:	d009      	beq.n	800d93e <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800d92a:	20e8      	movs	r0, #232	; 0xe8
 800d92c:	2134      	movs	r1, #52	; 0x34
 800d92e:	00c0      	lsls	r0, r0, #3
 800d930:	f000 fbaa 	bl	800e088 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800d934:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800d936:	4806      	ldr	r0, [pc, #24]	; (800d950 <RadioSetPublicNetwork+0x38>)
 800d938:	f000 fba6 	bl	800e088 <SX126xWriteRegister>
}
 800d93c:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800d93e:	20e8      	movs	r0, #232	; 0xe8
 800d940:	2114      	movs	r1, #20
 800d942:	00c0      	lsls	r0, r0, #3
 800d944:	f000 fba0 	bl	800e088 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800d948:	2124      	movs	r1, #36	; 0x24
 800d94a:	e7f4      	b.n	800d936 <RadioSetPublicNetwork+0x1e>
 800d94c:	20001360 	.word	0x20001360
 800d950:	00000741 	.word	0x00000741

0800d954 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800d954:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 800d956:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800d958:	f000 faa8 	bl	800deac <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800d95c:	4b04      	ldr	r3, [pc, #16]	; (800d970 <RadioSetModem.part.0+0x1c>)
 800d95e:	7818      	ldrb	r0, [r3, #0]
 800d960:	785a      	ldrb	r2, [r3, #1]
 800d962:	4282      	cmp	r2, r0
 800d964:	d002      	beq.n	800d96c <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800d966:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800d968:	f7ff ffd6 	bl	800d918 <RadioSetPublicNetwork>
}
 800d96c:	bd10      	pop	{r4, pc}
 800d96e:	46c0      	nop			; (mov r8, r8)
 800d970:	20001360 	.word	0x20001360

0800d974 <RadioSetModem>:
{
 800d974:	b510      	push	{r4, lr}
    if( modem == MODEM_LORA){
 800d976:	2801      	cmp	r0, #1
 800d978:	d101      	bne.n	800d97e <RadioSetModem+0xa>
 800d97a:	f7ff ffeb 	bl	800d954 <RadioSetModem.part.0>
}
 800d97e:	bd10      	pop	{r4, pc}

0800d980 <RadioRandom>:
{
 800d980:	b510      	push	{r4, lr}
 800d982:	f7ff ffe7 	bl	800d954 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d986:	2300      	movs	r3, #0
 800d988:	001a      	movs	r2, r3
 800d98a:	0019      	movs	r1, r3
 800d98c:	0018      	movs	r0, r3
 800d98e:	f000 fa19 	bl	800ddc4 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 800d992:	f000 fc23 	bl	800e1dc <SX126xGetRandom>
}
 800d996:	bd10      	pop	{r4, pc}

0800d998 <RadioSetRxConfig>:
{
 800d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d99a:	b087      	sub	sp, #28
 800d99c:	9303      	str	r3, [sp, #12]
 800d99e:	ab0d      	add	r3, sp, #52	; 0x34
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	0015      	movs	r5, r2
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	ab0e      	add	r3, sp, #56	; 0x38
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	000e      	movs	r6, r1
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	ab0f      	add	r3, sp, #60	; 0x3c
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	a906      	add	r1, sp, #24
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	ab10      	add	r3, sp, #64	; 0x40
 800d9b8:	781a      	ldrb	r2, [r3, #0]
 800d9ba:	ab11      	add	r3, sp, #68	; 0x44
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	0007      	movs	r7, r0
 800d9c0:	9304      	str	r3, [sp, #16]
 800d9c2:	2319      	movs	r3, #25
 800d9c4:	185b      	adds	r3, r3, r1
 800d9c6:	7fdb      	ldrb	r3, [r3, #31]
 800d9c8:	9305      	str	r3, [sp, #20]
 800d9ca:	231d      	movs	r3, #29
 800d9cc:	185b      	adds	r3, r3, r1
 800d9ce:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 800d9d0:	4938      	ldr	r1, [pc, #224]	; (800dab4 <RadioSetRxConfig+0x11c>)
 800d9d2:	700b      	strb	r3, [r1, #0]
        symbTimeout = 0;
 800d9d4:	4259      	negs	r1, r3
 800d9d6:	414b      	adcs	r3, r1
 800d9d8:	9900      	ldr	r1, [sp, #0]
 800d9da:	425b      	negs	r3, r3
 800d9dc:	4019      	ands	r1, r3
    if( fixLen == true )
 800d9de:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 800d9e0:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d100      	bne.n	800d9e8 <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 800d9e6:	22ff      	movs	r2, #255	; 0xff
 800d9e8:	4b33      	ldr	r3, [pc, #204]	; (800dab8 <RadioSetRxConfig+0x120>)
 800d9ea:	701a      	strb	r2, [r3, #0]
    if(modem == MODEM_LORA){
 800d9ec:	2f01      	cmp	r7, #1
 800d9ee:	d14d      	bne.n	800da8c <RadioSetRxConfig+0xf4>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f000 f97d 	bl	800dcf0 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d9f6:	4c31      	ldr	r4, [pc, #196]	; (800dabc <RadioSetRxConfig+0x124>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800d9f8:	4931      	ldr	r1, [pc, #196]	; (800dac0 <RadioSetRxConfig+0x128>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d9fa:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800d9fc:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d9fe:	3328      	adds	r3, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800da00:	3238      	adds	r2, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800da02:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800da04:	b2eb      	uxtb	r3, r5
 800da06:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800da08:	0022      	movs	r2, r4
 800da0a:	5d89      	ldrb	r1, [r1, r6]
 800da0c:	3239      	adds	r2, #57	; 0x39
 800da0e:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800da10:	0022      	movs	r2, r4
 800da12:	9903      	ldr	r1, [sp, #12]
 800da14:	323a      	adds	r2, #58	; 0x3a
 800da16:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800da18:	2e00      	cmp	r6, #0
 800da1a:	d139      	bne.n	800da90 <RadioSetRxConfig+0xf8>
 800da1c:	3d0b      	subs	r5, #11
 800da1e:	42af      	cmp	r7, r5
 800da20:	4176      	adcs	r6, r6
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800da22:	b2f1      	uxtb	r1, r6
 800da24:	0022      	movs	r2, r4
 800da26:	323b      	adds	r2, #59	; 0x3b
 800da28:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800da2a:	2201      	movs	r2, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800da2c:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800da2e:	7022      	strb	r2, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800da30:	4293      	cmp	r3, r2
 800da32:	d835      	bhi.n	800daa0 <RadioSetRxConfig+0x108>
                if( preambleLen < 12 )
 800da34:	9b01      	ldr	r3, [sp, #4]
 800da36:	2b0b      	cmp	r3, #11
 800da38:	d832      	bhi.n	800daa0 <RadioSetRxConfig+0x108>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800da3a:	230c      	movs	r3, #12
 800da3c:	81a3      	strh	r3, [r4, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800da3e:	9b02      	ldr	r3, [sp, #8]
 800da40:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800da42:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <RadioSetRxConfig+0x120>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800da4c:	9b05      	ldr	r3, [sp, #20]
 800da4e:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800da50:	f7ff fd4c 	bl	800d4ec <RadioStandby>
    if( modem == MODEM_LORA){
 800da54:	f7ff ff7e 	bl	800d954 <RadioSetModem.part.0>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800da58:	0020      	movs	r0, r4
 800da5a:	3028      	adds	r0, #40	; 0x28
 800da5c:	f000 fa34 	bl	800dec8 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800da60:	0020      	movs	r0, r4
 800da62:	f000 fa55 	bl	800df10 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 800da66:	466b      	mov	r3, sp
 800da68:	7818      	ldrb	r0, [r3, #0]
 800da6a:	f000 fb73 	bl	800e154 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800da6e:	7c63      	ldrb	r3, [r4, #17]
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800da70:	4814      	ldr	r0, [pc, #80]	; (800dac4 <RadioSetRxConfig+0x12c>)
 800da72:	2404      	movs	r4, #4
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800da74:	2b01      	cmp	r3, #1
 800da76:	d117      	bne.n	800daa8 <RadioSetRxConfig+0x110>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800da78:	f000 fba6 	bl	800e1c8 <SX126xReadRegister>
 800da7c:	43a0      	bics	r0, r4
 800da7e:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800da80:	4810      	ldr	r0, [pc, #64]	; (800dac4 <RadioSetRxConfig+0x12c>)
 800da82:	f000 fb01 	bl	800e088 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 800da86:	4b10      	ldr	r3, [pc, #64]	; (800dac8 <RadioSetRxConfig+0x130>)
 800da88:	4a10      	ldr	r2, [pc, #64]	; (800dacc <RadioSetRxConfig+0x134>)
 800da8a:	601a      	str	r2, [r3, #0]
}
 800da8c:	b007      	add	sp, #28
 800da8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800da90:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800da92:	2e01      	cmp	r6, #1
 800da94:	d1c6      	bne.n	800da24 <RadioSetRxConfig+0x8c>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800da96:	3d0c      	subs	r5, #12
 800da98:	426a      	negs	r2, r5
 800da9a:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800da9c:	b2e9      	uxtb	r1, r5
 800da9e:	e7c1      	b.n	800da24 <RadioSetRxConfig+0x8c>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800daa0:	4b06      	ldr	r3, [pc, #24]	; (800dabc <RadioSetRxConfig+0x124>)
 800daa2:	9a01      	ldr	r2, [sp, #4]
 800daa4:	819a      	strh	r2, [r3, #12]
 800daa6:	e7ca      	b.n	800da3e <RadioSetRxConfig+0xa6>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800daa8:	f000 fb8e 	bl	800e1c8 <SX126xReadRegister>
 800daac:	4304      	orrs	r4, r0
 800daae:	b2e1      	uxtb	r1, r4
 800dab0:	e7e6      	b.n	800da80 <RadioSetRxConfig+0xe8>
 800dab2:	46c0      	nop			; (mov r8, r8)
 800dab4:	20001461 	.word	0x20001461
 800dab8:	20000190 	.word	0x20000190
 800dabc:	20001480 	.word	0x20001480
 800dac0:	0800fc4e 	.word	0x0800fc4e
 800dac4:	00000736 	.word	0x00000736
 800dac8:	20001464 	.word	0x20001464
 800dacc:	0000ffff 	.word	0x0000ffff

0800dad0 <RadioSetTxConfig>:
{
 800dad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dad2:	b087      	sub	sp, #28
 800dad4:	9101      	str	r1, [sp, #4]
 800dad6:	a90c      	add	r1, sp, #48	; 0x30
 800dad8:	c904      	ldmia	r1!, {r2}
 800dada:	7809      	ldrb	r1, [r1, #0]
 800dadc:	9102      	str	r1, [sp, #8]
 800dade:	a90e      	add	r1, sp, #56	; 0x38
 800dae0:	880e      	ldrh	r6, [r1, #0]
 800dae2:	a90f      	add	r1, sp, #60	; 0x3c
 800dae4:	7809      	ldrb	r1, [r1, #0]
 800dae6:	9103      	str	r1, [sp, #12]
 800dae8:	a910      	add	r1, sp, #64	; 0x40
 800daea:	7809      	ldrb	r1, [r1, #0]
 800daec:	9104      	str	r1, [sp, #16]
 800daee:	a913      	add	r1, sp, #76	; 0x4c
 800daf0:	7809      	ldrb	r1, [r1, #0]
 800daf2:	9105      	str	r1, [sp, #20]
    if( modem == MODEM_LORA){
 800daf4:	2801      	cmp	r0, #1
 800daf6:	d136      	bne.n	800db66 <RadioSetTxConfig+0x96>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800daf8:	4c2e      	ldr	r4, [pc, #184]	; (800dbb4 <RadioSetTxConfig+0xe4>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800dafa:	4d2f      	ldr	r5, [pc, #188]	; (800dbb8 <RadioSetTxConfig+0xe8>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dafc:	0021      	movs	r1, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800dafe:	0027      	movs	r7, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800db00:	3128      	adds	r1, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800db02:	3738      	adds	r7, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800db04:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800db06:	b2d1      	uxtb	r1, r2
 800db08:	7039      	strb	r1, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800db0a:	0027      	movs	r7, r4
 800db0c:	5ced      	ldrb	r5, [r5, r3]
 800db0e:	3739      	adds	r7, #57	; 0x39
 800db10:	703d      	strb	r5, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800db12:	0027      	movs	r7, r4
 800db14:	9d02      	ldr	r5, [sp, #8]
 800db16:	373a      	adds	r7, #58	; 0x3a
 800db18:	703d      	strb	r5, [r7, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d139      	bne.n	800db92 <RadioSetTxConfig+0xc2>
 800db1e:	3a0b      	subs	r2, #11
 800db20:	4290      	cmp	r0, r2
 800db22:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800db24:	b2d8      	uxtb	r0, r3
 800db26:	0023      	movs	r3, r4
 800db28:	333b      	adds	r3, #59	; 0x3b
 800db2a:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800db2c:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800db2e:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800db30:	7023      	strb	r3, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800db32:	4299      	cmp	r1, r3
 800db34:	d835      	bhi.n	800dba2 <RadioSetTxConfig+0xd2>
                if( preambleLen < 12 )
 800db36:	2e0b      	cmp	r6, #11
 800db38:	d833      	bhi.n	800dba2 <RadioSetTxConfig+0xd2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800db3a:	330b      	adds	r3, #11
 800db3c:	81a3      	strh	r3, [r4, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800db42:	4b1e      	ldr	r3, [pc, #120]	; (800dbbc <RadioSetTxConfig+0xec>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800db4c:	9b05      	ldr	r3, [sp, #20]
 800db4e:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800db50:	f7ff fccc 	bl	800d4ec <RadioStandby>
    if( modem == MODEM_LORA){
 800db54:	f7ff fefe 	bl	800d954 <RadioSetModem.part.0>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800db58:	0020      	movs	r0, r4
 800db5a:	3028      	adds	r0, #40	; 0x28
 800db5c:	f000 f9b4 	bl	800dec8 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800db60:	0020      	movs	r0, r4
 800db62:	f000 f9d5 	bl	800df10 <SX126xSetPacketParams>
    if( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800db66:	4b13      	ldr	r3, [pc, #76]	; (800dbb4 <RadioSetTxConfig+0xe4>)
 800db68:	2404      	movs	r4, #4
 800db6a:	3339      	adds	r3, #57	; 0x39
 800db6c:	781b      	ldrb	r3, [r3, #0]
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800db6e:	4814      	ldr	r0, [pc, #80]	; (800dbc0 <RadioSetTxConfig+0xf0>)
    if( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800db70:	2b06      	cmp	r3, #6
 800db72:	d119      	bne.n	800dba8 <RadioSetTxConfig+0xd8>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800db74:	f000 fb28 	bl	800e1c8 <SX126xReadRegister>
 800db78:	43a0      	bics	r0, r4
 800db7a:	b2c1      	uxtb	r1, r0
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800db7c:	4810      	ldr	r0, [pc, #64]	; (800dbc0 <RadioSetTxConfig+0xf0>)
 800db7e:	f000 fa83 	bl	800e088 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800db82:	9801      	ldr	r0, [sp, #4]
 800db84:	f000 fb8a 	bl	800e29c <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800db88:	4b0e      	ldr	r3, [pc, #56]	; (800dbc4 <RadioSetTxConfig+0xf4>)
 800db8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db8c:	601a      	str	r2, [r3, #0]
}
 800db8e:	b007      	add	sp, #28
 800db90:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800db92:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800db94:	2b01      	cmp	r3, #1
 800db96:	d1c6      	bne.n	800db26 <RadioSetTxConfig+0x56>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800db98:	3a0c      	subs	r2, #12
 800db9a:	4253      	negs	r3, r2
 800db9c:	415a      	adcs	r2, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800db9e:	b2d0      	uxtb	r0, r2
 800dba0:	e7c1      	b.n	800db26 <RadioSetTxConfig+0x56>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800dba2:	4b04      	ldr	r3, [pc, #16]	; (800dbb4 <RadioSetTxConfig+0xe4>)
 800dba4:	819e      	strh	r6, [r3, #12]
 800dba6:	e7ca      	b.n	800db3e <RadioSetTxConfig+0x6e>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800dba8:	f000 fb0e 	bl	800e1c8 <SX126xReadRegister>
 800dbac:	4304      	orrs	r4, r0
 800dbae:	b2e1      	uxtb	r1, r4
 800dbb0:	e7e4      	b.n	800db7c <RadioSetTxConfig+0xac>
 800dbb2:	46c0      	nop			; (mov r8, r8)
 800dbb4:	20001480 	.word	0x20001480
 800dbb8:	0800fc4e 	.word	0x0800fc4e
 800dbbc:	20000190 	.word	0x20000190
 800dbc0:	00000889 	.word	0x00000889
 800dbc4:	200014bc 	.word	0x200014bc

0800dbc8 <SX126xFreqCorrection>:

    SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
}

void SX126xFreqCorrection(uint8_t trim){
	xta_trim = trim;
 800dbc8:	4b01      	ldr	r3, [pc, #4]	; (800dbd0 <SX126xFreqCorrection+0x8>)
 800dbca:	7018      	strb	r0, [r3, #0]
}
 800dbcc:	4770      	bx	lr
 800dbce:	46c0      	nop			; (mov r8, r8)
 800dbd0:	20000191 	.word	0x20000191

0800dbd4 <SX126xGetOperatingMode>:


RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 800dbd4:	4b01      	ldr	r3, [pc, #4]	; (800dbdc <SX126xGetOperatingMode+0x8>)
 800dbd6:	7818      	ldrb	r0, [r3, #0]
}
 800dbd8:	4770      	bx	lr
 800dbda:	46c0      	nop			; (mov r8, r8)
 800dbdc:	200014de 	.word	0x200014de

0800dbe0 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 800dbe0:	4b01      	ldr	r3, [pc, #4]	; (800dbe8 <SX126xSetOperatingMode+0x8>)
 800dbe2:	7018      	strb	r0, [r3, #0]
}
 800dbe4:	4770      	bx	lr
 800dbe6:	46c0      	nop			; (mov r8, r8)
 800dbe8:	200014de 	.word	0x200014de

0800dbec <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800dbec:	b510      	push	{r4, lr}
    return OperatingMode;
 800dbee:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <SX126xCheckDeviceReady+0x20>)
 800dbf0:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d001      	beq.n	800dbfa <SX126xCheckDeviceReady+0xe>
 800dbf6:	2b06      	cmp	r3, #6
 800dbf8:	d104      	bne.n	800dc04 <SX126xCheckDeviceReady+0x18>
    {
        Sx_Board_WakeUp( );
 800dbfa:	f7f6 fb01 	bl	8004200 <SX1262DVK1CAS_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        Sx_Board_SetAntSw( RFSW_ON );
 800dbfe:	2005      	movs	r0, #5
 800dc00:	f7f6 fadc 	bl	80041bc <SX1262DVK1CAS_RADIO_SetAntSw>
    }
    Sx_Board_WaitOnBusy( );
 800dc04:	f7f6 fac4 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800dc08:	bd10      	pop	{r4, pc}
 800dc0a:	46c0      	nop			; (mov r8, r8)
 800dc0c:	200014de 	.word	0x200014de

0800dc10 <SX126xGetPacketType>:
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 800dc10:	4b01      	ldr	r3, [pc, #4]	; (800dc18 <SX126xGetPacketType+0x8>)
 800dc12:	7818      	ldrb	r0, [r3, #0]
}
 800dc14:	4770      	bx	lr
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	200014df 	.word	0x200014df

0800dc1c <SX126xWriteCommand>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800dc1c:	b570      	push	{r4, r5, r6, lr}
 800dc1e:	0006      	movs	r6, r0
 800dc20:	000c      	movs	r4, r1
 800dc22:	0015      	movs	r5, r2
    SX126xCheckDeviceReady( );
 800dc24:	f7ff ffe2 	bl	800dbec <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800dc28:	2000      	movs	r0, #0
 800dc2a:	f7f6 fabb 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800dc2e:	b2b0      	uxth	r0, r6
 800dc30:	f7f6 fad8 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 800dc34:	1965      	adds	r5, r4, r5
 800dc36:	42ac      	cmp	r4, r5
 800dc38:	d107      	bne.n	800dc4a <SX126xWriteCommand+0x2e>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	f7f6 fab2 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 800dc40:	2e84      	cmp	r6, #132	; 0x84
 800dc42:	d001      	beq.n	800dc48 <SX126xWriteCommand+0x2c>
    {
        Sx_Board_WaitOnBusy( );
 800dc44:	f7f6 faa4 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
    }
}
 800dc48:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800dc4a:	7820      	ldrb	r0, [r4, #0]
 800dc4c:	f7f6 faca 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800dc50:	3401      	adds	r4, #1
 800dc52:	e7f0      	b.n	800dc36 <SX126xWriteCommand+0x1a>

0800dc54 <SX126xSetSleep>:
{
 800dc54:	b513      	push	{r0, r1, r4, lr}
 800dc56:	1c04      	adds	r4, r0, #0
    Sx_Board_SetAntSw( RFSW_OFF );
 800dc58:	2000      	movs	r0, #0
 800dc5a:	f7f6 faaf 	bl	80041bc <SX1262DVK1CAS_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800dc5e:	2006      	movs	r0, #6
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800dc60:	466b      	mov	r3, sp
 800dc62:	4020      	ands	r0, r4
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800dc64:	07e4      	lsls	r4, r4, #31
 800dc66:	0fe4      	lsrs	r4, r4, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800dc68:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800dc6a:	4304      	orrs	r4, r0
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	2084      	movs	r0, #132	; 0x84
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800dc70:	700c      	strb	r4, [r1, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800dc72:	f7ff ffd3 	bl	800dc1c <SX126xWriteCommand>
    OperatingMode = mode;
 800dc76:	2200      	movs	r2, #0
 800dc78:	4b01      	ldr	r3, [pc, #4]	; (800dc80 <SX126xSetSleep+0x2c>)
 800dc7a:	701a      	strb	r2, [r3, #0]
}
 800dc7c:	bd13      	pop	{r0, r1, r4, pc}
 800dc7e:	46c0      	nop			; (mov r8, r8)
 800dc80:	200014de 	.word	0x200014de

0800dc84 <SX126xSetStandby>:
{
 800dc84:	b507      	push	{r0, r1, r2, lr}
 800dc86:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800dc88:	2201      	movs	r2, #1
{
 800dc8a:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800dc8c:	1dd9      	adds	r1, r3, #7
 800dc8e:	2080      	movs	r0, #128	; 0x80
 800dc90:	f7ff ffc4 	bl	800dc1c <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800dc94:	466b      	mov	r3, sp
 800dc96:	79db      	ldrb	r3, [r3, #7]
    OperatingMode = mode;
 800dc98:	1e5a      	subs	r2, r3, #1
 800dc9a:	4193      	sbcs	r3, r2
 800dc9c:	4a01      	ldr	r2, [pc, #4]	; (800dca4 <SX126xSetStandby+0x20>)
 800dc9e:	3301      	adds	r3, #1
 800dca0:	7013      	strb	r3, [r2, #0]
}
 800dca2:	bd07      	pop	{r0, r1, r2, pc}
 800dca4:	200014de 	.word	0x200014de

0800dca8 <SX126xSetRxDutyCycle>:
{
 800dca8:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800dcaa:	466a      	mov	r2, sp
 800dcac:	0c03      	lsrs	r3, r0, #16
 800dcae:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800dcb0:	0a03      	lsrs	r3, r0, #8
 800dcb2:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800dcb4:	0c0b      	lsrs	r3, r1, #16
 800dcb6:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800dcb8:	0a0b      	lsrs	r3, r1, #8
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800dcba:	7090      	strb	r0, [r2, #2]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800dcbc:	7113      	strb	r3, [r2, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800dcbe:	7151      	strb	r1, [r2, #5]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800dcc0:	2094      	movs	r0, #148	; 0x94
 800dcc2:	2206      	movs	r2, #6
 800dcc4:	4669      	mov	r1, sp
 800dcc6:	f7ff ffa9 	bl	800dc1c <SX126xWriteCommand>
    OperatingMode = mode;
 800dcca:	2206      	movs	r2, #6
 800dccc:	4b01      	ldr	r3, [pc, #4]	; (800dcd4 <SX126xSetRxDutyCycle+0x2c>)
 800dcce:	701a      	strb	r2, [r3, #0]
}
 800dcd0:	bd07      	pop	{r0, r1, r2, pc}
 800dcd2:	46c0      	nop			; (mov r8, r8)
 800dcd4:	200014de 	.word	0x200014de

0800dcd8 <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800dcd8:	2200      	movs	r2, #0
{
 800dcda:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800dcdc:	0011      	movs	r1, r2
 800dcde:	20d1      	movs	r0, #209	; 0xd1
 800dce0:	f7ff ff9c 	bl	800dc1c <SX126xWriteCommand>
    OperatingMode = mode;
 800dce4:	2204      	movs	r2, #4
 800dce6:	4b01      	ldr	r3, [pc, #4]	; (800dcec <SX126xSetTxContinuousWave+0x14>)
 800dce8:	701a      	strb	r2, [r3, #0]
}
 800dcea:	bd10      	pop	{r4, pc}
 800dcec:	200014de 	.word	0x200014de

0800dcf0 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 800dcf0:	b507      	push	{r0, r1, r2, lr}
 800dcf2:	466b      	mov	r3, sp
 800dcf4:	1dd9      	adds	r1, r3, #7
 800dcf6:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	209f      	movs	r0, #159	; 0x9f
 800dcfc:	f7ff ff8e 	bl	800dc1c <SX126xWriteCommand>
}
 800dd00:	bd07      	pop	{r0, r1, r2, pc}

0800dd02 <SX126xSetRegulatorMode>:
{
 800dd02:	b507      	push	{r0, r1, r2, lr}
 800dd04:	466b      	mov	r3, sp
 800dd06:	1dd9      	adds	r1, r3, #7
 800dd08:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	2096      	movs	r0, #150	; 0x96
 800dd0e:	f7ff ff85 	bl	800dc1c <SX126xWriteCommand>
}
 800dd12:	bd07      	pop	{r0, r1, r2, pc}

0800dd14 <SX126xCalibrate>:
{
 800dd14:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800dd16:	466a      	mov	r2, sp
{
 800dd18:	1c03      	adds	r3, r0, #0
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800dd1a:	2060      	movs	r0, #96	; 0x60
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800dd1c:	1dd1      	adds	r1, r2, #7
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800dd1e:	07da      	lsls	r2, r3, #31
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800dd20:	4018      	ands	r0, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800dd22:	0fd2      	lsrs	r2, r2, #31
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800dd24:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800dd26:	2210      	movs	r2, #16
 800dd28:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800dd2a:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800dd2c:	2208      	movs	r2, #8
 800dd2e:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800dd30:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800dd32:	2204      	movs	r2, #4
 800dd34:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800dd36:	4310      	orrs	r0, r2
 800dd38:	2202      	movs	r2, #2
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800dd3e:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 800dd40:	3a01      	subs	r2, #1
 800dd42:	2089      	movs	r0, #137	; 0x89
 800dd44:	f7ff ff6a 	bl	800dc1c <SX126xWriteCommand>
}
 800dd48:	bd07      	pop	{r0, r1, r2, pc}
	...

0800dd4c <SX126xCalibrateImage>:
{
 800dd4c:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800dd4e:	4b12      	ldr	r3, [pc, #72]	; (800dd98 <SX126xCalibrateImage+0x4c>)
 800dd50:	a901      	add	r1, sp, #4
 800dd52:	4298      	cmp	r0, r3
 800dd54:	d908      	bls.n	800dd68 <SX126xCalibrateImage+0x1c>
        calFreq[0] = 0xE1;
 800dd56:	23e1      	movs	r3, #225	; 0xe1
 800dd58:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0xE9;
 800dd5a:	3308      	adds	r3, #8
        calFreq[1] = 0x6F;
 800dd5c:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800dd5e:	2202      	movs	r2, #2
 800dd60:	2098      	movs	r0, #152	; 0x98
 800dd62:	f7ff ff5b 	bl	800dc1c <SX126xWriteCommand>
}
 800dd66:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <SX126xCalibrateImage+0x50>)
 800dd6a:	4298      	cmp	r0, r3
 800dd6c:	d903      	bls.n	800dd76 <SX126xCalibrateImage+0x2a>
        calFreq[0] = 0xD7;
 800dd6e:	23d7      	movs	r3, #215	; 0xd7
        calFreq[0] = 0x6B;
 800dd70:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x6F;
 800dd72:	3304      	adds	r3, #4
 800dd74:	e7f2      	b.n	800dd5c <SX126xCalibrateImage+0x10>
    else if( freq > 770000000 )
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <SX126xCalibrateImage+0x54>)
 800dd78:	4298      	cmp	r0, r3
 800dd7a:	d901      	bls.n	800dd80 <SX126xCalibrateImage+0x34>
        calFreq[0] = 0xC1;
 800dd7c:	23c1      	movs	r3, #193	; 0xc1
 800dd7e:	e7f7      	b.n	800dd70 <SX126xCalibrateImage+0x24>
    else if( freq > 460000000 )
 800dd80:	4b08      	ldr	r3, [pc, #32]	; (800dda4 <SX126xCalibrateImage+0x58>)
 800dd82:	4298      	cmp	r0, r3
 800dd84:	d903      	bls.n	800dd8e <SX126xCalibrateImage+0x42>
        calFreq[0] = 0x75;
 800dd86:	2375      	movs	r3, #117	; 0x75
 800dd88:	700b      	strb	r3, [r1, #0]
        calFreq[1] = 0x81;
 800dd8a:	330c      	adds	r3, #12
 800dd8c:	e7e6      	b.n	800dd5c <SX126xCalibrateImage+0x10>
    else if( freq > 425000000 )
 800dd8e:	4b06      	ldr	r3, [pc, #24]	; (800dda8 <SX126xCalibrateImage+0x5c>)
 800dd90:	4298      	cmp	r0, r3
 800dd92:	d9e4      	bls.n	800dd5e <SX126xCalibrateImage+0x12>
        calFreq[0] = 0x6B;
 800dd94:	236b      	movs	r3, #107	; 0x6b
 800dd96:	e7eb      	b.n	800dd70 <SX126xCalibrateImage+0x24>
 800dd98:	35a4e900 	.word	0x35a4e900
 800dd9c:	32a9f880 	.word	0x32a9f880
 800dda0:	2de54480 	.word	0x2de54480
 800dda4:	1b6b0b00 	.word	0x1b6b0b00
 800dda8:	1954fc40 	.word	0x1954fc40

0800ddac <SX126xSetPaConfig>:
{
 800ddac:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 800ddae:	ac01      	add	r4, sp, #4
 800ddb0:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 800ddb2:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 800ddb4:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ddb6:	0021      	movs	r1, r4
 800ddb8:	2204      	movs	r2, #4
 800ddba:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 800ddbc:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ddbe:	f7ff ff2d 	bl	800dc1c <SX126xWriteCommand>
}
 800ddc2:	bd13      	pop	{r0, r1, r4, pc}

0800ddc4 <SX126xSetDioIrqParams>:
{
 800ddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ddc6:	466d      	mov	r5, sp
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ddc8:	7068      	strb	r0, [r5, #1]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ddca:	70e9      	strb	r1, [r5, #3]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ddcc:	716a      	strb	r2, [r5, #5]
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ddce:	0a04      	lsrs	r4, r0, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ddd0:	0a08      	lsrs	r0, r1, #8
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ddd2:	0a11      	lsrs	r1, r2, #8
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ddd4:	0a1a      	lsrs	r2, r3, #8
 800ddd6:	71aa      	strb	r2, [r5, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ddd8:	2208      	movs	r2, #8
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ddda:	70a8      	strb	r0, [r5, #2]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800dddc:	7129      	strb	r1, [r5, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ddde:	0010      	movs	r0, r2
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800dde0:	4669      	mov	r1, sp
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800dde2:	702c      	strb	r4, [r5, #0]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800dde4:	71eb      	strb	r3, [r5, #7]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800dde6:	f7ff ff19 	bl	800dc1c <SX126xWriteCommand>
}
 800ddea:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800ddec <SX126xSetDio2AsRfSwitchCtrl>:
{
 800ddec:	b507      	push	{r0, r1, r2, lr}
 800ddee:	466b      	mov	r3, sp
 800ddf0:	1dd9      	adds	r1, r3, #7
 800ddf2:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	209d      	movs	r0, #157	; 0x9d
 800ddf8:	f7ff ff10 	bl	800dc1c <SX126xWriteCommand>
}
 800ddfc:	bd07      	pop	{r0, r1, r2, pc}

0800ddfe <SX126xSetDio3AsTcxoCtrl>:
{
 800ddfe:	b507      	push	{r0, r1, r2, lr}
 800de00:	000b      	movs	r3, r1
    buf[0] = tcxoVoltage & 0x07;
 800de02:	2207      	movs	r2, #7
 800de04:	a901      	add	r1, sp, #4
 800de06:	4010      	ands	r0, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800de08:	0c1a      	lsrs	r2, r3, #16
 800de0a:	704a      	strb	r2, [r1, #1]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800de0c:	0a1a      	lsrs	r2, r3, #8
    buf[0] = tcxoVoltage & 0x07;
 800de0e:	7008      	strb	r0, [r1, #0]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800de10:	708a      	strb	r2, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800de12:	2097      	movs	r0, #151	; 0x97
 800de14:	2204      	movs	r2, #4
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800de16:	70cb      	strb	r3, [r1, #3]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800de18:	f7ff ff00 	bl	800dc1c <SX126xWriteCommand>
}
 800de1c:	bd07      	pop	{r0, r1, r2, pc}
	...

0800de20 <SX126xInit>:
{
 800de20:	b507      	push	{r0, r1, r2, lr}
 800de22:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 800de24:	f7f6 f97a 	bl	800411c <SX1262DVK1CAS_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 800de28:	a801      	add	r0, sp, #4
 800de2a:	f7f6 f95b 	bl	80040e4 <SX1262DVK1CAS_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 800de2e:	f7f6 f9e7 	bl	8004200 <SX1262DVK1CAS_RADIO_WakeUp>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800de32:	2001      	movs	r0, #1
 800de34:	f7ff ff26 	bl	800dc84 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 800de38:	f7f6 f9ce 	bl	80041d8 <SX1262DVK1CAS_RADIO_BoardIsTcxo>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d008      	beq.n	800de52 <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 800de40:	f7f6 f96a 	bl	8004118 <SX1262DVK1CAS_RADIO_GetWakeUpTime>
 800de44:	0181      	lsls	r1, r0, #6
 800de46:	2001      	movs	r0, #1
 800de48:	f7ff ffd9 	bl	800ddfe <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 800de4c:	207f      	movs	r0, #127	; 0x7f
 800de4e:	f7ff ff61 	bl	800dd14 <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 800de52:	2001      	movs	r0, #1
 800de54:	f7ff ffca 	bl	800ddec <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = mode;
 800de58:	2202      	movs	r2, #2
 800de5a:	4b01      	ldr	r3, [pc, #4]	; (800de60 <SX126xInit+0x40>)
 800de5c:	701a      	strb	r2, [r3, #0]
}
 800de5e:	bd07      	pop	{r0, r1, r2, pc}
 800de60:	200014de 	.word	0x200014de

0800de64 <SX126xSetRfFrequency>:
{
 800de64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 800de66:	4d0f      	ldr	r5, [pc, #60]	; (800dea4 <SX126xSetRfFrequency+0x40>)
{
 800de68:	0004      	movs	r4, r0
    if( ImageCalibrated == false )
 800de6a:	782b      	ldrb	r3, [r5, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d103      	bne.n	800de78 <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 800de70:	f7ff ff6c 	bl	800dd4c <SX126xCalibrateImage>
        ImageCalibrated = true;
 800de74:	2301      	movs	r3, #1
 800de76:	702b      	strb	r3, [r5, #0]
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 800de78:	0020      	movs	r0, r4
 800de7a:	f7f4 f94d 	bl	8002118 <__aeabi_ui2d>
 800de7e:	2200      	movs	r2, #0
 800de80:	4b09      	ldr	r3, [pc, #36]	; (800dea8 <SX126xSetRfFrequency+0x44>)
 800de82:	f7f3 f97f 	bl	8001184 <__aeabi_ddiv>
 800de86:	f7f2 fb67 	bl	8000558 <__aeabi_d2uiz>
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 800de8a:	a901      	add	r1, sp, #4
 800de8c:	0e03      	lsrs	r3, r0, #24
 800de8e:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 800de90:	0c03      	lsrs	r3, r0, #16
 800de92:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 800de94:	0a03      	lsrs	r3, r0, #8
    buf[3] = ( uint8_t )( freq & 0xFF );
 800de96:	70c8      	strb	r0, [r1, #3]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800de98:	2204      	movs	r2, #4
 800de9a:	2086      	movs	r0, #134	; 0x86
    buf[2] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 800de9c:	708b      	strb	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800de9e:	f7ff febd 	bl	800dc1c <SX126xWriteCommand>
}
 800dea2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800dea4:	200014dc 	.word	0x200014dc
 800dea8:	3fee8480 	.word	0x3fee8480

0800deac <SX126xSetPacketType>:
{
 800deac:	b507      	push	{r0, r1, r2, lr}
 800deae:	466b      	mov	r3, sp
 800deb0:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 800deb2:	4b04      	ldr	r3, [pc, #16]	; (800dec4 <SX126xSetPacketType+0x18>)
{
 800deb4:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 800deb6:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800deb8:	2201      	movs	r2, #1
 800deba:	208a      	movs	r0, #138	; 0x8a
 800debc:	f7ff feae 	bl	800dc1c <SX126xWriteCommand>
}
 800dec0:	bd07      	pop	{r0, r1, r2, pc}
 800dec2:	46c0      	nop			; (mov r8, r8)
 800dec4:	200014df 	.word	0x200014df

0800dec8 <SX126xSetModulationParams>:
{
 800dec8:	b513      	push	{r0, r1, r4, lr}
 800deca:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800decc:	2208      	movs	r2, #8
 800dece:	4668      	mov	r0, sp
 800ded0:	490d      	ldr	r1, [pc, #52]	; (800df08 <SX126xSetModulationParams+0x40>)
 800ded2:	f001 f879 	bl	800efc8 <memcpy>
    if( PacketType != modulationParams->PacketType )
 800ded6:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <SX126xSetModulationParams+0x44>)
 800ded8:	7820      	ldrb	r0, [r4, #0]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	4283      	cmp	r3, r0
 800dede:	d001      	beq.n	800dee4 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 800dee0:	f7ff ffe4 	bl	800deac <SX126xSetPacketType>
    if( modulationParams->PacketType == PACKET_TYPE_LORA)
 800dee4:	7823      	ldrb	r3, [r4, #0]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d10d      	bne.n	800df06 <SX126xSetModulationParams+0x3e>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800deea:	466a      	mov	r2, sp
 800deec:	7c23      	ldrb	r3, [r4, #16]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800deee:	4669      	mov	r1, sp
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800def0:	7013      	strb	r3, [r2, #0]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800def2:	7c63      	ldrb	r3, [r4, #17]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800def4:	208b      	movs	r0, #139	; 0x8b
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800def6:	7053      	strb	r3, [r2, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800def8:	7ca3      	ldrb	r3, [r4, #18]
 800defa:	7093      	strb	r3, [r2, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800defc:	7ce3      	ldrb	r3, [r4, #19]
 800defe:	70d3      	strb	r3, [r2, #3]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800df00:	2204      	movs	r2, #4
 800df02:	f7ff fe8b 	bl	800dc1c <SX126xWriteCommand>
}
 800df06:	bd13      	pop	{r0, r1, r4, pc}
 800df08:	0800f130 	.word	0x0800f130
 800df0c:	200014df 	.word	0x200014df

0800df10 <SX126xSetPacketParams>:
{
 800df10:	b530      	push	{r4, r5, lr}
 800df12:	0004      	movs	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800df14:	4913      	ldr	r1, [pc, #76]	; (800df64 <SX126xSetPacketParams+0x54>)
{
 800df16:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800df18:	ad01      	add	r5, sp, #4
 800df1a:	2209      	movs	r2, #9
 800df1c:	0028      	movs	r0, r5
 800df1e:	3108      	adds	r1, #8
 800df20:	f001 f852 	bl	800efc8 <memcpy>
    if( PacketType != packetParams->PacketType )
 800df24:	4b10      	ldr	r3, [pc, #64]	; (800df68 <SX126xSetPacketParams+0x58>)
 800df26:	7820      	ldrb	r0, [r4, #0]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	4283      	cmp	r3, r0
 800df2c:	d001      	beq.n	800df32 <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 800df2e:	f7ff ffbd 	bl	800deac <SX126xSetPacketType>
    if( packetParams->PacketType == PACKET_TYPE_LORA)
 800df32:	7823      	ldrb	r3, [r4, #0]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d10d      	bne.n	800df54 <SX126xSetPacketParams+0x44>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	0a1a      	lsrs	r2, r3, #8
 800df3c:	702a      	strb	r2, [r5, #0]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800df3e:	706b      	strb	r3, [r5, #1]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800df40:	4a0a      	ldr	r2, [pc, #40]	; (800df6c <SX126xSetPacketParams+0x5c>)
 800df42:	7ba3      	ldrb	r3, [r4, #14]
 800df44:	7013      	strb	r3, [r2, #0]
 800df46:	70ab      	strb	r3, [r5, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800df48:	7be3      	ldrb	r3, [r4, #15]
 800df4a:	70eb      	strb	r3, [r5, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800df4c:	7c23      	ldrb	r3, [r4, #16]
 800df4e:	712b      	strb	r3, [r5, #4]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800df50:	7c63      	ldrb	r3, [r4, #17]
 800df52:	716b      	strb	r3, [r5, #5]
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800df54:	2206      	movs	r2, #6
 800df56:	0029      	movs	r1, r5
 800df58:	208c      	movs	r0, #140	; 0x8c
 800df5a:	f7ff fe5f 	bl	800dc1c <SX126xWriteCommand>
}
 800df5e:	b005      	add	sp, #20
 800df60:	bd30      	pop	{r4, r5, pc}
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	0800f130 	.word	0x0800f130
 800df68:	200014df 	.word	0x200014df
 800df6c:	200014dd 	.word	0x200014dd

0800df70 <SX126xSetBufferBaseAddress>:
{
 800df70:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 800df72:	466b      	mov	r3, sp
 800df74:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 800df76:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800df78:	2202      	movs	r2, #2
 800df7a:	208f      	movs	r0, #143	; 0x8f
 800df7c:	a901      	add	r1, sp, #4
 800df7e:	f7ff fe4d 	bl	800dc1c <SX126xWriteCommand>
}
 800df82:	bd07      	pop	{r0, r1, r2, pc}

0800df84 <SX126xClearIrqStatus>:
{
 800df84:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800df86:	466a      	mov	r2, sp
 800df88:	0a03      	lsrs	r3, r0, #8
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 800df8a:	7150      	strb	r0, [r2, #5]
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800df8c:	7113      	strb	r3, [r2, #4]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800df8e:	2202      	movs	r2, #2
 800df90:	a901      	add	r1, sp, #4
 800df92:	0010      	movs	r0, r2
 800df94:	f7ff fe42 	bl	800dc1c <SX126xWriteCommand>
}
 800df98:	bd07      	pop	{r0, r1, r2, pc}

0800df9a <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800df9a:	b570      	push	{r4, r5, r6, lr}
 800df9c:	0006      	movs	r6, r0
 800df9e:	000c      	movs	r4, r1
 800dfa0:	0015      	movs	r5, r2
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 800dfa2:	f7ff fe23 	bl	800dbec <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	f7f6 f8fc 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800dfac:	b2b0      	uxth	r0, r6
 800dfae:	f7f6 f919 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	f7f6 f916 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
 800dfb8:	1965      	adds	r5, r4, r5
 800dfba:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 800dfbc:	42ac      	cmp	r4, r5
 800dfbe:	d106      	bne.n	800dfce <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 800dfc0:	2001      	movs	r0, #1
 800dfc2:	f7f6 f8ef 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800dfc6:	f7f6 f8e3 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>

    return status;
}
 800dfca:	0030      	movs	r0, r6
 800dfcc:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800dfce:	2000      	movs	r0, #0
 800dfd0:	f7f6 f908 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
 800dfd4:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800dfd6:	3401      	adds	r4, #1
 800dfd8:	e7f0      	b.n	800dfbc <SX126xReadCommand+0x22>

0800dfda <SX126xGetIrqStatus>:
{
 800dfda:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800dfdc:	ac01      	add	r4, sp, #4
 800dfde:	2202      	movs	r2, #2
 800dfe0:	0021      	movs	r1, r4
 800dfe2:	2012      	movs	r0, #18
 800dfe4:	f7ff ffd9 	bl	800df9a <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800dfe8:	8820      	ldrh	r0, [r4, #0]
 800dfea:	ba40      	rev16	r0, r0
 800dfec:	b280      	uxth	r0, r0
}
 800dfee:	bd16      	pop	{r1, r2, r4, pc}

0800dff0 <SX126xGetPacketStatus>:
{
 800dff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dff2:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800dff4:	ad01      	add	r5, sp, #4
 800dff6:	2203      	movs	r2, #3
 800dff8:	0029      	movs	r1, r5
 800dffa:	2014      	movs	r0, #20
 800dffc:	f7ff ffcd 	bl	800df9a <SX126xReadCommand>
    return PacketType;
 800e000:	4b0f      	ldr	r3, [pc, #60]	; (800e040 <SX126xGetPacketStatus+0x50>)
 800e002:	781e      	ldrb	r6, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 800e004:	7026      	strb	r6, [r4, #0]
    if( pktStatus->packetType == PACKET_TYPE_LORA)
 800e006:	2e01      	cmp	r6, #1
 800e008:	d110      	bne.n	800e02c <SX126xGetPacketStatus+0x3c>
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800e00a:	782b      	ldrb	r3, [r5, #0]
 800e00c:	425b      	negs	r3, r3
 800e00e:	105b      	asrs	r3, r3, #1
 800e010:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800e012:	2301      	movs	r3, #1
 800e014:	56eb      	ldrsb	r3, [r5, r3]
 800e016:	3302      	adds	r3, #2
 800e018:	109b      	asrs	r3, r3, #2
 800e01a:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800e01c:	78ab      	ldrb	r3, [r5, #2]
 800e01e:	425b      	negs	r3, r3
 800e020:	105b      	asrs	r3, r3, #1
 800e022:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800e024:	4b07      	ldr	r3, [pc, #28]	; (800e044 <SX126xGetPacketStatus+0x54>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6123      	str	r3, [r4, #16]
}
 800e02a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    }else if(pktStatus->packetType == PACKET_TYPE_NONE){
 800e02c:	2e0f      	cmp	r6, #15
 800e02e:	d1fc      	bne.n	800e02a <SX126xGetPacketStatus+0x3a>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800e030:	2214      	movs	r2, #20
 800e032:	2100      	movs	r1, #0
 800e034:	0020      	movs	r0, r4
 800e036:	f000 ffd0 	bl	800efda <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800e03a:	7026      	strb	r6, [r4, #0]
}
 800e03c:	e7f5      	b.n	800e02a <SX126xGetPacketStatus+0x3a>
 800e03e:	46c0      	nop			; (mov r8, r8)
 800e040:	200014df 	.word	0x200014df
 800e044:	200014d8 	.word	0x200014d8

0800e048 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	0005      	movs	r5, r0
 800e04c:	000c      	movs	r4, r1
 800e04e:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e050:	f7ff fdcc 	bl	800dbec <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e054:	2000      	movs	r0, #0
 800e056:	f7f6 f8a5 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 800e05a:	200d      	movs	r0, #13
 800e05c:	f7f6 f8c2 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800e060:	0a28      	lsrs	r0, r5, #8
 800e062:	f7f6 f8bf 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800e066:	b2e8      	uxtb	r0, r5
 800e068:	f7f6 f8bc 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 800e06c:	19a6      	adds	r6, r4, r6
 800e06e:	42b4      	cmp	r4, r6
 800e070:	d105      	bne.n	800e07e <SX126xWriteRegisters+0x36>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800e072:	2001      	movs	r0, #1
 800e074:	f7f6 f896 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e078:	f7f6 f88a 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e07c:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800e07e:	7820      	ldrb	r0, [r4, #0]
 800e080:	f7f6 f8b0 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e084:	3401      	adds	r4, #1
 800e086:	e7f2      	b.n	800e06e <SX126xWriteRegisters+0x26>

0800e088 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800e088:	b507      	push	{r0, r1, r2, lr}
 800e08a:	466b      	mov	r3, sp
 800e08c:	71d9      	strb	r1, [r3, #7]
 800e08e:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 800e090:	2201      	movs	r2, #1
 800e092:	0019      	movs	r1, r3
 800e094:	f7ff ffd8 	bl	800e048 <SX126xWriteRegisters>
}
 800e098:	bd07      	pop	{r0, r1, r2, pc}
	...

0800e09c <SX126xSetTx>:
{
 800e09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    OperatingMode = mode;
 800e09e:	2204      	movs	r2, #4
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	; (800e0d0 <SX126xSetTx+0x34>)
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0a2:	4d0c      	ldr	r5, [pc, #48]	; (800e0d4 <SX126xSetTx+0x38>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e0a4:	ac01      	add	r4, sp, #4
    OperatingMode = mode;
 800e0a6:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e0a8:	0c03      	lsrs	r3, r0, #16
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0aa:	7829      	ldrb	r1, [r5, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e0ac:	7023      	strb	r3, [r4, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e0ae:	70a0      	strb	r0, [r4, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e0b0:	0a03      	lsrs	r3, r0, #8
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0b2:	4809      	ldr	r0, [pc, #36]	; (800e0d8 <SX126xSetTx+0x3c>)
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e0b4:	7063      	strb	r3, [r4, #1]
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0b6:	f7ff ffe7 	bl	800e088 <SX126xWriteRegister>
	SX126xWriteRegister(REG_XTB_TRIM, xta_trim);
 800e0ba:	7829      	ldrb	r1, [r5, #0]
 800e0bc:	4807      	ldr	r0, [pc, #28]	; (800e0dc <SX126xSetTx+0x40>)
 800e0be:	f7ff ffe3 	bl	800e088 <SX126xWriteRegister>
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800e0c2:	2203      	movs	r2, #3
 800e0c4:	0021      	movs	r1, r4
 800e0c6:	2083      	movs	r0, #131	; 0x83
 800e0c8:	f7ff fda8 	bl	800dc1c <SX126xWriteCommand>
}
 800e0cc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e0ce:	46c0      	nop			; (mov r8, r8)
 800e0d0:	200014de 	.word	0x200014de
 800e0d4:	20000191 	.word	0x20000191
 800e0d8:	00000911 	.word	0x00000911
 800e0dc:	00000912 	.word	0x00000912

0800e0e0 <SX126xSetRx>:
{
 800e0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    OperatingMode = mode;
 800e0e2:	2205      	movs	r2, #5
 800e0e4:	4b0b      	ldr	r3, [pc, #44]	; (800e114 <SX126xSetRx+0x34>)
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0e6:	4d0c      	ldr	r5, [pc, #48]	; (800e118 <SX126xSetRx+0x38>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e0e8:	ac01      	add	r4, sp, #4
    OperatingMode = mode;
 800e0ea:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e0ec:	0c03      	lsrs	r3, r0, #16
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0ee:	7829      	ldrb	r1, [r5, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e0f0:	7023      	strb	r3, [r4, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e0f2:	70a0      	strb	r0, [r4, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e0f4:	0a03      	lsrs	r3, r0, #8
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0f6:	4809      	ldr	r0, [pc, #36]	; (800e11c <SX126xSetRx+0x3c>)
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e0f8:	7063      	strb	r3, [r4, #1]
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e0fa:	f7ff ffc5 	bl	800e088 <SX126xWriteRegister>
	SX126xWriteRegister(REG_XTB_TRIM, xta_trim);
 800e0fe:	7829      	ldrb	r1, [r5, #0]
 800e100:	4807      	ldr	r0, [pc, #28]	; (800e120 <SX126xSetRx+0x40>)
 800e102:	f7ff ffc1 	bl	800e088 <SX126xWriteRegister>
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e106:	2203      	movs	r2, #3
 800e108:	0021      	movs	r1, r4
 800e10a:	2082      	movs	r0, #130	; 0x82
 800e10c:	f7ff fd86 	bl	800dc1c <SX126xWriteCommand>
}
 800e110:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e112:	46c0      	nop			; (mov r8, r8)
 800e114:	200014de 	.word	0x200014de
 800e118:	20000191 	.word	0x20000191
 800e11c:	00000911 	.word	0x00000911
 800e120:	00000912 	.word	0x00000912

0800e124 <SX126xSetRxBoosted>:
{
 800e124:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800e126:	2205      	movs	r2, #5
{
 800e128:	0004      	movs	r4, r0
    OperatingMode = mode;
 800e12a:	4b08      	ldr	r3, [pc, #32]	; (800e14c <SX126xSetRxBoosted+0x28>)
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800e12c:	2196      	movs	r1, #150	; 0x96
 800e12e:	4808      	ldr	r0, [pc, #32]	; (800e150 <SX126xSetRxBoosted+0x2c>)
    OperatingMode = mode;
 800e130:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800e132:	f7ff ffa9 	bl	800e088 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e136:	a901      	add	r1, sp, #4
 800e138:	0c23      	lsrs	r3, r4, #16
 800e13a:	700b      	strb	r3, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e13c:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e13e:	2203      	movs	r2, #3
 800e140:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e142:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e144:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e146:	f7ff fd69 	bl	800dc1c <SX126xWriteCommand>
}
 800e14a:	bd13      	pop	{r0, r1, r4, pc}
 800e14c:	200014de 	.word	0x200014de
 800e150:	000008ac 	.word	0x000008ac

0800e154 <SX126xSetLoRaSymbNumTimeout>:
{
 800e154:	b507      	push	{r0, r1, r2, lr}
 800e156:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800e158:	2201      	movs	r2, #1
{
 800e15a:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800e15c:	1dd9      	adds	r1, r3, #7
 800e15e:	20a0      	movs	r0, #160	; 0xa0
 800e160:	f7ff fd5c 	bl	800dc1c <SX126xWriteCommand>
    if( symbNum >= 64 )
 800e164:	466b      	mov	r3, sp
 800e166:	79d9      	ldrb	r1, [r3, #7]
 800e168:	293f      	cmp	r1, #63	; 0x3f
 800e16a:	d906      	bls.n	800e17a <SX126xSetLoRaSymbNumTimeout+0x26>
            mant >>= 2;
 800e16c:	08c9      	lsrs	r1, r1, #3
        reg = exp + ( mant << 3 );
 800e16e:	00c9      	lsls	r1, r1, #3
 800e170:	3101      	adds	r1, #1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800e172:	4802      	ldr	r0, [pc, #8]	; (800e17c <SX126xSetLoRaSymbNumTimeout+0x28>)
 800e174:	b2c9      	uxtb	r1, r1
 800e176:	f7ff ff87 	bl	800e088 <SX126xWriteRegister>
}
 800e17a:	bd07      	pop	{r0, r1, r2, pc}
 800e17c:	00000706 	.word	0x00000706

0800e180 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	0005      	movs	r5, r0
 800e184:	000c      	movs	r4, r1
 800e186:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e188:	f7ff fd30 	bl	800dbec <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e18c:	2000      	movs	r0, #0
 800e18e:	f7f6 f809 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 800e192:	201d      	movs	r0, #29
 800e194:	f7f6 f826 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800e198:	0a28      	lsrs	r0, r5, #8
 800e19a:	f7f6 f823 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800e19e:	b2e8      	uxtb	r0, r5
 800e1a0:	f7f6 f820 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f7f6 f81d 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e1aa:	19a6      	adds	r6, r4, r6
 800e1ac:	42b4      	cmp	r4, r6
 800e1ae:	d105      	bne.n	800e1bc <SX126xReadRegisters+0x3c>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	f7f5 fff7 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e1b6:	f7f5 ffeb 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800e1bc:	2000      	movs	r0, #0
 800e1be:	f7f6 f811 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
 800e1c2:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800e1c4:	3401      	adds	r4, #1
 800e1c6:	e7f1      	b.n	800e1ac <SX126xReadRegisters+0x2c>

0800e1c8 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 800e1c8:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800e1ca:	466b      	mov	r3, sp
 800e1cc:	1ddc      	adds	r4, r3, #7
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	0021      	movs	r1, r4
 800e1d2:	f7ff ffd5 	bl	800e180 <SX126xReadRegisters>
    return data;
 800e1d6:	7820      	ldrb	r0, [r4, #0]
}
 800e1d8:	bd16      	pop	{r1, r2, r4, pc}
	...

0800e1dc <SX126xGetRandom>:
    uint32_t number = 0;
 800e1dc:	2300      	movs	r3, #0
{
 800e1de:	b5f0      	push	{r4, r5, r6, r7, lr}
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e1e0:	4e16      	ldr	r6, [pc, #88]	; (800e23c <SX126xGetRandom+0x60>)
{
 800e1e2:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e1e4:	0030      	movs	r0, r6
    uint32_t number = 0;
 800e1e6:	9303      	str	r3, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e1e8:	f7ff ffee 	bl	800e1c8 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e1ec:	2701      	movs	r7, #1
 800e1ee:	0001      	movs	r1, r0
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800e1f0:	4d13      	ldr	r5, [pc, #76]	; (800e240 <SX126xGetRandom+0x64>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e1f2:	43b9      	bics	r1, r7
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e1f4:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e1f6:	b2c9      	uxtb	r1, r1
 800e1f8:	0030      	movs	r0, r6
 800e1fa:	f7ff ff45 	bl	800e088 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800e1fe:	0028      	movs	r0, r5
 800e200:	f7ff ffe2 	bl	800e1c8 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e204:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800e206:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e208:	4001      	ands	r1, r0
 800e20a:	0028      	movs	r0, r5
 800e20c:	f7ff ff3c 	bl	800e088 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800e210:	480c      	ldr	r0, [pc, #48]	; (800e244 <SX126xGetRandom+0x68>)
 800e212:	f7ff ff65 	bl	800e0e0 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800e216:	2204      	movs	r2, #4
 800e218:	a903      	add	r1, sp, #12
 800e21a:	480b      	ldr	r0, [pc, #44]	; (800e248 <SX126xGetRandom+0x6c>)
 800e21c:	f7ff ffb0 	bl	800e180 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800e220:	0038      	movs	r0, r7
 800e222:	f7ff fd2f 	bl	800dc84 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 800e226:	0021      	movs	r1, r4
 800e228:	0030      	movs	r0, r6
 800e22a:	f7ff ff2d 	bl	800e088 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 800e22e:	0028      	movs	r0, r5
 800e230:	9901      	ldr	r1, [sp, #4]
 800e232:	f7ff ff29 	bl	800e088 <SX126xWriteRegister>
}
 800e236:	9803      	ldr	r0, [sp, #12]
 800e238:	b005      	add	sp, #20
 800e23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23c:	000008e2 	.word	0x000008e2
 800e240:	000008e5 	.word	0x000008e5
 800e244:	00ffffff 	.word	0x00ffffff
 800e248:	00000819 	.word	0x00000819

0800e24c <SX126xSetTxParams>:
{
 800e24c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e24e:	0005      	movs	r5, r0
	SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800e250:	4810      	ldr	r0, [pc, #64]	; (800e294 <SX126xSetTxParams+0x48>)
{
 800e252:	000c      	movs	r4, r1
	SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800e254:	f7ff ffb8 	bl	800e1c8 <SX126xReadRegister>
 800e258:	231e      	movs	r3, #30
 800e25a:	4303      	orrs	r3, r0
 800e25c:	b2d9      	uxtb	r1, r3
 800e25e:	480d      	ldr	r0, [pc, #52]	; (800e294 <SX126xSetTxParams+0x48>)
 800e260:	f7ff ff12 	bl	800e088 <SX126xWriteRegister>
	SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800e264:	2301      	movs	r3, #1
 800e266:	2200      	movs	r2, #0
 800e268:	2107      	movs	r1, #7
 800e26a:	2004      	movs	r0, #4
 800e26c:	f7ff fd9e 	bl	800ddac <SX126xSetPaConfig>
	if( power > 22 )
 800e270:	1c2b      	adds	r3, r5, #0
 800e272:	3509      	adds	r5, #9
 800e274:	da01      	bge.n	800e27a <SX126xSetTxParams+0x2e>
 800e276:	4b08      	ldr	r3, [pc, #32]	; (800e298 <SX126xSetTxParams+0x4c>)
 800e278:	781b      	ldrb	r3, [r3, #0]
    buf[0] = power;
 800e27a:	b25a      	sxtb	r2, r3
 800e27c:	2a16      	cmp	r2, #22
 800e27e:	dd00      	ble.n	800e282 <SX126xSetTxParams+0x36>
 800e280:	2316      	movs	r3, #22
 800e282:	466a      	mov	r2, sp
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800e284:	208e      	movs	r0, #142	; 0x8e
    buf[0] = power;
 800e286:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 800e288:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800e28a:	a901      	add	r1, sp, #4
 800e28c:	2202      	movs	r2, #2
 800e28e:	f7ff fcc5 	bl	800dc1c <SX126xWriteCommand>
}
 800e292:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e294:	000008d8 	.word	0x000008d8
 800e298:	0800fce4 	.word	0x0800fce4

0800e29c <SX126xSetRfTxPower>:
{
 800e29c:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800e29e:	2102      	movs	r1, #2
 800e2a0:	f7ff ffd4 	bl	800e24c <SX126xSetTxParams>
}
 800e2a4:	bd10      	pop	{r4, pc}
	...

0800e2a8 <SX126xGetRxBufferStatus>:
{
 800e2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2aa:	0004      	movs	r4, r0
 800e2ac:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800e2ae:	2202      	movs	r2, #2
 800e2b0:	2013      	movs	r0, #19
 800e2b2:	a901      	add	r1, sp, #4
 800e2b4:	f7ff fe71 	bl	800df9a <SX126xReadCommand>
    return PacketType;
 800e2b8:	4b09      	ldr	r3, [pc, #36]	; (800e2e0 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d10b      	bne.n	800e2d8 <SX126xGetRxBufferStatus+0x30>
 800e2c0:	4b08      	ldr	r3, [pc, #32]	; (800e2e4 <SX126xGetRxBufferStatus+0x3c>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d107      	bne.n	800e2d8 <SX126xGetRxBufferStatus+0x30>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800e2c8:	4807      	ldr	r0, [pc, #28]	; (800e2e8 <SX126xGetRxBufferStatus+0x40>)
 800e2ca:	f7ff ff7d 	bl	800e1c8 <SX126xReadRegister>
 800e2ce:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 800e2d0:	466b      	mov	r3, sp
 800e2d2:	795b      	ldrb	r3, [r3, #5]
 800e2d4:	702b      	strb	r3, [r5, #0]
}
 800e2d6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 800e2d8:	466b      	mov	r3, sp
 800e2da:	791b      	ldrb	r3, [r3, #4]
 800e2dc:	7023      	strb	r3, [r4, #0]
 800e2de:	e7f7      	b.n	800e2d0 <SX126xGetRxBufferStatus+0x28>
 800e2e0:	200014df 	.word	0x200014df
 800e2e4:	200014dd 	.word	0x200014dd
 800e2e8:	00000702 	.word	0x00000702

0800e2ec <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	0005      	movs	r5, r0
 800e2f0:	000c      	movs	r4, r1
 800e2f2:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e2f4:	f7ff fc7a 	bl	800dbec <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	f7f5 ff53 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800e2fe:	200e      	movs	r0, #14
 800e300:	f7f5 ff70 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800e304:	b2a8      	uxth	r0, r5
 800e306:	f7f5 ff6d 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e30a:	19a6      	adds	r6, r4, r6
 800e30c:	42b4      	cmp	r4, r6
 800e30e:	d105      	bne.n	800e31c <SX126xWriteBuffer+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800e310:	2001      	movs	r0, #1
 800e312:	f7f5 ff47 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e316:	f7f5 ff3b 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800e31c:	7820      	ldrb	r0, [r4, #0]
 800e31e:	f7f5 ff61 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e322:	3401      	adds	r4, #1
 800e324:	e7f2      	b.n	800e30c <SX126xWriteBuffer+0x20>

0800e326 <SX126xSetPayload>:
{
 800e326:	b510      	push	{r4, lr}
 800e328:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 800e32a:	0001      	movs	r1, r0
 800e32c:	2000      	movs	r0, #0
 800e32e:	f7ff ffdd 	bl	800e2ec <SX126xWriteBuffer>
}
 800e332:	bd10      	pop	{r4, pc}

0800e334 <SX126xSendPayload>:
{
 800e334:	b510      	push	{r4, lr}
 800e336:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 800e338:	f7ff fff5 	bl	800e326 <SX126xSetPayload>
    SX126xSetTx( timeout );
 800e33c:	0020      	movs	r0, r4
 800e33e:	f7ff fead 	bl	800e09c <SX126xSetTx>
}
 800e342:	bd10      	pop	{r4, pc}

0800e344 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e344:	b570      	push	{r4, r5, r6, lr}
 800e346:	0005      	movs	r5, r0
 800e348:	000c      	movs	r4, r1
 800e34a:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e34c:	f7ff fc4e 	bl	800dbec <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e350:	2000      	movs	r0, #0
 800e352:	f7f5 ff27 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 800e356:	201e      	movs	r0, #30
 800e358:	f7f5 ff44 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800e35c:	b2a8      	uxth	r0, r5
 800e35e:	f7f5 ff41 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800e362:	2000      	movs	r0, #0
 800e364:	f7f5 ff3e 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e368:	19a6      	adds	r6, r4, r6
 800e36a:	42b4      	cmp	r4, r6
 800e36c:	d105      	bne.n	800e37a <SX126xReadBuffer+0x36>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800e36e:	2001      	movs	r0, #1
 800e370:	f7f5 ff18 	bl	80041a4 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e374:	f7f5 ff0c 	bl	8004190 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e378:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800e37a:	2000      	movs	r0, #0
 800e37c:	f7f5 ff32 	bl	80041e4 <SX1262DVK1CAS_RADIO_SendRecv>
 800e380:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800e382:	3401      	adds	r4, #1
 800e384:	e7f1      	b.n	800e36a <SX126xReadBuffer+0x26>

0800e386 <SX126xGetPayload>:
{
 800e386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e388:	000c      	movs	r4, r1
    uint8_t offset = 0;
 800e38a:	466b      	mov	r3, sp
 800e38c:	2700      	movs	r7, #0
{
 800e38e:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 800e390:	1dd9      	adds	r1, r3, #7
 800e392:	0020      	movs	r0, r4
{
 800e394:	0016      	movs	r6, r2
    uint8_t offset = 0;
 800e396:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 800e398:	f7ff ff86 	bl	800e2a8 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800e39c:	7822      	ldrb	r2, [r4, #0]
        return 1;
 800e39e:	2001      	movs	r0, #1
    if( *size > maxSize )
 800e3a0:	42b2      	cmp	r2, r6
 800e3a2:	d805      	bhi.n	800e3b0 <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 800e3a4:	466b      	mov	r3, sp
 800e3a6:	0029      	movs	r1, r5
 800e3a8:	79d8      	ldrb	r0, [r3, #7]
 800e3aa:	f7ff ffcb 	bl	800e344 <SX126xReadBuffer>
    return 0;
 800e3ae:	0038      	movs	r0, r7
}
 800e3b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800e3b4 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	4a02      	ldr	r2, [pc, #8]	; (800e3c0 <UTIL_LPM_Init+0xc>)
 800e3b8:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e3ba:	4a02      	ldr	r2, [pc, #8]	; (800e3c4 <UTIL_LPM_Init+0x10>)
 800e3bc:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e3be:	4770      	bx	lr
 800e3c0:	200014e4 	.word	0x200014e4
 800e3c4:	200014e0 	.word	0x200014e0

0800e3c8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e3c8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e3ce:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800e3d0:	2900      	cmp	r1, #0
 800e3d2:	d008      	beq.n	800e3e6 <UTIL_LPM_SetStopMode+0x1e>
 800e3d4:	2901      	cmp	r1, #1
 800e3d6:	d103      	bne.n	800e3e0 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800e3d8:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <UTIL_LPM_SetStopMode+0x28>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	4310      	orrs	r0, r2
 800e3de:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3e0:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e3e4:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800e3e6:	4a02      	ldr	r2, [pc, #8]	; (800e3f0 <UTIL_LPM_SetStopMode+0x28>)
 800e3e8:	6813      	ldr	r3, [r2, #0]
 800e3ea:	4383      	bics	r3, r0
 800e3ec:	6013      	str	r3, [r2, #0]
      break;
 800e3ee:	e7f7      	b.n	800e3e0 <UTIL_LPM_SetStopMode+0x18>
 800e3f0:	200014e4 	.word	0x200014e4

0800e3f4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e3f4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e3fa:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	d008      	beq.n	800e412 <UTIL_LPM_SetOffMode+0x1e>
 800e400:	2901      	cmp	r1, #1
 800e402:	d103      	bne.n	800e40c <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e404:	4b05      	ldr	r3, [pc, #20]	; (800e41c <UTIL_LPM_SetOffMode+0x28>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	4310      	orrs	r0, r2
 800e40a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e40c:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e410:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800e412:	4a02      	ldr	r2, [pc, #8]	; (800e41c <UTIL_LPM_SetOffMode+0x28>)
 800e414:	6813      	ldr	r3, [r2, #0]
 800e416:	4383      	bics	r3, r0
 800e418:	6013      	str	r3, [r2, #0]
      break;
 800e41a:	e7f7      	b.n	800e40c <UTIL_LPM_SetOffMode+0x18>
 800e41c:	200014e0 	.word	0x200014e0

0800e420 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e420:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e424:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800e426:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800e428:	4a05      	ldr	r2, [pc, #20]	; (800e440 <UTIL_LPM_GetMode+0x20>)
 800e42a:	6812      	ldr	r2, [r2, #0]
 800e42c:	4282      	cmp	r2, r0
 800e42e:	d104      	bne.n	800e43a <UTIL_LPM_GetMode+0x1a>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800e430:	4a04      	ldr	r2, [pc, #16]	; (800e444 <UTIL_LPM_GetMode+0x24>)
 800e432:	6810      	ldr	r0, [r2, #0]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800e434:	4242      	negs	r2, r0
 800e436:	4150      	adcs	r0, r2
 800e438:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e43a:	f383 8810 	msr	PRIMASK, r3
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800e43e:	4770      	bx	lr
 800e440:	200014e4 	.word	0x200014e4
 800e444:	200014e0 	.word	0x200014e0

0800e448 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800e448:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e44a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e44e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800e450:	4b0d      	ldr	r3, [pc, #52]	; (800e488 <UTIL_LPM_EnterLowPower+0x40>)
 800e452:	4c0e      	ldr	r4, [pc, #56]	; (800e48c <UTIL_LPM_EnterLowPower+0x44>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d008      	beq.n	800e46c <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800e460:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800e462:	9301      	str	r3, [sp, #4]
 800e464:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e466:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800e46a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800e46c:	4b08      	ldr	r3, [pc, #32]	; (800e490 <UTIL_LPM_EnterLowPower+0x48>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d004      	beq.n	800e47e <UTIL_LPM_EnterLowPower+0x36>
        UTIL_PowerDriver.EnterStopMode( );
 800e474:	68a3      	ldr	r3, [r4, #8]
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800e47a:	68e3      	ldr	r3, [r4, #12]
 800e47c:	e7f1      	b.n	800e462 <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800e47e:	6923      	ldr	r3, [r4, #16]
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800e484:	6963      	ldr	r3, [r4, #20]
 800e486:	e7ec      	b.n	800e462 <UTIL_LPM_EnterLowPower+0x1a>
 800e488:	200014e4 	.word	0x200014e4
 800e48c:	0800f1dc 	.word	0x0800f1dc
 800e490:	200014e0 	.word	0x200014e0

0800e494 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800e494:	2300      	movs	r3, #0
{
 800e496:	b510      	push	{r4, lr}
  while( size-- )
 800e498:	4293      	cmp	r3, r2
 800e49a:	d100      	bne.n	800e49e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800e49c:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800e49e:	5ccc      	ldrb	r4, [r1, r3]
 800e4a0:	54c4      	strb	r4, [r0, r3]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	e7f8      	b.n	800e498 <UTIL_MEM_cpy_8+0x4>

0800e4a6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800e4a6:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800e4a8:	f000 fd97 	bl	800efda <memset>
  }
}
 800e4ac:	bd10      	pop	{r4, pc}
	...

0800e4b0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800e4b4:	18c9      	adds	r1, r1, r3
{
 800e4b6:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e4b8:	ab05      	add	r3, sp, #20
 800e4ba:	889c      	ldrh	r4, [r3, #4]
 800e4bc:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800e4be:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e4c0:	b293      	uxth	r3, r2
 800e4c2:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800e4c4:	00a4      	lsls	r4, r4, #2
 800e4c6:	42a2      	cmp	r2, r4
 800e4c8:	db03      	blt.n	800e4d2 <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800e4ca:	4a05      	ldr	r2, [pc, #20]	; (800e4e0 <SysTimeAdd+0x30>)
    c.Seconds++;
 800e4cc:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800e4ce:	189b      	adds	r3, r3, r2
 800e4d0:	b21a      	sxth	r2, r3
  }
  return c;
 800e4d2:	6001      	str	r1, [r0, #0]
 800e4d4:	8082      	strh	r2, [r0, #4]
}
 800e4d6:	bc16      	pop	{r1, r2, r4}
 800e4d8:	bc08      	pop	{r3}
 800e4da:	b002      	add	sp, #8
 800e4dc:	4718      	bx	r3
 800e4de:	46c0      	nop			; (mov r8, r8)
 800e4e0:	fffffc18 	.word	0xfffffc18

0800e4e4 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800e4e4:	b082      	sub	sp, #8
 800e4e6:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800e4e8:	1ac9      	subs	r1, r1, r3
{
 800e4ea:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e4ec:	ab05      	add	r3, sp, #20
 800e4ee:	889b      	ldrh	r3, [r3, #4]
 800e4f0:	1ad2      	subs	r2, r2, r3
 800e4f2:	b293      	uxth	r3, r2
 800e4f4:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800e4f6:	0412      	lsls	r2, r2, #16
 800e4f8:	d504      	bpl.n	800e504 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800e4fa:	22fa      	movs	r2, #250	; 0xfa
 800e4fc:	0092      	lsls	r2, r2, #2
 800e4fe:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800e500:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800e502:	b21c      	sxth	r4, r3
  }
  return c;
 800e504:	6001      	str	r1, [r0, #0]
 800e506:	8084      	strh	r4, [r0, #4]
}
 800e508:	bc16      	pop	{r1, r2, r4}
 800e50a:	bc08      	pop	{r3}
 800e50c:	b002      	add	sp, #8
 800e50e:	4718      	bx	r3

0800e510 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e510:	2300      	movs	r3, #0
{
 800e512:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e514:	4c11      	ldr	r4, [pc, #68]	; (800e55c <SysTimeSet+0x4c>)
{
 800e516:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e518:	ad04      	add	r5, sp, #16
 800e51a:	80ab      	strh	r3, [r5, #4]
 800e51c:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e51e:	6923      	ldr	r3, [r4, #16]
{
 800e520:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e522:	a805      	add	r0, sp, #20
 800e524:	9301      	str	r3, [sp, #4]
{
 800e526:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e528:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800e52a:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e52c:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800e52e:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e530:	ab02      	add	r3, sp, #8
 800e532:	88aa      	ldrh	r2, [r5, #4]
 800e534:	889b      	ldrh	r3, [r3, #4]
 800e536:	1a9b      	subs	r3, r3, r2
 800e538:	b29a      	uxth	r2, r3
 800e53a:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800e53c:	041b      	lsls	r3, r3, #16
 800e53e:	d504      	bpl.n	800e54a <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800e540:	23fa      	movs	r3, #250	; 0xfa
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800e546:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800e548:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800e550:	68a3      	ldr	r3, [r4, #8]
 800e552:	0028      	movs	r0, r5
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	4798      	blx	r3
}
 800e558:	b007      	add	sp, #28
 800e55a:	bd30      	pop	{r4, r5, pc}
 800e55c:	0800f19c 	.word	0x0800f19c

0800e560 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800e560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e562:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e564:	4e12      	ldr	r6, [pc, #72]	; (800e5b0 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e566:	aa02      	add	r2, sp, #8
 800e568:	8093      	strh	r3, [r2, #4]
 800e56a:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e56c:	6933      	ldr	r3, [r6, #16]
{
 800e56e:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e570:	a803      	add	r0, sp, #12
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e576:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e578:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e57a:	9301      	str	r3, [sp, #4]
 800e57c:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e57e:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e580:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800e586:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800e588:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800e58a:	0089      	lsls	r1, r1, #2
  c.Seconds = a.Seconds + b.Seconds;
 800e58c:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e58e:	ab02      	add	r3, sp, #8
 800e590:	889b      	ldrh	r3, [r3, #4]
 800e592:	195b      	adds	r3, r3, r5
 800e594:	b29a      	uxth	r2, r3
 800e596:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800e598:	428b      	cmp	r3, r1
 800e59a:	db03      	blt.n	800e5a4 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800e59c:	4b05      	ldr	r3, [pc, #20]	; (800e5b4 <SysTimeGet+0x54>)
    c.Seconds++;
 800e59e:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800e5a0:	18d2      	adds	r2, r2, r3
 800e5a2:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800e5a4:	6020      	str	r0, [r4, #0]
}
 800e5a6:	0020      	movs	r0, r4
  return sysTime;
 800e5a8:	80a3      	strh	r3, [r4, #4]
}
 800e5aa:	b004      	add	sp, #16
 800e5ac:	bd70      	pop	{r4, r5, r6, pc}
 800e5ae:	46c0      	nop			; (mov r8, r8)
 800e5b0:	0800f19c 	.word	0x0800f19c
 800e5b4:	fffffc18 	.word	0xfffffc18

0800e5b8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800e5b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	466d      	mov	r5, sp
{
 800e5be:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5c4:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <SysTimeGetMcuTime+0x20>)
 800e5c6:	a801      	add	r0, sp, #4
 800e5c8:	691b      	ldr	r3, [r3, #16]
 800e5ca:	4798      	blx	r3
  
  return calendarTime;
 800e5cc:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5ce:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800e5d0:	cd06      	ldmia	r5!, {r1, r2}
 800e5d2:	c306      	stmia	r3!, {r1, r2}
}
 800e5d4:	0020      	movs	r0, r4
 800e5d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e5d8:	0800f19c 	.word	0x0800f19c

0800e5dc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800e5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5de:	b09d      	sub	sp, #116	; 0x74
 800e5e0:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800e5e2:	2000      	movs	r0, #0
{
 800e5e4:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e5e6:	9f02      	ldr	r7, [sp, #8]
{
 800e5e8:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800e5ea:	4281      	cmp	r1, r0
 800e5ec:	dc0a      	bgt.n	800e604 <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800e5ee:	b01d      	add	sp, #116	; 0x74
 800e5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800e5f2:	4298      	cmp	r0, r3
 800e5f4:	da0d      	bge.n	800e612 <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800e5f6:	2925      	cmp	r1, #37	; 0x25
 800e5f8:	d00e      	beq.n	800e618 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800e5fa:	7039      	strb	r1, [r7, #0]
      continue;
 800e5fc:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800e5fe:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e600:	9a01      	ldr	r2, [sp, #4]
 800e602:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 800e604:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e606:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800e608:	1af8      	subs	r0, r7, r3
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e60e:	2900      	cmp	r1, #0
 800e610:	d1ef      	bne.n	800e5f2 <tiny_vsnprintf_like+0x16>
  *str = '\0';
 800e612:	2300      	movs	r3, #0
 800e614:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800e616:	e7ea      	b.n	800e5ee <tiny_vsnprintf_like+0x12>
    fmt++;
 800e618:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800e61a:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800e61c:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800e61e:	0010      	movs	r0, r2
 800e620:	3830      	subs	r0, #48	; 0x30
 800e622:	9204      	str	r2, [sp, #16]
 800e624:	4241      	negs	r1, r0
 800e626:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800e628:	b2c0      	uxtb	r0, r0
      flags |= ZEROPAD;
 800e62a:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800e62c:	2809      	cmp	r0, #9
 800e62e:	d92e      	bls.n	800e68e <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800e630:	2001      	movs	r0, #1
 800e632:	4240      	negs	r0, r0
 800e634:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800e636:	9801      	ldr	r0, [sp, #4]
 800e638:	7800      	ldrb	r0, [r0, #0]
 800e63a:	2869      	cmp	r0, #105	; 0x69
 800e63c:	d100      	bne.n	800e640 <tiny_vsnprintf_like+0x64>
 800e63e:	e0a4      	b.n	800e78a <tiny_vsnprintf_like+0x1ae>
 800e640:	d829      	bhi.n	800e696 <tiny_vsnprintf_like+0xba>
 800e642:	2863      	cmp	r0, #99	; 0x63
 800e644:	d038      	beq.n	800e6b8 <tiny_vsnprintf_like+0xdc>
 800e646:	2864      	cmp	r0, #100	; 0x64
 800e648:	d100      	bne.n	800e64c <tiny_vsnprintf_like+0x70>
 800e64a:	e09e      	b.n	800e78a <tiny_vsnprintf_like+0x1ae>
 800e64c:	2858      	cmp	r0, #88	; 0x58
 800e64e:	d066      	beq.n	800e71e <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800e650:	0039      	movs	r1, r7
 800e652:	2825      	cmp	r0, #37	; 0x25
 800e654:	d126      	bne.n	800e6a4 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800e656:	9801      	ldr	r0, [sp, #4]
 800e658:	7800      	ldrb	r0, [r0, #0]
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d100      	bne.n	800e660 <tiny_vsnprintf_like+0x84>
 800e65e:	e098      	b.n	800e792 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800e660:	1c4f      	adds	r7, r1, #1
 800e662:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e664:	9902      	ldr	r1, [sp, #8]
 800e666:	1a79      	subs	r1, r7, r1
 800e668:	4299      	cmp	r1, r3
 800e66a:	db00      	blt.n	800e66e <tiny_vsnprintf_like+0x92>
 800e66c:	e08f      	b.n	800e78e <tiny_vsnprintf_like+0x1b2>
 800e66e:	e7c7      	b.n	800e600 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e670:	9d01      	ldr	r5, [sp, #4]
 800e672:	3501      	adds	r5, #1
 800e674:	9501      	str	r5, [sp, #4]
 800e676:	9d00      	ldr	r5, [sp, #0]
 800e678:	4375      	muls	r5, r6
 800e67a:	1828      	adds	r0, r5, r0
 800e67c:	3830      	subs	r0, #48	; 0x30
 800e67e:	9000      	str	r0, [sp, #0]
 800e680:	9801      	ldr	r0, [sp, #4]
 800e682:	7800      	ldrb	r0, [r0, #0]
 800e684:	0005      	movs	r5, r0
 800e686:	3d30      	subs	r5, #48	; 0x30
 800e688:	2d09      	cmp	r5, #9
 800e68a:	d9f1      	bls.n	800e670 <tiny_vsnprintf_like+0x94>
 800e68c:	e7d3      	b.n	800e636 <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800e68e:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e690:	260a      	movs	r6, #10
  int i = 0;
 800e692:	9000      	str	r0, [sp, #0]
 800e694:	e7f4      	b.n	800e680 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800e696:	2875      	cmp	r0, #117	; 0x75
 800e698:	d079      	beq.n	800e78e <tiny_vsnprintf_like+0x1b2>
 800e69a:	2510      	movs	r5, #16
 800e69c:	2878      	cmp	r0, #120	; 0x78
 800e69e:	d041      	beq.n	800e724 <tiny_vsnprintf_like+0x148>
 800e6a0:	2873      	cmp	r0, #115	; 0x73
 800e6a2:	d01d      	beq.n	800e6e0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800e6a4:	2025      	movs	r0, #37	; 0x25
 800e6a6:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e6a8:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800e6aa:	1c79      	adds	r1, r7, #1
 800e6ac:	000f      	movs	r7, r1
    base = 10;
 800e6ae:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800e6b0:	1a08      	subs	r0, r1, r0
 800e6b2:	4298      	cmp	r0, r3
 800e6b4:	da36      	bge.n	800e724 <tiny_vsnprintf_like+0x148>
 800e6b6:	e7ce      	b.n	800e656 <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800e6b8:	2500      	movs	r5, #0
 800e6ba:	9b00      	ldr	r3, [sp, #0]
 800e6bc:	42ab      	cmp	r3, r5
 800e6be:	dd00      	ble.n	800e6c2 <tiny_vsnprintf_like+0xe6>
 800e6c0:	1e5d      	subs	r5, r3, #1
 800e6c2:	002a      	movs	r2, r5
 800e6c4:	2120      	movs	r1, #32
 800e6c6:	0038      	movs	r0, r7
 800e6c8:	f000 fc87 	bl	800efda <memset>
 800e6cc:	9a00      	ldr	r2, [sp, #0]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	197d      	adds	r5, r7, r5
 800e6d2:	2a00      	cmp	r2, #0
 800e6d4:	dd00      	ble.n	800e6d8 <tiny_vsnprintf_like+0xfc>
 800e6d6:	0013      	movs	r3, r2
 800e6d8:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800e6da:	cc08      	ldmia	r4!, {r3}
 800e6dc:	702b      	strb	r3, [r5, #0]
        continue;
 800e6de:	e78f      	b.n	800e600 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 800e6e0:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800e6e2:	2e00      	cmp	r6, #0
 800e6e4:	d100      	bne.n	800e6e8 <tiny_vsnprintf_like+0x10c>
 800e6e6:	4e4f      	ldr	r6, [pc, #316]	; (800e824 <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800e6e8:	0030      	movs	r0, r6
 800e6ea:	f7f1 fd0d 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	9303      	str	r3, [sp, #12]
 800e6f2:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800e6f4:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800e6f6:	4283      	cmp	r3, r0
 800e6f8:	db01      	blt.n	800e6fe <tiny_vsnprintf_like+0x122>
 800e6fa:	1a1b      	subs	r3, r3, r0
 800e6fc:	9303      	str	r3, [sp, #12]
 800e6fe:	0038      	movs	r0, r7
 800e700:	2120      	movs	r1, #32
 800e702:	9a03      	ldr	r2, [sp, #12]
 800e704:	f000 fc69 	bl	800efda <memset>
 800e708:	9b03      	ldr	r3, [sp, #12]
 800e70a:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e70c:	2300      	movs	r3, #0
 800e70e:	42ab      	cmp	r3, r5
 800e710:	db01      	blt.n	800e716 <tiny_vsnprintf_like+0x13a>
 800e712:	197f      	adds	r7, r7, r5
 800e714:	e774      	b.n	800e600 <tiny_vsnprintf_like+0x24>
 800e716:	5cf2      	ldrb	r2, [r6, r3]
 800e718:	54fa      	strb	r2, [r7, r3]
 800e71a:	3301      	adds	r3, #1
 800e71c:	e7f7      	b.n	800e70e <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800e71e:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800e720:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800e722:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e724:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800e726:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e728:	1a3e      	subs	r6, r7, r0
 800e72a:	0020      	movs	r0, r4
 800e72c:	1b9e      	subs	r6, r3, r6
 800e72e:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 800e730:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e732:	9005      	str	r0, [sp, #20]
  if (type & UPPERCASE)  dig = upper_digits;
 800e734:	483c      	ldr	r0, [pc, #240]	; (800e828 <tiny_vsnprintf_like+0x24c>)
 800e736:	9007      	str	r0, [sp, #28]
 800e738:	2040      	movs	r0, #64	; 0x40
 800e73a:	4202      	tst	r2, r0
 800e73c:	d101      	bne.n	800e742 <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800e73e:	4a3b      	ldr	r2, [pc, #236]	; (800e82c <tiny_vsnprintf_like+0x250>)
 800e740:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800e742:	2230      	movs	r2, #48	; 0x30
 800e744:	9208      	str	r2, [sp, #32]
 800e746:	9a04      	ldr	r2, [sp, #16]
 800e748:	2a30      	cmp	r2, #48	; 0x30
 800e74a:	d001      	beq.n	800e750 <tiny_vsnprintf_like+0x174>
 800e74c:	2220      	movs	r2, #32
 800e74e:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 800e750:	2900      	cmp	r1, #0
 800e752:	d023      	beq.n	800e79c <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800e754:	2b00      	cmp	r3, #0
 800e756:	da21      	bge.n	800e79c <tiny_vsnprintf_like+0x1c0>
      size--;
 800e758:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800e75a:	425b      	negs	r3, r3
      size--;
 800e75c:	3a01      	subs	r2, #1
 800e75e:	9200      	str	r2, [sp, #0]
      sign = '-';
 800e760:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800e762:	2400      	movs	r4, #0
 800e764:	9203      	str	r2, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e766:	0018      	movs	r0, r3
 800e768:	0029      	movs	r1, r5
 800e76a:	9306      	str	r3, [sp, #24]
 800e76c:	f7f1 fd78 	bl	8000260 <__aeabi_uidivmod>
 800e770:	0022      	movs	r2, r4
 800e772:	4684      	mov	ip, r0
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	3401      	adds	r4, #1
 800e778:	5c59      	ldrb	r1, [r3, r1]
 800e77a:	ab0b      	add	r3, sp, #44	; 0x2c
 800e77c:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 800e77e:	9a06      	ldr	r2, [sp, #24]
 800e780:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800e782:	4663      	mov	r3, ip
    while (num != 0)
 800e784:	4295      	cmp	r5, r2
 800e786:	d9ee      	bls.n	800e766 <tiny_vsnprintf_like+0x18a>
 800e788:	e011      	b.n	800e7ae <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800e78a:	2202      	movs	r2, #2
 800e78c:	430a      	orrs	r2, r1
    base = 10;
 800e78e:	250a      	movs	r5, #10
 800e790:	e7c8      	b.n	800e724 <tiny_vsnprintf_like+0x148>
          --fmt;
 800e792:	9801      	ldr	r0, [sp, #4]
 800e794:	000f      	movs	r7, r1
 800e796:	3801      	subs	r0, #1
 800e798:	9001      	str	r0, [sp, #4]
 800e79a:	e763      	b.n	800e664 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <tiny_vsnprintf_like+0x1c8>
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	e7de      	b.n	800e762 <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800e7a4:	2130      	movs	r1, #48	; 0x30
 800e7a6:	2001      	movs	r0, #1
 800e7a8:	aa0b      	add	r2, sp, #44	; 0x2c
 800e7aa:	7011      	strb	r1, [r2, #0]
 800e7ac:	9303      	str	r3, [sp, #12]
  size -= precision;
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e7b2:	9b04      	ldr	r3, [sp, #16]
 800e7b4:	2b30      	cmp	r3, #48	; 0x30
 800e7b6:	d006      	beq.n	800e7c6 <tiny_vsnprintf_like+0x1ea>
 800e7b8:	003b      	movs	r3, r7
 800e7ba:	2220      	movs	r2, #32
 800e7bc:	0021      	movs	r1, r4
 800e7be:	001f      	movs	r7, r3
 800e7c0:	3c01      	subs	r4, #1
 800e7c2:	2900      	cmp	r1, #0
 800e7c4:	dc0c      	bgt.n	800e7e0 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800e7c6:	9b03      	ldr	r3, [sp, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <tiny_vsnprintf_like+0x1fc>
 800e7cc:	1c79      	adds	r1, r7, #1
 800e7ce:	3e01      	subs	r6, #1
 800e7d0:	703b      	strb	r3, [r7, #0]
 800e7d2:	000f      	movs	r7, r1
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	d009      	beq.n	800e7ec <tiny_vsnprintf_like+0x210>
 800e7d8:	003b      	movs	r3, r7
 800e7da:	0032      	movs	r2, r6
 800e7dc:	1ba4      	subs	r4, r4, r6
 800e7de:	e00f      	b.n	800e800 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	3e01      	subs	r6, #1
 800e7e4:	0019      	movs	r1, r3
 800e7e6:	703a      	strb	r2, [r7, #0]
 800e7e8:	2e00      	cmp	r6, #0
 800e7ea:	d1e7      	bne.n	800e7bc <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e7ec:	000f      	movs	r7, r1
 800e7ee:	9c05      	ldr	r4, [sp, #20]
 800e7f0:	e706      	b.n	800e600 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800e7f2:	9e08      	ldr	r6, [sp, #32]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	3a01      	subs	r2, #1
 800e7f8:	0019      	movs	r1, r3
 800e7fa:	702e      	strb	r6, [r5, #0]
 800e7fc:	2a00      	cmp	r2, #0
 800e7fe:	d0f5      	beq.n	800e7ec <tiny_vsnprintf_like+0x210>
 800e800:	18a1      	adds	r1, r4, r2
 800e802:	001d      	movs	r5, r3
 800e804:	2900      	cmp	r1, #0
 800e806:	dcf4      	bgt.n	800e7f2 <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e808:	ad0b      	add	r5, sp, #44	; 0x2c
 800e80a:	189a      	adds	r2, r3, r2
 800e80c:	001c      	movs	r4, r3
 800e80e:	3801      	subs	r0, #1
 800e810:	d201      	bcs.n	800e816 <tiny_vsnprintf_like+0x23a>
 800e812:	0019      	movs	r1, r3
 800e814:	e7ea      	b.n	800e7ec <tiny_vsnprintf_like+0x210>
 800e816:	5d46      	ldrb	r6, [r0, r5]
 800e818:	3301      	adds	r3, #1
 800e81a:	0019      	movs	r1, r3
 800e81c:	7026      	strb	r6, [r4, #0]
 800e81e:	4293      	cmp	r3, r2
 800e820:	d1f4      	bne.n	800e80c <tiny_vsnprintf_like+0x230>
 800e822:	e7e3      	b.n	800e7ec <tiny_vsnprintf_like+0x210>
 800e824:	0800fce5 	.word	0x0800fce5
 800e828:	0800fcec 	.word	0x0800fcec
 800e82c:	0800fd11 	.word	0x0800fd11

0800e830 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e830:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e832:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e836:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800e838:	4a05      	ldr	r2, [pc, #20]	; (800e850 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e83a:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800e83c:	6813      	ldr	r3, [r2, #0]
 800e83e:	4303      	orrs	r3, r0
 800e840:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e842:	4b04      	ldr	r3, [pc, #16]	; (800e854 <UTIL_SEQ_SetTask+0x24>)
 800e844:	58ca      	ldr	r2, [r1, r3]
 800e846:	4310      	orrs	r0, r2
 800e848:	50c8      	str	r0, [r1, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e84a:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800e84e:	bd10      	pop	{r4, pc}
 800e850:	20001584 	.word	0x20001584
 800e854:	20001574 	.word	0x20001574

0800e858 <UTIL_SEQ_PreIdle>:
 800e858:	4770      	bx	lr

0800e85a <UTIL_SEQ_PostIdle>:
 800e85a:	4770      	bx	lr

0800e85c <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800e85c:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800e85e:	0c02      	lsrs	r2, r0, #16
 800e860:	429a      	cmp	r2, r3
 800e862:	d101      	bne.n	800e868 <SEQ_BitPosition+0xc>
 800e864:	0400      	lsls	r0, r0, #16
 800e866:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800e868:	0e02      	lsrs	r2, r0, #24
 800e86a:	d102      	bne.n	800e872 <SEQ_BitPosition+0x16>
 800e86c:	3308      	adds	r3, #8
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800e872:	0f02      	lsrs	r2, r0, #28
 800e874:	d102      	bne.n	800e87c <SEQ_BitPosition+0x20>
 800e876:	3304      	adds	r3, #4
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800e87c:	221f      	movs	r2, #31
 800e87e:	1ad3      	subs	r3, r2, r3
 800e880:	4a02      	ldr	r2, [pc, #8]	; (800e88c <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800e882:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800e884:	5c10      	ldrb	r0, [r2, r0]
 800e886:	1a18      	subs	r0, r3, r0
 800e888:	b2c0      	uxtb	r0, r0
}
 800e88a:	4770      	bx	lr
 800e88c:	0800fd36 	.word	0x0800fd36

0800e890 <UTIL_SEQ_Run>:
{
 800e890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800e892:	4e36      	ldr	r6, [pc, #216]	; (800e96c <UTIL_SEQ_Run+0xdc>)
 800e894:	6833      	ldr	r3, [r6, #0]
  SuperMask &= Mask_bm;
 800e896:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800e898:	9300      	str	r3, [sp, #0]
  SuperMask &= Mask_bm;
 800e89a:	6030      	str	r0, [r6, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800e89c:	4c34      	ldr	r4, [pc, #208]	; (800e970 <UTIL_SEQ_Run+0xe0>)
 800e89e:	4f35      	ldr	r7, [pc, #212]	; (800e974 <UTIL_SEQ_Run+0xe4>)
 800e8a0:	6821      	ldr	r1, [r4, #0]
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	6833      	ldr	r3, [r6, #0]
 800e8a6:	400a      	ands	r2, r1
 800e8a8:	4213      	tst	r3, r2
 800e8aa:	d040      	beq.n	800e92e <UTIL_SEQ_Run+0x9e>
 800e8ac:	4832      	ldr	r0, [pc, #200]	; (800e978 <UTIL_SEQ_Run+0xe8>)
 800e8ae:	4a33      	ldr	r2, [pc, #204]	; (800e97c <UTIL_SEQ_Run+0xec>)
 800e8b0:	6800      	ldr	r0, [r0, #0]
 800e8b2:	6812      	ldr	r2, [r2, #0]
 800e8b4:	0005      	movs	r5, r0
 800e8b6:	4015      	ands	r5, r2
 800e8b8:	4210      	tst	r0, r2
 800e8ba:	d138      	bne.n	800e92e <UTIL_SEQ_Run+0x9e>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800e8bc:	4c30      	ldr	r4, [pc, #192]	; (800e980 <UTIL_SEQ_Run+0xf0>)
 800e8be:	400b      	ands	r3, r1
 800e8c0:	6822      	ldr	r2, [r4, #0]
 800e8c2:	0010      	movs	r0, r2
 800e8c4:	4018      	ands	r0, r3
 800e8c6:	421a      	tst	r2, r3
 800e8c8:	d102      	bne.n	800e8d0 <UTIL_SEQ_Run+0x40>
      counter++;
 800e8ca:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800e8cc:	68a0      	ldr	r0, [r4, #8]
 800e8ce:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e8d0:	00ed      	lsls	r5, r5, #3
 800e8d2:	1963      	adds	r3, r4, r5
 800e8d4:	685a      	ldr	r2, [r3, #4]
 800e8d6:	4202      	tst	r2, r0
 800e8d8:	d102      	bne.n	800e8e0 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e8da:	2201      	movs	r2, #1
 800e8dc:	4252      	negs	r2, r2
 800e8de:	605a      	str	r2, [r3, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e8e0:	1965      	adds	r5, r4, r5
 800e8e2:	686f      	ldr	r7, [r5, #4]
 800e8e4:	4038      	ands	r0, r7
 800e8e6:	f7ff ffb9 	bl	800e85c <SEQ_BitPosition>
 800e8ea:	4b26      	ldr	r3, [pc, #152]	; (800e984 <UTIL_SEQ_Run+0xf4>)
 800e8ec:	6018      	str	r0, [r3, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	4083      	lsls	r3, r0
 800e8f2:	439f      	bics	r7, r3
 800e8f4:	606f      	str	r7, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e8fa:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e8fc:	4b21      	ldr	r3, [pc, #132]	; (800e984 <UTIL_SEQ_Run+0xf4>)
 800e8fe:	481d      	ldr	r0, [pc, #116]	; (800e974 <UTIL_SEQ_Run+0xe4>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	9301      	str	r3, [sp, #4]
 800e904:	2301      	movs	r3, #1
 800e906:	9a01      	ldr	r2, [sp, #4]
 800e908:	4093      	lsls	r3, r2
 800e90a:	6802      	ldr	r2, [r0, #0]
 800e90c:	439a      	bics	r2, r3
 800e90e:	6002      	str	r2, [r0, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e910:	68a2      	ldr	r2, [r4, #8]
 800e912:	439a      	bics	r2, r3
 800e914:	60a2      	str	r2, [r4, #8]
 800e916:	6822      	ldr	r2, [r4, #0]
 800e918:	439a      	bics	r2, r3
 800e91a:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e91c:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800e920:	4b18      	ldr	r3, [pc, #96]	; (800e984 <UTIL_SEQ_Run+0xf4>)
 800e922:	4a19      	ldr	r2, [pc, #100]	; (800e988 <UTIL_SEQ_Run+0xf8>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	589b      	ldr	r3, [r3, r2]
 800e92a:	4798      	blx	r3
 800e92c:	e7b6      	b.n	800e89c <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e92e:	2301      	movs	r3, #1
 800e930:	4a14      	ldr	r2, [pc, #80]	; (800e984 <UTIL_SEQ_Run+0xf4>)
 800e932:	425b      	negs	r3, r3
 800e934:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_PreIdle( );
 800e936:	f7ff ff8f 	bl	800e858 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e93a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e93e:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	4013      	ands	r3, r2
 800e946:	6832      	ldr	r2, [r6, #0]
 800e948:	4013      	ands	r3, r2
 800e94a:	4a0c      	ldr	r2, [pc, #48]	; (800e97c <UTIL_SEQ_Run+0xec>)
 800e94c:	6811      	ldr	r1, [r2, #0]
 800e94e:	4a0a      	ldr	r2, [pc, #40]	; (800e978 <UTIL_SEQ_Run+0xe8>)
 800e950:	6812      	ldr	r2, [r2, #0]
 800e952:	400a      	ands	r2, r1
 800e954:	4313      	orrs	r3, r2
 800e956:	d101      	bne.n	800e95c <UTIL_SEQ_Run+0xcc>
	UTIL_SEQ_Idle( );
 800e958:	f7f4 f996 	bl	8002c88 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e95c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800e960:	f7ff ff7b 	bl	800e85a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800e964:	9b00      	ldr	r3, [sp, #0]
 800e966:	6033      	str	r3, [r6, #0]
}
 800e968:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e96a:	46c0      	nop			; (mov r8, r8)
 800e96c:	20000194 	.word	0x20000194
 800e970:	20000198 	.word	0x20000198
 800e974:	20001584 	.word	0x20001584
 800e978:	200014f0 	.word	0x200014f0
 800e97c:	200014ec 	.word	0x200014ec
 800e980:	20001574 	.word	0x20001574
 800e984:	200014e8 	.word	0x200014e8
 800e988:	200014f4 	.word	0x200014f4

0800e98c <UTIL_SEQ_RegTask>:
{
 800e98c:	b570      	push	{r4, r5, r6, lr}
 800e98e:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e990:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e994:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e996:	f7ff ff61 	bl	800e85c <SEQ_BitPosition>
 800e99a:	4b03      	ldr	r3, [pc, #12]	; (800e9a8 <UTIL_SEQ_RegTask+0x1c>)
 800e99c:	0080      	lsls	r0, r0, #2
 800e99e:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9a0:	f385 8810 	msr	PRIMASK, r5
}
 800e9a4:	bd70      	pop	{r4, r5, r6, pc}
 800e9a6:	46c0      	nop			; (mov r8, r8)
 800e9a8:	200014f4 	.word	0x200014f4

0800e9ac <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800e9ac:	2200      	movs	r2, #0
{
 800e9ae:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800e9b0:	4b02      	ldr	r3, [pc, #8]	; (800e9bc <UTIL_TIMER_Init+0x10>)
 800e9b2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800e9b4:	4b02      	ldr	r3, [pc, #8]	; (800e9c0 <UTIL_TIMER_Init+0x14>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4798      	blx	r3
}
 800e9ba:	bd10      	pop	{r4, pc}
 800e9bc:	20001588 	.word	0x20001588
 800e9c0:	0800f1b0 	.word	0x0800f1b0

0800e9c4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800e9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9c6:	0004      	movs	r4, r0
 800e9c8:	0017      	movs	r7, r2
 800e9ca:	0008      	movs	r0, r1
 800e9cc:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800e9ce:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800e9d0:	2c00      	cmp	r4, #0
 800e9d2:	d00f      	beq.n	800e9f4 <UTIL_TIMER_Create+0x30>
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00d      	beq.n	800e9f4 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800e9d8:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e9da:	4b07      	ldr	r3, [pc, #28]	; (800e9f8 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800e9dc:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e0:	9301      	str	r3, [sp, #4]
 800e9e2:	4798      	blx	r3
    TimerObject->argument = Argument;
 800e9e4:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e9e6:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800e9e8:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e9ea:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800e9ec:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800e9ee:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800e9f0:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800e9f2:	6165      	str	r5, [r4, #20]
  }
}
 800e9f4:	0028      	movs	r0, r5
 800e9f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e9f8:	0800f1b0 	.word	0x0800f1b0

0800e9fc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800e9fc:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800e9fe:	4c03      	ldr	r4, [pc, #12]	; (800ea0c <UTIL_TIMER_GetCurrentTime+0x10>)
 800ea00:	69e3      	ldr	r3, [r4, #28]
 800ea02:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800ea04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea06:	4798      	blx	r3
}
 800ea08:	bd10      	pop	{r4, pc}
 800ea0a:	46c0      	nop			; (mov r8, r8)
 800ea0c:	0800f1b0 	.word	0x0800f1b0

0800ea10 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ea10:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ea12:	4d06      	ldr	r5, [pc, #24]	; (800ea2c <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800ea14:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ea16:	69eb      	ldr	r3, [r5, #28]
 800ea18:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ea1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ea1c:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ea1e:	0030      	movs	r0, r6
 800ea20:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ea22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ea24:	1a20      	subs	r0, r4, r0
 800ea26:	4798      	blx	r3
}
 800ea28:	bd70      	pop	{r4, r5, r6, pc}
 800ea2a:	46c0      	nop			; (mov r8, r8)
 800ea2c:	0800f1b0 	.word	0x0800f1b0

0800ea30 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ea30:	4a05      	ldr	r2, [pc, #20]	; (800ea48 <TimerExists+0x18>)
{
 800ea32:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ea34:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d100      	bne.n	800ea3c <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800ea3a:	4770      	bx	lr
    if( cur == TimerObject )
 800ea3c:	4298      	cmp	r0, r3
 800ea3e:	d001      	beq.n	800ea44 <TimerExists+0x14>
    cur = cur->Next;
 800ea40:	6940      	ldr	r0, [r0, #20]
 800ea42:	e7f8      	b.n	800ea36 <TimerExists+0x6>
      return true;
 800ea44:	2001      	movs	r0, #1
 800ea46:	e7f8      	b.n	800ea3a <TimerExists+0xa>
 800ea48:	20001588 	.word	0x20001588

0800ea4c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ea4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ea4e:	4e0c      	ldr	r6, [pc, #48]	; (800ea80 <TimerSetTimeout+0x34>)
{
 800ea50:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ea52:	6a33      	ldr	r3, [r6, #32]
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ea5c:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ea5e:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ea60:	6827      	ldr	r7, [r4, #0]
 800ea62:	9301      	str	r3, [sp, #4]
 800ea64:	4798      	blx	r3
 800ea66:	1940      	adds	r0, r0, r5
 800ea68:	4287      	cmp	r7, r0
 800ea6a:	d203      	bcs.n	800ea74 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ea6c:	9b01      	ldr	r3, [sp, #4]
 800ea6e:	4798      	blx	r3
 800ea70:	1945      	adds	r5, r0, r5
 800ea72:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800ea74:	68b3      	ldr	r3, [r6, #8]
 800ea76:	6820      	ldr	r0, [r4, #0]
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	4798      	blx	r3
}
 800ea7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ea7e:	46c0      	nop			; (mov r8, r8)
 800ea80:	0800f1b0 	.word	0x0800f1b0

0800ea84 <UTIL_TIMER_Stop>:
{
 800ea84:	0003      	movs	r3, r0
 800ea86:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800ea88:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d016      	beq.n	800eabc <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea8e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ea92:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800ea94:	4c11      	ldr	r4, [pc, #68]	; (800eadc <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800ea96:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800ea98:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	d00b      	beq.n	800eab6 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d111      	bne.n	800eaca <UTIL_TIMER_Stop+0x46>
          if( TimerListHead->Next != NULL )
 800eaa6:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800eaa8:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800eaaa:	428e      	cmp	r6, r1
 800eaac:	d007      	beq.n	800eabe <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800eaae:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800eab0:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800eab2:	f7ff ffcb 	bl	800ea4c <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eab6:	f385 8810 	msr	PRIMASK, r5
}
 800eaba:	2000      	movs	r0, #0
}
 800eabc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800eabe:	4b08      	ldr	r3, [pc, #32]	; (800eae0 <UTIL_TIMER_Stop+0x5c>)
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	9301      	str	r3, [sp, #4]
 800eac4:	4798      	blx	r3
            TimerListHead = NULL;
 800eac6:	6026      	str	r6, [r4, #0]
 800eac8:	e7f5      	b.n	800eab6 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800eaca:	0011      	movs	r1, r2
 800eacc:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800eace:	2a00      	cmp	r2, #0
 800ead0:	d0f1      	beq.n	800eab6 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d1f9      	bne.n	800eaca <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	614b      	str	r3, [r1, #20]
 800eada:	e7ec      	b.n	800eab6 <UTIL_TIMER_Stop+0x32>
 800eadc:	20001588 	.word	0x20001588
 800eae0:	0800f1b0 	.word	0x0800f1b0

0800eae4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eae4:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <TimerInsertTimer+0x28>)
{
 800eae6:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eae8:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800eaea:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800eaec:	6959      	ldr	r1, [r3, #20]
 800eaee:	2900      	cmp	r1, #0
 800eaf0:	d102      	bne.n	800eaf8 <TimerInsertTimer+0x14>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800eaf2:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800eaf4:	6141      	str	r1, [r0, #20]
 800eaf6:	e008      	b.n	800eb0a <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800eaf8:	6801      	ldr	r1, [r0, #0]
 800eafa:	6814      	ldr	r4, [r2, #0]
 800eafc:	42a1      	cmp	r1, r4
 800eafe:	d902      	bls.n	800eb06 <TimerInsertTimer+0x22>
        next = next->Next;
 800eb00:	0013      	movs	r3, r2
 800eb02:	6952      	ldr	r2, [r2, #20]
 800eb04:	e7f2      	b.n	800eaec <TimerInsertTimer+0x8>
        cur->Next = TimerObject;
 800eb06:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800eb08:	6142      	str	r2, [r0, #20]
}
 800eb0a:	bd10      	pop	{r4, pc}
 800eb0c:	20001588 	.word	0x20001588

0800eb10 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eb10:	4a05      	ldr	r2, [pc, #20]	; (800eb28 <TimerInsertNewHeadTimer+0x18>)
{
 800eb12:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eb14:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800eb1e:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800eb20:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800eb22:	f7ff ff93 	bl	800ea4c <TimerSetTimeout>
}
 800eb26:	bd10      	pop	{r4, pc}
 800eb28:	20001588 	.word	0x20001588

0800eb2c <UTIL_TIMER_Start>:
{
 800eb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb2e:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800eb30:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d025      	beq.n	800eb82 <UTIL_TIMER_Start+0x56>
 800eb36:	f7ff ff7b 	bl	800ea30 <TimerExists>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d121      	bne.n	800eb82 <UTIL_TIMER_Start+0x56>
 800eb3e:	7a65      	ldrb	r5, [r4, #9]
 800eb40:	2d00      	cmp	r5, #0
 800eb42:	d12e      	bne.n	800eba2 <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb44:	f3ef 8310 	mrs	r3, PRIMASK
 800eb48:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb4a:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800eb4c:	4e16      	ldr	r6, [pc, #88]	; (800eba8 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800eb4e:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800eb50:	6a33      	ldr	r3, [r6, #32]
 800eb52:	9301      	str	r3, [sp, #4]
 800eb54:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800eb56:	4287      	cmp	r7, r0
 800eb58:	d200      	bcs.n	800eb5c <UTIL_TIMER_Start+0x30>
 800eb5a:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800eb5c:	2380      	movs	r3, #128	; 0x80
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800eb62:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800eb64:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800eb66:	4f11      	ldr	r7, [pc, #68]	; (800ebac <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800eb68:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10a      	bne.n	800eb86 <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800eb70:	6933      	ldr	r3, [r6, #16]
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800eb76:	0020      	movs	r0, r4
 800eb78:	f7ff ffca 	bl	800eb10 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb7c:	9b00      	ldr	r3, [sp, #0]
 800eb7e:	f383 8810 	msr	PRIMASK, r3
}
 800eb82:	0028      	movs	r0, r5
 800eb84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800eb86:	69b3      	ldr	r3, [r6, #24]
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800eb90:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800eb92:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4298      	cmp	r0, r3
 800eb98:	d3ed      	bcc.n	800eb76 <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800eb9a:	0020      	movs	r0, r4
 800eb9c:	f7ff ffa2 	bl	800eae4 <TimerInsertTimer>
 800eba0:	e7ec      	b.n	800eb7c <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800eba2:	2501      	movs	r5, #1
 800eba4:	e7ed      	b.n	800eb82 <UTIL_TIMER_Start+0x56>
 800eba6:	46c0      	nop			; (mov r8, r8)
 800eba8:	0800f1b0 	.word	0x0800f1b0
 800ebac:	20001588 	.word	0x20001588

0800ebb0 <UTIL_TIMER_StartWithPeriod>:
{
 800ebb0:	b513      	push	{r0, r1, r4, lr}
 800ebb2:	0004      	movs	r4, r0
    ret = UTIL_TIMER_INVALID_PARAM;
 800ebb4:	2001      	movs	r0, #1
  if(NULL == TimerObject)
 800ebb6:	2c00      	cmp	r4, #0
 800ebb8:	d010      	beq.n	800ebdc <UTIL_TIMER_StartWithPeriod+0x2c>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800ebba:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <UTIL_TIMER_StartWithPeriod+0x30>)
 800ebbc:	0008      	movs	r0, r1
 800ebbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc0:	9301      	str	r3, [sp, #4]
 800ebc2:	4798      	blx	r3
 800ebc4:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800ebc6:	0020      	movs	r0, r4
 800ebc8:	f7ff ff32 	bl	800ea30 <TimerExists>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d002      	beq.n	800ebd6 <UTIL_TIMER_StartWithPeriod+0x26>
      (void)UTIL_TIMER_Stop(TimerObject);
 800ebd0:	0020      	movs	r0, r4
 800ebd2:	f7ff ff57 	bl	800ea84 <UTIL_TIMER_Stop>
    ret = UTIL_TIMER_Start(TimerObject);
 800ebd6:	0020      	movs	r0, r4
 800ebd8:	f7ff ffa8 	bl	800eb2c <UTIL_TIMER_Start>
}
 800ebdc:	bd16      	pop	{r1, r2, r4, pc}
 800ebde:	46c0      	nop			; (mov r8, r8)
 800ebe0:	0800f1b0 	.word	0x0800f1b0

0800ebe4 <UTIL_TIMER_SetPeriod>:
{
 800ebe4:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ebe6:	2301      	movs	r3, #1
{
 800ebe8:	0004      	movs	r4, r0
 800ebea:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800ebec:	2c00      	cmp	r4, #0
 800ebee:	d011      	beq.n	800ec14 <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800ebf0:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <UTIL_TIMER_SetPeriod+0x34>)
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	4798      	blx	r3
 800ebf8:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800ebfa:	0020      	movs	r0, r4
 800ebfc:	f7ff ff18 	bl	800ea30 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ec00:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800ec02:	4298      	cmp	r0, r3
 800ec04:	d006      	beq.n	800ec14 <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800ec06:	0020      	movs	r0, r4
 800ec08:	f7ff ff3c 	bl	800ea84 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800ec0c:	0020      	movs	r0, r4
 800ec0e:	f7ff ff8d 	bl	800eb2c <UTIL_TIMER_Start>
 800ec12:	0003      	movs	r3, r0
}
 800ec14:	0018      	movs	r0, r3
 800ec16:	bd16      	pop	{r1, r2, r4, pc}
 800ec18:	0800f1b0 	.word	0x0800f1b0

0800ec1c <UTIL_TIMER_IRQ_Handler>:
{
 800ec1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec1e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ec22:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800ec24:	4e1e      	ldr	r6, [pc, #120]	; (800eca0 <UTIL_TIMER_IRQ_Handler+0x84>)
 800ec26:	6973      	ldr	r3, [r6, #20]
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800ec2c:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800ec2e:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800ec34:	4d1b      	ldr	r5, [pc, #108]	; (800eca4 <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800ec36:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800ec38:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800ec3a:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d01f      	beq.n	800ec80 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800ec40:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800ec42:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800ec44:	4288      	cmp	r0, r1
 800ec46:	d900      	bls.n	800ec4a <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800ec48:	1822      	adds	r2, r4, r0
 800ec4a:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800ec4c:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800ec4e:	e7f5      	b.n	800ec3c <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ec50:	681c      	ldr	r4, [r3, #0]
 800ec52:	2c00      	cmp	r4, #0
 800ec54:	d004      	beq.n	800ec60 <UTIL_TIMER_IRQ_Handler+0x44>
 800ec56:	69b3      	ldr	r3, [r6, #24]
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	4798      	blx	r3
 800ec5c:	4284      	cmp	r4, r0
 800ec5e:	d212      	bcs.n	800ec86 <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800ec60:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800ec62:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800ec64:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800ec66:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800ec6c:	68e3      	ldr	r3, [r4, #12]
 800ec6e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800ec70:	2280      	movs	r2, #128	; 0x80
 800ec72:	8963      	ldrh	r3, [r4, #10]
 800ec74:	0052      	lsls	r2, r2, #1
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d102      	bne.n	800ec80 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800ec7a:	0020      	movs	r0, r4
 800ec7c:	f7ff ff56 	bl	800eb2c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ec80:	682b      	ldr	r3, [r5, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1e4      	bne.n	800ec50 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800ec86:	6828      	ldr	r0, [r5, #0]
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d102      	bne.n	800ec92 <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec8c:	f387 8810 	msr	PRIMASK, r7
}
 800ec90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800ec92:	7a03      	ldrb	r3, [r0, #8]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1f9      	bne.n	800ec8c <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800ec98:	f7ff fed8 	bl	800ea4c <TimerSetTimeout>
 800ec9c:	e7f6      	b.n	800ec8c <UTIL_TIMER_IRQ_Handler+0x70>
 800ec9e:	46c0      	nop			; (mov r8, r8)
 800eca0:	0800f1b0 	.word	0x0800f1b0
 800eca4:	20001588 	.word	0x20001588

0800eca8 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800eca8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecaa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ecae:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800ecb0:	4b16      	ldr	r3, [pc, #88]	; (800ed0c <TRACE_AllocateBufer+0x64>)
 800ecb2:	8a5d      	ldrh	r5, [r3, #18]
 800ecb4:	8a1a      	ldrh	r2, [r3, #16]
 800ecb6:	4295      	cmp	r5, r2
 800ecb8:	d114      	bne.n	800ece4 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ecba:	2280      	movs	r2, #128	; 0x80
 800ecbc:	0092      	lsls	r2, r2, #2
 800ecbe:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ecc0:	b292      	uxth	r2, r2
 800ecc2:	4290      	cmp	r0, r2
 800ecc4:	d306      	bcc.n	800ecd4 <TRACE_AllocateBufer+0x2c>
 800ecc6:	4285      	cmp	r5, r0
 800ecc8:	d916      	bls.n	800ecf8 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ecca:	2201      	movs	r2, #1
 800eccc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ecce:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ecd0:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ecd2:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800ecd4:	8a5a      	ldrh	r2, [r3, #18]
 800ecd6:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ecd8:	1812      	adds	r2, r2, r0
 800ecda:	05d2      	lsls	r2, r2, #23
 800ecdc:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800ecde:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ece0:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800ece2:	e00b      	b.n	800ecfc <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ece4:	4295      	cmp	r5, r2
 800ece6:	d90c      	bls.n	800ed02 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ece8:	2680      	movs	r6, #128	; 0x80
 800ecea:	00b6      	lsls	r6, r6, #2
 800ecec:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800ecee:	b2b6      	uxth	r6, r6
 800ecf0:	4286      	cmp	r6, r0
 800ecf2:	d8ef      	bhi.n	800ecd4 <TRACE_AllocateBufer+0x2c>
 800ecf4:	4282      	cmp	r2, r0
 800ecf6:	d8e8      	bhi.n	800ecca <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800ecf8:	2001      	movs	r0, #1
 800ecfa:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecfc:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 800ed00:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800ed02:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 800ed04:	b292      	uxth	r2, r2
 800ed06:	4282      	cmp	r2, r0
 800ed08:	d8e4      	bhi.n	800ecd4 <TRACE_AllocateBufer+0x2c>
 800ed0a:	e7f5      	b.n	800ecf8 <TRACE_AllocateBufer+0x50>
 800ed0c:	2000178c 	.word	0x2000178c

0800ed10 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ed14:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800ed16:	4a03      	ldr	r2, [pc, #12]	; (800ed24 <TRACE_Lock+0x14>)
 800ed18:	8ad3      	ldrh	r3, [r2, #22]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed1e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ed22:	4770      	bx	lr
 800ed24:	2000178c 	.word	0x2000178c

0800ed28 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ed2c:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800ed2e:	4a03      	ldr	r2, [pc, #12]	; (800ed3c <TRACE_UnLock+0x14>)
 800ed30:	8ad3      	ldrh	r3, [r2, #22]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed36:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ed3a:	4770      	bx	lr
 800ed3c:	2000178c 	.word	0x2000178c

0800ed40 <UTIL_ADV_TRACE_Init>:
{
 800ed40:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800ed42:	2218      	movs	r2, #24
 800ed44:	2100      	movs	r1, #0
 800ed46:	4807      	ldr	r0, [pc, #28]	; (800ed64 <UTIL_ADV_TRACE_Init+0x24>)
 800ed48:	f7ff fbad 	bl	800e4a6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800ed4c:	2280      	movs	r2, #128	; 0x80
 800ed4e:	2100      	movs	r1, #0
 800ed50:	4805      	ldr	r0, [pc, #20]	; (800ed68 <UTIL_ADV_TRACE_Init+0x28>)
 800ed52:	0092      	lsls	r2, r2, #2
 800ed54:	f7ff fba7 	bl	800e4a6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800ed58:	4b04      	ldr	r3, [pc, #16]	; (800ed6c <UTIL_ADV_TRACE_Init+0x2c>)
 800ed5a:	4805      	ldr	r0, [pc, #20]	; (800ed70 <UTIL_ADV_TRACE_Init+0x30>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4798      	blx	r3
}
 800ed60:	bd10      	pop	{r4, pc}
 800ed62:	46c0      	nop			; (mov r8, r8)
 800ed64:	2000178c 	.word	0x2000178c
 800ed68:	2000158c 	.word	0x2000158c
 800ed6c:	0800f348 	.word	0x0800f348
 800ed70:	0800eeed 	.word	0x0800eeed

0800ed74 <UTIL_ADV_TRACE_StartRxProcess>:
{
 800ed74:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.StartRx(UserCallback);
 800ed76:	4b02      	ldr	r3, [pc, #8]	; (800ed80 <UTIL_ADV_TRACE_StartRxProcess+0xc>)
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	4798      	blx	r3
}
 800ed7c:	bd10      	pop	{r4, pc}
 800ed7e:	46c0      	nop			; (mov r8, r8)
 800ed80:	0800f348 	.word	0x0800f348

0800ed84 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 800ed84:	4b01      	ldr	r3, [pc, #4]	; (800ed8c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800ed86:	6058      	str	r0, [r3, #4]
}
 800ed88:	4770      	bx	lr
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	2000178c 	.word	0x2000178c

0800ed90 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800ed90:	4b01      	ldr	r3, [pc, #4]	; (800ed98 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800ed92:	7218      	strb	r0, [r3, #8]
}
 800ed94:	4770      	bx	lr
 800ed96:	46c0      	nop			; (mov r8, r8)
 800ed98:	2000178c 	.word	0x2000178c

0800ed9c <TRACE_Send>:
{
 800ed9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed9e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eda2:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800eda4:	4c1b      	ldr	r4, [pc, #108]	; (800ee14 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800eda6:	8ae5      	ldrh	r5, [r4, #22]
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	d12e      	bne.n	800ee0a <TRACE_Send+0x6e>
    TRACE_Lock();
 800edac:	f7ff ffb0 	bl	800ed10 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800edb0:	8a20      	ldrh	r0, [r4, #16]
 800edb2:	8a62      	ldrh	r2, [r4, #18]
 800edb4:	4290      	cmp	r0, r2
 800edb6:	d026      	beq.n	800ee06 <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800edb8:	78a1      	ldrb	r1, [r4, #2]
 800edba:	2901      	cmp	r1, #1
 800edbc:	d110      	bne.n	800ede0 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800edbe:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800edc0:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800edc2:	1a1b      	subs	r3, r3, r0
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800edc8:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800edca:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d109      	bne.n	800ede4 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800edd0:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800edd2:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800edd4:	8a23      	ldrh	r3, [r4, #16]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d912      	bls.n	800ee00 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800edda:	1ad2      	subs	r2, r2, r3
 800eddc:	82a2      	strh	r2, [r4, #20]
 800edde:	e001      	b.n	800ede4 <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ede0:	2900      	cmp	r1, #0
 800ede2:	d0f7      	beq.n	800edd4 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ede4:	8a25      	ldrh	r5, [r4, #16]
 800ede6:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <TRACE_Send+0x7c>)
 800ede8:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edea:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 800edee:	f7f3 ff8d 	bl	8002d0c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800edf2:	4b0a      	ldr	r3, [pc, #40]	; (800ee1c <TRACE_Send+0x80>)
 800edf4:	8aa1      	ldrh	r1, [r4, #20]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	0028      	movs	r0, r5
 800edfa:	9301      	str	r3, [sp, #4]
 800edfc:	4798      	blx	r3
}
 800edfe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ee00:	2280      	movs	r2, #128	; 0x80
 800ee02:	0092      	lsls	r2, r2, #2
 800ee04:	e7e9      	b.n	800edda <TRACE_Send+0x3e>
      TRACE_UnLock();
 800ee06:	f7ff ff8f 	bl	800ed28 <TRACE_UnLock>
 800ee0a:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 800ee0e:	2000      	movs	r0, #0
}
 800ee10:	e7f5      	b.n	800edfe <TRACE_Send+0x62>
 800ee12:	46c0      	nop			; (mov r8, r8)
 800ee14:	2000178c 	.word	0x2000178c
 800ee18:	2000158c 	.word	0x2000158c
 800ee1c:	0800f348 	.word	0x0800f348

0800ee20 <UTIL_ADV_TRACE_COND_FSend>:
{
 800ee20:	b408      	push	{r3}
 800ee22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee24:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800ee26:	2300      	movs	r3, #0
 800ee28:	466c      	mov	r4, sp
 800ee2a:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800ee2c:	4b2c      	ldr	r3, [pc, #176]	; (800eee0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800ee2e:	7a1c      	ldrb	r4, [r3, #8]
 800ee30:	4284      	cmp	r4, r0
 800ee32:	d350      	bcc.n	800eed6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800ee34:	68d8      	ldr	r0, [r3, #12]
 800ee36:	4008      	ands	r0, r1
 800ee38:	4288      	cmp	r0, r1
 800ee3a:	d14e      	bne.n	800eeda <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d004      	beq.n	800ee4c <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800ee42:	2a00      	cmp	r2, #0
 800ee44:	d002      	beq.n	800ee4c <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800ee46:	4669      	mov	r1, sp
 800ee48:	a802      	add	r0, sp, #8
 800ee4a:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ee4c:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800ee4e:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ee50:	0049      	lsls	r1, r1, #1
 800ee52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee54:	4823      	ldr	r0, [pc, #140]	; (800eee4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800ee56:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ee58:	f7ff fbc0 	bl	800e5dc <tiny_vsnprintf_like>
 800ee5c:	0005      	movs	r5, r0
  TRACE_Lock();
 800ee5e:	f7ff ff57 	bl	800ed10 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800ee62:	466b      	mov	r3, sp
 800ee64:	8818      	ldrh	r0, [r3, #0]
 800ee66:	1c9c      	adds	r4, r3, #2
 800ee68:	1940      	adds	r0, r0, r5
 800ee6a:	0021      	movs	r1, r4
 800ee6c:	b280      	uxth	r0, r0
 800ee6e:	f7ff ff1b 	bl	800eca8 <TRACE_AllocateBufer>
 800ee72:	1c43      	adds	r3, r0, #1
 800ee74:	d02a      	beq.n	800eecc <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800ee76:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ee78:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ee7a:	466b      	mov	r3, sp
 800ee7c:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ee7e:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	8826      	ldrh	r6, [r4, #0]
 800ee84:	4818      	ldr	r0, [pc, #96]	; (800eee8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800ee86:	b297      	uxth	r7, r2
 800ee88:	19f1      	adds	r1, r6, r7
 800ee8a:	b289      	uxth	r1, r1
 800ee8c:	42bb      	cmp	r3, r7
 800ee8e:	d815      	bhi.n	800eebc <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800ee90:	199b      	adds	r3, r3, r6
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	2d00      	cmp	r5, #0
 800ee96:	d000      	beq.n	800ee9a <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800ee98:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ee9a:	2180      	movs	r1, #128	; 0x80
 800ee9c:	8823      	ldrh	r3, [r4, #0]
 800ee9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eea0:	0049      	lsls	r1, r1, #1
 800eea2:	18c0      	adds	r0, r0, r3
 800eea4:	9b01      	ldr	r3, [sp, #4]
 800eea6:	f7ff fb99 	bl	800e5dc <tiny_vsnprintf_like>
    TRACE_UnLock();
 800eeaa:	f7ff ff3d 	bl	800ed28 <TRACE_UnLock>
    return TRACE_Send();
 800eeae:	f7ff ff75 	bl	800ed9c <TRACE_Send>
}
 800eeb2:	b006      	add	sp, #24
 800eeb4:	bcf0      	pop	{r4, r5, r6, r7}
 800eeb6:	bc08      	pop	{r3}
 800eeb8:	b001      	add	sp, #4
 800eeba:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800eebc:	466d      	mov	r5, sp
 800eebe:	2708      	movs	r7, #8
 800eec0:	19ed      	adds	r5, r5, r7
 800eec2:	5cad      	ldrb	r5, [r5, r2]
 800eec4:	3201      	adds	r2, #1
 800eec6:	5445      	strb	r5, [r0, r1]
 800eec8:	4665      	mov	r5, ip
 800eeca:	e7dc      	b.n	800ee86 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800eecc:	f7ff ff2c 	bl	800ed28 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800eed0:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800eed2:	4240      	negs	r0, r0
 800eed4:	e7ed      	b.n	800eeb2 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800eed6:	2005      	movs	r0, #5
 800eed8:	e7fb      	b.n	800eed2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800eeda:	2006      	movs	r0, #6
 800eedc:	e7f9      	b.n	800eed2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800eede:	46c0      	nop			; (mov r8, r8)
 800eee0:	2000178c 	.word	0x2000178c
 800eee4:	200017a4 	.word	0x200017a4
 800eee8:	2000158c 	.word	0x2000158c

0800eeec <TRACE_TxCpltCallback>:
{ 
 800eeec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eef2:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800eef4:	4b1f      	ldr	r3, [pc, #124]	; (800ef74 <TRACE_TxCpltCallback+0x88>)
 800eef6:	789a      	ldrb	r2, [r3, #2]
 800eef8:	2a02      	cmp	r2, #2
 800eefa:	d11e      	bne.n	800ef3a <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800eefc:	2200      	movs	r2, #0
 800eefe:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ef00:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800ef02:	8a1d      	ldrh	r5, [r3, #16]
 800ef04:	8a59      	ldrh	r1, [r3, #18]
 800ef06:	428d      	cmp	r5, r1
 800ef08:	d02d      	beq.n	800ef66 <TRACE_TxCpltCallback+0x7a>
 800ef0a:	8ada      	ldrh	r2, [r3, #22]
 800ef0c:	2a01      	cmp	r2, #1
 800ef0e:	d12a      	bne.n	800ef66 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ef10:	7898      	ldrb	r0, [r3, #2]
 800ef12:	2801      	cmp	r0, #1
 800ef14:	d117      	bne.n	800ef46 <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ef16:	3001      	adds	r0, #1
 800ef18:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ef1a:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ef1c:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ef1e:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800ef20:	1b52      	subs	r2, r2, r5
 800ef22:	b292      	uxth	r2, r2
 800ef24:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800ef26:	4282      	cmp	r2, r0
 800ef28:	d10f      	bne.n	800ef4a <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ef2a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ef2c:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ef2e:	8a1a      	ldrh	r2, [r3, #16]
 800ef30:	4291      	cmp	r1, r2
 800ef32:	d915      	bls.n	800ef60 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ef34:	1a89      	subs	r1, r1, r2
 800ef36:	8299      	strh	r1, [r3, #20]
 800ef38:	e007      	b.n	800ef4a <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800ef3a:	8a1a      	ldrh	r2, [r3, #16]
 800ef3c:	8a99      	ldrh	r1, [r3, #20]
 800ef3e:	1852      	adds	r2, r2, r1
 800ef40:	05d2      	lsls	r2, r2, #23
 800ef42:	0dd2      	lsrs	r2, r2, #23
 800ef44:	e7dc      	b.n	800ef00 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d0f1      	beq.n	800ef2e <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef4a:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800ef4e:	8a18      	ldrh	r0, [r3, #16]
 800ef50:	8a99      	ldrh	r1, [r3, #20]
 800ef52:	4b09      	ldr	r3, [pc, #36]	; (800ef78 <TRACE_TxCpltCallback+0x8c>)
 800ef54:	18c0      	adds	r0, r0, r3
 800ef56:	4b09      	ldr	r3, [pc, #36]	; (800ef7c <TRACE_TxCpltCallback+0x90>)
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	9301      	str	r3, [sp, #4]
 800ef5c:	4798      	blx	r3
}
 800ef5e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ef60:	2180      	movs	r1, #128	; 0x80
 800ef62:	0089      	lsls	r1, r1, #2
 800ef64:	e7e6      	b.n	800ef34 <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 800ef66:	f7f3 fed7 	bl	8002d18 <UTIL_ADV_TRACE_PostSendHook>
 800ef6a:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 800ef6e:	f7ff fedb 	bl	800ed28 <TRACE_UnLock>
}
 800ef72:	e7f4      	b.n	800ef5e <TRACE_TxCpltCallback+0x72>
 800ef74:	2000178c 	.word	0x2000178c
 800ef78:	2000158c 	.word	0x2000158c
 800ef7c:	0800f348 	.word	0x0800f348

0800ef80 <__libc_init_array>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	2600      	movs	r6, #0
 800ef84:	4d0c      	ldr	r5, [pc, #48]	; (800efb8 <__libc_init_array+0x38>)
 800ef86:	4c0d      	ldr	r4, [pc, #52]	; (800efbc <__libc_init_array+0x3c>)
 800ef88:	1b64      	subs	r4, r4, r5
 800ef8a:	10a4      	asrs	r4, r4, #2
 800ef8c:	42a6      	cmp	r6, r4
 800ef8e:	d109      	bne.n	800efa4 <__libc_init_array+0x24>
 800ef90:	2600      	movs	r6, #0
 800ef92:	f000 f8b5 	bl	800f100 <_init>
 800ef96:	4d0a      	ldr	r5, [pc, #40]	; (800efc0 <__libc_init_array+0x40>)
 800ef98:	4c0a      	ldr	r4, [pc, #40]	; (800efc4 <__libc_init_array+0x44>)
 800ef9a:	1b64      	subs	r4, r4, r5
 800ef9c:	10a4      	asrs	r4, r4, #2
 800ef9e:	42a6      	cmp	r6, r4
 800efa0:	d105      	bne.n	800efae <__libc_init_array+0x2e>
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	00b3      	lsls	r3, r6, #2
 800efa6:	58eb      	ldr	r3, [r5, r3]
 800efa8:	4798      	blx	r3
 800efaa:	3601      	adds	r6, #1
 800efac:	e7ee      	b.n	800ef8c <__libc_init_array+0xc>
 800efae:	00b3      	lsls	r3, r6, #2
 800efb0:	58eb      	ldr	r3, [r5, r3]
 800efb2:	4798      	blx	r3
 800efb4:	3601      	adds	r6, #1
 800efb6:	e7f2      	b.n	800ef9e <__libc_init_array+0x1e>
 800efb8:	0800fd50 	.word	0x0800fd50
 800efbc:	0800fd50 	.word	0x0800fd50
 800efc0:	0800fd50 	.word	0x0800fd50
 800efc4:	0800fd54 	.word	0x0800fd54

0800efc8 <memcpy>:
 800efc8:	2300      	movs	r3, #0
 800efca:	b510      	push	{r4, lr}
 800efcc:	429a      	cmp	r2, r3
 800efce:	d100      	bne.n	800efd2 <memcpy+0xa>
 800efd0:	bd10      	pop	{r4, pc}
 800efd2:	5ccc      	ldrb	r4, [r1, r3]
 800efd4:	54c4      	strb	r4, [r0, r3]
 800efd6:	3301      	adds	r3, #1
 800efd8:	e7f8      	b.n	800efcc <memcpy+0x4>

0800efda <memset>:
 800efda:	0003      	movs	r3, r0
 800efdc:	1882      	adds	r2, r0, r2
 800efde:	4293      	cmp	r3, r2
 800efe0:	d100      	bne.n	800efe4 <memset+0xa>
 800efe2:	4770      	bx	lr
 800efe4:	7019      	strb	r1, [r3, #0]
 800efe6:	3301      	adds	r3, #1
 800efe8:	e7f9      	b.n	800efde <memset+0x4>
	...

0800efec <floor>:
 800efec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efee:	004b      	lsls	r3, r1, #1
 800eff0:	4a3d      	ldr	r2, [pc, #244]	; (800f0e8 <floor+0xfc>)
 800eff2:	0d5b      	lsrs	r3, r3, #21
 800eff4:	189f      	adds	r7, r3, r2
 800eff6:	4684      	mov	ip, r0
 800eff8:	000e      	movs	r6, r1
 800effa:	000d      	movs	r5, r1
 800effc:	0004      	movs	r4, r0
 800effe:	9001      	str	r0, [sp, #4]
 800f000:	2f13      	cmp	r7, #19
 800f002:	dc34      	bgt.n	800f06e <floor+0x82>
 800f004:	2f00      	cmp	r7, #0
 800f006:	da16      	bge.n	800f036 <floor+0x4a>
 800f008:	4a38      	ldr	r2, [pc, #224]	; (800f0ec <floor+0x100>)
 800f00a:	4b39      	ldr	r3, [pc, #228]	; (800f0f0 <floor+0x104>)
 800f00c:	4660      	mov	r0, ip
 800f00e:	0031      	movs	r1, r6
 800f010:	f7f1 fd7c 	bl	8000b0c <__aeabi_dadd>
 800f014:	2200      	movs	r2, #0
 800f016:	2300      	movs	r3, #0
 800f018:	f7f1 fa3c 	bl	8000494 <__aeabi_dcmpgt>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d007      	beq.n	800f030 <floor+0x44>
 800f020:	2e00      	cmp	r6, #0
 800f022:	da5d      	bge.n	800f0e0 <floor+0xf4>
 800f024:	0073      	lsls	r3, r6, #1
 800f026:	085b      	lsrs	r3, r3, #1
 800f028:	431c      	orrs	r4, r3
 800f02a:	d001      	beq.n	800f030 <floor+0x44>
 800f02c:	2400      	movs	r4, #0
 800f02e:	4d31      	ldr	r5, [pc, #196]	; (800f0f4 <floor+0x108>)
 800f030:	46a4      	mov	ip, r4
 800f032:	002e      	movs	r6, r5
 800f034:	e029      	b.n	800f08a <floor+0x9e>
 800f036:	4b30      	ldr	r3, [pc, #192]	; (800f0f8 <floor+0x10c>)
 800f038:	413b      	asrs	r3, r7
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	400b      	ands	r3, r1
 800f03e:	4303      	orrs	r3, r0
 800f040:	d023      	beq.n	800f08a <floor+0x9e>
 800f042:	4a2a      	ldr	r2, [pc, #168]	; (800f0ec <floor+0x100>)
 800f044:	4b2a      	ldr	r3, [pc, #168]	; (800f0f0 <floor+0x104>)
 800f046:	4660      	mov	r0, ip
 800f048:	0031      	movs	r1, r6
 800f04a:	f7f1 fd5f 	bl	8000b0c <__aeabi_dadd>
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	f7f1 fa1f 	bl	8000494 <__aeabi_dcmpgt>
 800f056:	2800      	cmp	r0, #0
 800f058:	d0ea      	beq.n	800f030 <floor+0x44>
 800f05a:	2e00      	cmp	r6, #0
 800f05c:	da03      	bge.n	800f066 <floor+0x7a>
 800f05e:	2380      	movs	r3, #128	; 0x80
 800f060:	035b      	lsls	r3, r3, #13
 800f062:	413b      	asrs	r3, r7
 800f064:	18f5      	adds	r5, r6, r3
 800f066:	9b00      	ldr	r3, [sp, #0]
 800f068:	2400      	movs	r4, #0
 800f06a:	439d      	bics	r5, r3
 800f06c:	e7e0      	b.n	800f030 <floor+0x44>
 800f06e:	2f33      	cmp	r7, #51	; 0x33
 800f070:	dd0f      	ble.n	800f092 <floor+0xa6>
 800f072:	2380      	movs	r3, #128	; 0x80
 800f074:	00db      	lsls	r3, r3, #3
 800f076:	429f      	cmp	r7, r3
 800f078:	d107      	bne.n	800f08a <floor+0x9e>
 800f07a:	0002      	movs	r2, r0
 800f07c:	000b      	movs	r3, r1
 800f07e:	4660      	mov	r0, ip
 800f080:	0031      	movs	r1, r6
 800f082:	f7f1 fd43 	bl	8000b0c <__aeabi_dadd>
 800f086:	4684      	mov	ip, r0
 800f088:	000e      	movs	r6, r1
 800f08a:	4660      	mov	r0, ip
 800f08c:	0031      	movs	r1, r6
 800f08e:	b003      	add	sp, #12
 800f090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f092:	4a1a      	ldr	r2, [pc, #104]	; (800f0fc <floor+0x110>)
 800f094:	189b      	adds	r3, r3, r2
 800f096:	2201      	movs	r2, #1
 800f098:	4252      	negs	r2, r2
 800f09a:	40da      	lsrs	r2, r3
 800f09c:	9200      	str	r2, [sp, #0]
 800f09e:	4210      	tst	r0, r2
 800f0a0:	d0f3      	beq.n	800f08a <floor+0x9e>
 800f0a2:	4a12      	ldr	r2, [pc, #72]	; (800f0ec <floor+0x100>)
 800f0a4:	4b12      	ldr	r3, [pc, #72]	; (800f0f0 <floor+0x104>)
 800f0a6:	4660      	mov	r0, ip
 800f0a8:	0031      	movs	r1, r6
 800f0aa:	f7f1 fd2f 	bl	8000b0c <__aeabi_dadd>
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	f7f1 f9ef 	bl	8000494 <__aeabi_dcmpgt>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d0ba      	beq.n	800f030 <floor+0x44>
 800f0ba:	2e00      	cmp	r6, #0
 800f0bc:	da02      	bge.n	800f0c4 <floor+0xd8>
 800f0be:	2f14      	cmp	r7, #20
 800f0c0:	d103      	bne.n	800f0ca <floor+0xde>
 800f0c2:	3501      	adds	r5, #1
 800f0c4:	9b00      	ldr	r3, [sp, #0]
 800f0c6:	439c      	bics	r4, r3
 800f0c8:	e7b2      	b.n	800f030 <floor+0x44>
 800f0ca:	2334      	movs	r3, #52	; 0x34
 800f0cc:	1bdf      	subs	r7, r3, r7
 800f0ce:	3b33      	subs	r3, #51	; 0x33
 800f0d0:	40bb      	lsls	r3, r7
 800f0d2:	18e4      	adds	r4, r4, r3
 800f0d4:	9b01      	ldr	r3, [sp, #4]
 800f0d6:	429c      	cmp	r4, r3
 800f0d8:	419b      	sbcs	r3, r3
 800f0da:	425b      	negs	r3, r3
 800f0dc:	18f5      	adds	r5, r6, r3
 800f0de:	e7f1      	b.n	800f0c4 <floor+0xd8>
 800f0e0:	2400      	movs	r4, #0
 800f0e2:	0025      	movs	r5, r4
 800f0e4:	e7a4      	b.n	800f030 <floor+0x44>
 800f0e6:	46c0      	nop			; (mov r8, r8)
 800f0e8:	fffffc01 	.word	0xfffffc01
 800f0ec:	8800759c 	.word	0x8800759c
 800f0f0:	7e37e43c 	.word	0x7e37e43c
 800f0f4:	bff00000 	.word	0xbff00000
 800f0f8:	000fffff 	.word	0x000fffff
 800f0fc:	fffffbed 	.word	0xfffffbed

0800f100 <_init>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	46c0      	nop			; (mov r8, r8)
 800f104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f106:	bc08      	pop	{r3}
 800f108:	469e      	mov	lr, r3
 800f10a:	4770      	bx	lr

0800f10c <_fini>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	46c0      	nop			; (mov r8, r8)
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr
